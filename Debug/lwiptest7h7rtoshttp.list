
lwiptest7h7rtoshttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a28c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e7c  0801a52c  0801a52c  0001b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e3a8  0801e3a8  0001f3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e3b0  0801e3b0  0001f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e3b4  0801e3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000094  24000000  0801e3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000094  0801e44c  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00007c40  24004a18  08022dcf  00024a18  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2400c658  08022dcf  00025658  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00024a17  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003dd45  00000000  00000000  00024a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000910d  00000000  00000000  0006278a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002860  00000000  00000000  0006b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001fc5  00000000  00000000  0006e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b26a  00000000  00000000  000700bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00043aee  00000000  00000000  000bb327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018a9fc  00000000  00000000  000fee15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00289811  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b0f8  00000000  00000000  00289854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006b  00000000  00000000  0029494c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004a18 	.word	0x24004a18
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a514 	.word	0x0801a514

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004a1c 	.word	0x24004a1c
 80002dc:	0801a514 	.word	0x0801a514

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <vApplicationGetIdleTaskMemory+0x2c>)
 80006b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <vApplicationGetIdleTaskMemory+0x30>)
 80006b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	24004a34 	.word	0x24004a34
 80006d0:	24004ad4 	.word	0x24004ad4

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006da:	f000 f9d3 	bl	8000a84 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006de:	4b47      	ldr	r3, [pc, #284]	@ (80007fc <main+0x128>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d11b      	bne.n	8000722 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ea:	f3bf 8f4f 	dsb	sy
}
 80006ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f0:	f3bf 8f6f 	isb	sy
}
 80006f4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <main+0x128>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006fe:	f3bf 8f4f 	dsb	sy
}
 8000702:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000704:	f3bf 8f6f 	isb	sy
}
 8000708:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <main+0x128>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a3b      	ldr	r2, [pc, #236]	@ (80007fc <main+0x128>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000716:	f3bf 8f4f 	dsb	sy
}
 800071a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800071c:	f3bf 8f6f 	isb	sy
}
 8000720:	e000      	b.n	8000724 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000722:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000724:	4b35      	ldr	r3, [pc, #212]	@ (80007fc <main+0x128>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800072c:	2b00      	cmp	r3, #0
 800072e:	d138      	bne.n	80007a2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000730:	4b32      	ldr	r3, [pc, #200]	@ (80007fc <main+0x128>)
 8000732:	2200      	movs	r2, #0
 8000734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <main+0x128>)
 8000740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000748:	0b5b      	lsrs	r3, r3, #13
 800074a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800074e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000758:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	015a      	lsls	r2, r3, #5
 800075e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000762:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000764:	69fa      	ldr	r2, [r7, #28]
 8000766:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000768:	4924      	ldr	r1, [pc, #144]	@ (80007fc <main+0x128>)
 800076a:	4313      	orrs	r3, r2
 800076c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	1e5a      	subs	r2, r3, #1
 8000774:	61fa      	str	r2, [r7, #28]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1ef      	bne.n	800075a <main+0x86>
    } while(sets-- != 0U);
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	623a      	str	r2, [r7, #32]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1e5      	bne.n	8000750 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000784:	f3bf 8f4f 	dsb	sy
}
 8000788:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <main+0x128>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a1b      	ldr	r2, [pc, #108]	@ (80007fc <main+0x128>)
 8000790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000794:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000796:	f3bf 8f4f 	dsb	sy
}
 800079a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800079c:	f3bf 8f6f 	isb	sy
}
 80007a0:	e000      	b.n	80007a4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007a2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f001 f9e0 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f82e 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f8f4 	bl	8000998 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007b0:	f000 f8a6 	bl	8000900 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  startUART();
 80007b4:	f000 f9f0 	bl	8000b98 <startUART>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <main+0x12c>)
 80007ba:	463c      	mov	r4, r7
 80007bc:	461d      	mov	r5, r3
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ca:	463b      	mov	r3, r7
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f009 f907 	bl	80099e2 <osThreadCreate>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <main+0x130>)
 80007d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007da:	2000      	movs	r0, #0
 80007dc:	f001 f88e 	bl	80018fc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 f88b 	bl	80018fc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007e6:	2002      	movs	r0, #2
 80007e8:	f001 f888 	bl	80018fc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007ec:	2101      	movs	r1, #1
 80007ee:	2000      	movs	r0, #0
 80007f0:	f001 f924 	bl	8001a3c <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 80007f4:	f009 f8de 	bl	80099b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <main+0x124>
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	0801a538 	.word	0x0801a538
 8000804:	24004d68 	.word	0x24004d68

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	@ 0x70
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000812:	224c      	movs	r2, #76	@ 0x4c
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f018 fe56 	bl	80194c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f018 fe50 	bl	80194c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000828:	2002      	movs	r0, #2
 800082a:	f003 f899 	bl	8003960 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <SystemClock_Config+0xf0>)
 8000834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <SystemClock_Config+0xf0>)
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <SystemClock_Config+0xf0>)
 8000840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <SystemClock_Config+0xf4>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a2b      	ldr	r2, [pc, #172]	@ (80008fc <SystemClock_Config+0xf4>)
 800084e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <SystemClock_Config+0xf4>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000860:	bf00      	nop
 8000862:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <SystemClock_Config+0xf4>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800086e:	d1f8      	bne.n	8000862 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000874:	2301      	movs	r3, #1
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000888:	2332      	movs	r3, #50	@ 0x32
 800088a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000898:	230c      	movs	r3, #12
 800089a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800089c:	2300      	movs	r3, #0
 800089e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 f893 	bl	80039d4 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008b4:	f000 f934 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	233f      	movs	r3, #63	@ 0x3f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008c4:	2308      	movs	r3, #8
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c8:	2340      	movs	r3, #64	@ 0x40
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008cc:	2340      	movs	r3, #64	@ 0x40
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2102      	movs	r1, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fcd2 	bl	8004288 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008ea:	f000 f919 	bl	8000b20 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	58000400 	.word	0x58000400
 80008fc:	58024800 	.word	0x58024800

08000900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_USART3_UART_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800094a:	f006 f95f 	bl	8006c0c <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f8e4 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800095c:	f008 fcd5 	bl	800930a <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f8db 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800096e:	f008 fd0a 	bl	8009386 <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f8d2 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_USART3_UART_Init+0x90>)
 800097e:	f008 fc8b 	bl	8009298 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f8ca 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24004cd4 	.word	0x24004cd4
 8000994:	40004800 	.word	0x40004800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	4a27      	ldr	r2, [pc, #156]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3a:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_GPIO_Init+0xc8>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	371c      	adds	r7, #28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	58024400 	.word	0x58024400

08000a64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a6c:	f008 fd18 	bl	80094a0 <MX_LWIP_Init>
  udpServer_init();
 8000a70:	f000 fe2c 	bl	80016cc <udpServer_init>
  tcp_server_init();
 8000a74:	f000 fbd0 	bl	8001218 <tcp_server_init>
  httpd_init();
 8000a78:	f00c fdfa 	bl	800d670 <httpd_init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f008 fffc 	bl	8009a7a <osDelay>
 8000a82:	e7fb      	b.n	8000a7c <StartDefaultTask+0x18>

08000a84 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a96:	f001 f9af 	bl	8001df8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000aa2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000aa6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000aa8:	230e      	movs	r3, #14
 8000aaa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f9cc 	bl	8001e68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f9be 	bl	8001e68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aec:	2004      	movs	r0, #4
 8000aee:	f001 f99b 	bl	8001e28 <HAL_MPU_Enable>

}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0e:	f001 f867 	bl	8001be0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40001000 	.word	0x40001000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <sio_open>:
 *
 * @param devnum device number
 * @return handle to serial device if successful, NULL otherwise
 */
sio_fd_t sio_open(u8_t devnum)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  sio_fd_t sd;

  sd = &huart3;
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <sio_open+0x1c>)
 8000b38:	60fb      	str	r3, [r7, #12]

  return sd;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	24004cd4 	.word	0x24004cd4

08000b4c <sio_send>:
 * @param fd serial device handle
 *
 * @note This function will block until the character can be sent.
 */
void sio_send(u8_t c, sio_fd_t fd)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
    ret = HAL_UART_Transmit(&huart3, (uint8_t *)&c, 1, HAL_MAX_DELAY);
 8000b5c:	1df9      	adds	r1, r7, #7
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b62:	2201      	movs	r2, #1
 8000b64:	480a      	ldr	r0, [pc, #40]	@ (8000b90 <sio_send+0x44>)
 8000b66:	f006 f8a1 	bl	8006cac <HAL_UART_Transmit>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	73fb      	strb	r3, [r7, #15]

    if(ret == HAL_OK) {
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <sio_send+0x36>
		printf("sio_send\n");
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <sio_send+0x48>)
 8000b76:	f018 fb7d 	bl	8019274 <puts>
		BSP_LED_Toggle(LED_RED);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f000 ff34 	bl	80019e8 <BSP_LED_Toggle>
    }
    else {
    	BSP_LED_Toggle(LED_YELLOW);
    }
}
 8000b80:	e002      	b.n	8000b88 <sio_send+0x3c>
    	BSP_LED_Toggle(LED_YELLOW);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 ff30 	bl	80019e8 <BSP_LED_Toggle>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24004cd4 	.word	0x24004cd4
 8000b94:	0801a554 	.word	0x0801a554

08000b98 <startUART>:
uint8_t rxBuffer[BUFFER_LENGTH]; // Circular buffer
int writeindex = 0;
int readindex = 0;
int getData = 0;

void startUART() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, rxdata, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4903      	ldr	r1, [pc, #12]	@ (8000bac <startUART+0x14>)
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <startUART+0x18>)
 8000ba2:	f006 f911 	bl	8006dc8 <HAL_UART_Receive_IT>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	24004d6c 	.word	0x24004d6c
 8000bb0:	24004cd4 	.word	0x24004cd4

08000bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	rxBuffer[writeindex] = rxdata[0];
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_UART_RxCpltCallback+0x50>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a11      	ldr	r2, [pc, #68]	@ (8000c08 <HAL_UART_RxCpltCallback+0x54>)
 8000bc2:	7811      	ldrb	r1, [r2, #0]
 8000bc4:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <HAL_UART_RxCpltCallback+0x58>)
 8000bc6:	54d1      	strb	r1, [r2, r3]
	writeindex++;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_UART_RxCpltCallback+0x50>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <HAL_UART_RxCpltCallback+0x50>)
 8000bd0:	6013      	str	r3, [r2, #0]
	getData = 1;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_UART_RxCpltCallback+0x5c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
	//BSP_LED_Toggle(LED_GREEN);
	if(writeindex >= BUFFER_LENGTH) {
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_UART_RxCpltCallback+0x50>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000be0:	db02      	blt.n	8000be8 <HAL_UART_RxCpltCallback+0x34>
		writeindex = 0;
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_UART_RxCpltCallback+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
	}


    if (huart->Instance == USART3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <HAL_UART_RxCpltCallback+0x60>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d104      	bne.n	8000bfc <HAL_UART_RxCpltCallback+0x48>
    {
    	HAL_UART_Receive_IT(&huart3, rxdata, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4904      	ldr	r1, [pc, #16]	@ (8000c08 <HAL_UART_RxCpltCallback+0x54>)
 8000bf6:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <HAL_UART_RxCpltCallback+0x64>)
 8000bf8:	f006 f8e6 	bl	8006dc8 <HAL_UART_Receive_IT>
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24004f64 	.word	0x24004f64
 8000c08:	24004d6c 	.word	0x24004d6c
 8000c0c:	24004d70 	.word	0x24004d70
 8000c10:	24004f6c 	.word	0x24004f6c
 8000c14:	40004800 	.word	0x40004800
 8000c18:	24004cd4 	.word	0x24004cd4

08000c1c <sio_read>:
 *
 * @note This function will block until data can be received. The blocking
 * can be cancelled by calling sio_read_abort().
 */
u32_t sio_read(sio_fd_t fd, u8_t *data, u32_t len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  u32_t recved_bytes;

/* USER CODE BEGIN 9 */


  if(getData == 1)
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <sio_read+0x6c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d124      	bne.n	8000c7a <sio_read+0x5e>
  {
	memcpy(data, &rxBuffer[readindex], len);
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <sio_read+0x70>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a16      	ldr	r2, [pc, #88]	@ (8000c90 <sio_read+0x74>)
 8000c36:	4413      	add	r3, r2
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	68b8      	ldr	r0, [r7, #8]
 8000c3e:	f018 fd40 	bl	80196c2 <memcpy>
    recved_bytes = len;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	617b      	str	r3, [r7, #20]

	readindex++;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <sio_read+0x70>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <sio_read+0x70>)
 8000c4e:	6013      	str	r3, [r2, #0]
	if(readindex >= BUFFER_LENGTH) {
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <sio_read+0x70>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c58:	db02      	blt.n	8000c60 <sio_read+0x44>
		readindex = 0;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <sio_read+0x70>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
	}
	if(readindex == writeindex) {
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <sio_read+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <sio_read+0x78>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d102      	bne.n	8000c72 <sio_read+0x56>
		getData = 0;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <sio_read+0x6c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	}
	BSP_LED_Toggle(LED_GREEN);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 feb8 	bl	80019e8 <BSP_LED_Toggle>
 8000c78:	e001      	b.n	8000c7e <sio_read+0x62>
    //printf("recved_bytes = %d\n", recved_bytes);
    //printf("sio_read = %X\n", data[0]);
  }
  else
  {
    recved_bytes = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  }

  return recved_bytes;
 8000c7e:	697b      	ldr	r3, [r7, #20]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24004f6c 	.word	0x24004f6c
 8000c8c:	24004f68 	.word	0x24004f68
 8000c90:	24004d70 	.word	0x24004d70
 8000c94:	24004f64 	.word	0x24004f64

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_MspInit+0x38>)
 8000ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_MspInit+0x38>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x38>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f06f 0001 	mvn.w	r0, #1
 8000cc4:	f001 f870 	bl	8001da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58024400 	.word	0x58024400

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0ba      	sub	sp, #232	@ 0xe8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	22c0      	movs	r2, #192	@ 0xc0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f018 fbe7 	bl	80194c8 <memset>
  if(huart->Instance==USART3)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8000dac <HAL_UART_MspInit+0xd8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d14e      	bne.n	8000da2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d04:	f04f 0202 	mov.w	r2, #2
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fe82 	bl	8004a24 <HAL_RCCEx_PeriphCLKConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d26:	f7ff fefb 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <HAL_UART_MspInit+0xdc>)
 8000d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d30:	4a1f      	ldr	r2, [pc, #124]	@ (8000db0 <HAL_UART_MspInit+0xdc>)
 8000d32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <HAL_UART_MspInit+0xdc>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <HAL_UART_MspInit+0xdc>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <HAL_UART_MspInit+0xdc>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_UART_MspInit+0xdc>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <HAL_UART_MspInit+0xe0>)
 8000d8e:	f002 fc03 	bl	8003598 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2105      	movs	r1, #5
 8000d96:	2027      	movs	r0, #39	@ 0x27
 8000d98:	f001 f806 	bl	8001da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d9c:	2027      	movs	r0, #39	@ 0x27
 8000d9e:	f001 f81d 	bl	8001ddc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	37e8      	adds	r7, #232	@ 0xe8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004800 	.word	0x40004800
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020c00 	.word	0x58020c00

08000db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	@ 0x40
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d827      	bhi.n	8000e16 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	2036      	movs	r0, #54	@ 0x36
 8000dcc:	f000 ffec 	bl	8001da8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd0:	2036      	movs	r0, #54	@ 0x36
 8000dd2:	f001 f803 	bl	8001ddc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000dd6:	4a29      	ldr	r2, [pc, #164]	@ (8000e7c <HAL_InitTick+0xc4>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <HAL_InitTick+0xc8>)
 8000dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000de2:	4a27      	ldr	r2, [pc, #156]	@ (8000e80 <HAL_InitTick+0xc8>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dec:	4b24      	ldr	r3, [pc, #144]	@ (8000e80 <HAL_InitTick+0xc8>)
 8000dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dfa:	f107 0210 	add.w	r2, r7, #16
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fdcb 	bl	80049a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d106      	bne.n	8000e22 <HAL_InitTick+0x6a>
 8000e14:	e001      	b.n	8000e1a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e02b      	b.n	8000e72 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e1a:	f003 fd95 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8000e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e20:	e004      	b.n	8000e2c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e22:	f003 fd91 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8000e26:	4603      	mov	r3, r0
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e2e:	4a15      	ldr	r2, [pc, #84]	@ (8000e84 <HAL_InitTick+0xcc>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	3b01      	subs	r3, #1
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <HAL_InitTick+0xd4>)
 8000e3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e48:	4a0f      	ldr	r2, [pc, #60]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e5c:	f005 fc0e 	bl	800667c <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e66:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <HAL_InitTick+0xd0>)
 8000e68:	f005 fc6a 	bl	8006740 <HAL_TIM_Base_Start_IT>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	e000      	b.n	8000e72 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3740      	adds	r7, #64	@ 0x40
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000020 	.word	0x24000020
 8000e80:	58024400 	.word	0x58024400
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	24004f70 	.word	0x24004f70
 8000e8c:	40001000 	.word	0x40001000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <USART3_IRQHandler+0x10>)
 8000ece:	f005 ffc7 	bl	8006e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	24004cd4 	.word	0x24004cd4

08000edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 fe1d 	bl	8001b20 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM6_DAC_IRQHandler+0x10>)
 8000ef2:	f005 fc9d 	bl	8006830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	24004f70 	.word	0x24004f70

08000f00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <ETH_IRQHandler+0x10>)
 8000f06:	f001 feb9 	bl	8002c7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24005028 	.word	0x24005028

08000f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_kill>:

int _kill(int pid, int sig)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <_kill+0x20>)
 8000f30:	2216      	movs	r2, #22
 8000f32:	601a      	str	r2, [r3, #0]
  return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	2400c648 	.word	0x2400c648

08000f48 <_exit>:

void _exit (int status)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe5 	bl	8000f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f5a:	bf00      	nop
 8000f5c:	e7fd      	b.n	8000f5a <_exit+0x12>

08000f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e00a      	b.n	8000f86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f70:	f3af 8000 	nop.w
 8000f74:	4601      	mov	r1, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	60ba      	str	r2, [r7, #8]
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbf0      	blt.n	8000f70 <_read+0x12>
  }

  return len;
 8000f8e:	687b      	ldr	r3, [r7, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e009      	b.n	8000fbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbf1      	blt.n	8000faa <_write+0x12>
  }
  return len;
 8000fc6:	687b      	ldr	r3, [r7, #4]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_close>:

int _close(int file)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_isatty>:

int _isatty(int file)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d205      	bcs.n	8001074 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <_sbrk+0x6c>)
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001072:	e009      	b.n	8001088 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b09      	ldr	r3, [pc, #36]	@ (800109c <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a06      	ldr	r2, [pc, #24]	@ (800109c <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	24080000 	.word	0x24080000
 8001098:	00000400 	.word	0x00000400
 800109c:	24004fbc 	.word	0x24004fbc
 80010a0:	2400c658 	.word	0x2400c658
 80010a4:	2400c648 	.word	0x2400c648

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ac:	4b43      	ldr	r3, [pc, #268]	@ (80011bc <SystemInit+0x114>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a42      	ldr	r2, [pc, #264]	@ (80011bc <SystemInit+0x114>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010bc:	4b40      	ldr	r3, [pc, #256]	@ (80011c0 <SystemInit+0x118>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d807      	bhi.n	80010d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010c8:	4b3d      	ldr	r3, [pc, #244]	@ (80011c0 <SystemInit+0x118>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	4a3b      	ldr	r2, [pc, #236]	@ (80011c0 <SystemInit+0x118>)
 80010d2:	f043 0307 	orr.w	r3, r3, #7
 80010d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <SystemInit+0x11c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a39      	ldr	r2, [pc, #228]	@ (80011c4 <SystemInit+0x11c>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010e4:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <SystemInit+0x11c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <SystemInit+0x11c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4935      	ldr	r1, [pc, #212]	@ (80011c4 <SystemInit+0x11c>)
 80010f0:	4b35      	ldr	r3, [pc, #212]	@ (80011c8 <SystemInit+0x120>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010f6:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <SystemInit+0x118>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001102:	4b2f      	ldr	r3, [pc, #188]	@ (80011c0 <SystemInit+0x118>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 030f 	bic.w	r3, r3, #15
 800110a:	4a2d      	ldr	r2, [pc, #180]	@ (80011c0 <SystemInit+0x118>)
 800110c:	f043 0307 	orr.w	r3, r3, #7
 8001110:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001112:	4b2c      	ldr	r3, [pc, #176]	@ (80011c4 <SystemInit+0x11c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001118:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <SystemInit+0x11c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <SystemInit+0x11c>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001124:	4b27      	ldr	r3, [pc, #156]	@ (80011c4 <SystemInit+0x11c>)
 8001126:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <SystemInit+0x124>)
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800112a:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <SystemInit+0x11c>)
 800112c:	4a28      	ldr	r2, [pc, #160]	@ (80011d0 <SystemInit+0x128>)
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001130:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <SystemInit+0x11c>)
 8001132:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <SystemInit+0x12c>)
 8001134:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001136:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <SystemInit+0x11c>)
 8001138:	2200      	movs	r2, #0
 800113a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <SystemInit+0x11c>)
 800113e:	4a25      	ldr	r2, [pc, #148]	@ (80011d4 <SystemInit+0x12c>)
 8001140:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <SystemInit+0x11c>)
 8001144:	2200      	movs	r2, #0
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <SystemInit+0x11c>)
 800114a:	4a22      	ldr	r2, [pc, #136]	@ (80011d4 <SystemInit+0x12c>)
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <SystemInit+0x11c>)
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <SystemInit+0x11c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1a      	ldr	r2, [pc, #104]	@ (80011c4 <SystemInit+0x11c>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <SystemInit+0x11c>)
 8001162:	2200      	movs	r2, #0
 8001164:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <SystemInit+0x130>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <SystemInit+0x134>)
 800116c:	4013      	ands	r3, r2
 800116e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001172:	d202      	bcs.n	800117a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <SystemInit+0x138>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <SystemInit+0x11c>)
 800117c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d113      	bne.n	80011b0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <SystemInit+0x11c>)
 800118a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800118e:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <SystemInit+0x11c>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001194:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <SystemInit+0x13c>)
 800119a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800119e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <SystemInit+0x11c>)
 80011a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011a6:	4a07      	ldr	r2, [pc, #28]	@ (80011c4 <SystemInit+0x11c>)
 80011a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	52002000 	.word	0x52002000
 80011c4:	58024400 	.word	0x58024400
 80011c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011cc:	02020200 	.word	0x02020200
 80011d0:	01ff0000 	.word	0x01ff0000
 80011d4:	01010280 	.word	0x01010280
 80011d8:	5c001000 	.word	0x5c001000
 80011dc:	ffff0000 	.word	0xffff0000
 80011e0:	51008108 	.word	0x51008108
 80011e4:	52004000 	.word	0x52004000

080011e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <ExitRun0Mode+0x2c>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <ExitRun0Mode+0x2c>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80011f8:	bf00      	nop
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <ExitRun0Mode+0x2c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f9      	beq.n	80011fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	58024800 	.word	0x58024800

08001218 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800121e:	f00f fea9 	bl	8010f74 <tcp_new>
 8001222:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 144);
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <tcp_server_init+0x4c>)
 8001226:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 8);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2208      	movs	r2, #8
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f00e fdfa 	bl	800fe28 <tcp_bind>
 8001234:	4603      	mov	r3, r0
 8001236:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001238:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001240:	21ff      	movs	r1, #255	@ 0xff
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f00e fea8 	bl	800ff98 <tcp_listen_with_backlog>
 8001248:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 800124a:	4907      	ldr	r1, [pc, #28]	@ (8001268 <tcp_server_init+0x50>)
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f00f ff1f 	bl	8011090 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001252:	e003      	b.n	800125c <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	2001      	movs	r0, #1
 8001258:	f00d f932 	bl	800e4c0 <memp_free>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	9001a8c0 	.word	0x9001a8c0
 8001268:	0800126d 	.word	0x0800126d

0800126c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800127a:	2101      	movs	r1, #1
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00f fc87 	bl	8010b90 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001282:	200c      	movs	r0, #12
 8001284:	f00c fefe 	bl	800e084 <mem_malloc>
 8001288:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01f      	beq.n	80012d0 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2200      	movs	r2, #0
 80012a0:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f00f fe78 	bl	8010fa0 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 80012b0:	490d      	ldr	r1, [pc, #52]	@ (80012e8 <tcp_server_accept+0x7c>)
 80012b2:	68b8      	ldr	r0, [r7, #8]
 80012b4:	f00f fe86 	bl	8010fc4 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <tcp_server_accept+0x80>)
 80012ba:	68b8      	ldr	r0, [r7, #8]
 80012bc:	f00f fec6 	bl	801104c <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	490b      	ldr	r1, [pc, #44]	@ (80012f0 <tcp_server_accept+0x84>)
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f00f fefb 	bl	80110c0 <tcp_poll>

    ret_err = ERR_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]
 80012ce:	e005      	b.n	80012dc <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f000 f965 	bl	80015a2 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80012d8:	23ff      	movs	r3, #255	@ 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	080012f5 	.word	0x080012f5
 80012ec:	08001429 	.word	0x08001429
 80012f0:	0800144d 	.word	0x0800144d

080012f4 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d105      	bne.n	8001314 <tcp_server_recv+0x20>
 8001308:	4b43      	ldr	r3, [pc, #268]	@ (8001418 <tcp_server_recv+0x124>)
 800130a:	22c3      	movs	r2, #195	@ 0xc3
 800130c:	4943      	ldr	r1, [pc, #268]	@ (800141c <tcp_server_recv+0x128>)
 800130e:	4844      	ldr	r0, [pc, #272]	@ (8001420 <tcp_server_recv+0x12c>)
 8001310:	f017 ff48 	bl	80191a4 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2203      	movs	r2, #3
 8001322:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 800132c:	69b9      	ldr	r1, [r7, #24]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 f937 	bl	80015a2 <tcp_server_connection_close>
 8001334:	e007      	b.n	8001346 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001336:	493b      	ldr	r1, [pc, #236]	@ (8001424 <tcp_server_recv+0x130>)
 8001338:	68b8      	ldr	r0, [r7, #8]
 800133a:	f00f fe65 	bl	8011008 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f000 f8db 	bl	80014fc <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	77fb      	strb	r3, [r7, #31]
 800134a:	e05f      	b.n	800140c <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 800134c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f00d ff51 	bl	800f208 <pbuf_free>
    }
    ret_err = err;
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	77fb      	strb	r3, [r7, #31]
 800136a:	e04f      	b.n	800140c <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001380:	4928      	ldr	r1, [pc, #160]	@ (8001424 <tcp_server_recv+0x130>)
 8001382:	68b8      	ldr	r0, [r7, #8]
 8001384:	f00f fe40 	bl	8011008 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001388:	69b9      	ldr	r1, [r7, #24]
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f000 f930 	bl	80015f0 <tcp_server_handle>

    ret_err = ERR_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
 8001394:	e03a      	b.n	800140c <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d115      	bne.n	80013ca <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <tcp_server_recv+0xc2>
    {
      es->p = p;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 80013ac:	69b9      	ldr	r1, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 f91e 	bl	80015f0 <tcp_server_handle>
 80013b4:	e006      	b.n	80013c4 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f00e f846 	bl	800f450 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]
 80013c8:	e020      	b.n	800140c <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d10e      	bne.n	80013f0 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	891b      	ldrh	r3, [r3, #8]
 80013d6:	4619      	mov	r1, r3
 80013d8:	68b8      	ldr	r0, [r7, #8]
 80013da:	f00e fef3 	bl	80101c4 <tcp_recved>
    es->p = NULL;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f00d ff0f 	bl	800f208 <pbuf_free>
    ret_err = ERR_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	77fb      	strb	r3, [r7, #31]
 80013ee:	e00d      	b.n	800140c <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	891b      	ldrh	r3, [r3, #8]
 80013f4:	4619      	mov	r1, r3
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f00e fee4 	bl	80101c4 <tcp_recved>
    es->p = NULL;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f00d ff00 	bl	800f208 <pbuf_free>
    ret_err = ERR_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 800140c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0801a560 	.word	0x0801a560
 800141c:	0801a57c 	.word	0x0801a57c
 8001420:	0801a588 	.word	0x0801a588
 8001424:	080014ad 	.word	0x080014ad

08001428 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f00c fc80 	bl	800dd44 <mem_free>
  }
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d017      	beq.n	8001490 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001468:	490f      	ldr	r1, [pc, #60]	@ (80014a8 <tcp_server_poll+0x5c>)
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f00f fdcc 	bl	8011008 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f000 f842 	bl	80014fc <tcp_server_send>
 8001478:	e007      	b.n	800148a <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d103      	bne.n	800148a <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	6838      	ldr	r0, [r7, #0]
 8001486:	f000 f88c 	bl	80015a2 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e004      	b.n	800149a <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f00e fcbd 	bl	800fe10 <tcp_abort>
    ret_err = ERR_ABRT;
 8001496:	23f3      	movs	r3, #243	@ 0xf3
 8001498:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	080014ad 	.word	0x080014ad

080014ac <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80014cc:	490a      	ldr	r1, [pc, #40]	@ (80014f8 <tcp_server_sent+0x4c>)
 80014ce:	68b8      	ldr	r0, [r7, #8]
 80014d0:	f00f fd9a 	bl	8011008 <tcp_sent>
    tcp_server_send(tpcb, es);
 80014d4:	6979      	ldr	r1, [r7, #20]
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f000 f810 	bl	80014fc <tcp_server_send>
 80014dc:	e007      	b.n	80014ee <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d103      	bne.n	80014ee <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 80014e6:	6979      	ldr	r1, [r7, #20]
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f000 f85a 	bl	80015a2 <tcp_server_connection_close>
  }
  return ERR_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	080014ad 	.word	0x080014ad

080014fc <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 800150a:	e036      	b.n	800157a <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6859      	ldr	r1, [r3, #4]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	895a      	ldrh	r2, [r3, #10]
 800151a:	2301      	movs	r3, #1
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f012 fc7b 	bl	8013e18 <tcp_write>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d11d      	bne.n	800156a <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	895b      	ldrh	r3, [r3, #10]
 8001532:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4618      	mov	r0, r3
 800154a:	f00d ff03 	bl	800f354 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800154e:	6938      	ldr	r0, [r7, #16]
 8001550:	f00d fe5a 	bl	800f208 <pbuf_free>
 8001554:	4603      	mov	r3, r0
 8001556:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001558:	7b7b      	ldrb	r3, [r7, #13]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f7      	beq.n	800154e <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f00e fe2e 	bl	80101c4 <tcp_recved>
 8001568:	e007      	b.n	800157a <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800156a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800156e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001572:	d102      	bne.n	800157a <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 800157a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <tcp_server_send+0x9e>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	895a      	ldrh	r2, [r3, #10]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
         (es->p != NULL) &&
 8001596:	429a      	cmp	r2, r3
 8001598:	d9b8      	bls.n	800150c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80015ac:	2100      	movs	r1, #0
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f00f fcf6 	bl	8010fa0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 80015b4:	2100      	movs	r1, #0
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f00f fd26 	bl	8011008 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80015bc:	2100      	movs	r1, #0
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f00f fd00 	bl	8010fc4 <tcp_recv>
  tcp_err(tpcb, NULL);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f00f fd40 	bl	801104c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f00f fd75 	bl	80110c0 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f00c fbb1 	bl	800dd44 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f00e fb2a 	bl	800fc3c <tcp_close>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b09e      	sub	sp, #120	@ 0x78
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx;

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
	uint16_t inPort = tpcb->remote_port;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	8b1b      	ldrh	r3, [r3, #24]
 8001604:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8001608:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800160c:	4618      	mov	r0, r3
 800160e:	f016 f9f9 	bl	8017a04 <ip4addr_ntoa>
 8001612:	6738      	str	r0, [r7, #112]	@ 0x70
	//esTx->state = es->state;
	//esTx->pcb = es->pcb;
	//esTx->p = es->p;

	char buf[100];
	memset (buf, '\0', 100);
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	2264      	movs	r2, #100	@ 0x64
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f017 ff53 	bl	80194c8 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	891b      	ldrh	r3, [r3, #8]
 800162e:	461a      	mov	r2, r3
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	4618      	mov	r0, r3
 8001636:	f017 ff6e 	bl	8019516 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fe58 	bl	80002f4 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4413      	add	r3, r2
 800164e:	4a1e      	ldr	r2, [pc, #120]	@ (80016c8 <tcp_server_handle+0xd8>)
 8001650:	461d      	mov	r5, r3
 8001652:	4614      	mov	r4, r2
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	6028      	str	r0, [r5, #0]
 8001658:	6069      	str	r1, [r5, #4]
 800165a:	60aa      	str	r2, [r5, #8]
 800165c:	60eb      	str	r3, [r5, #12]
 800165e:	cc03      	ldmia	r4!, {r0, r1}
 8001660:	6128      	str	r0, [r5, #16]
 8001662:	6169      	str	r1, [r5, #20]
 8001664:	7823      	ldrb	r3, [r4, #0]
 8001666:	762b      	strb	r3, [r5, #24]


	es->p->payload = (void *)buf;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f107 0208 	add.w	r2, r7, #8
 8001670:	605a      	str	r2, [r3, #4]
	es->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	891a      	ldrh	r2, [r3, #8]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	895b      	ldrh	r3, [r3, #10]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29c      	uxth	r4, r3
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fe34 	bl	80002f4 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4422      	add	r2, r4
 8001696:	b292      	uxth	r2, r2
 8001698:	811a      	strh	r2, [r3, #8]
	es->p->len = strlen (buf);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fe28 	bl	80002f4 <strlen>
 80016a4:	4602      	mov	r2, r0
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	b292      	uxth	r2, r2
 80016ac:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, es);
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff23 	bl	80014fc <tcp_server_send>

	pbuf_free(es->p);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00d fda4 	bl	800f208 <pbuf_free>

}
 80016c0:	bf00      	nop
 80016c2:	3778      	adds	r7, #120	@ 0x78
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdb0      	pop	{r4, r5, r7, pc}
 80016c8:	0801a5b0 	.word	0x0801a5b0

080016cc <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 80016d2:	f014 ffe3 	bl	801669c <udp_new>
 80016d6:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 1, 144);
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <udpServer_init+0x44>)
 80016da:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2207      	movs	r2, #7
 80016e0:	4619      	mov	r1, r3
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f014 fe5a 	bl	801639c <udp_bind>
 80016e8:	4603      	mov	r3, r0
 80016ea:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 80016ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback_server, NULL);
 80016f4:	2200      	movs	r2, #0
 80016f6:	4907      	ldr	r1, [pc, #28]	@ (8001714 <udpServer_init+0x48>)
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f014 ff6d 	bl	80165d8 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 80016fe:	e002      	b.n	8001706 <udpServer_init+0x3a>
	   udp_remove(upcb);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f014 ff89 	bl	8016618 <udp_remove>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	9001a8c0 	.word	0x9001a8c0
 8001714:	08001719 	.word	0x08001719

08001718 <udp_receive_callback_server>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback_server(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0a0      	sub	sp, #128	@ 0x80
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;

	// Get the IP of the Client //
	char *remoteIP = ipaddr_ntoa(addr);
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f016 f96c 	bl	8017a04 <ip4addr_ntoa>
 800172c:	67f8      	str	r0, [r7, #124]	@ 0x7c

	char buf[100];


	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4917      	ldr	r1, [pc, #92]	@ (8001794 <udp_receive_callback_server+0x7c>)
 8001738:	4618      	mov	r0, r3
 800173a:	f017 fda3 	bl	8019284 <siprintf>
 800173e:	67b8      	str	r0, [r7, #120]	@ 0x78

	// allocate pbuf from RAM//
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8001740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001742:	b29b      	uxth	r3, r3
 8001744:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001748:	4619      	mov	r1, r3
 800174a:	2036      	movs	r0, #54	@ 0x36
 800174c:	f00d fa78 	bl	800ec40 <pbuf_alloc>
 8001750:	6778      	str	r0, [r7, #116]	@ 0x74

	// copy the data into the buffer  //
	pbuf_take(txBuf, buf, len);
 8001752:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001754:	b29a      	uxth	r2, r3
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800175e:	f00d ffcb 	bl	800f6f8 <pbuf_take>

	// Connect to the remote client //
	udp_connect(upcb, addr, port);
 8001762:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001766:	461a      	mov	r2, r3
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	f014 fe9e 	bl	80164ac <udp_connect>

	// Send a Reply to the Client //
	udp_send(upcb, txBuf);
 8001770:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f014 fc0e 	bl	8015f94 <udp_send>

	// free the UDP connection, so we can accept new clients //
	udp_disconnect(upcb);
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f014 ff05 	bl	8016588 <udp_disconnect>

	// Free the p_tx buffer //
	pbuf_free(txBuf);
 800177e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001780:	f00d fd42 	bl	800f208 <pbuf_free>

	// Free the p buffer//
	pbuf_free(p);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f00d fd3f 	bl	800f208 <pbuf_free>
}
 800178a:	bf00      	nop
 800178c:	3780      	adds	r7, #128	@ 0x80
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0801a5cc 	.word	0x0801a5cc

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017d4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800179c:	f7ff fd24 	bl	80011e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a0:	f7ff fc82 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f017 ff53 	bl	8019674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe ff81 	bl	80006d4 <main>
  bx  lr
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017dc:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80017e0:	0801e3b8 	.word	0x0801e3b8
  ldr r2, =_sbss
 80017e4:	24004a18 	.word	0x24004a18
  ldr r4, =_ebss
 80017e8:	2400c658 	.word	0x2400c658

080017ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC3_IRQHandler>

080017ee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6810      	ldr	r0, [r2, #0]
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	2101      	movs	r1, #1
 8001808:	4798      	blx	r3
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	da02      	bge.n	8001816 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001810:	f06f 0304 	mvn.w	r3, #4
 8001814:	e06e      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6810      	ldr	r0, [r2, #0]
 800181e:	f107 020c 	add.w	r2, r7, #12
 8001822:	2101      	movs	r1, #1
 8001824:	4798      	blx	r3
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	da02      	bge.n	8001832 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800182c:	f06f 0304 	mvn.w	r3, #4
 8001830:	e060      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800183c:	2301      	movs	r3, #1
 800183e:	e059      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6810      	ldr	r0, [r2, #0]
 8001848:	f107 020c 	add.w	r2, r7, #12
 800184c:	2100      	movs	r1, #0
 800184e:	4798      	blx	r3
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	da02      	bge.n	800185c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001856:	f06f 0304 	mvn.w	r3, #4
 800185a:	e04b      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11b      	bne.n	800189e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <LAN8742_GetLinkState+0x90>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800187a:	2302      	movs	r3, #2
 800187c:	e03a      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001888:	2303      	movs	r3, #3
 800188a:	e033      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001896:	2304      	movs	r3, #4
 8001898:	e02c      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800189a:	2305      	movs	r3, #5
 800189c:	e02a      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6810      	ldr	r0, [r2, #0]
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	211f      	movs	r1, #31
 80018ac:	4798      	blx	r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da02      	bge.n	80018ba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80018b4:	f06f 0304 	mvn.w	r3, #4
 80018b8:	e01c      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80018c4:	2306      	movs	r3, #6
 80018c6:	e015      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 031c 	and.w	r3, r3, #28
 80018ce:	2b18      	cmp	r3, #24
 80018d0:	d101      	bne.n	80018d6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e00e      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 031c 	and.w	r3, r3, #28
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d101      	bne.n	80018e4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e007      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 031c 	and.w	r3, r3, #28
 80018ea:	2b14      	cmp	r3, #20
 80018ec:	d101      	bne.n	80018f2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018ee:	2304      	movs	r3, #4
 80018f0:	e000      	b.n	80018f4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018f2:	2305      	movs	r3, #5
    }
  }
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	@ 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <BSP_LED_Init+0x28>
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d006      	beq.n	8001924 <BSP_LED_Init+0x28>
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d003      	beq.n	8001924 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800191c:	f06f 0301 	mvn.w	r3, #1
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001922:	e055      	b.n	80019d0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800192a:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <BSP_LED_Init+0xe0>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	4a2a      	ldr	r2, [pc, #168]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800193a:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <BSP_LED_Init+0xe0>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	e021      	b.n	800198e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10f      	bne.n	8001970 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001956:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	e00e      	b.n	800198e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001976:	4a19      	ldr	r2, [pc, #100]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <BSP_LED_Init+0xe0>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4a13      	ldr	r2, [pc, #76]	@ (80019e0 <BSP_LED_Init+0xe4>)
 8001992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001996:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a0f      	ldr	r2, [pc, #60]	@ (80019e4 <BSP_LED_Init+0xe8>)
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	f107 0218 	add.w	r2, r7, #24
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fdf0 	bl	8003598 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <BSP_LED_Init+0xe8>)
 80019bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <BSP_LED_Init+0xe4>)
 80019c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	f001 ff94 	bl	80038f8 <HAL_GPIO_WritePin>
  }

  return ret;
 80019d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3730      	adds	r7, #48	@ 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	58024400 	.word	0x58024400
 80019e0:	0801d388 	.word	0x0801d388
 80019e4:	24000008 	.word	0x24000008

080019e8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <BSP_LED_Toggle+0x28>
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d006      	beq.n	8001a10 <BSP_LED_Toggle+0x28>
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d003      	beq.n	8001a10 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a08:	f06f 0301 	mvn.w	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e00b      	b.n	8001a28 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <BSP_LED_Toggle+0x4c>)
 8001a14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4907      	ldr	r1, [pc, #28]	@ (8001a38 <BSP_LED_Toggle+0x50>)
 8001a1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f001 ff81 	bl	800392a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000008 	.word	0x24000008
 8001a38:	0801d388 	.word	0x0801d388

08001a3c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <BSP_PB_Init+0xcc>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a52:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <BSP_PB_Init+0xcc>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <BSP_PB_Init+0xcc>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a6e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001a70:	2302      	movs	r3, #2
 8001a72:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4a21      	ldr	r2, [pc, #132]	@ (8001b0c <BSP_PB_Init+0xd0>)
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	f107 020c 	add.w	r2, r7, #12
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fd81 	bl	8003598 <HAL_GPIO_Init>
 8001a96:	e031      	b.n	8001afc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001a98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a9c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b0c <BSP_PB_Init+0xd0>)
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	f107 020c 	add.w	r2, r7, #12
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fd73 	bl	8003598 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4a16      	ldr	r2, [pc, #88]	@ (8001b10 <BSP_PB_Init+0xd4>)
 8001ab8:	441a      	add	r2, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4915      	ldr	r1, [pc, #84]	@ (8001b14 <BSP_PB_Init+0xd8>)
 8001abe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f001 fd22 	bl	800350e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <BSP_PB_Init+0xd4>)
 8001ad0:	1898      	adds	r0, r3, r2
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4a10      	ldr	r2, [pc, #64]	@ (8001b18 <BSP_PB_Init+0xdc>)
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	461a      	mov	r2, r3
 8001adc:	2100      	movs	r1, #0
 8001ade:	f001 fcf7 	bl	80034d0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ae2:	2028      	movs	r0, #40	@ 0x28
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <BSP_PB_Init+0xe0>)
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	f000 f95a 	bl	8001da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001af4:	2328      	movs	r3, #40	@ 0x28
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f970 	bl	8001ddc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	24000014 	.word	0x24000014
 8001b10:	24004fc0 	.word	0x24004fc0
 8001b14:	0801d390 	.word	0x0801d390
 8001b18:	24000018 	.word	0x24000018
 8001b1c:	2400001c 	.word	0x2400001c

08001b20 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <BSP_PB_IRQHandler+0x20>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fd00 	bl	8003538 <HAL_EXTI_IRQHandler>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	24004fc0 	.word	0x24004fc0

08001b44 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff fff0 	bl	8001b44 <BSP_PB_Callback>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f000 f90f 	bl	8001d92 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b74:	f002 fd3e 	bl	80045f4 <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_Init+0x68>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	4913      	ldr	r1, [pc, #76]	@ (8001bd4 <HAL_Init+0x6c>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <HAL_Init+0x68>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_Init+0x6c>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_Init+0x70>)
 8001baa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_Init+0x74>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f7ff f900 	bl	8000db8 <HAL_InitTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e002      	b.n	8001bc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc2:	f7ff f869 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	0801d378 	.word	0x0801d378
 8001bd8:	24000004 	.word	0x24000004
 8001bdc:	24000000 	.word	0x24000000

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	24000024 	.word	0x24000024
 8001c04:	24004fc8 	.word	0x24004fc8

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	24004fc8 	.word	0x24004fc8

08001c20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetREVID+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0c1b      	lsrs	r3, r3, #16
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	5c001000 	.word	0x5c001000

08001c38 <__NVIC_SetPriorityGrouping>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x40>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x40>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	05fa0000 	.word	0x05fa0000

08001c80 <__NVIC_GetPriorityGrouping>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	@ (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff4c 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db6:	f7ff ff63 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7ff ffb3 	bl	8001d2c <NVIC_EncodePriority>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff82 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff56 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001dfc:	f3bf 8f5f 	dmb	sy
}
 8001e00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e02:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <HAL_MPU_Disable+0x28>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <HAL_MPU_Disable+0x28>)
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_MPU_Disable+0x2c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00
 8001e24:	e000ed90 	.word	0xe000ed90

08001e28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e30:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_MPU_Enable+0x38>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_MPU_Enable+0x3c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_MPU_Enable+0x3c>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e46:	f3bf 8f4f 	dsb	sy
}
 8001e4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e4c:	f3bf 8f6f 	isb	sy
}
 8001e50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed90 	.word	0xe000ed90
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	785a      	ldrb	r2, [r3, #1]
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8001e76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e84:	4a17      	ldr	r2, [pc, #92]	@ (8001ee4 <HAL_MPU_ConfigRegion+0x7c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7b1b      	ldrb	r3, [r3, #12]
 8001e90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7adb      	ldrb	r3, [r3, #11]
 8001e96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7a9b      	ldrb	r3, [r3, #10]
 8001e9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b5b      	ldrb	r3, [r3, #13]
 8001ea6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7b9b      	ldrb	r3, [r3, #14]
 8001eae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7bdb      	ldrb	r3, [r3, #15]
 8001eb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a5b      	ldrb	r3, [r3, #9]
 8001ebe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7a1b      	ldrb	r3, [r3, #8]
 8001ec6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ec8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed0:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ed2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed4:	6113      	str	r3, [r2, #16]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed90 	.word	0xe000ed90

08001ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff fe8a 	bl	8001c08 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e2dc      	b.n	80024ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d008      	beq.n	8001f1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2280      	movs	r2, #128	@ 0x80
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e2cd      	b.n	80024ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a76      	ldr	r2, [pc, #472]	@ (80020fc <HAL_DMA_Abort+0x214>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04a      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a74      	ldr	r2, [pc, #464]	@ (8002100 <HAL_DMA_Abort+0x218>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d045      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a73      	ldr	r2, [pc, #460]	@ (8002104 <HAL_DMA_Abort+0x21c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d040      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a71      	ldr	r2, [pc, #452]	@ (8002108 <HAL_DMA_Abort+0x220>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d03b      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a70      	ldr	r2, [pc, #448]	@ (800210c <HAL_DMA_Abort+0x224>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d036      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6e      	ldr	r2, [pc, #440]	@ (8002110 <HAL_DMA_Abort+0x228>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d031      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6d      	ldr	r2, [pc, #436]	@ (8002114 <HAL_DMA_Abort+0x22c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d02c      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6b      	ldr	r2, [pc, #428]	@ (8002118 <HAL_DMA_Abort+0x230>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d027      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6a      	ldr	r2, [pc, #424]	@ (800211c <HAL_DMA_Abort+0x234>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a68      	ldr	r2, [pc, #416]	@ (8002120 <HAL_DMA_Abort+0x238>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a67      	ldr	r2, [pc, #412]	@ (8002124 <HAL_DMA_Abort+0x23c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d018      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a65      	ldr	r2, [pc, #404]	@ (8002128 <HAL_DMA_Abort+0x240>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a64      	ldr	r2, [pc, #400]	@ (800212c <HAL_DMA_Abort+0x244>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a62      	ldr	r2, [pc, #392]	@ (8002130 <HAL_DMA_Abort+0x248>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a61      	ldr	r2, [pc, #388]	@ (8002134 <HAL_DMA_Abort+0x24c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_DMA_Abort+0xd6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5f      	ldr	r2, [pc, #380]	@ (8002138 <HAL_DMA_Abort+0x250>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Abort+0xda>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_Abort+0xdc>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 021e 	bic.w	r2, r2, #30
 8001fd6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fe6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e00a      	b.n	8002006 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 020e 	bic.w	r2, r2, #14
 8001ffe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3c      	ldr	r2, [pc, #240]	@ (80020fc <HAL_DMA_Abort+0x214>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d072      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3a      	ldr	r2, [pc, #232]	@ (8002100 <HAL_DMA_Abort+0x218>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d06d      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a39      	ldr	r2, [pc, #228]	@ (8002104 <HAL_DMA_Abort+0x21c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d068      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a37      	ldr	r2, [pc, #220]	@ (8002108 <HAL_DMA_Abort+0x220>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d063      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a36      	ldr	r2, [pc, #216]	@ (800210c <HAL_DMA_Abort+0x224>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d05e      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a34      	ldr	r2, [pc, #208]	@ (8002110 <HAL_DMA_Abort+0x228>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d059      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a33      	ldr	r2, [pc, #204]	@ (8002114 <HAL_DMA_Abort+0x22c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d054      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a31      	ldr	r2, [pc, #196]	@ (8002118 <HAL_DMA_Abort+0x230>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04f      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a30      	ldr	r2, [pc, #192]	@ (800211c <HAL_DMA_Abort+0x234>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04a      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2e      	ldr	r2, [pc, #184]	@ (8002120 <HAL_DMA_Abort+0x238>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d045      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2d      	ldr	r2, [pc, #180]	@ (8002124 <HAL_DMA_Abort+0x23c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d040      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2b      	ldr	r2, [pc, #172]	@ (8002128 <HAL_DMA_Abort+0x240>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d03b      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <HAL_DMA_Abort+0x244>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d036      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a28      	ldr	r2, [pc, #160]	@ (8002130 <HAL_DMA_Abort+0x248>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d031      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_DMA_Abort+0x24c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d02c      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a25      	ldr	r2, [pc, #148]	@ (8002138 <HAL_DMA_Abort+0x250>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d027      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_DMA_Abort+0x254>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <HAL_DMA_Abort+0x258>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_DMA_Abort+0x25c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d018      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <HAL_DMA_Abort+0x260>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_DMA_Abort+0x264>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <HAL_DMA_Abort+0x268>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_DMA_Abort+0x26c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_Abort+0x20e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_DMA_Abort+0x270>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d132      	bne.n	800215c <HAL_DMA_Abort+0x274>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e031      	b.n	800215e <HAL_DMA_Abort+0x276>
 80020fa:	bf00      	nop
 80020fc:	40020010 	.word	0x40020010
 8002100:	40020028 	.word	0x40020028
 8002104:	40020040 	.word	0x40020040
 8002108:	40020058 	.word	0x40020058
 800210c:	40020070 	.word	0x40020070
 8002110:	40020088 	.word	0x40020088
 8002114:	400200a0 	.word	0x400200a0
 8002118:	400200b8 	.word	0x400200b8
 800211c:	40020410 	.word	0x40020410
 8002120:	40020428 	.word	0x40020428
 8002124:	40020440 	.word	0x40020440
 8002128:	40020458 	.word	0x40020458
 800212c:	40020470 	.word	0x40020470
 8002130:	40020488 	.word	0x40020488
 8002134:	400204a0 	.word	0x400204a0
 8002138:	400204b8 	.word	0x400204b8
 800213c:	58025408 	.word	0x58025408
 8002140:	5802541c 	.word	0x5802541c
 8002144:	58025430 	.word	0x58025430
 8002148:	58025444 	.word	0x58025444
 800214c:	58025458 	.word	0x58025458
 8002150:	5802546c 	.word	0x5802546c
 8002154:	58025480 	.word	0x58025480
 8002158:	58025494 	.word	0x58025494
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002170:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6d      	ldr	r2, [pc, #436]	@ (800232c <HAL_DMA_Abort+0x444>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6b      	ldr	r2, [pc, #428]	@ (8002330 <HAL_DMA_Abort+0x448>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6a      	ldr	r2, [pc, #424]	@ (8002334 <HAL_DMA_Abort+0x44c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a68      	ldr	r2, [pc, #416]	@ (8002338 <HAL_DMA_Abort+0x450>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_DMA_Abort+0x454>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	@ (8002340 <HAL_DMA_Abort+0x458>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a64      	ldr	r2, [pc, #400]	@ (8002344 <HAL_DMA_Abort+0x45c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a62      	ldr	r2, [pc, #392]	@ (8002348 <HAL_DMA_Abort+0x460>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a61      	ldr	r2, [pc, #388]	@ (800234c <HAL_DMA_Abort+0x464>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5f      	ldr	r2, [pc, #380]	@ (8002350 <HAL_DMA_Abort+0x468>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5e      	ldr	r2, [pc, #376]	@ (8002354 <HAL_DMA_Abort+0x46c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002358 <HAL_DMA_Abort+0x470>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a5b      	ldr	r2, [pc, #364]	@ (800235c <HAL_DMA_Abort+0x474>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a59      	ldr	r2, [pc, #356]	@ (8002360 <HAL_DMA_Abort+0x478>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_DMA_Abort+0x47c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort+0x32a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <HAL_DMA_Abort+0x480>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d108      	bne.n	8002224 <HAL_DMA_Abort+0x33c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e007      	b.n	8002234 <HAL_DMA_Abort+0x34c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002234:	e013      	b.n	800225e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002236:	f7ff fce7 	bl	8001c08 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b05      	cmp	r3, #5
 8002242:	d90c      	bls.n	800225e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e12d      	b.n	80024ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1e5      	bne.n	8002236 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2f      	ldr	r2, [pc, #188]	@ (800232c <HAL_DMA_Abort+0x444>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04a      	beq.n	800230a <HAL_DMA_Abort+0x422>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2d      	ldr	r2, [pc, #180]	@ (8002330 <HAL_DMA_Abort+0x448>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d045      	beq.n	800230a <HAL_DMA_Abort+0x422>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2c      	ldr	r2, [pc, #176]	@ (8002334 <HAL_DMA_Abort+0x44c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d040      	beq.n	800230a <HAL_DMA_Abort+0x422>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2a      	ldr	r2, [pc, #168]	@ (8002338 <HAL_DMA_Abort+0x450>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03b      	beq.n	800230a <HAL_DMA_Abort+0x422>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a29      	ldr	r2, [pc, #164]	@ (800233c <HAL_DMA_Abort+0x454>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d036      	beq.n	800230a <HAL_DMA_Abort+0x422>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <HAL_DMA_Abort+0x458>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a26      	ldr	r2, [pc, #152]	@ (8002344 <HAL_DMA_Abort+0x45c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a24      	ldr	r2, [pc, #144]	@ (8002348 <HAL_DMA_Abort+0x460>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d027      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a23      	ldr	r2, [pc, #140]	@ (800234c <HAL_DMA_Abort+0x464>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a21      	ldr	r2, [pc, #132]	@ (8002350 <HAL_DMA_Abort+0x468>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01d      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a20      	ldr	r2, [pc, #128]	@ (8002354 <HAL_DMA_Abort+0x46c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d018      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <HAL_DMA_Abort+0x470>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1d      	ldr	r2, [pc, #116]	@ (800235c <HAL_DMA_Abort+0x474>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <HAL_DMA_Abort+0x478>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_DMA_Abort+0x422>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002364 <HAL_DMA_Abort+0x47c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_Abort+0x422>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <HAL_DMA_Abort+0x480>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_DMA_Abort+0x426>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_DMA_Abort+0x428>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02b      	beq.n	800236c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	223f      	movs	r2, #63	@ 0x3f
 8002324:	409a      	lsls	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	e02a      	b.n	8002382 <HAL_DMA_Abort+0x49a>
 800232c:	40020010 	.word	0x40020010
 8002330:	40020028 	.word	0x40020028
 8002334:	40020040 	.word	0x40020040
 8002338:	40020058 	.word	0x40020058
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	400200a0 	.word	0x400200a0
 8002348:	400200b8 	.word	0x400200b8
 800234c:	40020410 	.word	0x40020410
 8002350:	40020428 	.word	0x40020428
 8002354:	40020440 	.word	0x40020440
 8002358:	40020458 	.word	0x40020458
 800235c:	40020470 	.word	0x40020470
 8002360:	40020488 	.word	0x40020488
 8002364:	400204a0 	.word	0x400204a0
 8002368:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2201      	movs	r2, #1
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a4f      	ldr	r2, [pc, #316]	@ (80024c4 <HAL_DMA_Abort+0x5dc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d072      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a4d      	ldr	r2, [pc, #308]	@ (80024c8 <HAL_DMA_Abort+0x5e0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d06d      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4c      	ldr	r2, [pc, #304]	@ (80024cc <HAL_DMA_Abort+0x5e4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d068      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4a      	ldr	r2, [pc, #296]	@ (80024d0 <HAL_DMA_Abort+0x5e8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d063      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a49      	ldr	r2, [pc, #292]	@ (80024d4 <HAL_DMA_Abort+0x5ec>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d05e      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a47      	ldr	r2, [pc, #284]	@ (80024d8 <HAL_DMA_Abort+0x5f0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d059      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a46      	ldr	r2, [pc, #280]	@ (80024dc <HAL_DMA_Abort+0x5f4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d054      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a44      	ldr	r2, [pc, #272]	@ (80024e0 <HAL_DMA_Abort+0x5f8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d04f      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a43      	ldr	r2, [pc, #268]	@ (80024e4 <HAL_DMA_Abort+0x5fc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d04a      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a41      	ldr	r2, [pc, #260]	@ (80024e8 <HAL_DMA_Abort+0x600>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d045      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a40      	ldr	r2, [pc, #256]	@ (80024ec <HAL_DMA_Abort+0x604>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d040      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3e      	ldr	r2, [pc, #248]	@ (80024f0 <HAL_DMA_Abort+0x608>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d03b      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3d      	ldr	r2, [pc, #244]	@ (80024f4 <HAL_DMA_Abort+0x60c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d036      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3b      	ldr	r2, [pc, #236]	@ (80024f8 <HAL_DMA_Abort+0x610>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d031      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3a      	ldr	r2, [pc, #232]	@ (80024fc <HAL_DMA_Abort+0x614>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d02c      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a38      	ldr	r2, [pc, #224]	@ (8002500 <HAL_DMA_Abort+0x618>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d027      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a37      	ldr	r2, [pc, #220]	@ (8002504 <HAL_DMA_Abort+0x61c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a35      	ldr	r2, [pc, #212]	@ (8002508 <HAL_DMA_Abort+0x620>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01d      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a34      	ldr	r2, [pc, #208]	@ (800250c <HAL_DMA_Abort+0x624>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d018      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a32      	ldr	r2, [pc, #200]	@ (8002510 <HAL_DMA_Abort+0x628>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a31      	ldr	r2, [pc, #196]	@ (8002514 <HAL_DMA_Abort+0x62c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00e      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2f      	ldr	r2, [pc, #188]	@ (8002518 <HAL_DMA_Abort+0x630>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2e      	ldr	r2, [pc, #184]	@ (800251c <HAL_DMA_Abort+0x634>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_DMA_Abort+0x58a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_DMA_Abort+0x638>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Abort+0x58e>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_DMA_Abort+0x590>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002484:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800249c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40020010 	.word	0x40020010
 80024c8:	40020028 	.word	0x40020028
 80024cc:	40020040 	.word	0x40020040
 80024d0:	40020058 	.word	0x40020058
 80024d4:	40020070 	.word	0x40020070
 80024d8:	40020088 	.word	0x40020088
 80024dc:	400200a0 	.word	0x400200a0
 80024e0:	400200b8 	.word	0x400200b8
 80024e4:	40020410 	.word	0x40020410
 80024e8:	40020428 	.word	0x40020428
 80024ec:	40020440 	.word	0x40020440
 80024f0:	40020458 	.word	0x40020458
 80024f4:	40020470 	.word	0x40020470
 80024f8:	40020488 	.word	0x40020488
 80024fc:	400204a0 	.word	0x400204a0
 8002500:	400204b8 	.word	0x400204b8
 8002504:	58025408 	.word	0x58025408
 8002508:	5802541c 	.word	0x5802541c
 800250c:	58025430 	.word	0x58025430
 8002510:	58025444 	.word	0x58025444
 8002514:	58025458 	.word	0x58025458
 8002518:	5802546c 	.word	0x5802546c
 800251c:	58025480 	.word	0x58025480
 8002520:	58025494 	.word	0x58025494

08002524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e237      	b.n	80029a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d004      	beq.n	800254c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e22c      	b.n	80029a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5c      	ldr	r2, [pc, #368]	@ (80026c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d04a      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5b      	ldr	r2, [pc, #364]	@ (80026c8 <HAL_DMA_Abort_IT+0x1a4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d045      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a59      	ldr	r2, [pc, #356]	@ (80026cc <HAL_DMA_Abort_IT+0x1a8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d040      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a58      	ldr	r2, [pc, #352]	@ (80026d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d03b      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a56      	ldr	r2, [pc, #344]	@ (80026d4 <HAL_DMA_Abort_IT+0x1b0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d036      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a55      	ldr	r2, [pc, #340]	@ (80026d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d031      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a53      	ldr	r2, [pc, #332]	@ (80026dc <HAL_DMA_Abort_IT+0x1b8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02c      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_DMA_Abort_IT+0x1bc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d027      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a50      	ldr	r2, [pc, #320]	@ (80026e4 <HAL_DMA_Abort_IT+0x1c0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d022      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_DMA_Abort_IT+0x1c4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d01d      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a4d      	ldr	r2, [pc, #308]	@ (80026ec <HAL_DMA_Abort_IT+0x1c8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d018      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <HAL_DMA_Abort_IT+0x1cc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d013      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4a      	ldr	r2, [pc, #296]	@ (80026f4 <HAL_DMA_Abort_IT+0x1d0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00e      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a49      	ldr	r2, [pc, #292]	@ (80026f8 <HAL_DMA_Abort_IT+0x1d4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d009      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a47      	ldr	r2, [pc, #284]	@ (80026fc <HAL_DMA_Abort_IT+0x1d8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d004      	beq.n	80025ec <HAL_DMA_Abort_IT+0xc8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a46      	ldr	r2, [pc, #280]	@ (8002700 <HAL_DMA_Abort_IT+0x1dc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Abort_IT+0xcc>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_DMA_Abort_IT+0xce>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8086 	beq.w	8002704 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2204      	movs	r2, #4
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2f      	ldr	r2, [pc, #188]	@ (80026c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d04a      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2e      	ldr	r2, [pc, #184]	@ (80026c8 <HAL_DMA_Abort_IT+0x1a4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d045      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2c      	ldr	r2, [pc, #176]	@ (80026cc <HAL_DMA_Abort_IT+0x1a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d040      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2b      	ldr	r2, [pc, #172]	@ (80026d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d03b      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a29      	ldr	r2, [pc, #164]	@ (80026d4 <HAL_DMA_Abort_IT+0x1b0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d036      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a28      	ldr	r2, [pc, #160]	@ (80026d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a26      	ldr	r2, [pc, #152]	@ (80026dc <HAL_DMA_Abort_IT+0x1b8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02c      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a25      	ldr	r2, [pc, #148]	@ (80026e0 <HAL_DMA_Abort_IT+0x1bc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d027      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <HAL_DMA_Abort_IT+0x1c0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d022      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <HAL_DMA_Abort_IT+0x1c4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01d      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a20      	ldr	r2, [pc, #128]	@ (80026ec <HAL_DMA_Abort_IT+0x1c8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d018      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1f      	ldr	r2, [pc, #124]	@ (80026f0 <HAL_DMA_Abort_IT+0x1cc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <HAL_DMA_Abort_IT+0x1d0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00e      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1c      	ldr	r2, [pc, #112]	@ (80026f8 <HAL_DMA_Abort_IT+0x1d4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_DMA_Abort_IT+0x1d8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x17c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a19      	ldr	r2, [pc, #100]	@ (8002700 <HAL_DMA_Abort_IT+0x1dc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <HAL_DMA_Abort_IT+0x18e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e178      	b.n	80029a4 <HAL_DMA_Abort_IT+0x480>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e16f      	b.n	80029a4 <HAL_DMA_Abort_IT+0x480>
 80026c4:	40020010 	.word	0x40020010
 80026c8:	40020028 	.word	0x40020028
 80026cc:	40020040 	.word	0x40020040
 80026d0:	40020058 	.word	0x40020058
 80026d4:	40020070 	.word	0x40020070
 80026d8:	40020088 	.word	0x40020088
 80026dc:	400200a0 	.word	0x400200a0
 80026e0:	400200b8 	.word	0x400200b8
 80026e4:	40020410 	.word	0x40020410
 80026e8:	40020428 	.word	0x40020428
 80026ec:	40020440 	.word	0x40020440
 80026f0:	40020458 	.word	0x40020458
 80026f4:	40020470 	.word	0x40020470
 80026f8:	40020488 	.word	0x40020488
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020e 	bic.w	r2, r2, #14
 8002712:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6c      	ldr	r2, [pc, #432]	@ (80028cc <HAL_DMA_Abort_IT+0x3a8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d04a      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6b      	ldr	r2, [pc, #428]	@ (80028d0 <HAL_DMA_Abort_IT+0x3ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d045      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a69      	ldr	r2, [pc, #420]	@ (80028d4 <HAL_DMA_Abort_IT+0x3b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d040      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a68      	ldr	r2, [pc, #416]	@ (80028d8 <HAL_DMA_Abort_IT+0x3b4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d03b      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a66      	ldr	r2, [pc, #408]	@ (80028dc <HAL_DMA_Abort_IT+0x3b8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d036      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_DMA_Abort_IT+0x3bc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d031      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a63      	ldr	r2, [pc, #396]	@ (80028e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d02c      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a62      	ldr	r2, [pc, #392]	@ (80028e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d027      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a60      	ldr	r2, [pc, #384]	@ (80028ec <HAL_DMA_Abort_IT+0x3c8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d022      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5f      	ldr	r2, [pc, #380]	@ (80028f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d01d      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5d      	ldr	r2, [pc, #372]	@ (80028f4 <HAL_DMA_Abort_IT+0x3d0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d018      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5c      	ldr	r2, [pc, #368]	@ (80028f8 <HAL_DMA_Abort_IT+0x3d4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5a      	ldr	r2, [pc, #360]	@ (80028fc <HAL_DMA_Abort_IT+0x3d8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00e      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a59      	ldr	r2, [pc, #356]	@ (8002900 <HAL_DMA_Abort_IT+0x3dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a57      	ldr	r2, [pc, #348]	@ (8002904 <HAL_DMA_Abort_IT+0x3e0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x290>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a56      	ldr	r2, [pc, #344]	@ (8002908 <HAL_DMA_Abort_IT+0x3e4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <HAL_DMA_Abort_IT+0x2a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e007      	b.n	80027d6 <HAL_DMA_Abort_IT+0x2b2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3c      	ldr	r2, [pc, #240]	@ (80028cc <HAL_DMA_Abort_IT+0x3a8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d072      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3a      	ldr	r2, [pc, #232]	@ (80028d0 <HAL_DMA_Abort_IT+0x3ac>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d06d      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_DMA_Abort_IT+0x3b0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d068      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a37      	ldr	r2, [pc, #220]	@ (80028d8 <HAL_DMA_Abort_IT+0x3b4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d063      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a36      	ldr	r2, [pc, #216]	@ (80028dc <HAL_DMA_Abort_IT+0x3b8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d05e      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a34      	ldr	r2, [pc, #208]	@ (80028e0 <HAL_DMA_Abort_IT+0x3bc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d059      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a33      	ldr	r2, [pc, #204]	@ (80028e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d054      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a31      	ldr	r2, [pc, #196]	@ (80028e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d04f      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a30      	ldr	r2, [pc, #192]	@ (80028ec <HAL_DMA_Abort_IT+0x3c8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04a      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2e      	ldr	r2, [pc, #184]	@ (80028f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d045      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <HAL_DMA_Abort_IT+0x3d0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d040      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2b      	ldr	r2, [pc, #172]	@ (80028f8 <HAL_DMA_Abort_IT+0x3d4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d03b      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2a      	ldr	r2, [pc, #168]	@ (80028fc <HAL_DMA_Abort_IT+0x3d8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d036      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a28      	ldr	r2, [pc, #160]	@ (8002900 <HAL_DMA_Abort_IT+0x3dc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <HAL_DMA_Abort_IT+0x3e0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d02c      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a25      	ldr	r2, [pc, #148]	@ (8002908 <HAL_DMA_Abort_IT+0x3e4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d027      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a24      	ldr	r2, [pc, #144]	@ (800290c <HAL_DMA_Abort_IT+0x3e8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a22      	ldr	r2, [pc, #136]	@ (8002910 <HAL_DMA_Abort_IT+0x3ec>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01d      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a21      	ldr	r2, [pc, #132]	@ (8002914 <HAL_DMA_Abort_IT+0x3f0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d018      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1f      	ldr	r2, [pc, #124]	@ (8002918 <HAL_DMA_Abort_IT+0x3f4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <HAL_DMA_Abort_IT+0x3f8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002920 <HAL_DMA_Abort_IT+0x3fc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002924 <HAL_DMA_Abort_IT+0x400>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x3a2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a19      	ldr	r2, [pc, #100]	@ (8002928 <HAL_DMA_Abort_IT+0x404>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d132      	bne.n	800292c <HAL_DMA_Abort_IT+0x408>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e031      	b.n	800292e <HAL_DMA_Abort_IT+0x40a>
 80028ca:	bf00      	nop
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8
 800290c:	58025408 	.word	0x58025408
 8002910:	5802541c 	.word	0x5802541c
 8002914:	58025430 	.word	0x58025430
 8002918:	58025444 	.word	0x58025444
 800291c:	58025458 	.word	0x58025458
 8002920:	5802546c 	.word	0x5802546c
 8002924:	58025480 	.word	0x58025480
 8002928:	58025494 	.word	0x58025494
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002940:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002960:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002978:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002982:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop

080029b0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d165      	bne.n	8002a8e <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2204      	movs	r2, #4
 80029d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8d6 	bl	8002b88 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029f4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a10:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002a28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a2c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0202 	orr.w	r2, r2, #2
 8002a52:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6c:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a7e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2240      	movs	r2, #64	@ 0x40
 8002a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d165      	bne.n	8002b76 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aba:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b30      	ldr	r3, [pc, #192]	@ (8002b84 <HAL_ETH_Stop_IT+0xec>)
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002aca:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ae6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b02:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0202 	bic.w	r2, r2, #2
 8002b38:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e00e      	b.n	8002b5e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	3212      	adds	r2, #18
 8002b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d9ed      	bls.n	8002b40 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	ffff2f3e 	.word	0xffff2f3e

08002b88 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002b94:	2301      	movs	r3, #1
 8002b96:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	3212      	adds	r2, #18
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002bb0:	e038      	b.n	8002c24 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 fe9e 	bl	8009900 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	74fb      	strb	r3, [r7, #19]
 8002bce:	e007      	b.n	8002be0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01e      	beq.n	8002c24 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e003      	b.n	8002c00 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002bfe:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d902      	bls.n	8002c12 <ETH_UpdateDescriptor+0x8a>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	3212      	adds	r2, #18
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <ETH_UpdateDescriptor+0xa8>
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1c0      	bne.n	8002bb2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d01b      	beq.n	8002c72 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3303      	adds	r3, #3
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c44:	f3bf 8f5f 	dmb	sy
}
 8002c48:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6919      	ldr	r1, [r3, #16]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	18ca      	adds	r2, r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c62:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002c72:	bf00      	nop
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c8c:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c96:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002c9a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ca8:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002caa:	4b6d      	ldr	r3, [pc, #436]	@ (8002e60 <HAL_ETH_IRQHandler+0x1e4>)
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_ETH_IRQHandler+0x60>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002cd2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f006 fd24 	bl	8009724 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_ETH_IRQHandler+0x8c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002cfe:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f006 fd1e 	bl	8009744 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d047      	beq.n	8002da2 <HAL_ETH_IRQHandler+0x126>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d042      	beq.n	8002da2 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d22:	f043 0208 	orr.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01e      	beq.n	8002d74 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002d42:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d66:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	22e0      	movs	r2, #224	@ 0xe0
 8002d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002d72:	e013      	b.n	8002d9c <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d7c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002d80:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002d98:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f006 fce1 	bl	8009764 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d019      	beq.n	8002dea <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f043 0210 	orr.w	r2, r3, #16
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	22e0      	movs	r2, #224	@ 0xe0
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f006 fcc1 	bl	8009764 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00f      	beq.n	8002e14 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dfc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f82c 	bl	8002e64 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00f      	beq.n	8002e3e <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f821 	bl	8002e78 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_ETH_IRQHandler+0x1e4>)
 8002e4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f81b 	bl	8002e8c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	58000080 	.word	0x58000080

08002e64 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e1c3      	b.n	800323c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800302e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80030c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0e5b      	lsrs	r3, r3, #25
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b29a      	uxth	r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80031c8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80031d8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e00b      	b.n	8003274 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003262:	2b10      	cmp	r3, #16
 8003264:	d105      	bne.n	8003272 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f815 	bl	8003298 <ETH_SetMACConfig>

    return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e000      	b.n	8003274 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80032aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	791b      	ldrb	r3, [r3, #4]
 80032b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80032b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
 80032b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	7b5b      	ldrb	r3, [r3, #13]
 80032c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80032c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	7b9b      	ldrb	r3, [r3, #14]
 80032c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80032ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	7bdb      	ldrb	r3, [r3, #15]
 80032d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80032d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	7c12      	ldrb	r2, [r2, #16]
 80032d8:	2a00      	cmp	r2, #0
 80032da:	d102      	bne.n	80032e2 <ETH_SetMACConfig+0x4a>
 80032dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80032e0:	e000      	b.n	80032e4 <ETH_SetMACConfig+0x4c>
 80032e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80032e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	7c52      	ldrb	r2, [r2, #17]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d102      	bne.n	80032f4 <ETH_SetMACConfig+0x5c>
 80032ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032f2:	e000      	b.n	80032f6 <ETH_SetMACConfig+0x5e>
 80032f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80032f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	7c9b      	ldrb	r3, [r3, #18]
 80032fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80032fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003304:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800330a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7f1b      	ldrb	r3, [r3, #28]
 8003310:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	7f5b      	ldrb	r3, [r3, #29]
 8003318:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800331a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	7f92      	ldrb	r2, [r2, #30]
 8003320:	2a00      	cmp	r2, #0
 8003322:	d102      	bne.n	800332a <ETH_SetMACConfig+0x92>
 8003324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003328:	e000      	b.n	800332c <ETH_SetMACConfig+0x94>
 800332a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800332c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	7fdb      	ldrb	r3, [r3, #31]
 8003332:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003334:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	f892 2020 	ldrb.w	r2, [r2, #32]
 800333c:	2a00      	cmp	r2, #0
 800333e:	d102      	bne.n	8003346 <ETH_SetMACConfig+0xae>
 8003340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003344:	e000      	b.n	8003348 <ETH_SetMACConfig+0xb0>
 8003346:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003348:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800334e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003356:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003358:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b56      	ldr	r3, [pc, #344]	@ (80034c4 <ETH_SetMACConfig+0x22c>)
 800336a:	4013      	ands	r3, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	430b      	orrs	r3, r1
 8003374:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003382:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003384:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800338c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800338e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003396:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003398:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	d102      	bne.n	80033aa <ETH_SetMACConfig+0x112>
 80033a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033a8:	e000      	b.n	80033ac <ETH_SetMACConfig+0x114>
 80033aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4b42      	ldr	r3, [pc, #264]	@ (80034c8 <ETH_SetMACConfig+0x230>)
 80033be:	4013      	ands	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4b3a      	ldr	r3, [pc, #232]	@ (80034cc <ETH_SetMACConfig+0x234>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	430b      	orrs	r3, r1
 80033ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80033fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003402:	2a00      	cmp	r2, #0
 8003404:	d101      	bne.n	800340a <ETH_SetMACConfig+0x172>
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	e000      	b.n	800340c <ETH_SetMACConfig+0x174>
 800340a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800340c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003412:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	430b      	orrs	r3, r1
 800342c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003434:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800343c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	f023 0103 	bic.w	r1, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	430a      	orrs	r2, r1
 8003456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003462:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800347e:	2a00      	cmp	r2, #0
 8003480:	d101      	bne.n	8003486 <ETH_SetMACConfig+0x1ee>
 8003482:	2240      	movs	r2, #64	@ 0x40
 8003484:	e000      	b.n	8003488 <ETH_SetMACConfig+0x1f0>
 8003486:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003488:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003490:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800349a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80034a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	00048083 	.word	0x00048083
 80034c8:	c0f88000 	.word	0xc0f88000
 80034cc:	fffffef0 	.word	0xfffffef0

080034d0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	460b      	mov	r3, r1
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e00a      	b.n	8003502 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80034ec:	7afb      	ldrb	r3, [r7, #11]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d103      	bne.n	80034fa <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	605a      	str	r2, [r3, #4]
      break;
 80034f8:	e002      	b.n	8003500 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      break;
 80034fe:	bf00      	nop
  }

  return status;
 8003500:	7dfb      	ldrb	r3, [r7, #23]
}
 8003502:	4618      	mov	r0, r3
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e003      	b.n	800352a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2201      	movs	r2, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	011a      	lsls	r2, r3, #4
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <HAL_EXTI_IRQHandler+0x5c>)
 8003562:	4413      	add	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4798      	blx	r3
    }
  }
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	58000088 	.word	0x58000088

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	@ 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_GPIO_Init+0x234>)
 80035a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035aa:	e194      	b.n	80038d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8186 	beq.w	80038d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d005      	beq.n	80035dc <HAL_GPIO_Init+0x44>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d130      	bne.n	800363e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003612:	2201      	movs	r2, #1
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 0201 	and.w	r2, r3, #1
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d017      	beq.n	800367a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d123      	bne.n	80036ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	08da      	lsrs	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3208      	adds	r2, #8
 800368e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0203 	and.w	r2, r3, #3
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80e0 	beq.w	80038d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003710:	4b2f      	ldr	r3, [pc, #188]	@ (80037d0 <HAL_GPIO_Init+0x238>)
 8003712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003716:	4a2e      	ldr	r2, [pc, #184]	@ (80037d0 <HAL_GPIO_Init+0x238>)
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003720:	4b2b      	ldr	r3, [pc, #172]	@ (80037d0 <HAL_GPIO_Init+0x238>)
 8003722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372e:	4a29      	ldr	r2, [pc, #164]	@ (80037d4 <HAL_GPIO_Init+0x23c>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a20      	ldr	r2, [pc, #128]	@ (80037d8 <HAL_GPIO_Init+0x240>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d052      	beq.n	8003800 <HAL_GPIO_Init+0x268>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1f      	ldr	r2, [pc, #124]	@ (80037dc <HAL_GPIO_Init+0x244>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <HAL_GPIO_Init+0x22e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1e      	ldr	r2, [pc, #120]	@ (80037e0 <HAL_GPIO_Init+0x248>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02b      	beq.n	80037c2 <HAL_GPIO_Init+0x22a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <HAL_GPIO_Init+0x24c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d025      	beq.n	80037be <HAL_GPIO_Init+0x226>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <HAL_GPIO_Init+0x250>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01f      	beq.n	80037ba <HAL_GPIO_Init+0x222>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ec <HAL_GPIO_Init+0x254>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d019      	beq.n	80037b6 <HAL_GPIO_Init+0x21e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1a      	ldr	r2, [pc, #104]	@ (80037f0 <HAL_GPIO_Init+0x258>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_GPIO_Init+0x21a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a19      	ldr	r2, [pc, #100]	@ (80037f4 <HAL_GPIO_Init+0x25c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00d      	beq.n	80037ae <HAL_GPIO_Init+0x216>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <HAL_GPIO_Init+0x260>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <HAL_GPIO_Init+0x212>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_GPIO_Init+0x264>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_GPIO_Init+0x20e>
 80037a2:	2309      	movs	r3, #9
 80037a4:	e02d      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037a6:	230a      	movs	r3, #10
 80037a8:	e02b      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037aa:	2308      	movs	r3, #8
 80037ac:	e029      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037ae:	2307      	movs	r3, #7
 80037b0:	e027      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037b2:	2306      	movs	r3, #6
 80037b4:	e025      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037b6:	2305      	movs	r3, #5
 80037b8:	e023      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037ba:	2304      	movs	r3, #4
 80037bc:	e021      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037be:	2303      	movs	r3, #3
 80037c0:	e01f      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e01d      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e01b      	b.n	8003802 <HAL_GPIO_Init+0x26a>
 80037ca:	bf00      	nop
 80037cc:	58000080 	.word	0x58000080
 80037d0:	58024400 	.word	0x58024400
 80037d4:	58000400 	.word	0x58000400
 80037d8:	58020000 	.word	0x58020000
 80037dc:	58020400 	.word	0x58020400
 80037e0:	58020800 	.word	0x58020800
 80037e4:	58020c00 	.word	0x58020c00
 80037e8:	58021000 	.word	0x58021000
 80037ec:	58021400 	.word	0x58021400
 80037f0:	58021800 	.word	0x58021800
 80037f4:	58021c00 	.word	0x58021c00
 80037f8:	58022000 	.word	0x58022000
 80037fc:	58022400 	.word	0x58022400
 8003800:	2300      	movs	r3, #0
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	f002 0203 	and.w	r2, r2, #3
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	4093      	lsls	r3, r2
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003812:	4938      	ldr	r1, [pc, #224]	@ (80038f4 <HAL_GPIO_Init+0x35c>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800384e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003874:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	3301      	adds	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f47f ae63 	bne.w	80035ac <HAL_GPIO_Init+0x14>
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3724      	adds	r7, #36	@ 0x24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	58000400 	.word	0x58000400

080038f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
 8003904:	4613      	mov	r3, r2
 8003906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003908:	787b      	ldrb	r3, [r7, #1]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390e:	887a      	ldrh	r2, [r7, #2]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003914:	e003      	b.n	800391e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	041a      	lsls	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	619a      	str	r2, [r3, #24]
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800393c:	887a      	ldrh	r2, [r7, #2]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4013      	ands	r3, r2
 8003942:	041a      	lsls	r2, r3, #16
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43d9      	mvns	r1, r3
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	400b      	ands	r3, r1
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	619a      	str	r2, [r3, #24]
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003968:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_PWREx_ConfigSupply+0x70>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d00a      	beq.n	800398a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e01f      	b.n	80039c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e01d      	b.n	80039c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800398a:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <HAL_PWREx_ConfigSupply+0x70>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	490f      	ldr	r1, [pc, #60]	@ (80039d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800399a:	f7fe f935 	bl	8001c08 <HAL_GetTick>
 800399e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039a0:	e009      	b.n	80039b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039a2:	f7fe f931 	bl	8001c08 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039b0:	d901      	bls.n	80039b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e007      	b.n	80039c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <HAL_PWREx_ConfigSupply+0x70>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039c2:	d1ee      	bne.n	80039a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	58024800 	.word	0x58024800

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	@ 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f000 bc48 	b.w	8004278 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8088 	beq.w	8003b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f6:	4b99      	ldr	r3, [pc, #612]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a00:	4b96      	ldr	r3, [pc, #600]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCC_OscConfig+0x48>
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	2b18      	cmp	r3, #24
 8003a10:	d111      	bne.n	8003a36 <HAL_RCC_OscConfig+0x62>
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d06d      	beq.n	8003b04 <HAL_RCC_OscConfig+0x130>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d169      	bne.n	8003b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f000 bc21 	b.w	8004278 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x7a>
 8003a40:	4b86      	ldr	r3, [pc, #536]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a85      	ldr	r2, [pc, #532]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	e02e      	b.n	8003aac <HAL_RCC_OscConfig+0xd8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x9c>
 8003a56:	4b81      	ldr	r3, [pc, #516]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a80      	ldr	r2, [pc, #512]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b7e      	ldr	r3, [pc, #504]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7d      	ldr	r2, [pc, #500]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e01d      	b.n	8003aac <HAL_RCC_OscConfig+0xd8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003a7a:	4b78      	ldr	r3, [pc, #480]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a77      	ldr	r2, [pc, #476]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b75      	ldr	r3, [pc, #468]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a74      	ldr	r2, [pc, #464]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0xd8>
 8003a94:	4b71      	ldr	r3, [pc, #452]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a70      	ldr	r2, [pc, #448]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f8a8 	bl	8001c08 <HAL_GetTick>
 8003ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe f8a4 	bl	8001c08 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e3d4      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ace:	4b63      	ldr	r3, [pc, #396]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe f894 	bl	8001c08 <HAL_GetTick>
 8003ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe f890 	bl	8001c08 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	@ 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e3c0      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003af6:	4b59      	ldr	r3, [pc, #356]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x110>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80ca 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b14:	4b51      	ldr	r3, [pc, #324]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_RCC_OscConfig+0x166>
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	2b18      	cmp	r3, #24
 8003b2e:	d156      	bne.n	8003bde <HAL_RCC_OscConfig+0x20a>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d151      	bne.n	8003bde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3a:	4b48      	ldr	r3, [pc, #288]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_RCC_OscConfig+0x17e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e392      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b52:	4b42      	ldr	r3, [pc, #264]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 0219 	bic.w	r2, r3, #25
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	493f      	ldr	r1, [pc, #252]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe f850 	bl	8001c08 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7fe f84c 	bl	8001c08 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e37c      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b7e:	4b37      	ldr	r3, [pc, #220]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8a:	f7fe f849 	bl	8001c20 <HAL_GetREVID>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d817      	bhi.n	8003bc8 <HAL_RCC_OscConfig+0x1f4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d108      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
 8003ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb0:	e07a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	031b      	lsls	r3, r3, #12
 8003bc0:	4926      	ldr	r1, [pc, #152]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc6:	e06f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b24      	ldr	r3, [pc, #144]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	4921      	ldr	r1, [pc, #132]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bdc:	e064      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d047      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003be6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 0219 	bic.w	r2, r3, #25
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	491a      	ldr	r1, [pc, #104]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe f806 	bl	8001c08 <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c00:	f7fe f802 	bl	8001c08 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e332      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	f7fd ffff 	bl	8001c20 <HAL_GetREVID>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d819      	bhi.n	8003c60 <HAL_RCC_OscConfig+0x28c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b40      	cmp	r3, #64	@ 0x40
 8003c32:	d108      	bne.n	8003c46 <HAL_RCC_OscConfig+0x272>
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c3c:	4a07      	ldr	r2, [pc, #28]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c42:	6053      	str	r3, [r2, #4]
 8003c44:	e030      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
 8003c46:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	031b      	lsls	r3, r3, #12
 8003c54:	4901      	ldr	r1, [pc, #4]	@ (8003c5c <HAL_RCC_OscConfig+0x288>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
 8003c5a:	e025      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	4b9a      	ldr	r3, [pc, #616]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	4997      	ldr	r1, [pc, #604]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
 8003c74:	e018      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b95      	ldr	r3, [pc, #596]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a94      	ldr	r2, [pc, #592]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fd ffc1 	bl	8001c08 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fd ffbd 	bl	8001c08 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e2ed      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c9c:	4b8b      	ldr	r3, [pc, #556]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80a9 	beq.w	8003e08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cc0:	4b82      	ldr	r3, [pc, #520]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d007      	beq.n	8003cdc <HAL_RCC_OscConfig+0x308>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b18      	cmp	r3, #24
 8003cd0:	d13a      	bne.n	8003d48 <HAL_RCC_OscConfig+0x374>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d135      	bne.n	8003d48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x320>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b80      	cmp	r3, #128	@ 0x80
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e2c1      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cf4:	f7fd ff94 	bl	8001c20 <HAL_GetREVID>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d817      	bhi.n	8003d32 <HAL_RCC_OscConfig+0x35e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d108      	bne.n	8003d1c <HAL_RCC_OscConfig+0x348>
 8003d0a:	4b70      	ldr	r3, [pc, #448]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d12:	4a6e      	ldr	r2, [pc, #440]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d1a:	e075      	b.n	8003e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	069b      	lsls	r3, r3, #26
 8003d2a:	4968      	ldr	r1, [pc, #416]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d30:	e06a      	b.n	8003e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d32:	4b66      	ldr	r3, [pc, #408]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	4962      	ldr	r1, [pc, #392]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d46:	e05f      	b.n	8003e08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d042      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d50:	4b5e      	ldr	r3, [pc, #376]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5d      	ldr	r2, [pc, #372]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd ff54 	bl	8001c08 <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d64:	f7fd ff50 	bl	8001c08 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e280      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d76:	4b55      	ldr	r3, [pc, #340]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d82:	f7fd ff4d 	bl	8001c20 <HAL_GetREVID>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d817      	bhi.n	8003dc0 <HAL_RCC_OscConfig+0x3ec>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d108      	bne.n	8003daa <HAL_RCC_OscConfig+0x3d6>
 8003d98:	4b4c      	ldr	r3, [pc, #304]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003da6:	6053      	str	r3, [r2, #4]
 8003da8:	e02e      	b.n	8003e08 <HAL_RCC_OscConfig+0x434>
 8003daa:	4b48      	ldr	r3, [pc, #288]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	069b      	lsls	r3, r3, #26
 8003db8:	4944      	ldr	r1, [pc, #272]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	e023      	b.n	8003e08 <HAL_RCC_OscConfig+0x434>
 8003dc0:	4b42      	ldr	r3, [pc, #264]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	493f      	ldr	r1, [pc, #252]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60cb      	str	r3, [r1, #12]
 8003dd4:	e018      	b.n	8003e08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3c      	ldr	r2, [pc, #240]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fd ff11 	bl	8001c08 <HAL_GetTick>
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dea:	f7fd ff0d 	bl	8001c08 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e23d      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dfc:	4b33      	ldr	r3, [pc, #204]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d036      	beq.n	8003e82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d019      	beq.n	8003e50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e20:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd feee 	bl	8001c08 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fd feea 	bl	8001c08 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e21a      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e42:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x45c>
 8003e4e:	e018      	b.n	8003e82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fed4 	bl	8001c08 <HAL_GetTick>
 8003e60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fd fed0 	bl	8001c08 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e200      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d039      	beq.n	8003f02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ea2:	f7fd feb1 	bl	8001c08 <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eaa:	f7fd fead 	bl	8001c08 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e1dd      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ebc:	4b03      	ldr	r3, [pc, #12]	@ (8003ecc <HAL_RCC_OscConfig+0x4f8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4d6>
 8003ec8:	e01b      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a9a      	ldr	r2, [pc, #616]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003ed6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003edc:	f7fd fe94 	bl	8001c08 <HAL_GetTick>
 8003ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee4:	f7fd fe90 	bl	8001c08 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1c0      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ef6:	4b92      	ldr	r3, [pc, #584]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8081 	beq.w	8004012 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f10:	4b8c      	ldr	r3, [pc, #560]	@ (8004144 <HAL_RCC_OscConfig+0x770>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a8b      	ldr	r2, [pc, #556]	@ (8004144 <HAL_RCC_OscConfig+0x770>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fe74 	bl	8001c08 <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f24:	f7fd fe70 	bl	8001c08 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	@ 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e1a0      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f36:	4b83      	ldr	r3, [pc, #524]	@ (8004144 <HAL_RCC_OscConfig+0x770>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d106      	bne.n	8003f58 <HAL_RCC_OscConfig+0x584>
 8003f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f56:	e02d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x5e0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCC_OscConfig+0x5a6>
 8003f60:	4b77      	ldr	r3, [pc, #476]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a76      	ldr	r2, [pc, #472]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	4b74      	ldr	r3, [pc, #464]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f70:	4a73      	ldr	r2, [pc, #460]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f72:	f023 0304 	bic.w	r3, r3, #4
 8003f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x5e0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x5c8>
 8003f82:	4b6f      	ldr	r3, [pc, #444]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a6e      	ldr	r2, [pc, #440]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	4a6b      	ldr	r2, [pc, #428]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x5e0>
 8003f9c:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a67      	ldr	r2, [pc, #412]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa8:	4b65      	ldr	r3, [pc, #404]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4a64      	ldr	r2, [pc, #400]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd fe24 	bl	8001c08 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd fe20 	bl	8001c08 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e14e      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fda:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x5f0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fe0e 	bl	8001c08 <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fe0a 	bl	8001c08 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e138      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004006:	4b4e      	ldr	r3, [pc, #312]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ee      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 812d 	beq.w	8004276 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800401c:	4b48      	ldr	r3, [pc, #288]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004024:	2b18      	cmp	r3, #24
 8004026:	f000 80bd 	beq.w	80041a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	2b02      	cmp	r3, #2
 8004030:	f040 809e 	bne.w	8004170 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004034:	4b42      	ldr	r3, [pc, #264]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a41      	ldr	r2, [pc, #260]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 800403a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fde2 	bl	8001c08 <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd fdde 	bl	8001c08 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e10e      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800405a:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004066:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800406a:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <HAL_RCC_OscConfig+0x774>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	430a      	orrs	r2, r1
 800407a:	4931      	ldr	r1, [pc, #196]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	3b01      	subs	r3, #1
 8004086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	3b01      	subs	r3, #1
 8004090:	025b      	lsls	r3, r3, #9
 8004092:	b29b      	uxth	r3, r3
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	3b01      	subs	r3, #1
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040b0:	4923      	ldr	r1, [pc, #140]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	4a21      	ldr	r2, [pc, #132]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c6:	4b21      	ldr	r3, [pc, #132]	@ (800414c <HAL_RCC_OscConfig+0x778>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040ce:	00d2      	lsls	r2, r2, #3
 80040d0:	491b      	ldr	r1, [pc, #108]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f023 020c 	bic.w	r2, r3, #12
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	4917      	ldr	r1, [pc, #92]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040e8:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f023 0202 	bic.w	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f4:	4912      	ldr	r1, [pc, #72]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040fa:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	4a10      	ldr	r2, [pc, #64]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004106:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	4a0d      	ldr	r2, [pc, #52]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 800410c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004112:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	4a0a      	ldr	r2, [pc, #40]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800411c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	4a07      	ldr	r2, [pc, #28]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_RCC_OscConfig+0x76c>)
 8004130:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fd fd67 	bl	8001c08 <HAL_GetTick>
 800413a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800413c:	e011      	b.n	8004162 <HAL_RCC_OscConfig+0x78e>
 800413e:	bf00      	nop
 8004140:	58024400 	.word	0x58024400
 8004144:	58024800 	.word	0x58024800
 8004148:	fffffc0c 	.word	0xfffffc0c
 800414c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004150:	f7fd fd5a 	bl	8001c08 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e08a      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004162:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x77c>
 800416e:	e082      	b.n	8004276 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b43      	ldr	r3, [pc, #268]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a42      	ldr	r2, [pc, #264]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800417a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fd44 	bl	8001c08 <HAL_GetTick>
 8004180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fd40 	bl	8001c08 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e070      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004196:	4b3a      	ldr	r3, [pc, #232]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x7b0>
 80041a2:	e068      	b.n	8004276 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041a4:	4b36      	ldr	r3, [pc, #216]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041aa:	4b35      	ldr	r3, [pc, #212]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d031      	beq.n	800421c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f003 0203 	and.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d12a      	bne.n	800421c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d122      	bne.n	800421c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d11a      	bne.n	800421c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0a5b      	lsrs	r3, r3, #9
 80041ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d111      	bne.n	800421c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d108      	bne.n	800421c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0e1b      	lsrs	r3, r3, #24
 800420e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004216:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e02b      	b.n	8004278 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004220:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004224:	08db      	lsrs	r3, r3, #3
 8004226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800422a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	429a      	cmp	r2, r3
 8004234:	d01f      	beq.n	8004276 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004236:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	4a11      	ldr	r2, [pc, #68]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004242:	f7fd fce1 	bl	8001c08 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004248:	bf00      	nop
 800424a:	f7fd fcdd 	bl	8001c08 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	4293      	cmp	r3, r2
 8004254:	d0f9      	beq.n	800424a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425a:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <HAL_RCC_OscConfig+0x8b0>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004262:	00d2      	lsls	r2, r2, #3
 8004264:	4906      	ldr	r1, [pc, #24]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004266:	4313      	orrs	r3, r2
 8004268:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800426a:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a04      	ldr	r2, [pc, #16]	@ (8004280 <HAL_RCC_OscConfig+0x8ac>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3730      	adds	r7, #48	@ 0x30
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	58024400 	.word	0x58024400
 8004284:	ffff0007 	.word	0xffff0007

08004288 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e19c      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b8a      	ldr	r3, [pc, #552]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b87      	ldr	r3, [pc, #540]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 020f 	bic.w	r2, r3, #15
 80042b2:	4985      	ldr	r1, [pc, #532]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b83      	ldr	r3, [pc, #524]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e184      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	4b7b      	ldr	r3, [pc, #492]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d908      	bls.n	80042fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e8:	4b78      	ldr	r3, [pc, #480]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4975      	ldr	r1, [pc, #468]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	4b70      	ldr	r3, [pc, #448]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d908      	bls.n	8004328 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004316:	4b6d      	ldr	r3, [pc, #436]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	496a      	ldr	r1, [pc, #424]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	4b64      	ldr	r3, [pc, #400]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004340:	429a      	cmp	r2, r3
 8004342:	d908      	bls.n	8004356 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004344:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	495e      	ldr	r1, [pc, #376]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004352:	4313      	orrs	r3, r2
 8004354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	4b59      	ldr	r3, [pc, #356]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800436e:	429a      	cmp	r2, r3
 8004370:	d908      	bls.n	8004384 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004372:	4b56      	ldr	r3, [pc, #344]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4953      	ldr	r1, [pc, #332]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004380:	4313      	orrs	r3, r2
 8004382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	4b4d      	ldr	r3, [pc, #308]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	429a      	cmp	r2, r3
 800439e:	d908      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a0:	4b4a      	ldr	r3, [pc, #296]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f023 020f 	bic.w	r2, r3, #15
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4947      	ldr	r1, [pc, #284]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d055      	beq.n	800446a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043be:	4b43      	ldr	r3, [pc, #268]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4940      	ldr	r1, [pc, #256]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043d8:	4b3c      	ldr	r3, [pc, #240]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d121      	bne.n	8004428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0f6      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043f0:	4b36      	ldr	r3, [pc, #216]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d115      	bne.n	8004428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0ea      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004408:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0de      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004418:	4b2c      	ldr	r3, [pc, #176]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0d6      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004428:	4b28      	ldr	r3, [pc, #160]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f023 0207 	bic.w	r2, r3, #7
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4925      	ldr	r1, [pc, #148]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443a:	f7fd fbe5 	bl	8001c08 <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004440:	e00a      	b.n	8004458 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004442:	f7fd fbe1 	bl	8001c08 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0be      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004458:	4b1c      	ldr	r3, [pc, #112]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	429a      	cmp	r2, r3
 8004468:	d1eb      	bne.n	8004442 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	429a      	cmp	r2, r3
 8004484:	d208      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004486:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f023 020f 	bic.w	r2, r3, #15
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	490e      	ldr	r1, [pc, #56]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004494:	4313      	orrs	r3, r2
 8004496:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d214      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	4906      	ldr	r1, [pc, #24]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b04      	ldr	r3, [pc, #16]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e086      	b.n	80045d6 <HAL_RCC_ClockConfig+0x34e>
 80044c8:	52002000 	.word	0x52002000
 80044cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	4b3f      	ldr	r3, [pc, #252]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d208      	bcs.n	80044fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044ec:	4b3c      	ldr	r3, [pc, #240]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	4939      	ldr	r1, [pc, #228]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	4b34      	ldr	r3, [pc, #208]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004516:	429a      	cmp	r2, r3
 8004518:	d208      	bcs.n	800452c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800451a:	4b31      	ldr	r3, [pc, #196]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	492e      	ldr	r1, [pc, #184]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 8004528:	4313      	orrs	r3, r2
 800452a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	4b28      	ldr	r3, [pc, #160]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004544:	429a      	cmp	r2, r3
 8004546:	d208      	bcs.n	800455a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004548:	4b25      	ldr	r3, [pc, #148]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4922      	ldr	r1, [pc, #136]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 8004556:	4313      	orrs	r3, r2
 8004558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004572:	429a      	cmp	r2, r3
 8004574:	d208      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004576:	4b1a      	ldr	r3, [pc, #104]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	4917      	ldr	r1, [pc, #92]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 8004584:	4313      	orrs	r3, r2
 8004586:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004588:	f000 f834 	bl	80045f4 <HAL_RCC_GetSysClockFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	4912      	ldr	r1, [pc, #72]	@ (80045e4 <HAL_RCC_ClockConfig+0x35c>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
 80045a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <HAL_RCC_ClockConfig+0x358>)
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	4a0d      	ldr	r2, [pc, #52]	@ (80045e4 <HAL_RCC_ClockConfig+0x35c>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
 80045bc:	4a0a      	ldr	r2, [pc, #40]	@ (80045e8 <HAL_RCC_ClockConfig+0x360>)
 80045be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045c0:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <HAL_RCC_ClockConfig+0x364>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <HAL_RCC_ClockConfig+0x368>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc fbf4 	bl	8000db8 <HAL_InitTick>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	58024400 	.word	0x58024400
 80045e4:	0801d378 	.word	0x0801d378
 80045e8:	24000004 	.word	0x24000004
 80045ec:	24000000 	.word	0x24000000
 80045f0:	24000020 	.word	0x24000020

080045f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b089      	sub	sp, #36	@ 0x24
 80045f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045fa:	4bb3      	ldr	r3, [pc, #716]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004602:	2b18      	cmp	r3, #24
 8004604:	f200 8155 	bhi.w	80048b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <HAL_RCC_GetSysClockFreq+0x1c>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004675 	.word	0x08004675
 8004614:	080048b3 	.word	0x080048b3
 8004618:	080048b3 	.word	0x080048b3
 800461c:	080048b3 	.word	0x080048b3
 8004620:	080048b3 	.word	0x080048b3
 8004624:	080048b3 	.word	0x080048b3
 8004628:	080048b3 	.word	0x080048b3
 800462c:	080048b3 	.word	0x080048b3
 8004630:	0800469b 	.word	0x0800469b
 8004634:	080048b3 	.word	0x080048b3
 8004638:	080048b3 	.word	0x080048b3
 800463c:	080048b3 	.word	0x080048b3
 8004640:	080048b3 	.word	0x080048b3
 8004644:	080048b3 	.word	0x080048b3
 8004648:	080048b3 	.word	0x080048b3
 800464c:	080048b3 	.word	0x080048b3
 8004650:	080046a1 	.word	0x080046a1
 8004654:	080048b3 	.word	0x080048b3
 8004658:	080048b3 	.word	0x080048b3
 800465c:	080048b3 	.word	0x080048b3
 8004660:	080048b3 	.word	0x080048b3
 8004664:	080048b3 	.word	0x080048b3
 8004668:	080048b3 	.word	0x080048b3
 800466c:	080048b3 	.word	0x080048b3
 8004670:	080046a7 	.word	0x080046a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004674:	4b94      	ldr	r3, [pc, #592]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d009      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004680:	4b91      	ldr	r3, [pc, #580]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	4a90      	ldr	r2, [pc, #576]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004692:	e111      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004694:	4b8d      	ldr	r3, [pc, #564]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004696:	61bb      	str	r3, [r7, #24]
      break;
 8004698:	e10e      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800469a:	4b8d      	ldr	r3, [pc, #564]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800469c:	61bb      	str	r3, [r7, #24]
      break;
 800469e:	e10b      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046a0:	4b8c      	ldr	r3, [pc, #560]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046a2:	61bb      	str	r3, [r7, #24]
      break;
 80046a4:	e108      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046a6:	4b88      	ldr	r3, [pc, #544]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046b0:	4b85      	ldr	r3, [pc, #532]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046bc:	4b82      	ldr	r3, [pc, #520]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046c6:	4b80      	ldr	r3, [pc, #512]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ca:	08db      	lsrs	r3, r3, #3
 80046cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80e1 	beq.w	80048ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	f000 8083 	beq.w	80047f8 <HAL_RCC_GetSysClockFreq+0x204>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	f200 80a1 	bhi.w	800483c <HAL_RCC_GetSysClockFreq+0x248>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x114>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d056      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004706:	e099      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004708:	4b6f      	ldr	r3, [pc, #444]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02d      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004714:	4b6c      	ldr	r3, [pc, #432]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	08db      	lsrs	r3, r3, #3
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	4a6b      	ldr	r2, [pc, #428]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473e:	4b62      	ldr	r3, [pc, #392]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004752:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800476e:	e087      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80048dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b51      	ldr	r3, [pc, #324]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a02 	vldr	s12, [r7, #8]
 8004796:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047b2:	e065      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80048e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b40      	ldr	r3, [pc, #256]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047f6:	e043      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80048e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b2f      	ldr	r3, [pc, #188]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a02 	vldr	s12, [r7, #8]
 800481e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800483a:	e021      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80048e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004862:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800487e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	0a5b      	lsrs	r3, r3, #9
 8004886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488a:	3301      	adds	r3, #1
 800488c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004898:	edd7 6a07 	vldr	s13, [r7, #28]
 800489c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a4:	ee17 3a90 	vmov	r3, s15
 80048a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048aa:	e005      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]
      break;
 80048b0:	e002      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048b2:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048b4:	61bb      	str	r3, [r7, #24]
      break;
 80048b6:	bf00      	nop
  }

  return sysclockfreq;
 80048b8:	69bb      	ldr	r3, [r7, #24]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	@ 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	03d09000 	.word	0x03d09000
 80048d0:	003d0900 	.word	0x003d0900
 80048d4:	017d7840 	.word	0x017d7840
 80048d8:	46000000 	.word	0x46000000
 80048dc:	4c742400 	.word	0x4c742400
 80048e0:	4a742400 	.word	0x4a742400
 80048e4:	4bbebc20 	.word	0x4bbebc20

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048ee:	f7ff fe81 	bl	80045f4 <HAL_RCC_GetSysClockFreq>
 80048f2:	4602      	mov	r2, r0
 80048f4:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <HAL_RCC_GetHCLKFreq+0x50>)
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	0a1b      	lsrs	r3, r3, #8
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	490f      	ldr	r1, [pc, #60]	@ (800493c <HAL_RCC_GetHCLKFreq+0x54>)
 8004900:	5ccb      	ldrb	r3, [r1, r3]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <HAL_RCC_GetHCLKFreq+0x50>)
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	4a09      	ldr	r2, [pc, #36]	@ (800493c <HAL_RCC_GetHCLKFreq+0x54>)
 8004916:	5cd3      	ldrb	r3, [r2, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	fa22 f303 	lsr.w	r3, r2, r3
 8004922:	4a07      	ldr	r2, [pc, #28]	@ (8004940 <HAL_RCC_GetHCLKFreq+0x58>)
 8004924:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004926:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800492c:	4b04      	ldr	r3, [pc, #16]	@ (8004940 <HAL_RCC_GetHCLKFreq+0x58>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	58024400 	.word	0x58024400
 800493c:	0801d378 	.word	0x0801d378
 8004940:	24000004 	.word	0x24000004
 8004944:	24000000 	.word	0x24000000

08004948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800494c:	f7ff ffcc 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b06      	ldr	r3, [pc, #24]	@ (800496c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4904      	ldr	r1, [pc, #16]	@ (8004970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	58024400 	.word	0x58024400
 8004970:	0801d378 	.word	0x0801d378

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004978:	f7ff ffb6 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4904      	ldr	r1, [pc, #16]	@ (800499c <HAL_RCC_GetPCLK2Freq+0x28>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	58024400 	.word	0x58024400
 800499c:	0801d378 	.word	0x0801d378

080049a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	223f      	movs	r2, #63	@ 0x3f
 80049ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049b0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0207 	and.w	r2, r3, #7
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80049bc:	4b17      	ldr	r3, [pc, #92]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80049d4:	4b11      	ldr	r3, [pc, #68]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80049e0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80049f8:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HAL_RCC_GetClockConfig+0x7c>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCC_GetClockConfig+0x80>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	58024400 	.word	0x58024400
 8004a20:	52002000 	.word	0x52002000

08004a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b0ca      	sub	sp, #296	@ 0x128
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a48:	2500      	movs	r5, #0
 8004a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a4e:	d049      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a5a:	d02f      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a60:	d828      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a66:	d01a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a6c:	d822      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a76:	d007      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a7a:	4bb8      	ldr	r3, [pc, #736]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a86:	e01a      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	2102      	movs	r1, #2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 fc8f 	bl	80063b4 <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a9c:	e00f      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	3328      	adds	r3, #40	@ 0x28
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f001 fd36 	bl	8006518 <RCCEx_PLL3_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ada:	e003      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004af0:	f04f 0900 	mov.w	r9, #0
 8004af4:	ea58 0309 	orrs.w	r3, r8, r9
 8004af8:	d047      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d82a      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b21 	.word	0x08004b21
 8004b10:	08004b2f 	.word	0x08004b2f
 8004b14:	08004b45 	.word	0x08004b45
 8004b18:	08004b63 	.word	0x08004b63
 8004b1c:	08004b63 	.word	0x08004b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b20:	4b8e      	ldr	r3, [pc, #568]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	4a8d      	ldr	r2, [pc, #564]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b2c:	e01a      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	3308      	adds	r3, #8
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fc3c 	bl	80063b4 <RCCEx_PLL2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b42:	e00f      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	3328      	adds	r3, #40	@ 0x28
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fce3 	bl	8006518 <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b58:	e004      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	f023 0107 	bic.w	r1, r3, #7
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	4a78      	ldr	r2, [pc, #480]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004b96:	f04f 0b00 	mov.w	fp, #0
 8004b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b9e:	d04c      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004baa:	d030      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb0:	d829      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bb4:	d02d      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bb8:	d825      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bba:	2b80      	cmp	r3, #128	@ 0x80
 8004bbc:	d018      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004bbe:	2b80      	cmp	r3, #128	@ 0x80
 8004bc0:	d821      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004bc6:	2b40      	cmp	r3, #64	@ 0x40
 8004bc8:	d007      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004bca:	e01c      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bcc:	4b63      	ldr	r3, [pc, #396]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd0:	4a62      	ldr	r2, [pc, #392]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bd8:	e01c      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bde:	3308      	adds	r3, #8
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fbe6 	bl	80063b4 <RCCEx_PLL2_Config>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bee:	e011      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	3328      	adds	r3, #40	@ 0x28
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fc8d 	bl	8006518 <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c04:	e006      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c30:	e003      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004c50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d053      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c66:	d035      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c6c:	d82e      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c72:	d031      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c78:	d828      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c7e:	d01a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c84:	d822      	bhi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c8e:	d007      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004c90:	e01c      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c92:	4b32      	ldr	r3, [pc, #200]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	4a31      	ldr	r2, [pc, #196]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c9e:	e01c      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fb83 	bl	80063b4 <RCCEx_PLL2_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cb4:	e011      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	3328      	adds	r3, #40	@ 0x28
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fc2a 	bl	8006518 <RCCEx_PLL3_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cca:	e006      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cd4:	bf00      	nop
 8004cd6:	e000      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cf8:	e003      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d12:	2300      	movs	r3, #0
 8004d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	d056      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d2e:	d038      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d34:	d831      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d3a:	d034      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d40:	d82b      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d46:	d01d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d4c:	d825      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d58:	e01f      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d60:	4ba2      	ldr	r3, [pc, #648]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	4aa1      	ldr	r2, [pc, #644]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d6c:	e01c      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	3308      	adds	r3, #8
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 fb1c 	bl	80063b4 <RCCEx_PLL2_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d82:	e011      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d88:	3328      	adds	r3, #40	@ 0x28
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 fbc3 	bl	8006518 <RCCEx_PLL3_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d98:	e006      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004da0:	e002      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004da2:	bf00      	nop
 8004da4:	e000      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004db0:	4b8e      	ldr	r3, [pc, #568]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc6:	e003      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004de0:	2300      	movs	r3, #0
 8004de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004de6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004dea:	460b      	mov	r3, r1
 8004dec:	4313      	orrs	r3, r2
 8004dee:	d03a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df6:	2b30      	cmp	r3, #48	@ 0x30
 8004df8:	d01f      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004dfa:	2b30      	cmp	r3, #48	@ 0x30
 8004dfc:	d819      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d00c      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d815      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d019      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d111      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0e:	4b77      	ldr	r3, [pc, #476]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	4a76      	ldr	r2, [pc, #472]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e1a:	e011      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	3308      	adds	r3, #8
 8004e22:	2102      	movs	r1, #2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fac5 	bl	80063b4 <RCCEx_PLL2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e48:	4b68      	ldr	r3, [pc, #416]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e56:	4a65      	ldr	r2, [pc, #404]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d051      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e90:	d035      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e96:	d82e      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e9c:	d031      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ea2:	d828      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eae:	d822      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb8:	d007      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004eba:	e01c      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 fa6e 	bl	80063b4 <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ede:	e011      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	3328      	adds	r3, #40	@ 0x28
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 fb15 	bl	8006518 <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ef4:	e006      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004efc:	e002      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f0c:	4b37      	ldr	r3, [pc, #220]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1a:	4a34      	ldr	r2, [pc, #208]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d056      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f54:	d033      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f5a:	d82c      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f60:	d02f      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f66:	d826      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f6c:	d02b      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f72:	d820      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f78:	d012      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f7e:	d81a      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d022      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f88:	d115      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	3308      	adds	r3, #8
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 fa0e 	bl	80063b4 <RCCEx_PLL2_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f9e:	e015      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	3328      	adds	r3, #40	@ 0x28
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 fab5 	bl	8006518 <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fbc:	e006      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fbe:	bf00      	nop
 8004fc0:	e004      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e002      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10d      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe2:	4a02      	ldr	r2, [pc, #8]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800500e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d055      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005024:	d033      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800502a:	d82c      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005030:	d02f      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005036:	d826      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800503c:	d02b      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800503e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005042:	d820      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005048:	d012      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800504a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800504e:	d81a      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d022      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005058:	d115      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	3308      	adds	r3, #8
 8005060:	2101      	movs	r1, #1
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f9a6 	bl	80063b4 <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800506e:	e015      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005074:	3328      	adds	r3, #40	@ 0x28
 8005076:	2101      	movs	r1, #1
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fa4d 	bl	8006518 <RCCEx_PLL3_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005084:	e00a      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800509a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050a4:	4ba3      	ldr	r3, [pc, #652]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050b4:	4a9f      	ldr	r2, [pc, #636]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ba:	e003      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d037      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ee:	d00e      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050f4:	d816      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d018      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80050fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050fe:	d111      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b8c      	ldr	r3, [pc, #560]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	4a8b      	ldr	r2, [pc, #556]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800510c:	e00f      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005112:	3308      	adds	r3, #8
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f94c 	bl	80063b4 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005122:	e004      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800512a:	e000      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800512c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005136:	4b7f      	ldr	r3, [pc, #508]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005144:	4a7b      	ldr	r2, [pc, #492]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6513      	str	r3, [r2, #80]	@ 0x50
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800516a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d039      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800517a:	2b03      	cmp	r3, #3
 800517c:	d81c      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051c1 	.word	0x080051c1
 8005188:	08005195 	.word	0x08005195
 800518c:	080051a3 	.word	0x080051a3
 8005190:	080051c1 	.word	0x080051c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005194:	4b67      	ldr	r3, [pc, #412]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	4a66      	ldr	r2, [pc, #408]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051a0:	e00f      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a6:	3308      	adds	r3, #8
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f902 	bl	80063b4 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051b6:	e004      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80051c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	f023 0103 	bic.w	r1, r3, #3
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d8:	4a56      	ldr	r2, [pc, #344]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051da:	430b      	orrs	r3, r1
 80051dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051de:	e003      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80051f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051f8:	2300      	movs	r3, #0
 80051fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005202:	460b      	mov	r3, r1
 8005204:	4313      	orrs	r3, r2
 8005206:	f000 809f 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800520a:	4b4b      	ldr	r3, [pc, #300]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4a      	ldr	r2, [pc, #296]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005216:	f7fc fcf7 	bl	8001c08 <HAL_GetTick>
 800521a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800521e:	e00b      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005220:	f7fc fcf2 	bl	8001c08 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b64      	cmp	r3, #100	@ 0x64
 800522e:	d903      	bls.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005236:	e005      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005238:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0ed      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005248:	2b00      	cmp	r3, #0
 800524a:	d179      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800524c:	4b39      	ldr	r3, [pc, #228]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800524e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005258:	4053      	eors	r3, r2
 800525a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d015      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005262:	4b34      	ldr	r3, [pc, #208]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800526a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800526e:	4b31      	ldr	r3, [pc, #196]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005272:	4a30      	ldr	r2, [pc, #192]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800527a:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527e:	4a2d      	ldr	r2, [pc, #180]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005286:	4a2b      	ldr	r2, [pc, #172]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800528c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800529a:	d118      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fc fcb4 	bl	8001c08 <HAL_GetTick>
 80052a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052a4:	e00d      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fc fcaf 	bl	8001c08 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052b0:	1ad2      	subs	r2, r2, r3
 80052b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d903      	bls.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80052c0:	e005      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0eb      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80052ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d129      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052e6:	d10e      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052f8:	091a      	lsrs	r2, r3, #4
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005300:	430b      	orrs	r3, r1
 8005302:	6113      	str	r3, [r2, #16]
 8005304:	e005      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	4a0a      	ldr	r2, [pc, #40]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800530c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005310:	6113      	str	r3, [r2, #16]
 8005312:	4b08      	ldr	r3, [pc, #32]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800531e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005322:	4a04      	ldr	r2, [pc, #16]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6713      	str	r3, [r2, #112]	@ 0x70
 8005328:	e00e      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800532a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005332:	e009      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005334:	58024400 	.word	0x58024400
 8005338:	58024800 	.word	0x58024800
 800533c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0301 	and.w	r3, r2, #1
 8005354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800535e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	f000 8089 	beq.w	800547c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005370:	2b28      	cmp	r3, #40	@ 0x28
 8005372:	d86b      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005374:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	08005455 	.word	0x08005455
 8005380:	0800544d 	.word	0x0800544d
 8005384:	0800544d 	.word	0x0800544d
 8005388:	0800544d 	.word	0x0800544d
 800538c:	0800544d 	.word	0x0800544d
 8005390:	0800544d 	.word	0x0800544d
 8005394:	0800544d 	.word	0x0800544d
 8005398:	0800544d 	.word	0x0800544d
 800539c:	08005421 	.word	0x08005421
 80053a0:	0800544d 	.word	0x0800544d
 80053a4:	0800544d 	.word	0x0800544d
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	0800544d 	.word	0x0800544d
 80053b0:	0800544d 	.word	0x0800544d
 80053b4:	0800544d 	.word	0x0800544d
 80053b8:	0800544d 	.word	0x0800544d
 80053bc:	08005437 	.word	0x08005437
 80053c0:	0800544d 	.word	0x0800544d
 80053c4:	0800544d 	.word	0x0800544d
 80053c8:	0800544d 	.word	0x0800544d
 80053cc:	0800544d 	.word	0x0800544d
 80053d0:	0800544d 	.word	0x0800544d
 80053d4:	0800544d 	.word	0x0800544d
 80053d8:	0800544d 	.word	0x0800544d
 80053dc:	08005455 	.word	0x08005455
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	0800544d 	.word	0x0800544d
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	08005455 	.word	0x08005455
 8005400:	0800544d 	.word	0x0800544d
 8005404:	0800544d 	.word	0x0800544d
 8005408:	0800544d 	.word	0x0800544d
 800540c:	0800544d 	.word	0x0800544d
 8005410:	0800544d 	.word	0x0800544d
 8005414:	0800544d 	.word	0x0800544d
 8005418:	0800544d 	.word	0x0800544d
 800541c:	08005455 	.word	0x08005455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005424:	3308      	adds	r3, #8
 8005426:	2101      	movs	r1, #1
 8005428:	4618      	mov	r0, r3
 800542a:	f000 ffc3 	bl	80063b4 <RCCEx_PLL2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005434:	e00f      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543a:	3328      	adds	r3, #40	@ 0x28
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f001 f86a 	bl	8006518 <RCCEx_PLL3_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800544a:	e004      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800545e:	4bbf      	ldr	r3, [pc, #764]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800546c:	4abb      	ldr	r2, [pc, #748]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800546e:	430b      	orrs	r3, r1
 8005470:	6553      	str	r3, [r2, #84]	@ 0x54
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f002 0302 	and.w	r3, r2, #2
 8005488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005496:	460b      	mov	r3, r1
 8005498:	4313      	orrs	r3, r2
 800549a:	d041      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d824      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054a6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	080054c5 	.word	0x080054c5
 80054b4:	080054db 	.word	0x080054db
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	080054f9 	.word	0x080054f9
 80054c0:	080054f9 	.word	0x080054f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	3308      	adds	r3, #8
 80054ca:	2101      	movs	r1, #1
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 ff71 	bl	80063b4 <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054d8:	e00f      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	3328      	adds	r3, #40	@ 0x28
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f818 	bl	8006518 <RCCEx_PLL3_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054ee:	e004      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005502:	4b96      	ldr	r3, [pc, #600]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	f023 0107 	bic.w	r1, r3, #7
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005510:	4a92      	ldr	r2, [pc, #584]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005512:	430b      	orrs	r3, r1
 8005514:	6553      	str	r3, [r2, #84]	@ 0x54
 8005516:	e003      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f002 0304 	and.w	r3, r2, #4
 800552c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800553a:	460b      	mov	r3, r1
 800553c:	4313      	orrs	r3, r2
 800553e:	d044      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005548:	2b05      	cmp	r3, #5
 800554a:	d825      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	080055a1 	.word	0x080055a1
 8005558:	0800556d 	.word	0x0800556d
 800555c:	08005583 	.word	0x08005583
 8005560:	080055a1 	.word	0x080055a1
 8005564:	080055a1 	.word	0x080055a1
 8005568:	080055a1 	.word	0x080055a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	3308      	adds	r3, #8
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f000 ff1d 	bl	80063b4 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005580:	e00f      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	3328      	adds	r3, #40	@ 0x28
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f000 ffc4 	bl	8006518 <RCCEx_PLL3_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005596:	e004      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055aa:	4b6c      	ldr	r3, [pc, #432]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ae:	f023 0107 	bic.w	r1, r3, #7
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ba:	4a68      	ldr	r2, [pc, #416]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055bc:	430b      	orrs	r3, r1
 80055be:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c0:	e003      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f002 0320 	and.w	r3, r2, #32
 80055d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055e4:	460b      	mov	r3, r1
 80055e6:	4313      	orrs	r3, r2
 80055e8:	d055      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055f6:	d033      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80055f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055fc:	d82c      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005602:	d02f      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005608:	d826      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800560a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800560e:	d02b      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005614:	d820      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800561a:	d012      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800561c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005620:	d81a      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d022      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800562a:	d115      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005630:	3308      	adds	r3, #8
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 febd 	bl	80063b4 <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005640:	e015      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005646:	3328      	adds	r3, #40	@ 0x28
 8005648:	2102      	movs	r1, #2
 800564a:	4618      	mov	r0, r3
 800564c:	f000 ff64 	bl	8006518 <RCCEx_PLL3_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005656:	e00a      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800565e:	e006      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005660:	bf00      	nop
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005676:	4b39      	ldr	r3, [pc, #228]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	4a35      	ldr	r2, [pc, #212]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6553      	str	r3, [r2, #84]	@ 0x54
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056a6:	2300      	movs	r3, #0
 80056a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	d058      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056c2:	d033      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80056c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056c8:	d82c      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ce:	d02f      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d4:	d826      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056da:	d02b      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80056dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056e0:	d820      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e6:	d012      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d81a      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d022      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f6:	d115      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fc:	3308      	adds	r3, #8
 80056fe:	2100      	movs	r1, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fe57 	bl	80063b4 <RCCEx_PLL2_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800570c:	e015      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005712:	3328      	adds	r3, #40	@ 0x28
 8005714:	2102      	movs	r1, #2
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fefe 	bl	8006518 <RCCEx_PLL3_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005722:	e00a      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800572a:	e006      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800572c:	bf00      	nop
 800572e:	e004      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005730:	bf00      	nop
 8005732:	e002      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005734:	bf00      	nop
 8005736:	e000      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10e      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005742:	4b06      	ldr	r3, [pc, #24]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005752:	4a02      	ldr	r2, [pc, #8]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005754:	430b      	orrs	r3, r1
 8005756:	6593      	str	r3, [r2, #88]	@ 0x58
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800577e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005782:	460b      	mov	r3, r1
 8005784:	4313      	orrs	r3, r2
 8005786:	d055      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005794:	d033      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800579a:	d82c      	bhi.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800579c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a0:	d02f      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a6:	d826      	bhi.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057ac:	d02b      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057b2:	d820      	bhi.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057b8:	d012      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80057ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057be:	d81a      	bhi.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d022      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c8:	d115      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ce:	3308      	adds	r3, #8
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fdee 	bl	80063b4 <RCCEx_PLL2_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057de:	e015      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	3328      	adds	r3, #40	@ 0x28
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fe95 	bl	8006518 <RCCEx_PLL3_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057f4:	e00a      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057fe:	bf00      	nop
 8005800:	e004      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005814:	4ba1      	ldr	r3, [pc, #644]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005824:	4a9d      	ldr	r2, [pc, #628]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005826:	430b      	orrs	r3, r1
 8005828:	6593      	str	r3, [r2, #88]	@ 0x58
 800582a:	e003      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f002 0308 	and.w	r3, r2, #8
 8005840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005844:	2300      	movs	r3, #0
 8005846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800584a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800584e:	460b      	mov	r3, r1
 8005850:	4313      	orrs	r3, r2
 8005852:	d01e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005860:	d10c      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	3328      	adds	r3, #40	@ 0x28
 8005868:	2102      	movs	r1, #2
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fe54 	bl	8006518 <RCCEx_PLL3_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800587c:	4b87      	ldr	r3, [pc, #540]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800587e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588c:	4a83      	ldr	r2, [pc, #524]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800588e:	430b      	orrs	r3, r1
 8005890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f002 0310 	and.w	r3, r2, #16
 800589e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058ac:	460b      	mov	r3, r1
 80058ae:	4313      	orrs	r3, r2
 80058b0:	d01e      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058be:	d10c      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c4:	3328      	adds	r3, #40	@ 0x28
 80058c6:	2102      	movs	r1, #2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fe25 	bl	8006518 <RCCEx_PLL3_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058da:	4b70      	ldr	r3, [pc, #448]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ea:	4a6c      	ldr	r2, [pc, #432]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80058fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	d03e      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800591c:	d022      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800591e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005922:	d81b      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592c:	d00b      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800592e:	e015      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	3308      	adds	r3, #8
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fd3b 	bl	80063b4 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005944:	e00f      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3328      	adds	r3, #40	@ 0x28
 800594c:	2102      	movs	r1, #2
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fde2 	bl	8006518 <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800596e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800597e:	4a47      	ldr	r2, [pc, #284]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005980:	430b      	orrs	r3, r1
 8005982:	6593      	str	r3, [r2, #88]	@ 0x58
 8005984:	e003      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800599a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800599c:	2300      	movs	r3, #0
 800599e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80059a4:	460b      	mov	r3, r1
 80059a6:	4313      	orrs	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059b6:	d01f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80059b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059bc:	d818      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80059be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80059c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c8:	d007      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80059ca:	e011      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059cc:	4b33      	ldr	r3, [pc, #204]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	4a32      	ldr	r2, [pc, #200]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059d8:	e00f      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	3328      	adds	r3, #40	@ 0x28
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fd98 	bl	8006518 <RCCEx_PLL3_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80059ee:	e004      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059f6:	e000      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80059f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a02:	4b26      	ldr	r3, [pc, #152]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a18:	e003      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a30:	2300      	movs	r3, #0
 8005a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d034      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a4c:	d007      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a4e:	e011      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a50:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	4a11      	ldr	r2, [pc, #68]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a5c:	e00e      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	3308      	adds	r3, #8
 8005a64:	2102      	movs	r1, #2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fca4 	bl	80063b4 <RCCEx_PLL2_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a72:	e003      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10d      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a84:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a92:	4a02      	ldr	r2, [pc, #8]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a94:	430b      	orrs	r3, r1
 8005a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005a9a:	bf00      	nop
 8005a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005aba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d00c      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	3328      	adds	r3, #40	@ 0x28
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fd23 	bl	8006518 <RCCEx_PLL3_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aec:	2300      	movs	r3, #0
 8005aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005af4:	460b      	mov	r3, r1
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d038      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b06:	d018      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0c:	d811      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b12:	d014      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b18:	d80b      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d011      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b22:	d106      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b24:	4bc3      	ldr	r3, [pc, #780]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	4ac2      	ldr	r2, [pc, #776]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b30:	e008      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b38:	e004      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e002      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5c:	4ab5      	ldr	r2, [pc, #724]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b62:	e003      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b88:	4baa      	ldr	r3, [pc, #680]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b96:	4aa7      	ldr	r2, [pc, #668]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005baa:	2300      	movs	r3, #0
 8005bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bc8:	4a9a      	ldr	r2, [pc, #616]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bdc:	2300      	movs	r3, #0
 8005bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005be0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bea:	4b92      	ldr	r3, [pc, #584]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c14:	460b      	mov	r3, r1
 8005c16:	4313      	orrs	r3, r2
 8005c18:	d00e      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c1a:	4b86      	ldr	r3, [pc, #536]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a85      	ldr	r2, [pc, #532]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c24:	6113      	str	r3, [r2, #16]
 8005c26:	4b83      	ldr	r3, [pc, #524]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c28:	6919      	ldr	r1, [r3, #16]
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c32:	4a80      	ldr	r2, [pc, #512]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c46:	2300      	movs	r3, #0
 8005c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c54:	4b77      	ldr	r3, [pc, #476]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	4a74      	ldr	r2, [pc, #464]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c64:	430b      	orrs	r3, r1
 8005c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c76:	2300      	movs	r3, #0
 8005c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	d00a      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c84:	4b6b      	ldr	r3, [pc, #428]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c94:	4a67      	ldr	r2, [pc, #412]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	d011      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	3308      	adds	r3, #8
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fb78 	bl	80063b4 <RCCEx_PLL2_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	6239      	str	r1, [r7, #32]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	d011      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fb58 	bl	80063b4 <RCCEx_PLL2_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	2100      	movs	r1, #0
 8005d24:	61b9      	str	r1, [r7, #24]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d011      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fb38 	bl	80063b4 <RCCEx_PLL2_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	2100      	movs	r1, #0
 8005d64:	6139      	str	r1, [r7, #16]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d011      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3328      	adds	r3, #40	@ 0x28
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fbca 	bl	8006518 <RCCEx_PLL3_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	2100      	movs	r1, #0
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005db0:	460b      	mov	r3, r1
 8005db2:	4313      	orrs	r3, r2
 8005db4:	d011      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	3328      	adds	r3, #40	@ 0x28
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fbaa 	bl	8006518 <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	2100      	movs	r1, #0
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d011      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	3328      	adds	r3, #40	@ 0x28
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fb8a 	bl	8006518 <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e34:	58024400 	.word	0x58024400

08005e38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e3c:	f7fe fd54 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4904      	ldr	r1, [pc, #16]	@ (8005e60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	0801d378 	.word	0x0801d378

08005e64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b089      	sub	sp, #36	@ 0x24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e6c:	4ba1      	ldr	r3, [pc, #644]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e76:	4b9f      	ldr	r3, [pc, #636]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	0b1b      	lsrs	r3, r3, #12
 8005e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e82:	4b9c      	ldr	r3, [pc, #624]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e8e:	4b99      	ldr	r3, [pc, #612]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	08db      	lsrs	r3, r3, #3
 8005e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8111 	beq.w	80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	f000 8083 	beq.w	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	f200 80a1 	bhi.w	8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d056      	beq.n	8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ece:	e099      	b.n	8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed0:	4b88      	ldr	r3, [pc, #544]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d02d      	beq.n	8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005edc:	4b85      	ldr	r3, [pc, #532]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	4a84      	ldr	r2, [pc, #528]	@ (80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b7b      	ldr	r3, [pc, #492]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f36:	e087      	b.n	8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7a:	e065      	b.n	8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b59      	ldr	r3, [pc, #356]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fbe:	e043      	b.n	8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b48      	ldr	r3, [pc, #288]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006002:	e021      	b.n	8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b37      	ldr	r3, [pc, #220]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a03 	vldr	s12, [r7, #12]
 800602a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006048:	4b2a      	ldr	r3, [pc, #168]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	0a5b      	lsrs	r3, r3, #9
 800604e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800605e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006062:	edd7 6a07 	vldr	s13, [r7, #28]
 8006066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606e:	ee17 2a90 	vmov	r2, s15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006076:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800608c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006090:	edd7 6a07 	vldr	s13, [r7, #28]
 8006094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609c:	ee17 2a90 	vmov	r2, s15
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060a4:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	0e1b      	lsrs	r3, r3, #24
 80060aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060be:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ca:	ee17 2a90 	vmov	r2, s15
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060d2:	e008      	b.n	80060e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	609a      	str	r2, [r3, #8]
}
 80060e6:	bf00      	nop
 80060e8:	3724      	adds	r7, #36	@ 0x24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	58024400 	.word	0x58024400
 80060f8:	03d09000 	.word	0x03d09000
 80060fc:	46000000 	.word	0x46000000
 8006100:	4c742400 	.word	0x4c742400
 8006104:	4a742400 	.word	0x4a742400
 8006108:	4bbebc20 	.word	0x4bbebc20

0800610c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800610c:	b480      	push	{r7}
 800610e:	b089      	sub	sp, #36	@ 0x24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006114:	4ba1      	ldr	r3, [pc, #644]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800611e:	4b9f      	ldr	r3, [pc, #636]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006122:	0d1b      	lsrs	r3, r3, #20
 8006124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006128:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800612a:	4b9c      	ldr	r3, [pc, #624]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006136:	4b99      	ldr	r3, [pc, #612]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613a:	08db      	lsrs	r3, r3, #3
 800613c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8111 	beq.w	800637c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b02      	cmp	r3, #2
 800615e:	f000 8083 	beq.w	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b02      	cmp	r3, #2
 8006166:	f200 80a1 	bhi.w	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d056      	beq.n	8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006176:	e099      	b.n	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006178:	4b88      	ldr	r3, [pc, #544]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02d      	beq.n	80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006184:	4b85      	ldr	r3, [pc, #532]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	08db      	lsrs	r3, r3, #3
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	4a84      	ldr	r2, [pc, #528]	@ (80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b7b      	ldr	r3, [pc, #492]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061de:	e087      	b.n	80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f2:	4b6a      	ldr	r3, [pc, #424]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006202:	ed97 6a03 	vldr	s12, [r7, #12]
 8006206:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800620a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006222:	e065      	b.n	80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006246:	ed97 6a03 	vldr	s12, [r7, #12]
 800624a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006266:	e043      	b.n	80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b48      	ldr	r3, [pc, #288]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	ed97 6a03 	vldr	s12, [r7, #12]
 800628e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062aa:	e021      	b.n	80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	4b37      	ldr	r3, [pc, #220]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062f0:	4b2a      	ldr	r3, [pc, #168]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f4:	0a5b      	lsrs	r3, r3, #9
 80062f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800630a:	edd7 6a07 	vldr	s13, [r7, #28]
 800630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006316:	ee17 2a90 	vmov	r2, s15
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800631e:	4b1f      	ldr	r3, [pc, #124]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006330:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006334:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006338:	edd7 6a07 	vldr	s13, [r7, #28]
 800633c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006344:	ee17 2a90 	vmov	r2, s15
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800634c:	4b13      	ldr	r3, [pc, #76]	@ (800639c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	0e1b      	lsrs	r3, r3, #24
 8006352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006366:	edd7 6a07 	vldr	s13, [r7, #28]
 800636a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800636e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006372:	ee17 2a90 	vmov	r2, s15
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800637a:	e008      	b.n	800638e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
}
 800638e:	bf00      	nop
 8006390:	3724      	adds	r7, #36	@ 0x24
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	03d09000 	.word	0x03d09000
 80063a4:	46000000 	.word	0x46000000
 80063a8:	4c742400 	.word	0x4c742400
 80063ac:	4a742400 	.word	0x4a742400
 80063b0:	4bbebc20 	.word	0x4bbebc20

080063b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063c2:	4b53      	ldr	r3, [pc, #332]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80063c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d101      	bne.n	80063d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e099      	b.n	8006506 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80063d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063de:	f7fb fc13 	bl	8001c08 <HAL_GetTick>
 80063e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063e6:	f7fb fc0f 	bl	8001c08 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e086      	b.n	8006506 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063f8:	4b45      	ldr	r3, [pc, #276]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006404:	4b42      	ldr	r3, [pc, #264]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	493f      	ldr	r1, [pc, #252]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006414:	4313      	orrs	r3, r2
 8006416:	628b      	str	r3, [r1, #40]	@ 0x28
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	3b01      	subs	r3, #1
 800641e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	3b01      	subs	r3, #1
 8006428:	025b      	lsls	r3, r3, #9
 800642a:	b29b      	uxth	r3, r3
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	3b01      	subs	r3, #1
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	3b01      	subs	r3, #1
 8006442:	061b      	lsls	r3, r3, #24
 8006444:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006448:	4931      	ldr	r1, [pc, #196]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800644e:	4b30      	ldr	r3, [pc, #192]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	492d      	ldr	r1, [pc, #180]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006460:	4b2b      	ldr	r3, [pc, #172]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	f023 0220 	bic.w	r2, r3, #32
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	4928      	ldr	r1, [pc, #160]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006472:	4b27      	ldr	r3, [pc, #156]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	4a26      	ldr	r2, [pc, #152]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006478:	f023 0310 	bic.w	r3, r3, #16
 800647c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800647e:	4b24      	ldr	r3, [pc, #144]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006480:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006482:	4b24      	ldr	r3, [pc, #144]	@ (8006514 <RCCEx_PLL2_Config+0x160>)
 8006484:	4013      	ands	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	69d2      	ldr	r2, [r2, #28]
 800648a:	00d2      	lsls	r2, r2, #3
 800648c:	4920      	ldr	r1, [pc, #128]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 800648e:	4313      	orrs	r3, r2
 8006490:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006492:	4b1f      	ldr	r3, [pc, #124]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	4a1e      	ldr	r2, [pc, #120]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 8006498:	f043 0310 	orr.w	r3, r3, #16
 800649c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4a19      	ldr	r2, [pc, #100]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064b0:	e00f      	b.n	80064d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064b8:	4b15      	ldr	r3, [pc, #84]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a14      	ldr	r2, [pc, #80]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064c4:	e005      	b.n	80064d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064c6:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	4a11      	ldr	r2, [pc, #68]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064de:	f7fb fb93 	bl	8001c08 <HAL_GetTick>
 80064e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064e4:	e008      	b.n	80064f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064e6:	f7fb fb8f 	bl	8001c08 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e006      	b.n	8006506 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <RCCEx_PLL2_Config+0x15c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	58024400 	.word	0x58024400
 8006514:	ffff0007 	.word	0xffff0007

08006518 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006526:	4b53      	ldr	r3, [pc, #332]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b03      	cmp	r3, #3
 8006530:	d101      	bne.n	8006536 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e099      	b.n	800666a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006536:	4b4f      	ldr	r3, [pc, #316]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a4e      	ldr	r2, [pc, #312]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800653c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006542:	f7fb fb61 	bl	8001c08 <HAL_GetTick>
 8006546:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006548:	e008      	b.n	800655c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800654a:	f7fb fb5d 	bl	8001c08 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e086      	b.n	800666a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800655c:	4b45      	ldr	r3, [pc, #276]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f0      	bne.n	800654a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006568:	4b42      	ldr	r3, [pc, #264]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	051b      	lsls	r3, r3, #20
 8006576:	493f      	ldr	r1, [pc, #252]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	628b      	str	r3, [r1, #40]	@ 0x28
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	3b01      	subs	r3, #1
 8006582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	3b01      	subs	r3, #1
 800658c:	025b      	lsls	r3, r3, #9
 800658e:	b29b      	uxth	r3, r3
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	3b01      	subs	r3, #1
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065ac:	4931      	ldr	r1, [pc, #196]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065b2:	4b30      	ldr	r3, [pc, #192]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	492d      	ldr	r1, [pc, #180]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	4928      	ldr	r1, [pc, #160]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065d6:	4b27      	ldr	r3, [pc, #156]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065e2:	4b24      	ldr	r3, [pc, #144]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065e6:	4b24      	ldr	r3, [pc, #144]	@ (8006678 <RCCEx_PLL3_Config+0x160>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	69d2      	ldr	r2, [r2, #28]
 80065ee:	00d2      	lsls	r2, r2, #3
 80065f0:	4920      	ldr	r1, [pc, #128]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006600:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006608:	4b1a      	ldr	r3, [pc, #104]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800660a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660c:	4a19      	ldr	r2, [pc, #100]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800660e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006612:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006614:	e00f      	b.n	8006636 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d106      	bne.n	800662a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800661c:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	4a14      	ldr	r2, [pc, #80]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 8006622:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006628:	e005      	b.n	8006636 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800662a:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800662c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662e:	4a11      	ldr	r2, [pc, #68]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 8006630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006634:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006636:	4b0f      	ldr	r3, [pc, #60]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a0e      	ldr	r2, [pc, #56]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800663c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006642:	f7fb fae1 	bl	8001c08 <HAL_GetTick>
 8006646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006648:	e008      	b.n	800665c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800664a:	f7fb fadd 	bl	8001c08 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e006      	b.n	800666a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800665c:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <RCCEx_PLL3_Config+0x15c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	58024400 	.word	0x58024400
 8006678:	ffff0007 	.word	0xffff0007

0800667c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e049      	b.n	8006722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f841 	bl	800672a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f000 f9e8 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b01      	cmp	r3, #1
 8006752:	d001      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e054      	b.n	8006802 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a26      	ldr	r2, [pc, #152]	@ (8006810 <HAL_TIM_Base_Start_IT+0xd0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d022      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006782:	d01d      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a22      	ldr	r2, [pc, #136]	@ (8006814 <HAL_TIM_Base_Start_IT+0xd4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d018      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a21      	ldr	r2, [pc, #132]	@ (8006818 <HAL_TIM_Base_Start_IT+0xd8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <HAL_TIM_Base_Start_IT+0xdc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00e      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006820 <HAL_TIM_Base_Start_IT+0xe0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d009      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006824 <HAL_TIM_Base_Start_IT+0xe4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x80>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006828 <HAL_TIM_Base_Start_IT+0xe8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d115      	bne.n	80067ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_TIM_Base_Start_IT+0xec>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d015      	beq.n	80067fe <HAL_TIM_Base_Start_IT+0xbe>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d8:	d011      	beq.n	80067fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ea:	e008      	b.n	80067fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e000      	b.n	8006800 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40010000 	.word	0x40010000
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40010400 	.word	0x40010400
 8006824:	40001800 	.word	0x40001800
 8006828:	40014000 	.word	0x40014000
 800682c:	00010007 	.word	0x00010007

08006830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d020      	beq.n	8006894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01b      	beq.n	8006894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0202 	mvn.w	r2, #2
 8006864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8e9 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8db 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f8ec 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d020      	beq.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01b      	beq.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0204 	mvn.w	r2, #4
 80068b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8c3 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 80068cc:	e005      	b.n	80068da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8b5 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8c6 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0208 	mvn.w	r2, #8
 80068fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2204      	movs	r2, #4
 8006902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f89d 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f88f 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8a0 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0210 	mvn.w	r2, #16
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2208      	movs	r2, #8
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f877 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f869 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f87a 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0201 	mvn.w	r2, #1
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fa f8b0 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f90d 	bl	8006be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f905 	bl	8006bf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00c      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f834 	bl	8006a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f06f 0220 	mvn.w	r2, #32
 8006a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8cd 	bl	8006bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a43      	ldr	r2, [pc, #268]	@ (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a40      	ldr	r2, [pc, #256]	@ (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3f      	ldr	r2, [pc, #252]	@ (8006bb8 <TIM_Base_SetConfig+0x128>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8006bbc <TIM_Base_SetConfig+0x12c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a3d      	ldr	r2, [pc, #244]	@ (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a32      	ldr	r2, [pc, #200]	@ (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01f      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af0:	d01b      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2f      	ldr	r2, [pc, #188]	@ (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d017      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2e      	ldr	r2, [pc, #184]	@ (8006bb8 <TIM_Base_SetConfig+0x128>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2d      	ldr	r2, [pc, #180]	@ (8006bbc <TIM_Base_SetConfig+0x12c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc4 <TIM_Base_SetConfig+0x134>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc8 <TIM_Base_SetConfig+0x138>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a29      	ldr	r2, [pc, #164]	@ (8006bcc <TIM_Base_SetConfig+0x13c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d108      	bne.n	8006b3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	@ (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00f      	beq.n	8006b82 <TIM_Base_SetConfig+0xf2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	@ (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_Base_SetConfig+0xf2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	@ (8006bc4 <TIM_Base_SetConfig+0x134>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_Base_SetConfig+0xf2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a14      	ldr	r2, [pc, #80]	@ (8006bc8 <TIM_Base_SetConfig+0x138>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_Base_SetConfig+0xf2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	@ (8006bcc <TIM_Base_SetConfig+0x13c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d103      	bne.n	8006b8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f043 0204 	orr.w	r2, r3, #4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40000400 	.word	0x40000400
 8006bb8:	40000800 	.word	0x40000800
 8006bbc:	40000c00 	.word	0x40000c00
 8006bc0:	40010400 	.word	0x40010400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e042      	b.n	8006ca4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fa f84f 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	@ 0x24
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fa60 	bl	800811c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fcf5 	bl	800764c <UART_SetConfig>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e01b      	b.n	8006ca4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fadf 	bl	8008260 <UART_CheckIdleState>
 8006ca2:	4603      	mov	r3, r0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	@ 0x28
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d17b      	bne.n	8006dbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_UART_Transmit+0x26>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e074      	b.n	8006dc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2221      	movs	r2, #33	@ 0x21
 8006ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ce6:	f7fa ff8f 	bl	8001c08 <HAL_GetTick>
 8006cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d04:	d108      	bne.n	8006d18 <HAL_UART_Transmit+0x6c>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	e003      	b.n	8006d20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d20:	e030      	b.n	8006d84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2180      	movs	r1, #128	@ 0x80
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fb41 	bl	80083b4 <UART_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e03d      	b.n	8006dc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	e007      	b.n	8006d72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1c8      	bne.n	8006d22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2140      	movs	r1, #64	@ 0x40
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f001 fb0a 	bl	80083b4 <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e006      	b.n	8006dc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3720      	adds	r7, #32
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	@ 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d137      	bne.n	8006e50 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_UART_Receive_IT+0x24>
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e030      	b.n	8006e52 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_UART_Receive_IT+0x94>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d01f      	beq.n	8006e40 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	623b      	str	r3, [r7, #32]
 8006e2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	69f9      	ldr	r1, [r7, #28]
 8006e32:	6a3a      	ldr	r2, [r7, #32]
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e6      	bne.n	8006e0e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	461a      	mov	r2, r3
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f001 fb22 	bl	8008490 <UART_Start_Receive_IT>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	e000      	b.n	8006e52 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
  }
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3728      	adds	r7, #40	@ 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	58000c00 	.word	0x58000c00

08006e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b0ba      	sub	sp, #232	@ 0xe8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e8e:	4013      	ands	r3, r2
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d11b      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d015      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d009      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8393 	beq.w	80075f0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
      }
      return;
 8006ed2:	e38d      	b.n	80075f0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8123 	beq.w	8007124 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ede:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8007118 <HAL_UART_IRQHandler+0x2b8>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006eea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006eee:	4b8b      	ldr	r3, [pc, #556]	@ (800711c <HAL_UART_IRQHandler+0x2bc>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8116 	beq.w	8007124 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d011      	beq.n	8006f28 <HAL_UART_IRQHandler+0xc8>
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1e:	f043 0201 	orr.w	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d011      	beq.n	8006f58 <HAL_UART_IRQHandler+0xf8>
 8006f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2202      	movs	r2, #2
 8006f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4e:	f043 0204 	orr.w	r2, r3, #4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <HAL_UART_IRQHandler+0x128>
 8006f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2204      	movs	r2, #4
 8006f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7e:	f043 0202 	orr.w	r2, r3, #2
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d017      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8007118 <HAL_UART_IRQHandler+0x2b8>)
 8006fa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fba:	f043 0208 	orr.w	r2, r3, #8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d012      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x196>
 8006fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00c      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fec:	f043 0220 	orr.w	r2, r3, #32
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 82f9 	beq.w	80075f4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d013      	beq.n	8007036 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800700e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800701a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d005      	beq.n	800705a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800704e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007052:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007056:	2b00      	cmp	r3, #0
 8007058:	d054      	beq.n	8007104 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fb3a 	bl	80086d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706a:	2b40      	cmp	r3, #64	@ 0x40
 800706c:	d146      	bne.n	80070fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800708c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800709a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800709e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1d9      	bne.n	800706e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d017      	beq.n	80070f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ca:	4a15      	ldr	r2, [pc, #84]	@ (8007120 <HAL_UART_IRQHandler+0x2c0>)
 80070cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fb fa25 	bl	8002524 <HAL_DMA_Abort_IT>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d019      	beq.n	8007114 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80070ee:	4610      	mov	r0, r2
 80070f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f2:	e00f      	b.n	8007114 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa93 	bl	8007620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fa:	e00b      	b.n	8007114 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa8f 	bl	8007620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007102:	e007      	b.n	8007114 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa8b 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007112:	e26f      	b.n	80075f4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	bf00      	nop
    return;
 8007116:	e26d      	b.n	80075f4 <HAL_UART_IRQHandler+0x794>
 8007118:	10000001 	.word	0x10000001
 800711c:	04000120 	.word	0x04000120
 8007120:	080087a1 	.word	0x080087a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007128:	2b01      	cmp	r3, #1
 800712a:	f040 8203 	bne.w	8007534 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 81fc 	beq.w	8007534 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800713c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 81f5 	beq.w	8007534 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2210      	movs	r2, #16
 8007150:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715c:	2b40      	cmp	r3, #64	@ 0x40
 800715e:	f040 816d 	bne.w	800743c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4aa4      	ldr	r2, [pc, #656]	@ (80073fc <HAL_UART_IRQHandler+0x59c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d068      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4aa1      	ldr	r2, [pc, #644]	@ (8007400 <HAL_UART_IRQHandler+0x5a0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d061      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a9f      	ldr	r2, [pc, #636]	@ (8007404 <HAL_UART_IRQHandler+0x5a4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d05a      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a9c      	ldr	r2, [pc, #624]	@ (8007408 <HAL_UART_IRQHandler+0x5a8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d053      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a9a      	ldr	r2, [pc, #616]	@ (800740c <HAL_UART_IRQHandler+0x5ac>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d04c      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a97      	ldr	r2, [pc, #604]	@ (8007410 <HAL_UART_IRQHandler+0x5b0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d045      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a95      	ldr	r2, [pc, #596]	@ (8007414 <HAL_UART_IRQHandler+0x5b4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d03e      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a92      	ldr	r2, [pc, #584]	@ (8007418 <HAL_UART_IRQHandler+0x5b8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d037      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a90      	ldr	r2, [pc, #576]	@ (800741c <HAL_UART_IRQHandler+0x5bc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d030      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a8d      	ldr	r2, [pc, #564]	@ (8007420 <HAL_UART_IRQHandler+0x5c0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d029      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a8b      	ldr	r2, [pc, #556]	@ (8007424 <HAL_UART_IRQHandler+0x5c4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a88      	ldr	r2, [pc, #544]	@ (8007428 <HAL_UART_IRQHandler+0x5c8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d01b      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a86      	ldr	r2, [pc, #536]	@ (800742c <HAL_UART_IRQHandler+0x5cc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d014      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a83      	ldr	r2, [pc, #524]	@ (8007430 <HAL_UART_IRQHandler+0x5d0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00d      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a81      	ldr	r2, [pc, #516]	@ (8007434 <HAL_UART_IRQHandler+0x5d4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d006      	beq.n	8007242 <HAL_UART_IRQHandler+0x3e2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a7e      	ldr	r2, [pc, #504]	@ (8007438 <HAL_UART_IRQHandler+0x5d8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d106      	bne.n	8007250 <HAL_UART_IRQHandler+0x3f0>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	b29b      	uxth	r3, r3
 800724e:	e005      	b.n	800725c <HAL_UART_IRQHandler+0x3fc>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80ad 	beq.w	80073c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007274:	429a      	cmp	r2, r3
 8007276:	f080 80a5 	bcs.w	80073c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007280:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007290:	f000 8087 	beq.w	80073a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1da      	bne.n	8007294 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007302:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007306:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800730a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e1      	bne.n	80072de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800732a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800732c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800733e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800734c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e3      	bne.n	800731a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007370:	f023 0310 	bic.w	r3, r3, #16
 8007374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007384:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e4      	bne.n	8007360 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800739c:	4618      	mov	r0, r3
 800739e:	f7fa fda3 	bl	8001ee8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f939 	bl	8007634 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80073c2:	e119      	b.n	80075f8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ce:	429a      	cmp	r2, r3
 80073d0:	f040 8112 	bne.w	80075f8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073e0:	f040 810a 	bne.w	80075f8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f91e 	bl	8007634 <HAL_UARTEx_RxEventCallback>
      return;
 80073f8:	e0fe      	b.n	80075f8 <HAL_UART_IRQHandler+0x798>
 80073fa:	bf00      	nop
 80073fc:	40020010 	.word	0x40020010
 8007400:	40020028 	.word	0x40020028
 8007404:	40020040 	.word	0x40020040
 8007408:	40020058 	.word	0x40020058
 800740c:	40020070 	.word	0x40020070
 8007410:	40020088 	.word	0x40020088
 8007414:	400200a0 	.word	0x400200a0
 8007418:	400200b8 	.word	0x400200b8
 800741c:	40020410 	.word	0x40020410
 8007420:	40020428 	.word	0x40020428
 8007424:	40020440 	.word	0x40020440
 8007428:	40020458 	.word	0x40020458
 800742c:	40020470 	.word	0x40020470
 8007430:	40020488 	.word	0x40020488
 8007434:	400204a0 	.word	0x400204a0
 8007438:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007448:	b29b      	uxth	r3, r3
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80cf 	beq.w	80075fc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800745e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 80ca 	beq.w	80075fc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800747c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800748a:	647b      	str	r3, [r7, #68]	@ 0x44
 800748c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e4      	bne.n	8007468 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	623b      	str	r3, [r7, #32]
   return(result);
 80074ae:	6a3a      	ldr	r2, [r7, #32]
 80074b0:	4b55      	ldr	r3, [pc, #340]	@ (8007608 <HAL_UART_IRQHandler+0x7a8>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80074c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e3      	bne.n	800749e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0310 	bic.w	r3, r3, #16
 80074fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	617b      	str	r3, [r7, #20]
   return(result);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e4      	bne.n	80074ea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007526:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f881 	bl	8007634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007532:	e063      	b.n	80075fc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00e      	beq.n	800755e <HAL_UART_IRQHandler+0x6fe>
 8007540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fe80 	bl	800925c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800755c:	e051      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007566:	2b00      	cmp	r3, #0
 8007568:	d014      	beq.n	8007594 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800756a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800756e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800757a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007586:	2b00      	cmp	r3, #0
 8007588:	d03a      	beq.n	8007600 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
    }
    return;
 8007592:	e035      	b.n	8007600 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <HAL_UART_IRQHandler+0x754>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f909 	bl	80087c4 <UART_EndTransmit_IT>
    return;
 80075b2:	e026      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <HAL_UART_IRQHandler+0x774>
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 fe59 	bl	8009284 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d2:	e016      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d010      	beq.n	8007602 <HAL_UART_IRQHandler+0x7a2>
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da0c      	bge.n	8007602 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fe41 	bl	8009270 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075ee:	e008      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
      return;
 80075f0:	bf00      	nop
 80075f2:	e006      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
    return;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
      return;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
      return;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007600:	bf00      	nop
  }
}
 8007602:	37e8      	adds	r7, #232	@ 0xe8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	effffffe 	.word	0xeffffffe

0800760c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800764c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007650:	b092      	sub	sp, #72	@ 0x48
 8007652:	af00      	add	r7, sp, #0
 8007654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	431a      	orrs	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	431a      	orrs	r2, r3
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	4313      	orrs	r3, r2
 8007672:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4bbe      	ldr	r3, [pc, #760]	@ (8007974 <UART_SetConfig+0x328>)
 800767c:	4013      	ands	r3, r2
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007684:	430b      	orrs	r3, r1
 8007686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4ab3      	ldr	r2, [pc, #716]	@ (8007978 <UART_SetConfig+0x32c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b4:	4313      	orrs	r3, r2
 80076b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	4baf      	ldr	r3, [pc, #700]	@ (800797c <UART_SetConfig+0x330>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	f023 010f 	bic.w	r1, r3, #15
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4aa6      	ldr	r2, [pc, #664]	@ (8007980 <UART_SetConfig+0x334>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d177      	bne.n	80077dc <UART_SetConfig+0x190>
 80076ec:	4ba5      	ldr	r3, [pc, #660]	@ (8007984 <UART_SetConfig+0x338>)
 80076ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076f4:	2b28      	cmp	r3, #40	@ 0x28
 80076f6:	d86d      	bhi.n	80077d4 <UART_SetConfig+0x188>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0xb4>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	080077a5 	.word	0x080077a5
 8007704:	080077d5 	.word	0x080077d5
 8007708:	080077d5 	.word	0x080077d5
 800770c:	080077d5 	.word	0x080077d5
 8007710:	080077d5 	.word	0x080077d5
 8007714:	080077d5 	.word	0x080077d5
 8007718:	080077d5 	.word	0x080077d5
 800771c:	080077d5 	.word	0x080077d5
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077d5 	.word	0x080077d5
 8007728:	080077d5 	.word	0x080077d5
 800772c:	080077d5 	.word	0x080077d5
 8007730:	080077d5 	.word	0x080077d5
 8007734:	080077d5 	.word	0x080077d5
 8007738:	080077d5 	.word	0x080077d5
 800773c:	080077d5 	.word	0x080077d5
 8007740:	080077b5 	.word	0x080077b5
 8007744:	080077d5 	.word	0x080077d5
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077d5 	.word	0x080077d5
 8007754:	080077d5 	.word	0x080077d5
 8007758:	080077d5 	.word	0x080077d5
 800775c:	080077d5 	.word	0x080077d5
 8007760:	080077bd 	.word	0x080077bd
 8007764:	080077d5 	.word	0x080077d5
 8007768:	080077d5 	.word	0x080077d5
 800776c:	080077d5 	.word	0x080077d5
 8007770:	080077d5 	.word	0x080077d5
 8007774:	080077d5 	.word	0x080077d5
 8007778:	080077d5 	.word	0x080077d5
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077c5 	.word	0x080077c5
 8007784:	080077d5 	.word	0x080077d5
 8007788:	080077d5 	.word	0x080077d5
 800778c:	080077d5 	.word	0x080077d5
 8007790:	080077d5 	.word	0x080077d5
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077d5 	.word	0x080077d5
 800779c:	080077d5 	.word	0x080077d5
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e222      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e21e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e21a      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e216      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077c4:	2320      	movs	r3, #32
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e212      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077cc:	2340      	movs	r3, #64	@ 0x40
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e20e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077d4:	2380      	movs	r3, #128	@ 0x80
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e20a      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a69      	ldr	r2, [pc, #420]	@ (8007988 <UART_SetConfig+0x33c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d130      	bne.n	8007848 <UART_SetConfig+0x1fc>
 80077e6:	4b67      	ldr	r3, [pc, #412]	@ (8007984 <UART_SetConfig+0x338>)
 80077e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d826      	bhi.n	8007840 <UART_SetConfig+0x1f4>
 80077f2:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x1ac>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007819 	.word	0x08007819
 8007800:	08007821 	.word	0x08007821
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e1ec      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007818:	2304      	movs	r3, #4
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e1e8      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007820:	2308      	movs	r3, #8
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e1e4      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007828:	2310      	movs	r3, #16
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e1e0      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007830:	2320      	movs	r3, #32
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e1dc      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007838:	2340      	movs	r3, #64	@ 0x40
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e1d8      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e1d4      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a4f      	ldr	r2, [pc, #316]	@ (800798c <UART_SetConfig+0x340>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d130      	bne.n	80078b4 <UART_SetConfig+0x268>
 8007852:	4b4c      	ldr	r3, [pc, #304]	@ (8007984 <UART_SetConfig+0x338>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b05      	cmp	r3, #5
 800785c:	d826      	bhi.n	80078ac <UART_SetConfig+0x260>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <UART_SetConfig+0x218>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	0800787d 	.word	0x0800787d
 8007868:	08007885 	.word	0x08007885
 800786c:	0800788d 	.word	0x0800788d
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e1b6      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e1b2      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e1ae      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e1aa      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 800789c:	2320      	movs	r3, #32
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e1a6      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80078a4:	2340      	movs	r3, #64	@ 0x40
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e1a2      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80078ac:	2380      	movs	r3, #128	@ 0x80
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e19e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a35      	ldr	r2, [pc, #212]	@ (8007990 <UART_SetConfig+0x344>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d130      	bne.n	8007920 <UART_SetConfig+0x2d4>
 80078be:	4b31      	ldr	r3, [pc, #196]	@ (8007984 <UART_SetConfig+0x338>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d826      	bhi.n	8007918 <UART_SetConfig+0x2cc>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <UART_SetConfig+0x284>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	080078f9 	.word	0x080078f9
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007911 	.word	0x08007911
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e180      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80078f0:	2304      	movs	r3, #4
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e17c      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80078f8:	2308      	movs	r3, #8
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e178      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007900:	2310      	movs	r3, #16
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e174      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007908:	2320      	movs	r3, #32
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e170      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007910:	2340      	movs	r3, #64	@ 0x40
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e16c      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e168      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1b      	ldr	r2, [pc, #108]	@ (8007994 <UART_SetConfig+0x348>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d142      	bne.n	80079b0 <UART_SetConfig+0x364>
 800792a:	4b16      	ldr	r3, [pc, #88]	@ (8007984 <UART_SetConfig+0x338>)
 800792c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b05      	cmp	r3, #5
 8007934:	d838      	bhi.n	80079a8 <UART_SetConfig+0x35c>
 8007936:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <UART_SetConfig+0x2f0>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007955 	.word	0x08007955
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007965 	.word	0x08007965
 8007948:	0800796d 	.word	0x0800796d
 800794c:	08007999 	.word	0x08007999
 8007950:	080079a1 	.word	0x080079a1
 8007954:	2300      	movs	r3, #0
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e14a      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e146      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e142      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e13e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007974:	cfff69f3 	.word	0xcfff69f3
 8007978:	58000c00 	.word	0x58000c00
 800797c:	11fff4ff 	.word	0x11fff4ff
 8007980:	40011000 	.word	0x40011000
 8007984:	58024400 	.word	0x58024400
 8007988:	40004400 	.word	0x40004400
 800798c:	40004800 	.word	0x40004800
 8007990:	40004c00 	.word	0x40004c00
 8007994:	40005000 	.word	0x40005000
 8007998:	2320      	movs	r3, #32
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e128      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80079a0:	2340      	movs	r3, #64	@ 0x40
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e124      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80079a8:	2380      	movs	r3, #128	@ 0x80
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e120      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4acb      	ldr	r2, [pc, #812]	@ (8007ce4 <UART_SetConfig+0x698>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d176      	bne.n	8007aa8 <UART_SetConfig+0x45c>
 80079ba:	4bcb      	ldr	r3, [pc, #812]	@ (8007ce8 <UART_SetConfig+0x69c>)
 80079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079c2:	2b28      	cmp	r3, #40	@ 0x28
 80079c4:	d86c      	bhi.n	8007aa0 <UART_SetConfig+0x454>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x380>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a71 	.word	0x08007a71
 80079d0:	08007aa1 	.word	0x08007aa1
 80079d4:	08007aa1 	.word	0x08007aa1
 80079d8:	08007aa1 	.word	0x08007aa1
 80079dc:	08007aa1 	.word	0x08007aa1
 80079e0:	08007aa1 	.word	0x08007aa1
 80079e4:	08007aa1 	.word	0x08007aa1
 80079e8:	08007aa1 	.word	0x08007aa1
 80079ec:	08007a79 	.word	0x08007a79
 80079f0:	08007aa1 	.word	0x08007aa1
 80079f4:	08007aa1 	.word	0x08007aa1
 80079f8:	08007aa1 	.word	0x08007aa1
 80079fc:	08007aa1 	.word	0x08007aa1
 8007a00:	08007aa1 	.word	0x08007aa1
 8007a04:	08007aa1 	.word	0x08007aa1
 8007a08:	08007aa1 	.word	0x08007aa1
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007aa1 	.word	0x08007aa1
 8007a14:	08007aa1 	.word	0x08007aa1
 8007a18:	08007aa1 	.word	0x08007aa1
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007aa1 	.word	0x08007aa1
 8007a24:	08007aa1 	.word	0x08007aa1
 8007a28:	08007aa1 	.word	0x08007aa1
 8007a2c:	08007a89 	.word	0x08007a89
 8007a30:	08007aa1 	.word	0x08007aa1
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007aa1 	.word	0x08007aa1
 8007a40:	08007aa1 	.word	0x08007aa1
 8007a44:	08007aa1 	.word	0x08007aa1
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007a91 	.word	0x08007a91
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007aa1 	.word	0x08007aa1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007aa1 	.word	0x08007aa1
 8007a68:	08007aa1 	.word	0x08007aa1
 8007a6c:	08007a99 	.word	0x08007a99
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e0bc      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007a78:	2304      	movs	r3, #4
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e0b8      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007a80:	2308      	movs	r3, #8
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e0b4      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007a88:	2310      	movs	r3, #16
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e0b0      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007a90:	2320      	movs	r3, #32
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e0ac      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007a98:	2340      	movs	r3, #64	@ 0x40
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e0a8      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007aa0:	2380      	movs	r3, #128	@ 0x80
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e0a4      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a8f      	ldr	r2, [pc, #572]	@ (8007cec <UART_SetConfig+0x6a0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d130      	bne.n	8007b14 <UART_SetConfig+0x4c8>
 8007ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ce8 <UART_SetConfig+0x69c>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	2b05      	cmp	r3, #5
 8007abc:	d826      	bhi.n	8007b0c <UART_SetConfig+0x4c0>
 8007abe:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <UART_SetConfig+0x478>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007add 	.word	0x08007add
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	08007aed 	.word	0x08007aed
 8007ad0:	08007af5 	.word	0x08007af5
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e086      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e082      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e07e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e07a      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007afc:	2320      	movs	r3, #32
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e076      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b04:	2340      	movs	r3, #64	@ 0x40
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e072      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b0c:	2380      	movs	r3, #128	@ 0x80
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e06e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a75      	ldr	r2, [pc, #468]	@ (8007cf0 <UART_SetConfig+0x6a4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d130      	bne.n	8007b80 <UART_SetConfig+0x534>
 8007b1e:	4b72      	ldr	r3, [pc, #456]	@ (8007ce8 <UART_SetConfig+0x69c>)
 8007b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d826      	bhi.n	8007b78 <UART_SetConfig+0x52c>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <UART_SetConfig+0x4e4>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	08007b59 	.word	0x08007b59
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b71 	.word	0x08007b71
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e050      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e04c      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e048      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e044      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e040      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b70:	2340      	movs	r3, #64	@ 0x40
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e03c      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b78:	2380      	movs	r3, #128	@ 0x80
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e038      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf4 <UART_SetConfig+0x6a8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d130      	bne.n	8007bec <UART_SetConfig+0x5a0>
 8007b8a:	4b57      	ldr	r3, [pc, #348]	@ (8007ce8 <UART_SetConfig+0x69c>)
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d826      	bhi.n	8007be4 <UART_SetConfig+0x598>
 8007b96:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <UART_SetConfig+0x550>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007bcd 	.word	0x08007bcd
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bba:	e01a      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e016      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e012      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e00e      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e00a      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007bdc:	2340      	movs	r3, #64	@ 0x40
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e006      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007be4:	2380      	movs	r3, #128	@ 0x80
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e002      	b.n	8007bf2 <UART_SetConfig+0x5a6>
 8007bec:	2380      	movs	r3, #128	@ 0x80
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8007cf4 <UART_SetConfig+0x6a8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	f040 80f8 	bne.w	8007dee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	dc46      	bgt.n	8007c94 <UART_SetConfig+0x648>
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	f2c0 8082 	blt.w	8007d10 <UART_SetConfig+0x6c4>
 8007c0c:	3b02      	subs	r3, #2
 8007c0e:	2b1e      	cmp	r3, #30
 8007c10:	d87e      	bhi.n	8007d10 <UART_SetConfig+0x6c4>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <UART_SetConfig+0x5cc>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c9b 	.word	0x08007c9b
 8007c1c:	08007d11 	.word	0x08007d11
 8007c20:	08007ca3 	.word	0x08007ca3
 8007c24:	08007d11 	.word	0x08007d11
 8007c28:	08007d11 	.word	0x08007d11
 8007c2c:	08007d11 	.word	0x08007d11
 8007c30:	08007cb3 	.word	0x08007cb3
 8007c34:	08007d11 	.word	0x08007d11
 8007c38:	08007d11 	.word	0x08007d11
 8007c3c:	08007d11 	.word	0x08007d11
 8007c40:	08007d11 	.word	0x08007d11
 8007c44:	08007d11 	.word	0x08007d11
 8007c48:	08007d11 	.word	0x08007d11
 8007c4c:	08007d11 	.word	0x08007d11
 8007c50:	08007cc3 	.word	0x08007cc3
 8007c54:	08007d11 	.word	0x08007d11
 8007c58:	08007d11 	.word	0x08007d11
 8007c5c:	08007d11 	.word	0x08007d11
 8007c60:	08007d11 	.word	0x08007d11
 8007c64:	08007d11 	.word	0x08007d11
 8007c68:	08007d11 	.word	0x08007d11
 8007c6c:	08007d11 	.word	0x08007d11
 8007c70:	08007d11 	.word	0x08007d11
 8007c74:	08007d11 	.word	0x08007d11
 8007c78:	08007d11 	.word	0x08007d11
 8007c7c:	08007d11 	.word	0x08007d11
 8007c80:	08007d11 	.word	0x08007d11
 8007c84:	08007d11 	.word	0x08007d11
 8007c88:	08007d11 	.word	0x08007d11
 8007c8c:	08007d11 	.word	0x08007d11
 8007c90:	08007d03 	.word	0x08007d03
 8007c94:	2b40      	cmp	r3, #64	@ 0x40
 8007c96:	d037      	beq.n	8007d08 <UART_SetConfig+0x6bc>
 8007c98:	e03a      	b.n	8007d10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c9a:	f7fe f8cd 	bl	8005e38 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ca0:	e03c      	b.n	8007d1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe f8dc 	bl	8005e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb0:	e034      	b.n	8007d1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb2:	f107 0318 	add.w	r3, r7, #24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fa28 	bl	800610c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc0:	e02c      	b.n	8007d1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc2:	4b09      	ldr	r3, [pc, #36]	@ (8007ce8 <UART_SetConfig+0x69c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d016      	beq.n	8007cfc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cce:	4b06      	ldr	r3, [pc, #24]	@ (8007ce8 <UART_SetConfig+0x69c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	08db      	lsrs	r3, r3, #3
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	4a07      	ldr	r2, [pc, #28]	@ (8007cf8 <UART_SetConfig+0x6ac>)
 8007cda:	fa22 f303 	lsr.w	r3, r2, r3
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ce0:	e01c      	b.n	8007d1c <UART_SetConfig+0x6d0>
 8007ce2:	bf00      	nop
 8007ce4:	40011400 	.word	0x40011400
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	40007800 	.word	0x40007800
 8007cf0:	40007c00 	.word	0x40007c00
 8007cf4:	58000c00 	.word	0x58000c00
 8007cf8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b9d      	ldr	r3, [pc, #628]	@ (8007f74 <UART_SetConfig+0x928>)
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d00:	e00c      	b.n	8007d1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d02:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <UART_SetConfig+0x92c>)
 8007d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d06:	e009      	b.n	8007d1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0e:	e005      	b.n	8007d1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 81de 	beq.w	80080e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	4a94      	ldr	r2, [pc, #592]	@ (8007f7c <UART_SetConfig+0x930>)
 8007d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d36:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d305      	bcc.n	8007d54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d5a:	e1c1      	b.n	80080e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5e:	2200      	movs	r2, #0
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	60fa      	str	r2, [r7, #12]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d68:	4a84      	ldr	r2, [pc, #528]	@ (8007f7c <UART_SetConfig+0x930>)
 8007d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2200      	movs	r2, #0
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d7e:	f7f8 fb17 	bl	80003b0 <__aeabi_uldivmod>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	020b      	lsls	r3, r1, #8
 8007d94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d98:	0202      	lsls	r2, r0, #8
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	6849      	ldr	r1, [r1, #4]
 8007d9e:	0849      	lsrs	r1, r1, #1
 8007da0:	2000      	movs	r0, #0
 8007da2:	460c      	mov	r4, r1
 8007da4:	4605      	mov	r5, r0
 8007da6:	eb12 0804 	adds.w	r8, r2, r4
 8007daa:	eb43 0905 	adc.w	r9, r3, r5
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	469a      	mov	sl, r3
 8007db6:	4693      	mov	fp, r2
 8007db8:	4652      	mov	r2, sl
 8007dba:	465b      	mov	r3, fp
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	f7f8 faf6 	bl	80003b0 <__aeabi_uldivmod>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4613      	mov	r3, r2
 8007dca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dd2:	d308      	bcc.n	8007de6 <UART_SetConfig+0x79a>
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dda:	d204      	bcs.n	8007de6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007de2:	60da      	str	r2, [r3, #12]
 8007de4:	e17c      	b.n	80080e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007dec:	e178      	b.n	80080e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df6:	f040 80c5 	bne.w	8007f84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007dfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	dc48      	bgt.n	8007e94 <UART_SetConfig+0x848>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	db7b      	blt.n	8007efe <UART_SetConfig+0x8b2>
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d879      	bhi.n	8007efe <UART_SetConfig+0x8b2>
 8007e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <UART_SetConfig+0x7c4>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e9b 	.word	0x08007e9b
 8007e14:	08007ea3 	.word	0x08007ea3
 8007e18:	08007eff 	.word	0x08007eff
 8007e1c:	08007eff 	.word	0x08007eff
 8007e20:	08007eab 	.word	0x08007eab
 8007e24:	08007eff 	.word	0x08007eff
 8007e28:	08007eff 	.word	0x08007eff
 8007e2c:	08007eff 	.word	0x08007eff
 8007e30:	08007ebb 	.word	0x08007ebb
 8007e34:	08007eff 	.word	0x08007eff
 8007e38:	08007eff 	.word	0x08007eff
 8007e3c:	08007eff 	.word	0x08007eff
 8007e40:	08007eff 	.word	0x08007eff
 8007e44:	08007eff 	.word	0x08007eff
 8007e48:	08007eff 	.word	0x08007eff
 8007e4c:	08007eff 	.word	0x08007eff
 8007e50:	08007ecb 	.word	0x08007ecb
 8007e54:	08007eff 	.word	0x08007eff
 8007e58:	08007eff 	.word	0x08007eff
 8007e5c:	08007eff 	.word	0x08007eff
 8007e60:	08007eff 	.word	0x08007eff
 8007e64:	08007eff 	.word	0x08007eff
 8007e68:	08007eff 	.word	0x08007eff
 8007e6c:	08007eff 	.word	0x08007eff
 8007e70:	08007eff 	.word	0x08007eff
 8007e74:	08007eff 	.word	0x08007eff
 8007e78:	08007eff 	.word	0x08007eff
 8007e7c:	08007eff 	.word	0x08007eff
 8007e80:	08007eff 	.word	0x08007eff
 8007e84:	08007eff 	.word	0x08007eff
 8007e88:	08007eff 	.word	0x08007eff
 8007e8c:	08007eff 	.word	0x08007eff
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	2b40      	cmp	r3, #64	@ 0x40
 8007e96:	d02e      	beq.n	8007ef6 <UART_SetConfig+0x8aa>
 8007e98:	e031      	b.n	8007efe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9a:	f7fc fd55 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8007e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea0:	e033      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea2:	f7fc fd67 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8007ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e02f      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fd ffd8 	bl	8005e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb8:	e027      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eba:	f107 0318 	add.w	r3, r7, #24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe f924 	bl	800610c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e01f      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eca:	4b2d      	ldr	r3, [pc, #180]	@ (8007f80 <UART_SetConfig+0x934>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8007f80 <UART_SetConfig+0x934>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	08db      	lsrs	r3, r3, #3
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	4a24      	ldr	r2, [pc, #144]	@ (8007f74 <UART_SetConfig+0x928>)
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee8:	e00f      	b.n	8007f0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007eea:	4b22      	ldr	r3, [pc, #136]	@ (8007f74 <UART_SetConfig+0x928>)
 8007eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eee:	e00c      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ef0:	4b21      	ldr	r3, [pc, #132]	@ (8007f78 <UART_SetConfig+0x92c>)
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef4:	e009      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efc:	e005      	b.n	8007f0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 80e7 	beq.w	80080e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	4a19      	ldr	r2, [pc, #100]	@ (8007f7c <UART_SetConfig+0x930>)
 8007f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f24:	005a      	lsls	r2, r3, #1
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	441a      	add	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	2b0f      	cmp	r3, #15
 8007f3c:	d916      	bls.n	8007f6c <UART_SetConfig+0x920>
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f44:	d212      	bcs.n	8007f6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f023 030f 	bic.w	r3, r3, #15
 8007f4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	e0b9      	b.n	80080e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f72:	e0b5      	b.n	80080e0 <UART_SetConfig+0xa94>
 8007f74:	03d09000 	.word	0x03d09000
 8007f78:	003d0900 	.word	0x003d0900
 8007f7c:	0801d394 	.word	0x0801d394
 8007f80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	dc49      	bgt.n	8008020 <UART_SetConfig+0x9d4>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db7c      	blt.n	800808a <UART_SetConfig+0xa3e>
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d87a      	bhi.n	800808a <UART_SetConfig+0xa3e>
 8007f94:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <UART_SetConfig+0x950>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08008027 	.word	0x08008027
 8007fa0:	0800802f 	.word	0x0800802f
 8007fa4:	0800808b 	.word	0x0800808b
 8007fa8:	0800808b 	.word	0x0800808b
 8007fac:	08008037 	.word	0x08008037
 8007fb0:	0800808b 	.word	0x0800808b
 8007fb4:	0800808b 	.word	0x0800808b
 8007fb8:	0800808b 	.word	0x0800808b
 8007fbc:	08008047 	.word	0x08008047
 8007fc0:	0800808b 	.word	0x0800808b
 8007fc4:	0800808b 	.word	0x0800808b
 8007fc8:	0800808b 	.word	0x0800808b
 8007fcc:	0800808b 	.word	0x0800808b
 8007fd0:	0800808b 	.word	0x0800808b
 8007fd4:	0800808b 	.word	0x0800808b
 8007fd8:	0800808b 	.word	0x0800808b
 8007fdc:	08008057 	.word	0x08008057
 8007fe0:	0800808b 	.word	0x0800808b
 8007fe4:	0800808b 	.word	0x0800808b
 8007fe8:	0800808b 	.word	0x0800808b
 8007fec:	0800808b 	.word	0x0800808b
 8007ff0:	0800808b 	.word	0x0800808b
 8007ff4:	0800808b 	.word	0x0800808b
 8007ff8:	0800808b 	.word	0x0800808b
 8007ffc:	0800808b 	.word	0x0800808b
 8008000:	0800808b 	.word	0x0800808b
 8008004:	0800808b 	.word	0x0800808b
 8008008:	0800808b 	.word	0x0800808b
 800800c:	0800808b 	.word	0x0800808b
 8008010:	0800808b 	.word	0x0800808b
 8008014:	0800808b 	.word	0x0800808b
 8008018:	0800808b 	.word	0x0800808b
 800801c:	0800807d 	.word	0x0800807d
 8008020:	2b40      	cmp	r3, #64	@ 0x40
 8008022:	d02e      	beq.n	8008082 <UART_SetConfig+0xa36>
 8008024:	e031      	b.n	800808a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008026:	f7fc fc8f 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 800802a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800802c:	e033      	b.n	8008096 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802e:	f7fc fca1 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8008032:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008034:	e02f      	b.n	8008096 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd ff12 	bl	8005e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008044:	e027      	b.n	8008096 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008046:	f107 0318 	add.w	r3, r7, #24
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe f85e 	bl	800610c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008054:	e01f      	b.n	8008096 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008056:	4b2d      	ldr	r3, [pc, #180]	@ (800810c <UART_SetConfig+0xac0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008062:	4b2a      	ldr	r3, [pc, #168]	@ (800810c <UART_SetConfig+0xac0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	4a28      	ldr	r2, [pc, #160]	@ (8008110 <UART_SetConfig+0xac4>)
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008074:	e00f      	b.n	8008096 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008076:	4b26      	ldr	r3, [pc, #152]	@ (8008110 <UART_SetConfig+0xac4>)
 8008078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800807a:	e00c      	b.n	8008096 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800807c:	4b25      	ldr	r3, [pc, #148]	@ (8008114 <UART_SetConfig+0xac8>)
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e005      	b.n	8008096 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008094:	bf00      	nop
    }

    if (pclk != 0U)
 8008096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d021      	beq.n	80080e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008118 <UART_SetConfig+0xacc>)
 80080a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	441a      	add	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80080be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	2b0f      	cmp	r3, #15
 80080c4:	d909      	bls.n	80080da <UART_SetConfig+0xa8e>
 80080c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080cc:	d205      	bcs.n	80080da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60da      	str	r2, [r3, #12]
 80080d8:	e002      	b.n	80080e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2200      	movs	r2, #0
 80080f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008100:	4618      	mov	r0, r3
 8008102:	3748      	adds	r7, #72	@ 0x48
 8008104:	46bd      	mov	sp, r7
 8008106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400
 8008110:	03d09000 	.word	0x03d09000
 8008114:	003d0900 	.word	0x003d0900
 8008118:	0801d394 	.word	0x0801d394

0800811c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	f003 0308 	and.w	r3, r3, #8
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b0:	f003 0310 	and.w	r3, r3, #16
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01a      	beq.n	8008232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800821a:	d10a      	bne.n	8008232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	605a      	str	r2, [r3, #4]
  }
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b098      	sub	sp, #96	@ 0x60
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008270:	f7f9 fcca 	bl	8001c08 <HAL_GetTick>
 8008274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b08      	cmp	r3, #8
 8008282:	d12f      	bne.n	80082e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800828c:	2200      	movs	r2, #0
 800828e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f88e 	bl	80083b4 <UART_WaitOnFlagUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d022      	beq.n	80082e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e6      	bne.n	800829e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e063      	b.n	80083ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d149      	bne.n	8008386 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fa:	2200      	movs	r2, #0
 80082fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f857 	bl	80083b4 <UART_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d03c      	beq.n	8008386 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	623b      	str	r3, [r7, #32]
   return(result);
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800832a:	633b      	str	r3, [r7, #48]	@ 0x30
 800832c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e6      	bne.n	800830c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3308      	adds	r3, #8
 8008344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	60fb      	str	r3, [r7, #12]
   return(result);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835e:	61fa      	str	r2, [r7, #28]
 8008360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	69b9      	ldr	r1, [r7, #24]
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	617b      	str	r3, [r7, #20]
   return(result);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e5      	bne.n	800833e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e012      	b.n	80083ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3758      	adds	r7, #88	@ 0x58
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	4613      	mov	r3, r2
 80083c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c4:	e04f      	b.n	8008466 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083cc:	d04b      	beq.n	8008466 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ce:	f7f9 fc1b 	bl	8001c08 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d302      	bcc.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e04e      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d037      	beq.n	8008466 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b80      	cmp	r3, #128	@ 0x80
 80083fa:	d034      	beq.n	8008466 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	d031      	beq.n	8008466 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b08      	cmp	r3, #8
 800840e:	d110      	bne.n	8008432 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2208      	movs	r2, #8
 8008416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 f95b 	bl	80086d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2208      	movs	r2, #8
 8008422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e029      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800843c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008440:	d111      	bne.n	8008466 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800844a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f941 	bl	80086d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2220      	movs	r2, #32
 8008456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e00f      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4013      	ands	r3, r2
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	429a      	cmp	r2, r3
 8008474:	bf0c      	ite	eq
 8008476:	2301      	moveq	r3, #1
 8008478:	2300      	movne	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	461a      	mov	r2, r3
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	429a      	cmp	r2, r3
 8008482:	d0a0      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008490:	b480      	push	{r7}
 8008492:	b0a3      	sub	sp, #140	@ 0x8c
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4613      	mov	r3, r2
 800849c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c2:	d10e      	bne.n	80084e2 <UART_Start_Receive_IT+0x52>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d105      	bne.n	80084d8 <UART_Start_Receive_IT+0x48>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80084d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084d6:	e02d      	b.n	8008534 <UART_Start_Receive_IT+0xa4>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	22ff      	movs	r2, #255	@ 0xff
 80084dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084e0:	e028      	b.n	8008534 <UART_Start_Receive_IT+0xa4>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10d      	bne.n	8008506 <UART_Start_Receive_IT+0x76>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d104      	bne.n	80084fc <UART_Start_Receive_IT+0x6c>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	22ff      	movs	r2, #255	@ 0xff
 80084f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80084fa:	e01b      	b.n	8008534 <UART_Start_Receive_IT+0xa4>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	227f      	movs	r2, #127	@ 0x7f
 8008500:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008504:	e016      	b.n	8008534 <UART_Start_Receive_IT+0xa4>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800850e:	d10d      	bne.n	800852c <UART_Start_Receive_IT+0x9c>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d104      	bne.n	8008522 <UART_Start_Receive_IT+0x92>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	227f      	movs	r2, #127	@ 0x7f
 800851c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008520:	e008      	b.n	8008534 <UART_Start_Receive_IT+0xa4>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	223f      	movs	r2, #63	@ 0x3f
 8008526:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800852a:	e003      	b.n	8008534 <UART_Start_Receive_IT+0xa4>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2222      	movs	r2, #34	@ 0x22
 8008540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008568:	673a      	str	r2, [r7, #112]	@ 0x70
 800856a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800856e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e3      	bne.n	8008544 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008584:	d14f      	bne.n	8008626 <UART_Start_Receive_IT+0x196>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	429a      	cmp	r2, r3
 8008590:	d349      	bcc.n	8008626 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800859a:	d107      	bne.n	80085ac <UART_Start_Receive_IT+0x11c>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4a47      	ldr	r2, [pc, #284]	@ (80086c4 <UART_Start_Receive_IT+0x234>)
 80085a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80085aa:	e002      	b.n	80085b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a46      	ldr	r2, [pc, #280]	@ (80086c8 <UART_Start_Receive_IT+0x238>)
 80085b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01a      	beq.n	80085f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085de:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80085ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e4      	bne.n	80085ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3308      	adds	r3, #8
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008606:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008610:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008612:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800861e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e5      	bne.n	80085f0 <UART_Start_Receive_IT+0x160>
 8008624:	e046      	b.n	80086b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800862e:	d107      	bne.n	8008640 <UART_Start_Receive_IT+0x1b0>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4a24      	ldr	r2, [pc, #144]	@ (80086cc <UART_Start_Receive_IT+0x23c>)
 800863c:	675a      	str	r2, [r3, #116]	@ 0x74
 800863e:	e002      	b.n	8008646 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a23      	ldr	r2, [pc, #140]	@ (80086d0 <UART_Start_Receive_IT+0x240>)
 8008644:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d019      	beq.n	8008682 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008662:	677b      	str	r3, [r7, #116]	@ 0x74
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800866c:	637b      	str	r3, [r7, #52]	@ 0x34
 800866e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800867a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <UART_Start_Receive_IT+0x1be>
 8008680:	e018      	b.n	80086b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f043 0320 	orr.w	r3, r3, #32
 8008696:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e6      	bne.n	8008682 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	378c      	adds	r7, #140	@ 0x8c
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	08008ef1 	.word	0x08008ef1
 80086c8:	08008b8d 	.word	0x08008b8d
 80086cc:	080089d5 	.word	0x080089d5
 80086d0:	0800881d 	.word	0x0800881d

080086d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b095      	sub	sp, #84	@ 0x54
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80086fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e6      	bne.n	80086dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	61fb      	str	r3, [r7, #28]
   return(result);
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	4b1e      	ldr	r3, [pc, #120]	@ (800879c <UART_EndRxTransfer+0xc8>)
 8008722:	4013      	ands	r3, r2
 8008724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800872e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008746:	2b01      	cmp	r3, #1
 8008748:	d118      	bne.n	800877c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	60bb      	str	r3, [r7, #8]
   return(result);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f023 0310 	bic.w	r3, r3, #16
 800875e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6979      	ldr	r1, [r7, #20]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	613b      	str	r3, [r7, #16]
   return(result);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e6      	bne.n	800874a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2220      	movs	r2, #32
 8008780:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008790:	bf00      	nop
 8008792:	3754      	adds	r7, #84	@ 0x54
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	effffffe 	.word	0xeffffffe

080087a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7fe ff32 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6979      	ldr	r1, [r7, #20]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	613b      	str	r3, [r7, #16]
   return(result);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e6      	bne.n	80087cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fe fefd 	bl	800760c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b09c      	sub	sp, #112	@ 0x70
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800882a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008834:	2b22      	cmp	r3, #34	@ 0x22
 8008836:	f040 80be 	bne.w	80089b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008840:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008848:	b2d9      	uxtb	r1, r3
 800884a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800884e:	b2da      	uxtb	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008854:	400a      	ands	r2, r1
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	f040 80a1 	bne.w	80089c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e6      	bne.n	8008884 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3308      	adds	r3, #8
 80088d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80088d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80088d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e5      	bne.n	80088b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a33      	ldr	r2, [pc, #204]	@ (80089d0 <UART_RxISR_8BIT+0x1b4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d01f      	beq.n	8008948 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d018      	beq.n	8008948 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	623b      	str	r3, [r7, #32]
   return(result);
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800892a:	663b      	str	r3, [r7, #96]	@ 0x60
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008934:	633b      	str	r3, [r7, #48]	@ 0x30
 8008936:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800893a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e6      	bne.n	8008916 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800894c:	2b01      	cmp	r3, #1
 800894e:	d12e      	bne.n	80089ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	60fb      	str	r3, [r7, #12]
   return(result);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0310 	bic.w	r3, r3, #16
 800896a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	69b9      	ldr	r1, [r7, #24]
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	617b      	str	r3, [r7, #20]
   return(result);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f003 0310 	and.w	r3, r3, #16
 8008992:	2b10      	cmp	r3, #16
 8008994:	d103      	bne.n	800899e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2210      	movs	r2, #16
 800899c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fe fe44 	bl	8007634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ac:	e00b      	b.n	80089c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7f8 f900 	bl	8000bb4 <HAL_UART_RxCpltCallback>
}
 80089b4:	e007      	b.n	80089c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0208 	orr.w	r2, r2, #8
 80089c4:	619a      	str	r2, [r3, #24]
}
 80089c6:	bf00      	nop
 80089c8:	3770      	adds	r7, #112	@ 0x70
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	58000c00 	.word	0x58000c00

080089d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b09c      	sub	sp, #112	@ 0x70
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ec:	2b22      	cmp	r3, #34	@ 0x22
 80089ee:	f040 80be 	bne.w	8008b6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a16:	1c9a      	adds	r2, r3, #2
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 80a1 	bne.w	8008b7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a50:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e6      	bne.n	8008a3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e5      	bne.n	8008a6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a33      	ldr	r2, [pc, #204]	@ (8008b88 <UART_RxISR_16BIT+0x1b4>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d01f      	beq.n	8008b00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d018      	beq.n	8008b00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e6      	bne.n	8008ace <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d12e      	bne.n	8008b66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0310 	bic.w	r3, r3, #16
 8008b22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	f003 0310 	and.w	r3, r3, #16
 8008b4a:	2b10      	cmp	r3, #16
 8008b4c:	d103      	bne.n	8008b56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2210      	movs	r2, #16
 8008b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fe fd68 	bl	8007634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b64:	e00b      	b.n	8008b7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7f8 f824 	bl	8000bb4 <HAL_UART_RxCpltCallback>
}
 8008b6c:	e007      	b.n	8008b7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0208 	orr.w	r2, r2, #8
 8008b7c:	619a      	str	r2, [r3, #24]
}
 8008b7e:	bf00      	nop
 8008b80:	3770      	adds	r7, #112	@ 0x70
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	58000c00 	.word	0x58000c00

08008b8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b0ac      	sub	sp, #176	@ 0xb0
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bc2:	2b22      	cmp	r3, #34	@ 0x22
 8008bc4:	f040 8181 	bne.w	8008eca <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bd2:	e124      	b.n	8008e1e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bda:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008be2:	b2d9      	uxtb	r1, r3
 8008be4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bee:	400a      	ands	r2, r1
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d053      	beq.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d011      	beq.n	8008c56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2201      	movs	r2, #1
 8008c44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	f043 0201 	orr.w	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d011      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2202      	movs	r2, #2
 8008c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7c:	f043 0204 	orr.w	r2, r3, #4
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d011      	beq.n	8008cb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cac:	f043 0202 	orr.w	r2, r3, #2
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d006      	beq.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7fe fcad 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f040 80a1 	bne.w	8008e1e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d00:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e4      	bne.n	8008cdc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d24:	4b6f      	ldr	r3, [pc, #444]	@ (8008ee4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008d26:	4013      	ands	r3, r2
 8008d28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d36:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d38:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e3      	bne.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a61      	ldr	r2, [pc, #388]	@ (8008ee8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d021      	beq.n	8008dac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d01a      	beq.n	8008dac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d98:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d9a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e4      	bne.n	8008d76 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d130      	bne.n	8008e16 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	f023 0310 	bic.w	r3, r3, #16
 8008dce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e4      	bne.n	8008dba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d103      	bne.n	8008e06 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2210      	movs	r2, #16
 8008e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7fe fc10 	bl	8007634 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008e14:	e00e      	b.n	8008e34 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f7 fecc 	bl	8000bb4 <HAL_UART_RxCpltCallback>
        break;
 8008e1c:	e00a      	b.n	8008e34 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e1e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d006      	beq.n	8008e34 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8008e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f47f aed0 	bne.w	8008bd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e3a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d049      	beq.n	8008eda <UART_RxISR_8BIT_FIFOEN+0x34e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e4c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d242      	bcs.n	8008eda <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e3      	bne.n	8008e54 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a17      	ldr	r2, [pc, #92]	@ (8008eec <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008e90:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f043 0320 	orr.w	r3, r3, #32
 8008ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6979      	ldr	r1, [r7, #20]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e4      	bne.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ec8:	e007      	b.n	8008eda <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0208 	orr.w	r2, r2, #8
 8008ed8:	619a      	str	r2, [r3, #24]
}
 8008eda:	bf00      	nop
 8008edc:	37b0      	adds	r7, #176	@ 0xb0
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	effffffe 	.word	0xeffffffe
 8008ee8:	58000c00 	.word	0x58000c00
 8008eec:	0800881d 	.word	0x0800881d

08008ef0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b0ae      	sub	sp, #184	@ 0xb8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008efe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f26:	2b22      	cmp	r3, #34	@ 0x22
 8008f28:	f040 8185 	bne.w	8009236 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f36:	e128      	b.n	800918a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f52:	4013      	ands	r3, r2
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f60:	1c9a      	adds	r2, r3, #2
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d053      	beq.n	8009036 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d011      	beq.n	8008fbe <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2201      	movs	r2, #1
 8008fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb4:	f043 0201 	orr.w	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d011      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe4:	f043 0204 	orr.w	r2, r3, #4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2204      	movs	r2, #4
 800900c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009014:	f043 0202 	orr.w	r2, r3, #2
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009024:	2b00      	cmp	r3, #0
 8009026:	d006      	beq.n	8009036 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7fe faf9 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	f040 80a3 	bne.w	800918a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009058:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	461a      	mov	r2, r3
 8009062:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800906a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800906e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e2      	bne.n	8009044 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800908e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009090:	4b6f      	ldr	r3, [pc, #444]	@ (8009250 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009092:	4013      	ands	r3, r2
 8009094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e3      	bne.n	800907e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a61      	ldr	r2, [pc, #388]	@ (8009254 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d021      	beq.n	8009118 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d01a      	beq.n	8009118 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009106:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800910a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e4      	bne.n	80090e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800911c:	2b01      	cmp	r3, #1
 800911e:	d130      	bne.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009136:	f023 0310 	bic.w	r3, r3, #16
 800913a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009148:	647b      	str	r3, [r7, #68]	@ 0x44
 800914a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800914e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e4      	bne.n	8009126 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b10      	cmp	r3, #16
 8009168:	d103      	bne.n	8009172 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2210      	movs	r2, #16
 8009170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fe fa5a 	bl	8007634 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009180:	e00e      	b.n	80091a0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f7 fd16 	bl	8000bb4 <HAL_UART_RxCpltCallback>
        break;
 8009188:	e00a      	b.n	80091a0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800918a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800918e:	2b00      	cmp	r3, #0
 8009190:	d006      	beq.n	80091a0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8009192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	f47f aecc 	bne.w	8008f38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d049      	beq.n	8009246 <UART_RxISR_16BIT_FIFOEN+0x356>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091b8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80091bc:	429a      	cmp	r2, r3
 80091be:	d242      	bcs.n	8009246 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	623b      	str	r3, [r7, #32]
   return(result);
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80091e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80091e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e3      	bne.n	80091c0 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80091fc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	60fb      	str	r3, [r7, #12]
   return(result);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f043 0320 	orr.w	r3, r3, #32
 8009212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009220:	61fb      	str	r3, [r7, #28]
 8009222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	69b9      	ldr	r1, [r7, #24]
 8009226:	69fa      	ldr	r2, [r7, #28]
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	617b      	str	r3, [r7, #20]
   return(result);
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e4      	bne.n	80091fe <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009234:	e007      	b.n	8009246 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0208 	orr.w	r2, r2, #8
 8009244:	619a      	str	r2, [r3, #24]
}
 8009246:	bf00      	nop
 8009248:	37b8      	adds	r7, #184	@ 0xb8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	effffffe 	.word	0xeffffffe
 8009254:	58000c00 	.word	0x58000c00
 8009258:	080089d5 	.word	0x080089d5

0800925c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_UARTEx_DisableFifoMode+0x16>
 80092aa:	2302      	movs	r3, #2
 80092ac:	e027      	b.n	80092fe <HAL_UARTEx_DisableFifoMode+0x66>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2224      	movs	r2, #36	@ 0x24
 80092ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800931a:	2b01      	cmp	r3, #1
 800931c:	d101      	bne.n	8009322 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800931e:	2302      	movs	r3, #2
 8009320:	e02d      	b.n	800937e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2224      	movs	r2, #36	@ 0x24
 800932e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0201 	bic.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f850 	bl	8009404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800939a:	2302      	movs	r3, #2
 800939c:	e02d      	b.n	80093fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2224      	movs	r2, #36	@ 0x24
 80093aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 0201 	bic.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f812 	bl	8009404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009424:	e031      	b.n	800948a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009426:	2310      	movs	r3, #16
 8009428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800942a:	2310      	movs	r3, #16
 800942c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	0e5b      	lsrs	r3, r3, #25
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	0f5b      	lsrs	r3, r3, #29
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	7b3a      	ldrb	r2, [r7, #12]
 8009452:	4911      	ldr	r1, [pc, #68]	@ (8009498 <UARTEx_SetNbDataToProcess+0x94>)
 8009454:	5c8a      	ldrb	r2, [r1, r2]
 8009456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800945a:	7b3a      	ldrb	r2, [r7, #12]
 800945c:	490f      	ldr	r1, [pc, #60]	@ (800949c <UARTEx_SetNbDataToProcess+0x98>)
 800945e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009460:	fb93 f3f2 	sdiv	r3, r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	4909      	ldr	r1, [pc, #36]	@ (8009498 <UARTEx_SetNbDataToProcess+0x94>)
 8009472:	5c8a      	ldrb	r2, [r1, r2]
 8009474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009478:	7b7a      	ldrb	r2, [r7, #13]
 800947a:	4908      	ldr	r1, [pc, #32]	@ (800949c <UARTEx_SetNbDataToProcess+0x98>)
 800947c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800947e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	0801d3ac 	.word	0x0801d3ac
 800949c:	0801d3b4 	.word	0x0801d3b4

080094a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80094a0:	b5b0      	push	{r4, r5, r7, lr}
 80094a2:	b08c      	sub	sp, #48	@ 0x30
 80094a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80094a6:	4b8f      	ldr	r3, [pc, #572]	@ (80096e4 <MX_LWIP_Init+0x244>)
 80094a8:	22c0      	movs	r2, #192	@ 0xc0
 80094aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80094ac:	4b8d      	ldr	r3, [pc, #564]	@ (80096e4 <MX_LWIP_Init+0x244>)
 80094ae:	22a8      	movs	r2, #168	@ 0xa8
 80094b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80094b2:	4b8c      	ldr	r3, [pc, #560]	@ (80096e4 <MX_LWIP_Init+0x244>)
 80094b4:	2201      	movs	r2, #1
 80094b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 144;
 80094b8:	4b8a      	ldr	r3, [pc, #552]	@ (80096e4 <MX_LWIP_Init+0x244>)
 80094ba:	2290      	movs	r2, #144	@ 0x90
 80094bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80094be:	4b8a      	ldr	r3, [pc, #552]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80094c0:	22ff      	movs	r2, #255	@ 0xff
 80094c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80094c4:	4b88      	ldr	r3, [pc, #544]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80094c6:	22ff      	movs	r2, #255	@ 0xff
 80094c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80094ca:	4b87      	ldr	r3, [pc, #540]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80094cc:	22ff      	movs	r2, #255	@ 0xff
 80094ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 255;
 80094d0:	4b85      	ldr	r3, [pc, #532]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80094d2:	22ff      	movs	r2, #255	@ 0xff
 80094d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80094d6:	4b85      	ldr	r3, [pc, #532]	@ (80096ec <MX_LWIP_Init+0x24c>)
 80094d8:	22c0      	movs	r2, #192	@ 0xc0
 80094da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80094dc:	4b83      	ldr	r3, [pc, #524]	@ (80096ec <MX_LWIP_Init+0x24c>)
 80094de:	22a8      	movs	r2, #168	@ 0xa8
 80094e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80094e2:	4b82      	ldr	r3, [pc, #520]	@ (80096ec <MX_LWIP_Init+0x24c>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80094e8:	4b80      	ldr	r3, [pc, #512]	@ (80096ec <MX_LWIP_Init+0x24c>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80094ee:	2100      	movs	r1, #0
 80094f0:	2000      	movs	r0, #0
 80094f2:	f003 fa79 	bl	800c9e8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80094f6:	4b7b      	ldr	r3, [pc, #492]	@ (80096e4 <MX_LWIP_Init+0x244>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	061a      	lsls	r2, r3, #24
 80094fc:	4b79      	ldr	r3, [pc, #484]	@ (80096e4 <MX_LWIP_Init+0x244>)
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	431a      	orrs	r2, r3
 8009504:	4b77      	ldr	r3, [pc, #476]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009506:	789b      	ldrb	r3, [r3, #2]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	4313      	orrs	r3, r2
 800950c:	4a75      	ldr	r2, [pc, #468]	@ (80096e4 <MX_LWIP_Init+0x244>)
 800950e:	78d2      	ldrb	r2, [r2, #3]
 8009510:	4313      	orrs	r3, r2
 8009512:	061a      	lsls	r2, r3, #24
 8009514:	4b73      	ldr	r3, [pc, #460]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	0619      	lsls	r1, r3, #24
 800951a:	4b72      	ldr	r3, [pc, #456]	@ (80096e4 <MX_LWIP_Init+0x244>)
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	4319      	orrs	r1, r3
 8009522:	4b70      	ldr	r3, [pc, #448]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009524:	789b      	ldrb	r3, [r3, #2]
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	430b      	orrs	r3, r1
 800952a:	496e      	ldr	r1, [pc, #440]	@ (80096e4 <MX_LWIP_Init+0x244>)
 800952c:	78c9      	ldrb	r1, [r1, #3]
 800952e:	430b      	orrs	r3, r1
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009536:	431a      	orrs	r2, r3
 8009538:	4b6a      	ldr	r3, [pc, #424]	@ (80096e4 <MX_LWIP_Init+0x244>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	0619      	lsls	r1, r3, #24
 800953e:	4b69      	ldr	r3, [pc, #420]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	041b      	lsls	r3, r3, #16
 8009544:	4319      	orrs	r1, r3
 8009546:	4b67      	ldr	r3, [pc, #412]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009548:	789b      	ldrb	r3, [r3, #2]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	430b      	orrs	r3, r1
 800954e:	4965      	ldr	r1, [pc, #404]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009550:	78c9      	ldrb	r1, [r1, #3]
 8009552:	430b      	orrs	r3, r1
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800955a:	431a      	orrs	r2, r3
 800955c:	4b61      	ldr	r3, [pc, #388]	@ (80096e4 <MX_LWIP_Init+0x244>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	0619      	lsls	r1, r3, #24
 8009562:	4b60      	ldr	r3, [pc, #384]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	4319      	orrs	r1, r3
 800956a:	4b5e      	ldr	r3, [pc, #376]	@ (80096e4 <MX_LWIP_Init+0x244>)
 800956c:	789b      	ldrb	r3, [r3, #2]
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	430b      	orrs	r3, r1
 8009572:	495c      	ldr	r1, [pc, #368]	@ (80096e4 <MX_LWIP_Init+0x244>)
 8009574:	78c9      	ldrb	r1, [r1, #3]
 8009576:	430b      	orrs	r3, r1
 8009578:	0e1b      	lsrs	r3, r3, #24
 800957a:	4313      	orrs	r3, r2
 800957c:	4a5c      	ldr	r2, [pc, #368]	@ (80096f0 <MX_LWIP_Init+0x250>)
 800957e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009580:	4b59      	ldr	r3, [pc, #356]	@ (80096e8 <MX_LWIP_Init+0x248>)
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	061a      	lsls	r2, r3, #24
 8009586:	4b58      	ldr	r3, [pc, #352]	@ (80096e8 <MX_LWIP_Init+0x248>)
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	041b      	lsls	r3, r3, #16
 800958c:	431a      	orrs	r2, r3
 800958e:	4b56      	ldr	r3, [pc, #344]	@ (80096e8 <MX_LWIP_Init+0x248>)
 8009590:	789b      	ldrb	r3, [r3, #2]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	4313      	orrs	r3, r2
 8009596:	4a54      	ldr	r2, [pc, #336]	@ (80096e8 <MX_LWIP_Init+0x248>)
 8009598:	78d2      	ldrb	r2, [r2, #3]
 800959a:	4313      	orrs	r3, r2
 800959c:	061a      	lsls	r2, r3, #24
 800959e:	4b52      	ldr	r3, [pc, #328]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	0619      	lsls	r1, r3, #24
 80095a4:	4b50      	ldr	r3, [pc, #320]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	041b      	lsls	r3, r3, #16
 80095aa:	4319      	orrs	r1, r3
 80095ac:	4b4e      	ldr	r3, [pc, #312]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095ae:	789b      	ldrb	r3, [r3, #2]
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	430b      	orrs	r3, r1
 80095b4:	494c      	ldr	r1, [pc, #304]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095b6:	78c9      	ldrb	r1, [r1, #3]
 80095b8:	430b      	orrs	r3, r1
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095c0:	431a      	orrs	r2, r3
 80095c2:	4b49      	ldr	r3, [pc, #292]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	0619      	lsls	r1, r3, #24
 80095c8:	4b47      	ldr	r3, [pc, #284]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095ca:	785b      	ldrb	r3, [r3, #1]
 80095cc:	041b      	lsls	r3, r3, #16
 80095ce:	4319      	orrs	r1, r3
 80095d0:	4b45      	ldr	r3, [pc, #276]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095d2:	789b      	ldrb	r3, [r3, #2]
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	430b      	orrs	r3, r1
 80095d8:	4943      	ldr	r1, [pc, #268]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095da:	78c9      	ldrb	r1, [r1, #3]
 80095dc:	430b      	orrs	r3, r1
 80095de:	0a1b      	lsrs	r3, r3, #8
 80095e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095e4:	431a      	orrs	r2, r3
 80095e6:	4b40      	ldr	r3, [pc, #256]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	0619      	lsls	r1, r3, #24
 80095ec:	4b3e      	ldr	r3, [pc, #248]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	4319      	orrs	r1, r3
 80095f4:	4b3c      	ldr	r3, [pc, #240]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095f6:	789b      	ldrb	r3, [r3, #2]
 80095f8:	021b      	lsls	r3, r3, #8
 80095fa:	430b      	orrs	r3, r1
 80095fc:	493a      	ldr	r1, [pc, #232]	@ (80096e8 <MX_LWIP_Init+0x248>)
 80095fe:	78c9      	ldrb	r1, [r1, #3]
 8009600:	430b      	orrs	r3, r1
 8009602:	0e1b      	lsrs	r3, r3, #24
 8009604:	4313      	orrs	r3, r2
 8009606:	4a3b      	ldr	r2, [pc, #236]	@ (80096f4 <MX_LWIP_Init+0x254>)
 8009608:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800960a:	4b38      	ldr	r3, [pc, #224]	@ (80096ec <MX_LWIP_Init+0x24c>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	061a      	lsls	r2, r3, #24
 8009610:	4b36      	ldr	r3, [pc, #216]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	041b      	lsls	r3, r3, #16
 8009616:	431a      	orrs	r2, r3
 8009618:	4b34      	ldr	r3, [pc, #208]	@ (80096ec <MX_LWIP_Init+0x24c>)
 800961a:	789b      	ldrb	r3, [r3, #2]
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	4313      	orrs	r3, r2
 8009620:	4a32      	ldr	r2, [pc, #200]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009622:	78d2      	ldrb	r2, [r2, #3]
 8009624:	4313      	orrs	r3, r2
 8009626:	061a      	lsls	r2, r3, #24
 8009628:	4b30      	ldr	r3, [pc, #192]	@ (80096ec <MX_LWIP_Init+0x24c>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	0619      	lsls	r1, r3, #24
 800962e:	4b2f      	ldr	r3, [pc, #188]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	041b      	lsls	r3, r3, #16
 8009634:	4319      	orrs	r1, r3
 8009636:	4b2d      	ldr	r3, [pc, #180]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009638:	789b      	ldrb	r3, [r3, #2]
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	430b      	orrs	r3, r1
 800963e:	492b      	ldr	r1, [pc, #172]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009640:	78c9      	ldrb	r1, [r1, #3]
 8009642:	430b      	orrs	r3, r1
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800964a:	431a      	orrs	r2, r3
 800964c:	4b27      	ldr	r3, [pc, #156]	@ (80096ec <MX_LWIP_Init+0x24c>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	0619      	lsls	r1, r3, #24
 8009652:	4b26      	ldr	r3, [pc, #152]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	041b      	lsls	r3, r3, #16
 8009658:	4319      	orrs	r1, r3
 800965a:	4b24      	ldr	r3, [pc, #144]	@ (80096ec <MX_LWIP_Init+0x24c>)
 800965c:	789b      	ldrb	r3, [r3, #2]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	430b      	orrs	r3, r1
 8009662:	4922      	ldr	r1, [pc, #136]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009664:	78c9      	ldrb	r1, [r1, #3]
 8009666:	430b      	orrs	r3, r1
 8009668:	0a1b      	lsrs	r3, r3, #8
 800966a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800966e:	431a      	orrs	r2, r3
 8009670:	4b1e      	ldr	r3, [pc, #120]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	0619      	lsls	r1, r3, #24
 8009676:	4b1d      	ldr	r3, [pc, #116]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	041b      	lsls	r3, r3, #16
 800967c:	4319      	orrs	r1, r3
 800967e:	4b1b      	ldr	r3, [pc, #108]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009680:	789b      	ldrb	r3, [r3, #2]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	430b      	orrs	r3, r1
 8009686:	4919      	ldr	r1, [pc, #100]	@ (80096ec <MX_LWIP_Init+0x24c>)
 8009688:	78c9      	ldrb	r1, [r1, #3]
 800968a:	430b      	orrs	r3, r1
 800968c:	0e1b      	lsrs	r3, r3, #24
 800968e:	4313      	orrs	r3, r2
 8009690:	4a19      	ldr	r2, [pc, #100]	@ (80096f8 <MX_LWIP_Init+0x258>)
 8009692:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &slipif_init, &tcpip_input);
 8009694:	4b19      	ldr	r3, [pc, #100]	@ (80096fc <MX_LWIP_Init+0x25c>)
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	4b19      	ldr	r3, [pc, #100]	@ (8009700 <MX_LWIP_Init+0x260>)
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	4b15      	ldr	r3, [pc, #84]	@ (80096f8 <MX_LWIP_Init+0x258>)
 80096a2:	4a14      	ldr	r2, [pc, #80]	@ (80096f4 <MX_LWIP_Init+0x254>)
 80096a4:	4912      	ldr	r1, [pc, #72]	@ (80096f0 <MX_LWIP_Init+0x250>)
 80096a6:	4817      	ldr	r0, [pc, #92]	@ (8009704 <MX_LWIP_Init+0x264>)
 80096a8:	f004 ff3c 	bl	800e524 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80096ac:	4815      	ldr	r0, [pc, #84]	@ (8009704 <MX_LWIP_Init+0x264>)
 80096ae:	f005 f8eb 	bl	800e888 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80096b2:	4814      	ldr	r0, [pc, #80]	@ (8009704 <MX_LWIP_Init+0x264>)
 80096b4:	f005 f8f8 	bl	800e8a8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80096b8:	4913      	ldr	r1, [pc, #76]	@ (8009708 <MX_LWIP_Init+0x268>)
 80096ba:	4812      	ldr	r0, [pc, #72]	@ (8009704 <MX_LWIP_Init+0x264>)
 80096bc:	f005 f9f6 	bl	800eaac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80096c0:	4b12      	ldr	r3, [pc, #72]	@ (800970c <MX_LWIP_Init+0x26c>)
 80096c2:	1d3c      	adds	r4, r7, #4
 80096c4:	461d      	mov	r5, r3
 80096c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80096ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80096d2:	1d3b      	adds	r3, r7, #4
 80096d4:	490b      	ldr	r1, [pc, #44]	@ (8009704 <MX_LWIP_Init+0x264>)
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f983 	bl	80099e2 <osThreadCreate>
    /* add the network interface (IPv4/IPv6) with RTOS */
    //netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &slipif_init, &tcpip_input);

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* USER CODE END 3 */
}
 80096dc:	bf00      	nop
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bdb0      	pop	{r4, r5, r7, pc}
 80096e4:	2400500c 	.word	0x2400500c
 80096e8:	24005010 	.word	0x24005010
 80096ec:	24005014 	.word	0x24005014
 80096f0:	24005000 	.word	0x24005000
 80096f4:	24005004 	.word	0x24005004
 80096f8:	24005008 	.word	0x24005008
 80096fc:	0800c925 	.word	0x0800c925
 8009700:	08018c9d 	.word	0x08018c9d
 8009704:	24004fcc 	.word	0x24004fcc
 8009708:	08009711 	.word	0x08009711
 800970c:	0801a5f0 	.word	0x0801a5f0

08009710 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800972c:	4b04      	ldr	r3, [pc, #16]	@ (8009740 <HAL_ETH_RxCpltCallback+0x1c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fa53 	bl	8009bdc <osSemaphoreRelease>
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	24005020 	.word	0x24005020

08009744 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800974c:	4b04      	ldr	r3, [pc, #16]	@ (8009760 <HAL_ETH_TxCpltCallback+0x1c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fa43 	bl	8009bdc <osSemaphoreRelease>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	24005024 	.word	0x24005024

08009764 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7f9 fd85 	bl	800327c <HAL_ETH_GetDMAError>
 8009772:	4603      	mov	r3, r0
 8009774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009778:	2b80      	cmp	r3, #128	@ 0x80
 800977a:	d104      	bne.n	8009786 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800977c:	4b04      	ldr	r3, [pc, #16]	@ (8009790 <HAL_ETH_ErrorCallback+0x2c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fa2b 	bl	8009bdc <osSemaphoreRelease>
  }
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	24005020 	.word	0x24005020

08009794 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80097a0:	68f9      	ldr	r1, [r7, #12]
 80097a2:	4809      	ldr	r0, [pc, #36]	@ (80097c8 <pbuf_free_custom+0x34>)
 80097a4:	f004 fe68 	bl	800e478 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80097a8:	4b08      	ldr	r3, [pc, #32]	@ (80097cc <pbuf_free_custom+0x38>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d107      	bne.n	80097c0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80097b0:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <pbuf_free_custom+0x38>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80097b6:	4b06      	ldr	r3, [pc, #24]	@ (80097d0 <pbuf_free_custom+0x3c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fa0e 	bl	8009bdc <osSemaphoreRelease>
  }
}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	0801d3bc 	.word	0x0801d3bc
 80097cc:	2400501c 	.word	0x2400501c
 80097d0:	24005020 	.word	0x24005020

080097d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80097d8:	f7f8 fa16 	bl	8001c08 <HAL_GetTick>
 80097dc:	4603      	mov	r3, r0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b0a0      	sub	sp, #128	@ 0x80
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	2264      	movs	r2, #100	@ 0x64
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	f00f fe67 	bl	80194c8 <memset>
  int32_t PHYLinkState = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009802:	2300      	movs	r3, #0
 8009804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009806:	2300      	movs	r3, #0
 8009808:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800980e:	483a      	ldr	r0, [pc, #232]	@ (80098f8 <ethernet_link_thread+0x114>)
 8009810:	f7f7 ffed 	bl	80017ee <LAN8742_GetLinkState>
 8009814:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009818:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800981c:	089b      	lsrs	r3, r3, #2
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00c      	beq.n	8009842 <ethernet_link_thread+0x5e>
 8009828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800982a:	2b01      	cmp	r3, #1
 800982c:	dc09      	bgt.n	8009842 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800982e:	4833      	ldr	r0, [pc, #204]	@ (80098fc <ethernet_link_thread+0x118>)
 8009830:	f7f9 f932 	bl	8002a98 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009834:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009836:	f005 f8a3 	bl	800e980 <netif_set_down>
    netif_set_link_down(netif);
 800983a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800983c:	f005 f906 	bl	800ea4c <netif_set_link_down>
 8009840:	e055      	b.n	80098ee <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009844:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d14e      	bne.n	80098ee <ethernet_link_thread+0x10a>
 8009850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009852:	2b01      	cmp	r3, #1
 8009854:	dd4b      	ble.n	80098ee <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009858:	3b02      	subs	r3, #2
 800985a:	2b03      	cmp	r3, #3
 800985c:	d82a      	bhi.n	80098b4 <ethernet_link_thread+0xd0>
 800985e:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <ethernet_link_thread+0x80>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009875 	.word	0x08009875
 8009868:	08009887 	.word	0x08009887
 800986c:	08009897 	.word	0x08009897
 8009870:	080098a7 	.word	0x080098a7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009878:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800987a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800987e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009880:	2301      	movs	r3, #1
 8009882:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009884:	e017      	b.n	80098b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009886:	2300      	movs	r3, #0
 8009888:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800988a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800988e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009890:	2301      	movs	r3, #1
 8009892:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009894:	e00f      	b.n	80098b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800989a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800989c:	2300      	movs	r3, #0
 800989e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80098a0:	2301      	movs	r3, #1
 80098a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80098a4:	e007      	b.n	80098b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80098aa:	2300      	movs	r3, #0
 80098ac:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80098ae:	2301      	movs	r3, #1
 80098b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80098b2:	e000      	b.n	80098b6 <ethernet_link_thread+0xd2>
    default:
      break;
 80098b4:	bf00      	nop
    }

    if(linkchanged)
 80098b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d018      	beq.n	80098ee <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4619      	mov	r1, r3
 80098c2:	480e      	ldr	r0, [pc, #56]	@ (80098fc <ethernet_link_thread+0x118>)
 80098c4:	f7f9 faec 	bl	8002ea0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80098c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098ca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80098cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098ce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80098d0:	f107 0308 	add.w	r3, r7, #8
 80098d4:	4619      	mov	r1, r3
 80098d6:	4809      	ldr	r0, [pc, #36]	@ (80098fc <ethernet_link_thread+0x118>)
 80098d8:	f7f9 fcb6 	bl	8003248 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80098dc:	4807      	ldr	r0, [pc, #28]	@ (80098fc <ethernet_link_thread+0x118>)
 80098de:	f7f9 f867 	bl	80029b0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80098e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80098e4:	f004 ffe0 	bl	800e8a8 <netif_set_up>
      netif_set_link_up(netif);
 80098e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80098ea:	f005 f87b 	bl	800e9e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80098ee:	2064      	movs	r0, #100	@ 0x64
 80098f0:	f000 f8c3 	bl	8009a7a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80098f4:	e78b      	b.n	800980e <ethernet_link_thread+0x2a>
 80098f6:	bf00      	nop
 80098f8:	240050d8 	.word	0x240050d8
 80098fc:	24005028 	.word	0x24005028

08009900 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009908:	4812      	ldr	r0, [pc, #72]	@ (8009954 <HAL_ETH_RxAllocateCallback+0x54>)
 800990a:	f004 fd41 	bl	800e390 <memp_malloc_pool>
 800990e:	60f8      	str	r0, [r7, #12]
  if (p)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d014      	beq.n	8009940 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f103 0220 	add.w	r2, r3, #32
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4a0d      	ldr	r2, [pc, #52]	@ (8009958 <HAL_ETH_RxAllocateCallback+0x58>)
 8009924:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800992e:	9201      	str	r2, [sp, #4]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2241      	movs	r2, #65	@ 0x41
 8009936:	2100      	movs	r1, #0
 8009938:	2000      	movs	r0, #0
 800993a:	f005 faab 	bl	800ee94 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800993e:	e005      	b.n	800994c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <HAL_ETH_RxAllocateCallback+0x5c>)
 8009942:	2201      	movs	r2, #1
 8009944:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	0801d3bc 	.word	0x0801d3bc
 8009958:	08009795 	.word	0x08009795
 800995c:	2400501c 	.word	0x2400501c

08009960 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800996e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009972:	2b84      	cmp	r3, #132	@ 0x84
 8009974:	d005      	beq.n	8009982 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4413      	add	r3, r2
 800997e:	3303      	adds	r3, #3
 8009980:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009982:	68fb      	ldr	r3, [r7, #12]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009996:	f3ef 8305 	mrs	r3, IPSR
 800999a:	607b      	str	r3, [r7, #4]
  return(result);
 800999c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bf14      	ite	ne
 80099a2:	2301      	movne	r3, #1
 80099a4:	2300      	moveq	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80099b8:	f001 fc16 	bl	800b1e8 <vTaskStartScheduler>
  
  return osOK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80099c6:	f7ff ffe3 	bl	8009990 <inHandlerMode>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80099d0:	f001 fd30 	bl	800b434 <xTaskGetTickCountFromISR>
 80099d4:	4603      	mov	r3, r0
 80099d6:	e002      	b.n	80099de <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80099d8:	f001 fd1c 	bl	800b414 <xTaskGetTickCount>
 80099dc:	4603      	mov	r3, r0
  }
}
 80099de:	4618      	mov	r0, r3
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80099e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e4:	b089      	sub	sp, #36	@ 0x24
 80099e6:	af04      	add	r7, sp, #16
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d020      	beq.n	8009a36 <osThreadCreate+0x54>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01c      	beq.n	8009a36 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685c      	ldr	r4, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691e      	ldr	r6, [r3, #16]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff ffa6 	bl	8009960 <makeFreeRtosPriority>
 8009a14:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a1e:	9202      	str	r2, [sp, #8]
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	9100      	str	r1, [sp, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	4632      	mov	r2, r6
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f001 f9f6 	bl	800ae1c <xTaskCreateStatic>
 8009a30:	4603      	mov	r3, r0
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e01c      	b.n	8009a70 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685c      	ldr	r4, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a42:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff ff88 	bl	8009960 <makeFreeRtosPriority>
 8009a50:	4602      	mov	r2, r0
 8009a52:	f107 030c 	add.w	r3, r7, #12
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	9200      	str	r2, [sp, #0]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4620      	mov	r0, r4
 8009a62:	f001 fa3b 	bl	800aedc <xTaskCreate>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d001      	beq.n	8009a70 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	e000      	b.n	8009a72 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <osDelay+0x16>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	e000      	b.n	8009a92 <osDelay+0x18>
 8009a90:	2301      	movs	r3, #1
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 fb72 	bl	800b17c <vTaskDelay>
  
  return osOK;
 8009a98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f000 fbc8 	bl	800a24e <xQueueCreateMutexStatic>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	e003      	b.n	8009aca <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f000 fbab 	bl	800a21e <xQueueCreateMutex>
 8009ac8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <osMutexWait+0x18>
    return osErrorParameter;
 8009ae8:	2380      	movs	r3, #128	@ 0x80
 8009aea:	e03a      	b.n	8009b62 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009af6:	d103      	bne.n	8009b00 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	e009      	b.n	8009b14 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d006      	beq.n	8009b14 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <osMutexWait+0x40>
      ticks = 1;
 8009b10:	2301      	movs	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009b14:	f7ff ff3c 	bl	8009990 <inHandlerMode>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d017      	beq.n	8009b4e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b1e:	f107 0308 	add.w	r3, r7, #8
 8009b22:	461a      	mov	r2, r3
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 ffce 	bl	800aac8 <xQueueReceiveFromISR>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d001      	beq.n	8009b36 <osMutexWait+0x62>
      return osErrorOS;
 8009b32:	23ff      	movs	r3, #255	@ 0xff
 8009b34:	e015      	b.n	8009b62 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d011      	beq.n	8009b60 <osMutexWait+0x8c>
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b6c <osMutexWait+0x98>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	e008      	b.n	8009b60 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fea9 	bl	800a8a8 <xQueueSemaphoreTake>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d001      	beq.n	8009b60 <osMutexWait+0x8c>
    return osErrorOS;
 8009b5c:	23ff      	movs	r3, #255	@ 0xff
 8009b5e:	e000      	b.n	8009b62 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009b80:	f7ff ff06 	bl	8009990 <inHandlerMode>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fd17 	bl	800a5c4 <xQueueGiveFromISR>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d001      	beq.n	8009ba0 <osMutexRelease+0x30>
      return osErrorOS;
 8009b9c:	23ff      	movs	r3, #255	@ 0xff
 8009b9e:	e017      	b.n	8009bd0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d013      	beq.n	8009bce <osMutexRelease+0x5e>
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd8 <osMutexRelease+0x68>)
 8009ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	e00a      	b.n	8009bce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fb60 	bl	800a284 <xQueueGenericSend>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d001      	beq.n	8009bce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009bca:	23ff      	movs	r3, #255	@ 0xff
 8009bcc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009bce:	68fb      	ldr	r3, [r7, #12]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009bec:	f7ff fed0 	bl	8009990 <inHandlerMode>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009bf6:	f107 0308 	add.w	r3, r7, #8
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fce1 	bl	800a5c4 <xQueueGiveFromISR>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d001      	beq.n	8009c0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009c08:	23ff      	movs	r3, #255	@ 0xff
 8009c0a:	e017      	b.n	8009c3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d013      	beq.n	8009c3a <osSemaphoreRelease+0x5e>
 8009c12:	4b0c      	ldr	r3, [pc, #48]	@ (8009c44 <osSemaphoreRelease+0x68>)
 8009c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	e00a      	b.n	8009c3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009c24:	2300      	movs	r3, #0
 8009c26:	2200      	movs	r2, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fb2a 	bl	800a284 <xQueueGenericSend>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d001      	beq.n	8009c3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009c36:	23ff      	movs	r3, #255	@ 0xff
 8009c38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	e000ed04 	.word	0xe000ed04

08009c48 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009c48:	b590      	push	{r4, r7, lr}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af02      	add	r7, sp, #8
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d011      	beq.n	8009c7e <osMessageCreate+0x36>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00d      	beq.n	8009c7e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6859      	ldr	r1, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	2400      	movs	r4, #0
 8009c74:	9400      	str	r4, [sp, #0]
 8009c76:	f000 f9e1 	bl	800a03c <xQueueGenericCreateStatic>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	e008      	b.n	8009c90 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f000 fa54 	bl	800a136 <xQueueGenericCreate>
 8009c8e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd90      	pop	{r4, r7, pc}

08009c98 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <osMessagePut+0x1e>
    ticks = 1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009cb6:	f7ff fe6b 	bl	8009990 <inHandlerMode>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d018      	beq.n	8009cf2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009cc0:	f107 0210 	add.w	r2, r7, #16
 8009cc4:	f107 0108 	add.w	r1, r7, #8
 8009cc8:	2300      	movs	r3, #0
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 fbdc 	bl	800a488 <xQueueGenericSendFromISR>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d001      	beq.n	8009cda <osMessagePut+0x42>
      return osErrorOS;
 8009cd6:	23ff      	movs	r3, #255	@ 0xff
 8009cd8:	e018      	b.n	8009d0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d014      	beq.n	8009d0a <osMessagePut+0x72>
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d14 <osMessagePut+0x7c>)
 8009ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	e00b      	b.n	8009d0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009cf2:	f107 0108 	add.w	r1, r7, #8
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fac2 	bl	800a284 <xQueueGenericSend>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d001      	beq.n	8009d0a <osMessagePut+0x72>
      return osErrorOS;
 8009d06:	23ff      	movs	r3, #255	@ 0xff
 8009d08:	e000      	b.n	8009d0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	e000ed04 	.word	0xe000ed04

08009d18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b08b      	sub	sp, #44	@ 0x2c
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009d32:	2380      	movs	r3, #128	@ 0x80
 8009d34:	617b      	str	r3, [r7, #20]
    return event;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	461c      	mov	r4, r3
 8009d3a:	f107 0314 	add.w	r3, r7, #20
 8009d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d46:	e054      	b.n	8009df2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d56:	d103      	bne.n	8009d60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d5e:	e009      	b.n	8009d74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d006      	beq.n	8009d74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <osMessageGet+0x5c>
      ticks = 1;
 8009d70:	2301      	movs	r3, #1
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009d74:	f7ff fe0c 	bl	8009990 <inHandlerMode>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d01c      	beq.n	8009db8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009d7e:	f107 0220 	add.w	r2, r7, #32
 8009d82:	f107 0314 	add.w	r3, r7, #20
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	68b8      	ldr	r0, [r7, #8]
 8009d8c:	f000 fe9c 	bl	800aac8 <xQueueReceiveFromISR>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d102      	bne.n	8009d9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009d96:	2310      	movs	r3, #16
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	e001      	b.n	8009da0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01d      	beq.n	8009de2 <osMessageGet+0xca>
 8009da6:	4b15      	ldr	r3, [pc, #84]	@ (8009dfc <osMessageGet+0xe4>)
 8009da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	e014      	b.n	8009de2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	68b8      	ldr	r0, [r7, #8]
 8009dc4:	f000 fc8e 	bl	800a6e4 <xQueueReceive>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d102      	bne.n	8009dd4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009dce:	2310      	movs	r3, #16
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	e006      	b.n	8009de2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <osMessageGet+0xc6>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e000      	b.n	8009de0 <osMessageGet+0xc8>
 8009dde:	2340      	movs	r3, #64	@ 0x40
 8009de0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	461c      	mov	r4, r3
 8009de6:	f107 0314 	add.w	r3, r7, #20
 8009dea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	372c      	adds	r7, #44	@ 0x2c
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd90      	pop	{r4, r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	e000ed04 	.word	0xe000ed04

08009e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f103 0208 	add.w	r2, r3, #8
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f103 0208 	add.w	r2, r3, #8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f103 0208 	add.w	r2, r3, #8
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	601a      	str	r2, [r3, #0]
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eb8:	d103      	bne.n	8009ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e00c      	b.n	8009edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e002      	b.n	8009ed0 <vListInsert+0x2e>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d2f6      	bcs.n	8009eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6892      	ldr	r2, [r2, #8]
 8009f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6852      	ldr	r2, [r2, #4]
 8009f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d103      	bne.n	8009f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	1e5a      	subs	r2, r3, #1
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10b      	bne.n	8009f94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f94:	f002 f8c0 	bl	800c118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa0:	68f9      	ldr	r1, [r7, #12]
 8009fa2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	441a      	add	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fca:	fb01 f303 	mul.w	r3, r1, r3
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	22ff      	movs	r2, #255	@ 0xff
 8009fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	22ff      	movs	r2, #255	@ 0xff
 8009fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d114      	bne.n	800a014 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01a      	beq.n	800a028 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3310      	adds	r3, #16
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 fb72 	bl	800b6e0 <xTaskRemoveFromEventList>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d012      	beq.n	800a028 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a002:	4b0d      	ldr	r3, [pc, #52]	@ (800a038 <xQueueGenericReset+0xd0>)
 800a004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	e009      	b.n	800a028 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3310      	adds	r3, #16
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff fef1 	bl	8009e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3324      	adds	r3, #36	@ 0x24
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff feec 	bl	8009e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a028:	f002 f8a8 	bl	800c17c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a02c:	2301      	movs	r3, #1
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08e      	sub	sp, #56	@ 0x38
 800a040:	af02      	add	r7, sp, #8
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10b      	bne.n	800a068 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10b      	bne.n	800a086 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	e7fd      	b.n	800a082 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <xQueueGenericCreateStatic+0x56>
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <xQueueGenericCreateStatic+0x5a>
 800a092:	2301      	movs	r3, #1
 800a094:	e000      	b.n	800a098 <xQueueGenericCreateStatic+0x5c>
 800a096:	2300      	movs	r3, #0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10b      	bne.n	800a0b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	623b      	str	r3, [r7, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	bf00      	nop
 800a0b2:	e7fd      	b.n	800a0b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <xQueueGenericCreateStatic+0x84>
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <xQueueGenericCreateStatic+0x88>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <xQueueGenericCreateStatic+0x8a>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10b      	bne.n	800a0e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	61fb      	str	r3, [r7, #28]
}
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	e7fd      	b.n	800a0de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0e2:	2348      	movs	r3, #72	@ 0x48
 800a0e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b48      	cmp	r3, #72	@ 0x48
 800a0ea:	d00b      	beq.n	800a104 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	61bb      	str	r3, [r7, #24]
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	e7fd      	b.n	800a100 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a104:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00d      	beq.n	800a12c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a118:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4613      	mov	r3, r2
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 f840 	bl	800a1ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a12e:	4618      	mov	r0, r3
 800a130:	3730      	adds	r7, #48	@ 0x30
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a136:	b580      	push	{r7, lr}
 800a138:	b08a      	sub	sp, #40	@ 0x28
 800a13a:	af02      	add	r7, sp, #8
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	4613      	mov	r3, r2
 800a142:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	613b      	str	r3, [r7, #16]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	fb02 f303 	mul.w	r3, r2, r3
 800a16a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3348      	adds	r3, #72	@ 0x48
 800a170:	4618      	mov	r0, r3
 800a172:	f002 f8f3 	bl	800c35c <pvPortMalloc>
 800a176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d011      	beq.n	800a1a2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	3348      	adds	r3, #72	@ 0x48
 800a186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a190:	79fa      	ldrb	r2, [r7, #7]
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	4613      	mov	r3, r2
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f805 	bl	800a1ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1a2:	69bb      	ldr	r3, [r7, #24]
	}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d103      	bne.n	800a1c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	e002      	b.n	800a1ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1da:	2101      	movs	r1, #1
 800a1dc:	69b8      	ldr	r0, [r7, #24]
 800a1de:	f7ff fec3 	bl	8009f68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00e      	beq.n	800a216 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a20a:	2300      	movs	r3, #0
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f837 	bl	800a284 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	4603      	mov	r3, r0
 800a226:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a228:	2301      	movs	r3, #1
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	2300      	movs	r3, #0
 800a22e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	461a      	mov	r2, r3
 800a234:	6939      	ldr	r1, [r7, #16]
 800a236:	6978      	ldr	r0, [r7, #20]
 800a238:	f7ff ff7d 	bl	800a136 <xQueueGenericCreate>
 800a23c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff ffd3 	bl	800a1ea <prvInitialiseMutex>

		return xNewQueue;
 800a244:	68fb      	ldr	r3, [r7, #12]
	}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af02      	add	r7, sp, #8
 800a254:	4603      	mov	r3, r0
 800a256:	6039      	str	r1, [r7, #0]
 800a258:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a25a:	2301      	movs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	2300      	movs	r3, #0
 800a260:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2200      	movs	r2, #0
 800a26a:	6939      	ldr	r1, [r7, #16]
 800a26c:	6978      	ldr	r0, [r7, #20]
 800a26e:	f7ff fee5 	bl	800a03c <xQueueGenericCreateStatic>
 800a272:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f7ff ffb8 	bl	800a1ea <prvInitialiseMutex>

		return xNewQueue;
 800a27a:	68fb      	ldr	r3, [r7, #12]
	}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08e      	sub	sp, #56	@ 0x38
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a292:	2300      	movs	r3, #0
 800a294:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10b      	bne.n	800a2b8 <xQueueGenericSend+0x34>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	e7fd      	b.n	800a2b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d103      	bne.n	800a2c6 <xQueueGenericSend+0x42>
 800a2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <xQueueGenericSend+0x46>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <xQueueGenericSend+0x48>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <xQueueGenericSend+0x64>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	e7fd      	b.n	800a2e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d103      	bne.n	800a2f6 <xQueueGenericSend+0x72>
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d101      	bne.n	800a2fa <xQueueGenericSend+0x76>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <xQueueGenericSend+0x78>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <xQueueGenericSend+0x94>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	623b      	str	r3, [r7, #32]
}
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	e7fd      	b.n	800a314 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a318:	f001 fba8 	bl	800ba6c <xTaskGetSchedulerState>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d102      	bne.n	800a328 <xQueueGenericSend+0xa4>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <xQueueGenericSend+0xa8>
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <xQueueGenericSend+0xaa>
 800a32c:	2300      	movs	r3, #0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10b      	bne.n	800a34a <xQueueGenericSend+0xc6>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	61fb      	str	r3, [r7, #28]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a34a:	f001 fee5 	bl	800c118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a356:	429a      	cmp	r2, r3
 800a358:	d302      	bcc.n	800a360 <xQueueGenericSend+0xdc>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d129      	bne.n	800a3b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a366:	f000 fc49 	bl	800abfc <prvCopyDataToQueue>
 800a36a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	d010      	beq.n	800a396 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	3324      	adds	r3, #36	@ 0x24
 800a378:	4618      	mov	r0, r3
 800a37a:	f001 f9b1 	bl	800b6e0 <xTaskRemoveFromEventList>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d013      	beq.n	800a3ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a384:	4b3f      	ldr	r3, [pc, #252]	@ (800a484 <xQueueGenericSend+0x200>)
 800a386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	e00a      	b.n	800a3ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d007      	beq.n	800a3ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a39c:	4b39      	ldr	r3, [pc, #228]	@ (800a484 <xQueueGenericSend+0x200>)
 800a39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3ac:	f001 fee6 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e063      	b.n	800a47c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d103      	bne.n	800a3c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3ba:	f001 fedf 	bl	800c17c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e05c      	b.n	800a47c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3c8:	f107 0314 	add.w	r3, r7, #20
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f001 f9eb 	bl	800b7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3d6:	f001 fed1 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3da:	f000 ff6f 	bl	800b2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3de:	f001 fe9b 	bl	800c118 <vPortEnterCritical>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3e8:	b25b      	sxtb	r3, r3
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ee:	d103      	bne.n	800a3f8 <xQueueGenericSend+0x174>
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3fe:	b25b      	sxtb	r3, r3
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a404:	d103      	bne.n	800a40e <xQueueGenericSend+0x18a>
 800a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a40e:	f001 feb5 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a412:	1d3a      	adds	r2, r7, #4
 800a414:	f107 0314 	add.w	r3, r7, #20
 800a418:	4611      	mov	r1, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 f9da 	bl	800b7d4 <xTaskCheckForTimeOut>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d124      	bne.n	800a470 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a428:	f000 fce0 	bl	800adec <prvIsQueueFull>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d018      	beq.n	800a464 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	3310      	adds	r3, #16
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	4611      	mov	r1, r2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 f92a 	bl	800b694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a442:	f000 fc6b 	bl	800ad1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a446:	f000 ff47 	bl	800b2d8 <xTaskResumeAll>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f47f af7c 	bne.w	800a34a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <xQueueGenericSend+0x200>)
 800a454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	e772      	b.n	800a34a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a466:	f000 fc59 	bl	800ad1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a46a:	f000 ff35 	bl	800b2d8 <xTaskResumeAll>
 800a46e:	e76c      	b.n	800a34a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a472:	f000 fc53 	bl	800ad1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a476:	f000 ff2f 	bl	800b2d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a47a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3738      	adds	r7, #56	@ 0x38
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b090      	sub	sp, #64	@ 0x40
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10b      	bne.n	800a4b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4b2:	bf00      	nop
 800a4b4:	bf00      	nop
 800a4b6:	e7fd      	b.n	800a4b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <xQueueGenericSendFromISR+0x3e>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <xQueueGenericSendFromISR+0x42>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <xQueueGenericSendFromISR+0x44>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d103      	bne.n	800a4f6 <xQueueGenericSendFromISR+0x6e>
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <xQueueGenericSendFromISR+0x72>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <xQueueGenericSendFromISR+0x74>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10b      	bne.n	800a518 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	623b      	str	r3, [r7, #32]
}
 800a512:	bf00      	nop
 800a514:	bf00      	nop
 800a516:	e7fd      	b.n	800a514 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a518:	f001 fede 	bl	800c2d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a51c:	f3ef 8211 	mrs	r2, BASEPRI
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	61fa      	str	r2, [r7, #28]
 800a532:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a534:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a540:	429a      	cmp	r2, r3
 800a542:	d302      	bcc.n	800a54a <xQueueGenericSendFromISR+0xc2>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d12f      	bne.n	800a5aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a558:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a560:	f000 fb4c 	bl	800abfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a564:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a56c:	d112      	bne.n	800a594 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a572:	2b00      	cmp	r3, #0
 800a574:	d016      	beq.n	800a5a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a578:	3324      	adds	r3, #36	@ 0x24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f001 f8b0 	bl	800b6e0 <xTaskRemoveFromEventList>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00e      	beq.n	800a5a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00b      	beq.n	800a5a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	e007      	b.n	800a5a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a598:	3301      	adds	r3, #1
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	b25a      	sxtb	r2, r3
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5a8:	e001      	b.n	800a5ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3740      	adds	r7, #64	@ 0x40
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08e      	sub	sp, #56	@ 0x38
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	623b      	str	r3, [r7, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00b      	beq.n	800a610 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	61fb      	str	r3, [r7, #28]
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueGiveFromISR+0x5c>
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueGiveFromISR+0x60>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueGiveFromISR+0x62>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	61bb      	str	r3, [r7, #24]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a642:	f001 fe49 	bl	800c2d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a646:	f3ef 8211 	mrs	r2, BASEPRI
 800a64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	617a      	str	r2, [r7, #20]
 800a65c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a65e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a660:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a666:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a66e:	429a      	cmp	r2, r3
 800a670:	d22b      	bcs.n	800a6ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a684:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a68c:	d112      	bne.n	800a6b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a692:	2b00      	cmp	r3, #0
 800a694:	d016      	beq.n	800a6c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	3324      	adds	r3, #36	@ 0x24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f001 f820 	bl	800b6e0 <xTaskRemoveFromEventList>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00e      	beq.n	800a6c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	e007      	b.n	800a6c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	b25a      	sxtb	r2, r3
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c8:	e001      	b.n	800a6ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f383 8811 	msr	BASEPRI, r3
}
 800a6d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3738      	adds	r7, #56	@ 0x38
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08c      	sub	sp, #48	@ 0x30
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <xQueueReceive+0x32>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	623b      	str	r3, [r7, #32]
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	e7fd      	b.n	800a712 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d103      	bne.n	800a724 <xQueueReceive+0x40>
 800a71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <xQueueReceive+0x44>
 800a724:	2301      	movs	r3, #1
 800a726:	e000      	b.n	800a72a <xQueueReceive+0x46>
 800a728:	2300      	movs	r3, #0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10b      	bne.n	800a746 <xQueueReceive+0x62>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	61fb      	str	r3, [r7, #28]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a746:	f001 f991 	bl	800ba6c <xTaskGetSchedulerState>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <xQueueReceive+0x72>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <xQueueReceive+0x76>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <xQueueReceive+0x78>
 800a75a:	2300      	movs	r3, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10b      	bne.n	800a778 <xQueueReceive+0x94>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	61bb      	str	r3, [r7, #24]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a778:	f001 fcce 	bl	800c118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a780:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01f      	beq.n	800a7c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a78c:	f000 faa0 	bl	800acd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a792:	1e5a      	subs	r2, r3, #1
 800a794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a796:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00f      	beq.n	800a7c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a2:	3310      	adds	r3, #16
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 ff9b 	bl	800b6e0 <xTaskRemoveFromEventList>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d007      	beq.n	800a7c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7b0:	4b3c      	ldr	r3, [pc, #240]	@ (800a8a4 <xQueueReceive+0x1c0>)
 800a7b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7c0:	f001 fcdc 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e069      	b.n	800a89c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d103      	bne.n	800a7d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7ce:	f001 fcd5 	bl	800c17c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e062      	b.n	800a89c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d106      	bne.n	800a7ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7dc:	f107 0310 	add.w	r3, r7, #16
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 ffe1 	bl	800b7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7ea:	f001 fcc7 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ee:	f000 fd65 	bl	800b2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7f2:	f001 fc91 	bl	800c118 <vPortEnterCritical>
 800a7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7fc:	b25b      	sxtb	r3, r3
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a802:	d103      	bne.n	800a80c <xQueueReceive+0x128>
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a812:	b25b      	sxtb	r3, r3
 800a814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a818:	d103      	bne.n	800a822 <xQueueReceive+0x13e>
 800a81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a822:	f001 fcab 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a826:	1d3a      	adds	r2, r7, #4
 800a828:	f107 0310 	add.w	r3, r7, #16
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 ffd0 	bl	800b7d4 <xTaskCheckForTimeOut>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d123      	bne.n	800a882 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a83a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a83c:	f000 fac0 	bl	800adc0 <prvIsQueueEmpty>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d017      	beq.n	800a876 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a848:	3324      	adds	r3, #36	@ 0x24
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 ff20 	bl	800b694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a856:	f000 fa61 	bl	800ad1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a85a:	f000 fd3d 	bl	800b2d8 <xTaskResumeAll>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d189      	bne.n	800a778 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a864:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a4 <xQueueReceive+0x1c0>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	e780      	b.n	800a778 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a878:	f000 fa50 	bl	800ad1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a87c:	f000 fd2c 	bl	800b2d8 <xTaskResumeAll>
 800a880:	e77a      	b.n	800a778 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a884:	f000 fa4a 	bl	800ad1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a888:	f000 fd26 	bl	800b2d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a88c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a88e:	f000 fa97 	bl	800adc0 <prvIsQueueEmpty>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	f43f af6f 	beq.w	800a778 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a89a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3730      	adds	r7, #48	@ 0x30
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	e000ed04 	.word	0xe000ed04

0800a8a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08e      	sub	sp, #56	@ 0x38
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	623b      	str	r3, [r7, #32]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	61fb      	str	r3, [r7, #28]
}
 800a8f6:	bf00      	nop
 800a8f8:	bf00      	nop
 800a8fa:	e7fd      	b.n	800a8f8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8fc:	f001 f8b6 	bl	800ba6c <xTaskGetSchedulerState>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <xQueueSemaphoreTake+0x64>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <xQueueSemaphoreTake+0x68>
 800a90c:	2301      	movs	r3, #1
 800a90e:	e000      	b.n	800a912 <xQueueSemaphoreTake+0x6a>
 800a910:	2300      	movs	r3, #0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10b      	bne.n	800a92e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	61bb      	str	r3, [r7, #24]
}
 800a928:	bf00      	nop
 800a92a:	bf00      	nop
 800a92c:	e7fd      	b.n	800a92a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a92e:	f001 fbf3 	bl	800c118 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a936:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d024      	beq.n	800a988 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	1e5a      	subs	r2, r3, #1
 800a942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a944:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d104      	bne.n	800a958 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a94e:	f001 fa39 	bl	800bdc4 <pvTaskIncrementMutexHeldCount>
 800a952:	4602      	mov	r2, r0
 800a954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a956:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00f      	beq.n	800a980 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a962:	3310      	adds	r3, #16
 800a964:	4618      	mov	r0, r3
 800a966:	f000 febb 	bl	800b6e0 <xTaskRemoveFromEventList>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a970:	4b54      	ldr	r3, [pc, #336]	@ (800aac4 <xQueueSemaphoreTake+0x21c>)
 800a972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a980:	f001 fbfc 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 800a984:	2301      	movs	r3, #1
 800a986:	e098      	b.n	800aaba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d112      	bne.n	800a9b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00b      	beq.n	800a9ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	617b      	str	r3, [r7, #20]
}
 800a9a6:	bf00      	nop
 800a9a8:	bf00      	nop
 800a9aa:	e7fd      	b.n	800a9a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9ac:	f001 fbe6 	bl	800c17c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e082      	b.n	800aaba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fef2 	bl	800b7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9c8:	f001 fbd8 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9cc:	f000 fc76 	bl	800b2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9d0:	f001 fba2 	bl	800c118 <vPortEnterCritical>
 800a9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9da:	b25b      	sxtb	r3, r3
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9e0:	d103      	bne.n	800a9ea <xQueueSemaphoreTake+0x142>
 800a9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9f0:	b25b      	sxtb	r3, r3
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9f6:	d103      	bne.n	800aa00 <xQueueSemaphoreTake+0x158>
 800a9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa00:	f001 fbbc 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa04:	463a      	mov	r2, r7
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 fee1 	bl	800b7d4 <xTaskCheckForTimeOut>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d132      	bne.n	800aa7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa1a:	f000 f9d1 	bl	800adc0 <prvIsQueueEmpty>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d026      	beq.n	800aa72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d109      	bne.n	800aa40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa2c:	f001 fb74 	bl	800c118 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 f837 	bl	800baa8 <xTaskPriorityInherit>
 800aa3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa3c:	f001 fb9e 	bl	800c17c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa42:	3324      	adds	r3, #36	@ 0x24
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	4611      	mov	r1, r2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 fe23 	bl	800b694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa50:	f000 f964 	bl	800ad1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa54:	f000 fc40 	bl	800b2d8 <xTaskResumeAll>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f47f af67 	bne.w	800a92e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aa60:	4b18      	ldr	r3, [pc, #96]	@ (800aac4 <xQueueSemaphoreTake+0x21c>)
 800aa62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	e75d      	b.n	800a92e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa74:	f000 f952 	bl	800ad1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa78:	f000 fc2e 	bl	800b2d8 <xTaskResumeAll>
 800aa7c:	e757      	b.n	800a92e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa80:	f000 f94c 	bl	800ad1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa84:	f000 fc28 	bl	800b2d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa8a:	f000 f999 	bl	800adc0 <prvIsQueueEmpty>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f43f af4c 	beq.w	800a92e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00d      	beq.n	800aab8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aa9c:	f001 fb3c 	bl	800c118 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aaa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaa2:	f000 f893 	bl	800abcc <prvGetDisinheritPriorityAfterTimeout>
 800aaa6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 f8f8 	bl	800bca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aab4:	f001 fb62 	bl	800c17c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aab8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3738      	adds	r7, #56	@ 0x38
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08e      	sub	sp, #56	@ 0x38
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10b      	bne.n	800aaf6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	623b      	str	r3, [r7, #32]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d103      	bne.n	800ab04 <xQueueReceiveFromISR+0x3c>
 800aafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <xQueueReceiveFromISR+0x40>
 800ab04:	2301      	movs	r3, #1
 800ab06:	e000      	b.n	800ab0a <xQueueReceiveFromISR+0x42>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10b      	bne.n	800ab26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	61fb      	str	r3, [r7, #28]
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	e7fd      	b.n	800ab22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab26:	f001 fbd7 	bl	800c2d8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab2a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	61ba      	str	r2, [r7, #24]
 800ab40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d02f      	beq.n	800abb2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab60:	f000 f8b6 	bl	800acd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab66:	1e5a      	subs	r2, r3, #1
 800ab68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab74:	d112      	bne.n	800ab9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d016      	beq.n	800abac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	3310      	adds	r3, #16
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 fdac 	bl	800b6e0 <xTaskRemoveFromEventList>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00e      	beq.n	800abac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	e007      	b.n	800abac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aba0:	3301      	adds	r3, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	b25a      	sxtb	r2, r3
 800aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800abac:	2301      	movs	r3, #1
 800abae:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb0:	e001      	b.n	800abb6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f383 8811 	msr	BASEPRI, r3
}
 800abc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3738      	adds	r7, #56	@ 0x38
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f1c3 0307 	rsb	r3, r3, #7
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e001      	b.n	800abee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800abee:	68fb      	ldr	r3, [r7, #12]
	}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d14d      	bne.n	800acbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 ffb4 	bl	800bb94 <xTaskPriorityDisinherit>
 800ac2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	609a      	str	r2, [r3, #8]
 800ac34:	e043      	b.n	800acbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d119      	bne.n	800ac70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6858      	ldr	r0, [r3, #4]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac44:	461a      	mov	r2, r3
 800ac46:	68b9      	ldr	r1, [r7, #8]
 800ac48:	f00e fd3b 	bl	80196c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac54:	441a      	add	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d32b      	bcc.n	800acbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	e026      	b.n	800acbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68d8      	ldr	r0, [r3, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	f00e fd21 	bl	80196c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	68da      	ldr	r2, [r3, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac88:	425b      	negs	r3, r3
 800ac8a:	441a      	add	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d207      	bcs.n	800acac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca4:	425b      	negs	r3, r3
 800aca6:	441a      	add	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d105      	bne.n	800acbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	3b01      	subs	r3, #1
 800acbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acc6:	697b      	ldr	r3, [r7, #20]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d018      	beq.n	800ad14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acea:	441a      	add	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d303      	bcc.n	800ad04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68d9      	ldr	r1, [r3, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6838      	ldr	r0, [r7, #0]
 800ad10:	f00e fcd7 	bl	80196c2 <memcpy>
	}
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad24:	f001 f9f8 	bl	800c118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad30:	e011      	b.n	800ad56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d012      	beq.n	800ad60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	3324      	adds	r3, #36	@ 0x24
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fcce 	bl	800b6e0 <xTaskRemoveFromEventList>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad4a:	f000 fda7 	bl	800b89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dce9      	bgt.n	800ad32 <prvUnlockQueue+0x16>
 800ad5e:	e000      	b.n	800ad62 <prvUnlockQueue+0x46>
					break;
 800ad60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	22ff      	movs	r2, #255	@ 0xff
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad6a:	f001 fa07 	bl	800c17c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad6e:	f001 f9d3 	bl	800c118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad7a:	e011      	b.n	800ada0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d012      	beq.n	800adaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3310      	adds	r3, #16
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fca9 	bl	800b6e0 <xTaskRemoveFromEventList>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad94:	f000 fd82 	bl	800b89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ada0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dce9      	bgt.n	800ad7c <prvUnlockQueue+0x60>
 800ada8:	e000      	b.n	800adac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	22ff      	movs	r2, #255	@ 0xff
 800adb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800adb4:	f001 f9e2 	bl	800c17c <vPortExitCritical>
}
 800adb8:	bf00      	nop
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adc8:	f001 f9a6 	bl	800c118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800add4:	2301      	movs	r3, #1
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e001      	b.n	800adde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adde:	f001 f9cd 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800ade2:	68fb      	ldr	r3, [r7, #12]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf4:	f001 f990 	bl	800c118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d102      	bne.n	800ae0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e001      	b.n	800ae0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f001 f9b5 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800ae12:	68fb      	ldr	r3, [r7, #12]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08e      	sub	sp, #56	@ 0x38
 800ae20:	af04      	add	r7, sp, #16
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10b      	bne.n	800ae48 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	623b      	str	r3, [r7, #32]
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	e7fd      	b.n	800ae44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10b      	bne.n	800ae66 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	61fb      	str	r3, [r7, #28]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae66:	23a0      	movs	r3, #160	@ 0xa0
 800ae68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2ba0      	cmp	r3, #160	@ 0xa0
 800ae6e:	d00b      	beq.n	800ae88 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	61bb      	str	r3, [r7, #24]
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01e      	beq.n	800aece <xTaskCreateStatic+0xb2>
 800ae90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01b      	beq.n	800aece <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	f107 0314 	add.w	r3, r7, #20
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f851 	bl	800af68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aec8:	f000 f8ee 	bl	800b0a8 <prvAddNewTaskToReadyList>
 800aecc:	e001      	b.n	800aed2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aed2:	697b      	ldr	r3, [r7, #20]
	}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3728      	adds	r7, #40	@ 0x28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08c      	sub	sp, #48	@ 0x30
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	4613      	mov	r3, r2
 800aeea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeec:	88fb      	ldrh	r3, [r7, #6]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f001 fa33 	bl	800c35c <pvPortMalloc>
 800aef6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00e      	beq.n	800af1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aefe:	20a0      	movs	r0, #160	@ 0xa0
 800af00:	f001 fa2c 	bl	800c35c <pvPortMalloc>
 800af04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	631a      	str	r2, [r3, #48]	@ 0x30
 800af12:	e005      	b.n	800af20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f001 faef 	bl	800c4f8 <vPortFree>
 800af1a:	e001      	b.n	800af20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d017      	beq.n	800af56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af2e:	88fa      	ldrh	r2, [r7, #6]
 800af30:	2300      	movs	r3, #0
 800af32:	9303      	str	r3, [sp, #12]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f80f 	bl	800af68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af4a:	69f8      	ldr	r0, [r7, #28]
 800af4c:	f000 f8ac 	bl	800b0a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af50:	2301      	movs	r3, #1
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	e002      	b.n	800af5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af5c:	69bb      	ldr	r3, [r7, #24]
	}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af80:	440b      	add	r3, r1
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00b      	beq.n	800afb2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	617b      	str	r3, [r7, #20]
}
 800afac:	bf00      	nop
 800afae:	bf00      	nop
 800afb0:	e7fd      	b.n	800afae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01f      	beq.n	800aff8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afb8:	2300      	movs	r3, #0
 800afba:	61fb      	str	r3, [r7, #28]
 800afbc:	e012      	b.n	800afe4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	4413      	add	r3, r2
 800afc4:	7819      	ldrb	r1, [r3, #0]
 800afc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	4413      	add	r3, r2
 800afcc:	3334      	adds	r3, #52	@ 0x34
 800afce:	460a      	mov	r2, r1
 800afd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	4413      	add	r3, r2
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d006      	beq.n	800afec <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	3301      	adds	r3, #1
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	2b0f      	cmp	r3, #15
 800afe8:	d9e9      	bls.n	800afbe <prvInitialiseNewTask+0x56>
 800afea:	e000      	b.n	800afee <prvInitialiseNewTask+0x86>
			{
				break;
 800afec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aff6:	e003      	b.n	800b000 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b002:	2b06      	cmp	r3, #6
 800b004:	d901      	bls.n	800b00a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b006:	2306      	movs	r3, #6
 800b008:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b00e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b014:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	2200      	movs	r2, #0
 800b01a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01e:	3304      	adds	r3, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f7fe ff0d 	bl	8009e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	3318      	adds	r3, #24
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe ff08 	bl	8009e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b034:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b038:	f1c3 0207 	rsb	r2, r3, #7
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b044:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	2200      	movs	r2, #0
 800b052:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	334c      	adds	r3, #76	@ 0x4c
 800b05a:	224c      	movs	r2, #76	@ 0x4c
 800b05c:	2100      	movs	r1, #0
 800b05e:	4618      	mov	r0, r3
 800b060:	f00e fa32 	bl	80194c8 <memset>
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	4a0d      	ldr	r2, [pc, #52]	@ (800b09c <prvInitialiseNewTask+0x134>)
 800b068:	651a      	str	r2, [r3, #80]	@ 0x50
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a0 <prvInitialiseNewTask+0x138>)
 800b06e:	655a      	str	r2, [r3, #84]	@ 0x54
 800b070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b072:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a4 <prvInitialiseNewTask+0x13c>)
 800b074:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	68f9      	ldr	r1, [r7, #12]
 800b07a:	69b8      	ldr	r0, [r7, #24]
 800b07c:	f000 ff1c 	bl	800beb8 <pxPortInitialiseStack>
 800b080:	4602      	mov	r2, r0
 800b082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b092:	bf00      	nop
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	2400c50c 	.word	0x2400c50c
 800b0a0:	2400c574 	.word	0x2400c574
 800b0a4:	2400c5dc 	.word	0x2400c5dc

0800b0a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0b0:	f001 f832 	bl	800c118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b160 <prvAddNewTaskToReadyList+0xb8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	4a29      	ldr	r2, [pc, #164]	@ (800b160 <prvAddNewTaskToReadyList+0xb8>)
 800b0bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0be:	4b29      	ldr	r3, [pc, #164]	@ (800b164 <prvAddNewTaskToReadyList+0xbc>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0c6:	4a27      	ldr	r2, [pc, #156]	@ (800b164 <prvAddNewTaskToReadyList+0xbc>)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0cc:	4b24      	ldr	r3, [pc, #144]	@ (800b160 <prvAddNewTaskToReadyList+0xb8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d110      	bne.n	800b0f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0d4:	f000 fc06 	bl	800b8e4 <prvInitialiseTaskLists>
 800b0d8:	e00d      	b.n	800b0f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0da:	4b23      	ldr	r3, [pc, #140]	@ (800b168 <prvAddNewTaskToReadyList+0xc0>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0e2:	4b20      	ldr	r3, [pc, #128]	@ (800b164 <prvAddNewTaskToReadyList+0xbc>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d802      	bhi.n	800b0f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b164 <prvAddNewTaskToReadyList+0xbc>)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b16c <prvAddNewTaskToReadyList+0xc4>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b16c <prvAddNewTaskToReadyList+0xc4>)
 800b0fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b104:	2201      	movs	r2, #1
 800b106:	409a      	lsls	r2, r3
 800b108:	4b19      	ldr	r3, [pc, #100]	@ (800b170 <prvAddNewTaskToReadyList+0xc8>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	4a18      	ldr	r2, [pc, #96]	@ (800b170 <prvAddNewTaskToReadyList+0xc8>)
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4a15      	ldr	r2, [pc, #84]	@ (800b174 <prvAddNewTaskToReadyList+0xcc>)
 800b120:	441a      	add	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3304      	adds	r3, #4
 800b126:	4619      	mov	r1, r3
 800b128:	4610      	mov	r0, r2
 800b12a:	f7fe fe96 	bl	8009e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b12e:	f001 f825 	bl	800c17c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b132:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <prvAddNewTaskToReadyList+0xc0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00e      	beq.n	800b158 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b13a:	4b0a      	ldr	r3, [pc, #40]	@ (800b164 <prvAddNewTaskToReadyList+0xbc>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b144:	429a      	cmp	r2, r3
 800b146:	d207      	bcs.n	800b158 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b148:	4b0b      	ldr	r3, [pc, #44]	@ (800b178 <prvAddNewTaskToReadyList+0xd0>)
 800b14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	240051f8 	.word	0x240051f8
 800b164:	240050f8 	.word	0x240050f8
 800b168:	24005204 	.word	0x24005204
 800b16c:	24005214 	.word	0x24005214
 800b170:	24005200 	.word	0x24005200
 800b174:	240050fc 	.word	0x240050fc
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d018      	beq.n	800b1c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b18e:	4b14      	ldr	r3, [pc, #80]	@ (800b1e0 <vTaskDelay+0x64>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00b      	beq.n	800b1ae <vTaskDelay+0x32>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	60bb      	str	r3, [r7, #8]
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	e7fd      	b.n	800b1aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1ae:	f000 f885 	bl	800b2bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fe19 	bl	800bdec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1ba:	f000 f88d 	bl	800b2d8 <xTaskResumeAll>
 800b1be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d107      	bne.n	800b1d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1c6:	4b07      	ldr	r3, [pc, #28]	@ (800b1e4 <vTaskDelay+0x68>)
 800b1c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	24005220 	.word	0x24005220
 800b1e4:	e000ed04 	.word	0xe000ed04

0800b1e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08a      	sub	sp, #40	@ 0x28
 800b1ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1f6:	463a      	mov	r2, r7
 800b1f8:	1d39      	adds	r1, r7, #4
 800b1fa:	f107 0308 	add.w	r3, r7, #8
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7f5 fa4e 	bl	80006a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	9202      	str	r2, [sp, #8]
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	2300      	movs	r3, #0
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	2300      	movs	r3, #0
 800b214:	460a      	mov	r2, r1
 800b216:	4921      	ldr	r1, [pc, #132]	@ (800b29c <vTaskStartScheduler+0xb4>)
 800b218:	4821      	ldr	r0, [pc, #132]	@ (800b2a0 <vTaskStartScheduler+0xb8>)
 800b21a:	f7ff fdff 	bl	800ae1c <xTaskCreateStatic>
 800b21e:	4603      	mov	r3, r0
 800b220:	4a20      	ldr	r2, [pc, #128]	@ (800b2a4 <vTaskStartScheduler+0xbc>)
 800b222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b224:	4b1f      	ldr	r3, [pc, #124]	@ (800b2a4 <vTaskStartScheduler+0xbc>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b22c:	2301      	movs	r3, #1
 800b22e:	617b      	str	r3, [r7, #20]
 800b230:	e001      	b.n	800b236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b232:	2300      	movs	r3, #0
 800b234:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d11b      	bne.n	800b274 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	613b      	str	r3, [r7, #16]
}
 800b24e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b250:	4b15      	ldr	r3, [pc, #84]	@ (800b2a8 <vTaskStartScheduler+0xc0>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	334c      	adds	r3, #76	@ 0x4c
 800b256:	4a15      	ldr	r2, [pc, #84]	@ (800b2ac <vTaskStartScheduler+0xc4>)
 800b258:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b25a:	4b15      	ldr	r3, [pc, #84]	@ (800b2b0 <vTaskStartScheduler+0xc8>)
 800b25c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b260:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b262:	4b14      	ldr	r3, [pc, #80]	@ (800b2b4 <vTaskStartScheduler+0xcc>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b268:	4b13      	ldr	r3, [pc, #76]	@ (800b2b8 <vTaskStartScheduler+0xd0>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b26e:	f000 feaf 	bl	800bfd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b272:	e00f      	b.n	800b294 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b27a:	d10b      	bne.n	800b294 <vTaskStartScheduler+0xac>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	60fb      	str	r3, [r7, #12]
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	e7fd      	b.n	800b290 <vTaskStartScheduler+0xa8>
}
 800b294:	bf00      	nop
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0801a60c 	.word	0x0801a60c
 800b2a0:	0800b8b5 	.word	0x0800b8b5
 800b2a4:	2400521c 	.word	0x2400521c
 800b2a8:	240050f8 	.word	0x240050f8
 800b2ac:	24000044 	.word	0x24000044
 800b2b0:	24005218 	.word	0x24005218
 800b2b4:	24005204 	.word	0x24005204
 800b2b8:	240051fc 	.word	0x240051fc

0800b2bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2c0:	4b04      	ldr	r3, [pc, #16]	@ (800b2d4 <vTaskSuspendAll+0x18>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	4a03      	ldr	r2, [pc, #12]	@ (800b2d4 <vTaskSuspendAll+0x18>)
 800b2c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2ca:	bf00      	nop
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	24005220 	.word	0x24005220

0800b2d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2e6:	4b42      	ldr	r3, [pc, #264]	@ (800b3f0 <xTaskResumeAll+0x118>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10b      	bne.n	800b306 <xTaskResumeAll+0x2e>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	603b      	str	r3, [r7, #0]
}
 800b300:	bf00      	nop
 800b302:	bf00      	nop
 800b304:	e7fd      	b.n	800b302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b306:	f000 ff07 	bl	800c118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b30a:	4b39      	ldr	r3, [pc, #228]	@ (800b3f0 <xTaskResumeAll+0x118>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3b01      	subs	r3, #1
 800b310:	4a37      	ldr	r2, [pc, #220]	@ (800b3f0 <xTaskResumeAll+0x118>)
 800b312:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b314:	4b36      	ldr	r3, [pc, #216]	@ (800b3f0 <xTaskResumeAll+0x118>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d161      	bne.n	800b3e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b31c:	4b35      	ldr	r3, [pc, #212]	@ (800b3f4 <xTaskResumeAll+0x11c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d05d      	beq.n	800b3e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b324:	e02e      	b.n	800b384 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b326:	4b34      	ldr	r3, [pc, #208]	@ (800b3f8 <xTaskResumeAll+0x120>)
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3318      	adds	r3, #24
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fdee 	bl	8009f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe fde9 	bl	8009f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b346:	2201      	movs	r2, #1
 800b348:	409a      	lsls	r2, r3
 800b34a:	4b2c      	ldr	r3, [pc, #176]	@ (800b3fc <xTaskResumeAll+0x124>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4313      	orrs	r3, r2
 800b350:	4a2a      	ldr	r2, [pc, #168]	@ (800b3fc <xTaskResumeAll+0x124>)
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4a27      	ldr	r2, [pc, #156]	@ (800b400 <xTaskResumeAll+0x128>)
 800b362:	441a      	add	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f7fe fd75 	bl	8009e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b374:	4b23      	ldr	r3, [pc, #140]	@ (800b404 <xTaskResumeAll+0x12c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d302      	bcc.n	800b384 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b37e:	4b22      	ldr	r3, [pc, #136]	@ (800b408 <xTaskResumeAll+0x130>)
 800b380:	2201      	movs	r2, #1
 800b382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b384:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f8 <xTaskResumeAll+0x120>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1cc      	bne.n	800b326 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b392:	f000 fb4b 	bl	800ba2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b396:	4b1d      	ldr	r3, [pc, #116]	@ (800b40c <xTaskResumeAll+0x134>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d010      	beq.n	800b3c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3a2:	f000 f859 	bl	800b458 <xTaskIncrementTick>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b3ac:	4b16      	ldr	r3, [pc, #88]	@ (800b408 <xTaskResumeAll+0x130>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1f1      	bne.n	800b3a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b3be:	4b13      	ldr	r3, [pc, #76]	@ (800b40c <xTaskResumeAll+0x134>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3c4:	4b10      	ldr	r3, [pc, #64]	@ (800b408 <xTaskResumeAll+0x130>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d009      	beq.n	800b3e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b410 <xTaskResumeAll+0x138>)
 800b3d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3e0:	f000 fecc 	bl	800c17c <vPortExitCritical>

	return xAlreadyYielded;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	24005220 	.word	0x24005220
 800b3f4:	240051f8 	.word	0x240051f8
 800b3f8:	240051b8 	.word	0x240051b8
 800b3fc:	24005200 	.word	0x24005200
 800b400:	240050fc 	.word	0x240050fc
 800b404:	240050f8 	.word	0x240050f8
 800b408:	2400520c 	.word	0x2400520c
 800b40c:	24005208 	.word	0x24005208
 800b410:	e000ed04 	.word	0xe000ed04

0800b414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b41a:	4b05      	ldr	r3, [pc, #20]	@ (800b430 <xTaskGetTickCount+0x1c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b420:	687b      	ldr	r3, [r7, #4]
}
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	240051fc 	.word	0x240051fc

0800b434 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b43a:	f000 ff4d 	bl	800c2d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b43e:	2300      	movs	r3, #0
 800b440:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b442:	4b04      	ldr	r3, [pc, #16]	@ (800b454 <xTaskGetTickCountFromISR+0x20>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b448:	683b      	ldr	r3, [r7, #0]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	240051fc 	.word	0x240051fc

0800b458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b45e:	2300      	movs	r3, #0
 800b460:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b462:	4b4f      	ldr	r3, [pc, #316]	@ (800b5a0 <xTaskIncrementTick+0x148>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	f040 808f 	bne.w	800b58a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b46c:	4b4d      	ldr	r3, [pc, #308]	@ (800b5a4 <xTaskIncrementTick+0x14c>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3301      	adds	r3, #1
 800b472:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b474:	4a4b      	ldr	r2, [pc, #300]	@ (800b5a4 <xTaskIncrementTick+0x14c>)
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d121      	bne.n	800b4c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b480:	4b49      	ldr	r3, [pc, #292]	@ (800b5a8 <xTaskIncrementTick+0x150>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00b      	beq.n	800b4a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	603b      	str	r3, [r7, #0]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <xTaskIncrementTick+0x46>
 800b4a2:	4b41      	ldr	r3, [pc, #260]	@ (800b5a8 <xTaskIncrementTick+0x150>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	4b40      	ldr	r3, [pc, #256]	@ (800b5ac <xTaskIncrementTick+0x154>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a3e      	ldr	r2, [pc, #248]	@ (800b5a8 <xTaskIncrementTick+0x150>)
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	4a3e      	ldr	r2, [pc, #248]	@ (800b5ac <xTaskIncrementTick+0x154>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b5b0 <xTaskIncrementTick+0x158>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	4a3c      	ldr	r2, [pc, #240]	@ (800b5b0 <xTaskIncrementTick+0x158>)
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	f000 fab4 	bl	800ba2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4c4:	4b3b      	ldr	r3, [pc, #236]	@ (800b5b4 <xTaskIncrementTick+0x15c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d348      	bcc.n	800b560 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4ce:	4b36      	ldr	r3, [pc, #216]	@ (800b5a8 <xTaskIncrementTick+0x150>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d8:	4b36      	ldr	r3, [pc, #216]	@ (800b5b4 <xTaskIncrementTick+0x15c>)
 800b4da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4de:	601a      	str	r2, [r3, #0]
					break;
 800b4e0:	e03e      	b.n	800b560 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e2:	4b31      	ldr	r3, [pc, #196]	@ (800b5a8 <xTaskIncrementTick+0x150>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d203      	bcs.n	800b502 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4fa:	4a2e      	ldr	r2, [pc, #184]	@ (800b5b4 <xTaskIncrementTick+0x15c>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b500:	e02e      	b.n	800b560 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	3304      	adds	r3, #4
 800b506:	4618      	mov	r0, r3
 800b508:	f7fe fd04 	bl	8009f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	d004      	beq.n	800b51e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	3318      	adds	r3, #24
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fe fcfb 	bl	8009f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b522:	2201      	movs	r2, #1
 800b524:	409a      	lsls	r2, r3
 800b526:	4b24      	ldr	r3, [pc, #144]	@ (800b5b8 <xTaskIncrementTick+0x160>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	4a22      	ldr	r2, [pc, #136]	@ (800b5b8 <xTaskIncrementTick+0x160>)
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b534:	4613      	mov	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4a1f      	ldr	r2, [pc, #124]	@ (800b5bc <xTaskIncrementTick+0x164>)
 800b53e:	441a      	add	r2, r3
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	3304      	adds	r3, #4
 800b544:	4619      	mov	r1, r3
 800b546:	4610      	mov	r0, r2
 800b548:	f7fe fc87 	bl	8009e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b550:	4b1b      	ldr	r3, [pc, #108]	@ (800b5c0 <xTaskIncrementTick+0x168>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	429a      	cmp	r2, r3
 800b558:	d3b9      	bcc.n	800b4ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b55a:	2301      	movs	r3, #1
 800b55c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b55e:	e7b6      	b.n	800b4ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b560:	4b17      	ldr	r3, [pc, #92]	@ (800b5c0 <xTaskIncrementTick+0x168>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b566:	4915      	ldr	r1, [pc, #84]	@ (800b5bc <xTaskIncrementTick+0x164>)
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d901      	bls.n	800b57c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b578:	2301      	movs	r3, #1
 800b57a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b57c:	4b11      	ldr	r3, [pc, #68]	@ (800b5c4 <xTaskIncrementTick+0x16c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d007      	beq.n	800b594 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b584:	2301      	movs	r3, #1
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	e004      	b.n	800b594 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b58a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c8 <xTaskIncrementTick+0x170>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3301      	adds	r3, #1
 800b590:	4a0d      	ldr	r2, [pc, #52]	@ (800b5c8 <xTaskIncrementTick+0x170>)
 800b592:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b594:	697b      	ldr	r3, [r7, #20]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	24005220 	.word	0x24005220
 800b5a4:	240051fc 	.word	0x240051fc
 800b5a8:	240051b0 	.word	0x240051b0
 800b5ac:	240051b4 	.word	0x240051b4
 800b5b0:	24005210 	.word	0x24005210
 800b5b4:	24005218 	.word	0x24005218
 800b5b8:	24005200 	.word	0x24005200
 800b5bc:	240050fc 	.word	0x240050fc
 800b5c0:	240050f8 	.word	0x240050f8
 800b5c4:	2400520c 	.word	0x2400520c
 800b5c8:	24005208 	.word	0x24005208

0800b5cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b67c <vTaskSwitchContext+0xb0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5da:	4b29      	ldr	r3, [pc, #164]	@ (800b680 <vTaskSwitchContext+0xb4>)
 800b5dc:	2201      	movs	r2, #1
 800b5de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5e0:	e045      	b.n	800b66e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b5e2:	4b27      	ldr	r3, [pc, #156]	@ (800b680 <vTaskSwitchContext+0xb4>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e8:	4b26      	ldr	r3, [pc, #152]	@ (800b684 <vTaskSwitchContext+0xb8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	fab3 f383 	clz	r3, r3
 800b5f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	f1c3 031f 	rsb	r3, r3, #31
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	4922      	ldr	r1, [pc, #136]	@ (800b688 <vTaskSwitchContext+0xbc>)
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	440b      	add	r3, r1
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10b      	bne.n	800b62a <vTaskSwitchContext+0x5e>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	607b      	str	r3, [r7, #4]
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop
 800b628:	e7fd      	b.n	800b626 <vTaskSwitchContext+0x5a>
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4a14      	ldr	r2, [pc, #80]	@ (800b688 <vTaskSwitchContext+0xbc>)
 800b636:	4413      	add	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	605a      	str	r2, [r3, #4]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	3308      	adds	r3, #8
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d104      	bne.n	800b65a <vTaskSwitchContext+0x8e>
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	4a0a      	ldr	r2, [pc, #40]	@ (800b68c <vTaskSwitchContext+0xc0>)
 800b662:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b664:	4b09      	ldr	r3, [pc, #36]	@ (800b68c <vTaskSwitchContext+0xc0>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	334c      	adds	r3, #76	@ 0x4c
 800b66a:	4a09      	ldr	r2, [pc, #36]	@ (800b690 <vTaskSwitchContext+0xc4>)
 800b66c:	6013      	str	r3, [r2, #0]
}
 800b66e:	bf00      	nop
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	24005220 	.word	0x24005220
 800b680:	2400520c 	.word	0x2400520c
 800b684:	24005200 	.word	0x24005200
 800b688:	240050fc 	.word	0x240050fc
 800b68c:	240050f8 	.word	0x240050f8
 800b690:	24000044 	.word	0x24000044

0800b694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10b      	bne.n	800b6bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	60fb      	str	r3, [r7, #12]
}
 800b6b6:	bf00      	nop
 800b6b8:	bf00      	nop
 800b6ba:	e7fd      	b.n	800b6b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6bc:	4b07      	ldr	r3, [pc, #28]	@ (800b6dc <vTaskPlaceOnEventList+0x48>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3318      	adds	r3, #24
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7fe fbec 	bl	8009ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	6838      	ldr	r0, [r7, #0]
 800b6ce:	f000 fb8d 	bl	800bdec <prvAddCurrentTaskToDelayedList>
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	240050f8 	.word	0x240050f8

0800b6e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10b      	bne.n	800b70e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fa:	f383 8811 	msr	BASEPRI, r3
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	60fb      	str	r3, [r7, #12]
}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	e7fd      	b.n	800b70a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	3318      	adds	r3, #24
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fbfe 	bl	8009f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b718:	4b1d      	ldr	r3, [pc, #116]	@ (800b790 <xTaskRemoveFromEventList+0xb0>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d11c      	bne.n	800b75a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3304      	adds	r3, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe fbf5 	bl	8009f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72e:	2201      	movs	r2, #1
 800b730:	409a      	lsls	r2, r3
 800b732:	4b18      	ldr	r3, [pc, #96]	@ (800b794 <xTaskRemoveFromEventList+0xb4>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4313      	orrs	r3, r2
 800b738:	4a16      	ldr	r2, [pc, #88]	@ (800b794 <xTaskRemoveFromEventList+0xb4>)
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4a13      	ldr	r2, [pc, #76]	@ (800b798 <xTaskRemoveFromEventList+0xb8>)
 800b74a:	441a      	add	r2, r3
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	3304      	adds	r3, #4
 800b750:	4619      	mov	r1, r3
 800b752:	4610      	mov	r0, r2
 800b754:	f7fe fb81 	bl	8009e5a <vListInsertEnd>
 800b758:	e005      	b.n	800b766 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	3318      	adds	r3, #24
 800b75e:	4619      	mov	r1, r3
 800b760:	480e      	ldr	r0, [pc, #56]	@ (800b79c <xTaskRemoveFromEventList+0xbc>)
 800b762:	f7fe fb7a 	bl	8009e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a0 <xTaskRemoveFromEventList+0xc0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b770:	429a      	cmp	r2, r3
 800b772:	d905      	bls.n	800b780 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b778:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a4 <xTaskRemoveFromEventList+0xc4>)
 800b77a:	2201      	movs	r2, #1
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	e001      	b.n	800b784 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b780:	2300      	movs	r3, #0
 800b782:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b784:	697b      	ldr	r3, [r7, #20]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	24005220 	.word	0x24005220
 800b794:	24005200 	.word	0x24005200
 800b798:	240050fc 	.word	0x240050fc
 800b79c:	240051b8 	.word	0x240051b8
 800b7a0:	240050f8 	.word	0x240050f8
 800b7a4:	2400520c 	.word	0x2400520c

0800b7a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7b0:	4b06      	ldr	r3, [pc, #24]	@ (800b7cc <vTaskInternalSetTimeOutState+0x24>)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7b8:	4b05      	ldr	r3, [pc, #20]	@ (800b7d0 <vTaskInternalSetTimeOutState+0x28>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	605a      	str	r2, [r3, #4]
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	24005210 	.word	0x24005210
 800b7d0:	240051fc 	.word	0x240051fc

0800b7d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10b      	bne.n	800b7fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	613b      	str	r3, [r7, #16]
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	e7fd      	b.n	800b7f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10b      	bne.n	800b81a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	60fb      	str	r3, [r7, #12]
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	e7fd      	b.n	800b816 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b81a:	f000 fc7d 	bl	800c118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b81e:	4b1d      	ldr	r3, [pc, #116]	@ (800b894 <xTaskCheckForTimeOut+0xc0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b836:	d102      	bne.n	800b83e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b838:	2300      	movs	r3, #0
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	e023      	b.n	800b886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b15      	ldr	r3, [pc, #84]	@ (800b898 <xTaskCheckForTimeOut+0xc4>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d007      	beq.n	800b85a <xTaskCheckForTimeOut+0x86>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d302      	bcc.n	800b85a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	e015      	b.n	800b886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d20b      	bcs.n	800b87c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff ff99 	bl	800b7a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b876:	2300      	movs	r3, #0
 800b878:	61fb      	str	r3, [r7, #28]
 800b87a:	e004      	b.n	800b886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b886:	f000 fc79 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800b88a:	69fb      	ldr	r3, [r7, #28]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	240051fc 	.word	0x240051fc
 800b898:	24005210 	.word	0x24005210

0800b89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8a0:	4b03      	ldr	r3, [pc, #12]	@ (800b8b0 <vTaskMissedYield+0x14>)
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
}
 800b8a6:	bf00      	nop
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	2400520c 	.word	0x2400520c

0800b8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8bc:	f000 f852 	bl	800b964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8c0:	4b06      	ldr	r3, [pc, #24]	@ (800b8dc <prvIdleTask+0x28>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d9f9      	bls.n	800b8bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8c8:	4b05      	ldr	r3, [pc, #20]	@ (800b8e0 <prvIdleTask+0x2c>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8d8:	e7f0      	b.n	800b8bc <prvIdleTask+0x8>
 800b8da:	bf00      	nop
 800b8dc:	240050fc 	.word	0x240050fc
 800b8e0:	e000ed04 	.word	0xe000ed04

0800b8e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
 800b8ee:	e00c      	b.n	800b90a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4a12      	ldr	r2, [pc, #72]	@ (800b944 <prvInitialiseTaskLists+0x60>)
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fa7e 	bl	8009e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	607b      	str	r3, [r7, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b06      	cmp	r3, #6
 800b90e:	d9ef      	bls.n	800b8f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b910:	480d      	ldr	r0, [pc, #52]	@ (800b948 <prvInitialiseTaskLists+0x64>)
 800b912:	f7fe fa75 	bl	8009e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b916:	480d      	ldr	r0, [pc, #52]	@ (800b94c <prvInitialiseTaskLists+0x68>)
 800b918:	f7fe fa72 	bl	8009e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b91c:	480c      	ldr	r0, [pc, #48]	@ (800b950 <prvInitialiseTaskLists+0x6c>)
 800b91e:	f7fe fa6f 	bl	8009e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b922:	480c      	ldr	r0, [pc, #48]	@ (800b954 <prvInitialiseTaskLists+0x70>)
 800b924:	f7fe fa6c 	bl	8009e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b928:	480b      	ldr	r0, [pc, #44]	@ (800b958 <prvInitialiseTaskLists+0x74>)
 800b92a:	f7fe fa69 	bl	8009e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b92e:	4b0b      	ldr	r3, [pc, #44]	@ (800b95c <prvInitialiseTaskLists+0x78>)
 800b930:	4a05      	ldr	r2, [pc, #20]	@ (800b948 <prvInitialiseTaskLists+0x64>)
 800b932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b934:	4b0a      	ldr	r3, [pc, #40]	@ (800b960 <prvInitialiseTaskLists+0x7c>)
 800b936:	4a05      	ldr	r2, [pc, #20]	@ (800b94c <prvInitialiseTaskLists+0x68>)
 800b938:	601a      	str	r2, [r3, #0]
}
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	240050fc 	.word	0x240050fc
 800b948:	24005188 	.word	0x24005188
 800b94c:	2400519c 	.word	0x2400519c
 800b950:	240051b8 	.word	0x240051b8
 800b954:	240051cc 	.word	0x240051cc
 800b958:	240051e4 	.word	0x240051e4
 800b95c:	240051b0 	.word	0x240051b0
 800b960:	240051b4 	.word	0x240051b4

0800b964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b96a:	e019      	b.n	800b9a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b96c:	f000 fbd4 	bl	800c118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b970:	4b10      	ldr	r3, [pc, #64]	@ (800b9b4 <prvCheckTasksWaitingTermination+0x50>)
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe fac9 	bl	8009f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <prvCheckTasksWaitingTermination+0x54>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3b01      	subs	r3, #1
 800b988:	4a0b      	ldr	r2, [pc, #44]	@ (800b9b8 <prvCheckTasksWaitingTermination+0x54>)
 800b98a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b98c:	4b0b      	ldr	r3, [pc, #44]	@ (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3b01      	subs	r3, #1
 800b992:	4a0a      	ldr	r2, [pc, #40]	@ (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b996:	f000 fbf1 	bl	800c17c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f810 	bl	800b9c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9a0:	4b06      	ldr	r3, [pc, #24]	@ (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e1      	bne.n	800b96c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	240051cc 	.word	0x240051cc
 800b9b8:	240051f8 	.word	0x240051f8
 800b9bc:	240051e0 	.word	0x240051e0

0800b9c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	334c      	adds	r3, #76	@ 0x4c
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f00d fdc5 	bl	801955c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d108      	bne.n	800b9ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 fd89 	bl	800c4f8 <vPortFree>
				vPortFree( pxTCB );
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fd86 	bl	800c4f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9ec:	e019      	b.n	800ba22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d103      	bne.n	800ba00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fd7d 	bl	800c4f8 <vPortFree>
	}
 800b9fe:	e010      	b.n	800ba22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d00b      	beq.n	800ba22 <prvDeleteTCB+0x62>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	60fb      	str	r3, [r7, #12]
}
 800ba1c:	bf00      	nop
 800ba1e:	bf00      	nop
 800ba20:	e7fd      	b.n	800ba1e <prvDeleteTCB+0x5e>
	}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba32:	4b0c      	ldr	r3, [pc, #48]	@ (800ba64 <prvResetNextTaskUnblockTime+0x38>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <prvResetNextTaskUnblockTime+0x3c>)
 800ba3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba44:	e008      	b.n	800ba58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba46:	4b07      	ldr	r3, [pc, #28]	@ (800ba64 <prvResetNextTaskUnblockTime+0x38>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	4a04      	ldr	r2, [pc, #16]	@ (800ba68 <prvResetNextTaskUnblockTime+0x3c>)
 800ba56:	6013      	str	r3, [r2, #0]
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	240051b0 	.word	0x240051b0
 800ba68:	24005218 	.word	0x24005218

0800ba6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba72:	4b0b      	ldr	r3, [pc, #44]	@ (800baa0 <xTaskGetSchedulerState+0x34>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d102      	bne.n	800ba80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	607b      	str	r3, [r7, #4]
 800ba7e:	e008      	b.n	800ba92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba80:	4b08      	ldr	r3, [pc, #32]	@ (800baa4 <xTaskGetSchedulerState+0x38>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba88:	2302      	movs	r3, #2
 800ba8a:	607b      	str	r3, [r7, #4]
 800ba8c:	e001      	b.n	800ba92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba92:	687b      	ldr	r3, [r7, #4]
	}
 800ba94:	4618      	mov	r0, r3
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	24005204 	.word	0x24005204
 800baa4:	24005220 	.word	0x24005220

0800baa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d05e      	beq.n	800bb7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac2:	4b31      	ldr	r3, [pc, #196]	@ (800bb88 <xTaskPriorityInherit+0xe0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac8:	429a      	cmp	r2, r3
 800baca:	d24e      	bcs.n	800bb6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	db06      	blt.n	800bae2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad4:	4b2c      	ldr	r3, [pc, #176]	@ (800bb88 <xTaskPriorityInherit+0xe0>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bada:	f1c3 0207 	rsb	r2, r3, #7
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	6959      	ldr	r1, [r3, #20]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4a26      	ldr	r2, [pc, #152]	@ (800bb8c <xTaskPriorityInherit+0xe4>)
 800baf4:	4413      	add	r3, r2
 800baf6:	4299      	cmp	r1, r3
 800baf8:	d12f      	bne.n	800bb5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	3304      	adds	r3, #4
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fa08 	bl	8009f14 <uxListRemove>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10a      	bne.n	800bb20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0e:	2201      	movs	r2, #1
 800bb10:	fa02 f303 	lsl.w	r3, r2, r3
 800bb14:	43da      	mvns	r2, r3
 800bb16:	4b1e      	ldr	r3, [pc, #120]	@ (800bb90 <xTaskPriorityInherit+0xe8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	4a1c      	ldr	r2, [pc, #112]	@ (800bb90 <xTaskPriorityInherit+0xe8>)
 800bb1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb20:	4b19      	ldr	r3, [pc, #100]	@ (800bb88 <xTaskPriorityInherit+0xe0>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	2201      	movs	r2, #1
 800bb30:	409a      	lsls	r2, r3
 800bb32:	4b17      	ldr	r3, [pc, #92]	@ (800bb90 <xTaskPriorityInherit+0xe8>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	4a15      	ldr	r2, [pc, #84]	@ (800bb90 <xTaskPriorityInherit+0xe8>)
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4a10      	ldr	r2, [pc, #64]	@ (800bb8c <xTaskPriorityInherit+0xe4>)
 800bb4a:	441a      	add	r2, r3
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	4610      	mov	r0, r2
 800bb54:	f7fe f981 	bl	8009e5a <vListInsertEnd>
 800bb58:	e004      	b.n	800bb64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb88 <xTaskPriorityInherit+0xe0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb64:	2301      	movs	r3, #1
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	e008      	b.n	800bb7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb6e:	4b06      	ldr	r3, [pc, #24]	@ (800bb88 <xTaskPriorityInherit+0xe0>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d201      	bcs.n	800bb7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
	}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	240050f8 	.word	0x240050f8
 800bb8c:	240050fc 	.word	0x240050fc
 800bb90:	24005200 	.word	0x24005200

0800bb94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d070      	beq.n	800bc8c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbaa:	4b3b      	ldr	r3, [pc, #236]	@ (800bc98 <xTaskPriorityDisinherit+0x104>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d00b      	beq.n	800bbcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	60fb      	str	r3, [r7, #12]
}
 800bbc6:	bf00      	nop
 800bbc8:	bf00      	nop
 800bbca:	e7fd      	b.n	800bbc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10b      	bne.n	800bbec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	60bb      	str	r3, [r7, #8]
}
 800bbe6:	bf00      	nop
 800bbe8:	bf00      	nop
 800bbea:	e7fd      	b.n	800bbe8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbf0:	1e5a      	subs	r2, r3, #1
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d044      	beq.n	800bc8c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d140      	bne.n	800bc8c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe f980 	bl	8009f14 <uxListRemove>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d115      	bne.n	800bc46 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1e:	491f      	ldr	r1, [pc, #124]	@ (800bc9c <xTaskPriorityDisinherit+0x108>)
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	440b      	add	r3, r1
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <xTaskPriorityDisinherit+0xb2>
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc34:	2201      	movs	r2, #1
 800bc36:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3a:	43da      	mvns	r2, r3
 800bc3c:	4b18      	ldr	r3, [pc, #96]	@ (800bca0 <xTaskPriorityDisinherit+0x10c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4013      	ands	r3, r2
 800bc42:	4a17      	ldr	r2, [pc, #92]	@ (800bca0 <xTaskPriorityDisinherit+0x10c>)
 800bc44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc52:	f1c3 0207 	rsb	r2, r3, #7
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5e:	2201      	movs	r2, #1
 800bc60:	409a      	lsls	r2, r3
 800bc62:	4b0f      	ldr	r3, [pc, #60]	@ (800bca0 <xTaskPriorityDisinherit+0x10c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	4a0d      	ldr	r2, [pc, #52]	@ (800bca0 <xTaskPriorityDisinherit+0x10c>)
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4a08      	ldr	r2, [pc, #32]	@ (800bc9c <xTaskPriorityDisinherit+0x108>)
 800bc7a:	441a      	add	r2, r3
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4619      	mov	r1, r3
 800bc82:	4610      	mov	r0, r2
 800bc84:	f7fe f8e9 	bl	8009e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc8c:	697b      	ldr	r3, [r7, #20]
	}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	240050f8 	.word	0x240050f8
 800bc9c:	240050fc 	.word	0x240050fc
 800bca0:	24005200 	.word	0x24005200

0800bca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d079      	beq.n	800bdb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10b      	bne.n	800bcdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	60fb      	str	r3, [r7, #12]
}
 800bcd6:	bf00      	nop
 800bcd8:	bf00      	nop
 800bcda:	e7fd      	b.n	800bcd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d902      	bls.n	800bcec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	61fb      	str	r3, [r7, #28]
 800bcea:	e002      	b.n	800bcf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf6:	69fa      	ldr	r2, [r7, #28]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d059      	beq.n	800bdb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d154      	bne.n	800bdb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd06:	4b2c      	ldr	r3, [pc, #176]	@ (800bdb8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d10b      	bne.n	800bd28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	60bb      	str	r3, [r7, #8]
}
 800bd22:	bf00      	nop
 800bd24:	bf00      	nop
 800bd26:	e7fd      	b.n	800bd24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	db04      	blt.n	800bd46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	f1c3 0207 	rsb	r2, r3, #7
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	6959      	ldr	r1, [r3, #20]
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4a19      	ldr	r2, [pc, #100]	@ (800bdbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bd56:	4413      	add	r3, r2
 800bd58:	4299      	cmp	r1, r3
 800bd5a:	d129      	bne.n	800bdb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	3304      	adds	r3, #4
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe f8d7 	bl	8009f14 <uxListRemove>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10a      	bne.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd70:	2201      	movs	r2, #1
 800bd72:	fa02 f303 	lsl.w	r3, r2, r3
 800bd76:	43da      	mvns	r2, r3
 800bd78:	4b11      	ldr	r3, [pc, #68]	@ (800bdc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	4a10      	ldr	r2, [pc, #64]	@ (800bdc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bd80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd86:	2201      	movs	r2, #1
 800bd88:	409a      	lsls	r2, r3
 800bd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bdc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	4a0b      	ldr	r2, [pc, #44]	@ (800bdc0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd98:	4613      	mov	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4a06      	ldr	r2, [pc, #24]	@ (800bdbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bda2:	441a      	add	r2, r3
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	3304      	adds	r3, #4
 800bda8:	4619      	mov	r1, r3
 800bdaa:	4610      	mov	r0, r2
 800bdac:	f7fe f855 	bl	8009e5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdb0:	bf00      	nop
 800bdb2:	3720      	adds	r7, #32
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	240050f8 	.word	0x240050f8
 800bdbc:	240050fc 	.word	0x240050fc
 800bdc0:	24005200 	.word	0x24005200

0800bdc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bdc8:	4b07      	ldr	r3, [pc, #28]	@ (800bde8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d004      	beq.n	800bdda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdd0:	4b05      	ldr	r3, [pc, #20]	@ (800bde8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdd6:	3201      	adds	r2, #1
 800bdd8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800bdda:	4b03      	ldr	r3, [pc, #12]	@ (800bde8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bddc:	681b      	ldr	r3, [r3, #0]
	}
 800bdde:	4618      	mov	r0, r3
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	240050f8 	.word	0x240050f8

0800bdec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdf6:	4b29      	ldr	r3, [pc, #164]	@ (800be9c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdfc:	4b28      	ldr	r3, [pc, #160]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3304      	adds	r3, #4
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe f886 	bl	8009f14 <uxListRemove>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800be0e:	4b24      	ldr	r3, [pc, #144]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be14:	2201      	movs	r2, #1
 800be16:	fa02 f303 	lsl.w	r3, r2, r3
 800be1a:	43da      	mvns	r2, r3
 800be1c:	4b21      	ldr	r3, [pc, #132]	@ (800bea4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4013      	ands	r3, r2
 800be22:	4a20      	ldr	r2, [pc, #128]	@ (800bea4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be2c:	d10a      	bne.n	800be44 <prvAddCurrentTaskToDelayedList+0x58>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be34:	4b1a      	ldr	r3, [pc, #104]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3304      	adds	r3, #4
 800be3a:	4619      	mov	r1, r3
 800be3c:	481a      	ldr	r0, [pc, #104]	@ (800bea8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be3e:	f7fe f80c 	bl	8009e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be42:	e026      	b.n	800be92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4413      	add	r3, r2
 800be4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be4c:	4b14      	ldr	r3, [pc, #80]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d209      	bcs.n	800be70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5c:	4b13      	ldr	r3, [pc, #76]	@ (800beac <prvAddCurrentTaskToDelayedList+0xc0>)
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	4b0f      	ldr	r3, [pc, #60]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3304      	adds	r3, #4
 800be66:	4619      	mov	r1, r3
 800be68:	4610      	mov	r0, r2
 800be6a:	f7fe f81a 	bl	8009ea2 <vListInsert>
}
 800be6e:	e010      	b.n	800be92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be70:	4b0f      	ldr	r3, [pc, #60]	@ (800beb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	4b0a      	ldr	r3, [pc, #40]	@ (800bea0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3304      	adds	r3, #4
 800be7a:	4619      	mov	r1, r3
 800be7c:	4610      	mov	r0, r2
 800be7e:	f7fe f810 	bl	8009ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be82:	4b0c      	ldr	r3, [pc, #48]	@ (800beb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d202      	bcs.n	800be92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be8c:	4a09      	ldr	r2, [pc, #36]	@ (800beb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	6013      	str	r3, [r2, #0]
}
 800be92:	bf00      	nop
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	240051fc 	.word	0x240051fc
 800bea0:	240050f8 	.word	0x240050f8
 800bea4:	24005200 	.word	0x24005200
 800bea8:	240051e4 	.word	0x240051e4
 800beac:	240051b4 	.word	0x240051b4
 800beb0:	240051b0 	.word	0x240051b0
 800beb4:	24005218 	.word	0x24005218

0800beb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3b04      	subs	r3, #4
 800bec8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3b04      	subs	r3, #4
 800bed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f023 0201 	bic.w	r2, r3, #1
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3b04      	subs	r3, #4
 800bee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bee8:	4a0c      	ldr	r2, [pc, #48]	@ (800bf1c <pxPortInitialiseStack+0x64>)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	3b14      	subs	r3, #20
 800bef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3b04      	subs	r3, #4
 800befe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f06f 0202 	mvn.w	r2, #2
 800bf06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3b20      	subs	r3, #32
 800bf0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	0800bf21 	.word	0x0800bf21

0800bf20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf2a:	4b13      	ldr	r3, [pc, #76]	@ (800bf78 <prvTaskExitError+0x58>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf32:	d00b      	beq.n	800bf4c <prvTaskExitError+0x2c>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	60fb      	str	r3, [r7, #12]
}
 800bf46:	bf00      	nop
 800bf48:	bf00      	nop
 800bf4a:	e7fd      	b.n	800bf48 <prvTaskExitError+0x28>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	60bb      	str	r3, [r7, #8]
}
 800bf5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf60:	bf00      	nop
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0fc      	beq.n	800bf62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf68:	bf00      	nop
 800bf6a:	bf00      	nop
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	24000028 	.word	0x24000028
 800bf7c:	00000000 	.word	0x00000000

0800bf80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf80:	4b07      	ldr	r3, [pc, #28]	@ (800bfa0 <pxCurrentTCBConst2>)
 800bf82:	6819      	ldr	r1, [r3, #0]
 800bf84:	6808      	ldr	r0, [r1, #0]
 800bf86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8a:	f380 8809 	msr	PSP, r0
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f04f 0000 	mov.w	r0, #0
 800bf96:	f380 8811 	msr	BASEPRI, r0
 800bf9a:	4770      	bx	lr
 800bf9c:	f3af 8000 	nop.w

0800bfa0 <pxCurrentTCBConst2>:
 800bfa0:	240050f8 	.word	0x240050f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop

0800bfa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfa8:	4808      	ldr	r0, [pc, #32]	@ (800bfcc <prvPortStartFirstTask+0x24>)
 800bfaa:	6800      	ldr	r0, [r0, #0]
 800bfac:	6800      	ldr	r0, [r0, #0]
 800bfae:	f380 8808 	msr	MSP, r0
 800bfb2:	f04f 0000 	mov.w	r0, #0
 800bfb6:	f380 8814 	msr	CONTROL, r0
 800bfba:	b662      	cpsie	i
 800bfbc:	b661      	cpsie	f
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	df00      	svc	0
 800bfc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfca:	bf00      	nop
 800bfcc:	e000ed08 	.word	0xe000ed08

0800bfd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bfd6:	4b47      	ldr	r3, [pc, #284]	@ (800c0f4 <xPortStartScheduler+0x124>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a47      	ldr	r2, [pc, #284]	@ (800c0f8 <xPortStartScheduler+0x128>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d10b      	bne.n	800bff8 <xPortStartScheduler+0x28>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	613b      	str	r3, [r7, #16]
}
 800bff2:	bf00      	nop
 800bff4:	bf00      	nop
 800bff6:	e7fd      	b.n	800bff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bff8:	4b3e      	ldr	r3, [pc, #248]	@ (800c0f4 <xPortStartScheduler+0x124>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a3f      	ldr	r2, [pc, #252]	@ (800c0fc <xPortStartScheduler+0x12c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d10b      	bne.n	800c01a <xPortStartScheduler+0x4a>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	60fb      	str	r3, [r7, #12]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c01a:	4b39      	ldr	r3, [pc, #228]	@ (800c100 <xPortStartScheduler+0x130>)
 800c01c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	22ff      	movs	r2, #255	@ 0xff
 800c02a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	b2db      	uxtb	r3, r3
 800c032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c034:	78fb      	ldrb	r3, [r7, #3]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	4b31      	ldr	r3, [pc, #196]	@ (800c104 <xPortStartScheduler+0x134>)
 800c040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c042:	4b31      	ldr	r3, [pc, #196]	@ (800c108 <xPortStartScheduler+0x138>)
 800c044:	2207      	movs	r2, #7
 800c046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c048:	e009      	b.n	800c05e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c04a:	4b2f      	ldr	r3, [pc, #188]	@ (800c108 <xPortStartScheduler+0x138>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3b01      	subs	r3, #1
 800c050:	4a2d      	ldr	r2, [pc, #180]	@ (800c108 <xPortStartScheduler+0x138>)
 800c052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c05e:	78fb      	ldrb	r3, [r7, #3]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c066:	2b80      	cmp	r3, #128	@ 0x80
 800c068:	d0ef      	beq.n	800c04a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c06a:	4b27      	ldr	r3, [pc, #156]	@ (800c108 <xPortStartScheduler+0x138>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f1c3 0307 	rsb	r3, r3, #7
 800c072:	2b04      	cmp	r3, #4
 800c074:	d00b      	beq.n	800c08e <xPortStartScheduler+0xbe>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	60bb      	str	r3, [r7, #8]
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	e7fd      	b.n	800c08a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c08e:	4b1e      	ldr	r3, [pc, #120]	@ (800c108 <xPortStartScheduler+0x138>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	021b      	lsls	r3, r3, #8
 800c094:	4a1c      	ldr	r2, [pc, #112]	@ (800c108 <xPortStartScheduler+0x138>)
 800c096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c098:	4b1b      	ldr	r3, [pc, #108]	@ (800c108 <xPortStartScheduler+0x138>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0a0:	4a19      	ldr	r2, [pc, #100]	@ (800c108 <xPortStartScheduler+0x138>)
 800c0a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0ac:	4b17      	ldr	r3, [pc, #92]	@ (800c10c <xPortStartScheduler+0x13c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a16      	ldr	r2, [pc, #88]	@ (800c10c <xPortStartScheduler+0x13c>)
 800c0b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c0b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0b8:	4b14      	ldr	r3, [pc, #80]	@ (800c10c <xPortStartScheduler+0x13c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a13      	ldr	r2, [pc, #76]	@ (800c10c <xPortStartScheduler+0x13c>)
 800c0be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c0c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0c4:	f000 f8da 	bl	800c27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0c8:	4b11      	ldr	r3, [pc, #68]	@ (800c110 <xPortStartScheduler+0x140>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0ce:	f000 f8f9 	bl	800c2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0d2:	4b10      	ldr	r3, [pc, #64]	@ (800c114 <xPortStartScheduler+0x144>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c114 <xPortStartScheduler+0x144>)
 800c0d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c0dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0de:	f7ff ff63 	bl	800bfa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0e2:	f7ff fa73 	bl	800b5cc <vTaskSwitchContext>
	prvTaskExitError();
 800c0e6:	f7ff ff1b 	bl	800bf20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	e000ed00 	.word	0xe000ed00
 800c0f8:	410fc271 	.word	0x410fc271
 800c0fc:	410fc270 	.word	0x410fc270
 800c100:	e000e400 	.word	0xe000e400
 800c104:	24005224 	.word	0x24005224
 800c108:	24005228 	.word	0x24005228
 800c10c:	e000ed20 	.word	0xe000ed20
 800c110:	24000028 	.word	0x24000028
 800c114:	e000ef34 	.word	0xe000ef34

0800c118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	607b      	str	r3, [r7, #4]
}
 800c130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c132:	4b10      	ldr	r3, [pc, #64]	@ (800c174 <vPortEnterCritical+0x5c>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3301      	adds	r3, #1
 800c138:	4a0e      	ldr	r2, [pc, #56]	@ (800c174 <vPortEnterCritical+0x5c>)
 800c13a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c13c:	4b0d      	ldr	r3, [pc, #52]	@ (800c174 <vPortEnterCritical+0x5c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d110      	bne.n	800c166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c144:	4b0c      	ldr	r3, [pc, #48]	@ (800c178 <vPortEnterCritical+0x60>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <vPortEnterCritical+0x4e>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	603b      	str	r3, [r7, #0]
}
 800c160:	bf00      	nop
 800c162:	bf00      	nop
 800c164:	e7fd      	b.n	800c162 <vPortEnterCritical+0x4a>
	}
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	24000028 	.word	0x24000028
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c182:	4b12      	ldr	r3, [pc, #72]	@ (800c1cc <vPortExitCritical+0x50>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10b      	bne.n	800c1a2 <vPortExitCritical+0x26>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	607b      	str	r3, [r7, #4]
}
 800c19c:	bf00      	nop
 800c19e:	bf00      	nop
 800c1a0:	e7fd      	b.n	800c19e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c1cc <vPortExitCritical+0x50>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	4a08      	ldr	r2, [pc, #32]	@ (800c1cc <vPortExitCritical+0x50>)
 800c1aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1ac:	4b07      	ldr	r3, [pc, #28]	@ (800c1cc <vPortExitCritical+0x50>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d105      	bne.n	800c1c0 <vPortExitCritical+0x44>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	f383 8811 	msr	BASEPRI, r3
}
 800c1be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	24000028 	.word	0x24000028

0800c1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1d0:	f3ef 8009 	mrs	r0, PSP
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	4b15      	ldr	r3, [pc, #84]	@ (800c230 <pxCurrentTCBConst>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	f01e 0f10 	tst.w	lr, #16
 800c1e0:	bf08      	it	eq
 800c1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ea:	6010      	str	r0, [r2, #0]
 800c1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c1f4:	f380 8811 	msr	BASEPRI, r0
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f7ff f9e4 	bl	800b5cc <vTaskSwitchContext>
 800c204:	f04f 0000 	mov.w	r0, #0
 800c208:	f380 8811 	msr	BASEPRI, r0
 800c20c:	bc09      	pop	{r0, r3}
 800c20e:	6819      	ldr	r1, [r3, #0]
 800c210:	6808      	ldr	r0, [r1, #0]
 800c212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c216:	f01e 0f10 	tst.w	lr, #16
 800c21a:	bf08      	it	eq
 800c21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c220:	f380 8809 	msr	PSP, r0
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w

0800c230 <pxCurrentTCBConst>:
 800c230:	240050f8 	.word	0x240050f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop

0800c238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	607b      	str	r3, [r7, #4]
}
 800c250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c252:	f7ff f901 	bl	800b458 <xTaskIncrementTick>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c25c:	4b06      	ldr	r3, [pc, #24]	@ (800c278 <SysTick_Handler+0x40>)
 800c25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	2300      	movs	r3, #0
 800c266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	f383 8811 	msr	BASEPRI, r3
}
 800c26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	e000ed04 	.word	0xe000ed04

0800c27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c280:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b0 <vPortSetupTimerInterrupt+0x34>)
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c286:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b4 <vPortSetupTimerInterrupt+0x38>)
 800c288:	2200      	movs	r2, #0
 800c28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c28c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2b8 <vPortSetupTimerInterrupt+0x3c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0a      	ldr	r2, [pc, #40]	@ (800c2bc <vPortSetupTimerInterrupt+0x40>)
 800c292:	fba2 2303 	umull	r2, r3, r2, r3
 800c296:	099b      	lsrs	r3, r3, #6
 800c298:	4a09      	ldr	r2, [pc, #36]	@ (800c2c0 <vPortSetupTimerInterrupt+0x44>)
 800c29a:	3b01      	subs	r3, #1
 800c29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c29e:	4b04      	ldr	r3, [pc, #16]	@ (800c2b0 <vPortSetupTimerInterrupt+0x34>)
 800c2a0:	2207      	movs	r2, #7
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	e000e010 	.word	0xe000e010
 800c2b4:	e000e018 	.word	0xe000e018
 800c2b8:	24000000 	.word	0x24000000
 800c2bc:	10624dd3 	.word	0x10624dd3
 800c2c0:	e000e014 	.word	0xe000e014

0800c2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c2d4 <vPortEnableVFP+0x10>
 800c2c8:	6801      	ldr	r1, [r0, #0]
 800c2ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c2ce:	6001      	str	r1, [r0, #0]
 800c2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2d2:	bf00      	nop
 800c2d4:	e000ed88 	.word	0xe000ed88

0800c2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2de:	f3ef 8305 	mrs	r3, IPSR
 800c2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b0f      	cmp	r3, #15
 800c2e8:	d915      	bls.n	800c316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2ea:	4a18      	ldr	r2, [pc, #96]	@ (800c34c <vPortValidateInterruptPriority+0x74>)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2f4:	4b16      	ldr	r3, [pc, #88]	@ (800c350 <vPortValidateInterruptPriority+0x78>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	7afa      	ldrb	r2, [r7, #11]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d20b      	bcs.n	800c316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	607b      	str	r3, [r7, #4]
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	e7fd      	b.n	800c312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c316:	4b0f      	ldr	r3, [pc, #60]	@ (800c354 <vPortValidateInterruptPriority+0x7c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c31e:	4b0e      	ldr	r3, [pc, #56]	@ (800c358 <vPortValidateInterruptPriority+0x80>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	429a      	cmp	r2, r3
 800c324:	d90b      	bls.n	800c33e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	603b      	str	r3, [r7, #0]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <vPortValidateInterruptPriority+0x62>
	}
 800c33e:	bf00      	nop
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	e000e3f0 	.word	0xe000e3f0
 800c350:	24005224 	.word	0x24005224
 800c354:	e000ed0c 	.word	0xe000ed0c
 800c358:	24005228 	.word	0x24005228

0800c35c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08a      	sub	sp, #40	@ 0x28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c364:	2300      	movs	r3, #0
 800c366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c368:	f7fe ffa8 	bl	800b2bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c36c:	4b5c      	ldr	r3, [pc, #368]	@ (800c4e0 <pvPortMalloc+0x184>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c374:	f000 f924 	bl	800c5c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c378:	4b5a      	ldr	r3, [pc, #360]	@ (800c4e4 <pvPortMalloc+0x188>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4013      	ands	r3, r2
 800c380:	2b00      	cmp	r3, #0
 800c382:	f040 8095 	bne.w	800c4b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01e      	beq.n	800c3ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c38c:	2208      	movs	r2, #8
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4413      	add	r3, r2
 800c392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d015      	beq.n	800c3ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f023 0307 	bic.w	r3, r3, #7
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f003 0307 	and.w	r3, r3, #7
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00b      	beq.n	800c3ca <pvPortMalloc+0x6e>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	617b      	str	r3, [r7, #20]
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop
 800c3c8:	e7fd      	b.n	800c3c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d06f      	beq.n	800c4b0 <pvPortMalloc+0x154>
 800c3d0:	4b45      	ldr	r3, [pc, #276]	@ (800c4e8 <pvPortMalloc+0x18c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d86a      	bhi.n	800c4b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3da:	4b44      	ldr	r3, [pc, #272]	@ (800c4ec <pvPortMalloc+0x190>)
 800c3dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3de:	4b43      	ldr	r3, [pc, #268]	@ (800c4ec <pvPortMalloc+0x190>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3e4:	e004      	b.n	800c3f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d903      	bls.n	800c402 <pvPortMalloc+0xa6>
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1f1      	bne.n	800c3e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c402:	4b37      	ldr	r3, [pc, #220]	@ (800c4e0 <pvPortMalloc+0x184>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c408:	429a      	cmp	r2, r3
 800c40a:	d051      	beq.n	800c4b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2208      	movs	r2, #8
 800c412:	4413      	add	r3, r2
 800c414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	1ad2      	subs	r2, r2, r3
 800c426:	2308      	movs	r3, #8
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d920      	bls.n	800c470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c42e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4413      	add	r3, r2
 800c434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	f003 0307 	and.w	r3, r3, #7
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <pvPortMalloc+0xfc>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	613b      	str	r3, [r7, #16]
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	1ad2      	subs	r2, r2, r3
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c46a:	69b8      	ldr	r0, [r7, #24]
 800c46c:	f000 f90a 	bl	800c684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c470:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e8 <pvPortMalloc+0x18c>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e8 <pvPortMalloc+0x18c>)
 800c47c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c47e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4e8 <pvPortMalloc+0x18c>)
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f0 <pvPortMalloc+0x194>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	429a      	cmp	r2, r3
 800c488:	d203      	bcs.n	800c492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c48a:	4b17      	ldr	r3, [pc, #92]	@ (800c4e8 <pvPortMalloc+0x18c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a18      	ldr	r2, [pc, #96]	@ (800c4f0 <pvPortMalloc+0x194>)
 800c490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	4b13      	ldr	r3, [pc, #76]	@ (800c4e4 <pvPortMalloc+0x188>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	431a      	orrs	r2, r3
 800c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4a6:	4b13      	ldr	r3, [pc, #76]	@ (800c4f4 <pvPortMalloc+0x198>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	4a11      	ldr	r2, [pc, #68]	@ (800c4f4 <pvPortMalloc+0x198>)
 800c4ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4b0:	f7fe ff12 	bl	800b2d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	f003 0307 	and.w	r3, r3, #7
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00b      	beq.n	800c4d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	60fb      	str	r3, [r7, #12]
}
 800c4d0:	bf00      	nop
 800c4d2:	bf00      	nop
 800c4d4:	e7fd      	b.n	800c4d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c4d6:	69fb      	ldr	r3, [r7, #28]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3728      	adds	r7, #40	@ 0x28
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	24008e34 	.word	0x24008e34
 800c4e4:	24008e48 	.word	0x24008e48
 800c4e8:	24008e38 	.word	0x24008e38
 800c4ec:	24008e2c 	.word	0x24008e2c
 800c4f0:	24008e3c 	.word	0x24008e3c
 800c4f4:	24008e40 	.word	0x24008e40

0800c4f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d04f      	beq.n	800c5aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c50a:	2308      	movs	r3, #8
 800c50c:	425b      	negs	r3, r3
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	4413      	add	r3, r2
 800c512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	4b25      	ldr	r3, [pc, #148]	@ (800c5b4 <vPortFree+0xbc>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4013      	ands	r3, r2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10b      	bne.n	800c53e <vPortFree+0x46>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	60fb      	str	r3, [r7, #12]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00b      	beq.n	800c55e <vPortFree+0x66>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	60bb      	str	r3, [r7, #8]
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	e7fd      	b.n	800c55a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	4b14      	ldr	r3, [pc, #80]	@ (800c5b4 <vPortFree+0xbc>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4013      	ands	r3, r2
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d01e      	beq.n	800c5aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d11a      	bne.n	800c5aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	4b0e      	ldr	r3, [pc, #56]	@ (800c5b4 <vPortFree+0xbc>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	43db      	mvns	r3, r3
 800c57e:	401a      	ands	r2, r3
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c584:	f7fe fe9a 	bl	800b2bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5b8 <vPortFree+0xc0>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4413      	add	r3, r2
 800c592:	4a09      	ldr	r2, [pc, #36]	@ (800c5b8 <vPortFree+0xc0>)
 800c594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c596:	6938      	ldr	r0, [r7, #16]
 800c598:	f000 f874 	bl	800c684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c59c:	4b07      	ldr	r3, [pc, #28]	@ (800c5bc <vPortFree+0xc4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	4a06      	ldr	r2, [pc, #24]	@ (800c5bc <vPortFree+0xc4>)
 800c5a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5a6:	f7fe fe97 	bl	800b2d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5aa:	bf00      	nop
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	24008e48 	.word	0x24008e48
 800c5b8:	24008e38 	.word	0x24008e38
 800c5bc:	24008e44 	.word	0x24008e44

0800c5c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c5ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5cc:	4b27      	ldr	r3, [pc, #156]	@ (800c66c <prvHeapInit+0xac>)
 800c5ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f003 0307 	and.w	r3, r3, #7
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00c      	beq.n	800c5f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3307      	adds	r3, #7
 800c5de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f023 0307 	bic.w	r3, r3, #7
 800c5e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c66c <prvHeapInit+0xac>)
 800c5f0:	4413      	add	r3, r2
 800c5f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c670 <prvHeapInit+0xb0>)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c670 <prvHeapInit+0xb0>)
 800c600:	2200      	movs	r2, #0
 800c602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	4413      	add	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c60c:	2208      	movs	r2, #8
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1a9b      	subs	r3, r3, r2
 800c612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f023 0307 	bic.w	r3, r3, #7
 800c61a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4a15      	ldr	r2, [pc, #84]	@ (800c674 <prvHeapInit+0xb4>)
 800c620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c622:	4b14      	ldr	r3, [pc, #80]	@ (800c674 <prvHeapInit+0xb4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2200      	movs	r2, #0
 800c628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c62a:	4b12      	ldr	r3, [pc, #72]	@ (800c674 <prvHeapInit+0xb4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	1ad2      	subs	r2, r2, r3
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c640:	4b0c      	ldr	r3, [pc, #48]	@ (800c674 <prvHeapInit+0xb4>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	4a0a      	ldr	r2, [pc, #40]	@ (800c678 <prvHeapInit+0xb8>)
 800c64e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	4a09      	ldr	r2, [pc, #36]	@ (800c67c <prvHeapInit+0xbc>)
 800c656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c658:	4b09      	ldr	r3, [pc, #36]	@ (800c680 <prvHeapInit+0xc0>)
 800c65a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c65e:	601a      	str	r2, [r3, #0]
}
 800c660:	bf00      	nop
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	2400522c 	.word	0x2400522c
 800c670:	24008e2c 	.word	0x24008e2c
 800c674:	24008e34 	.word	0x24008e34
 800c678:	24008e3c 	.word	0x24008e3c
 800c67c:	24008e38 	.word	0x24008e38
 800c680:	24008e48 	.word	0x24008e48

0800c684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c68c:	4b28      	ldr	r3, [pc, #160]	@ (800c730 <prvInsertBlockIntoFreeList+0xac>)
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	e002      	b.n	800c698 <prvInsertBlockIntoFreeList+0x14>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d8f7      	bhi.n	800c692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d108      	bne.n	800c6c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	441a      	add	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	441a      	add	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d118      	bne.n	800c70c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	4b15      	ldr	r3, [pc, #84]	@ (800c734 <prvInsertBlockIntoFreeList+0xb0>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d00d      	beq.n	800c702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	441a      	add	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	e008      	b.n	800c714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c702:	4b0c      	ldr	r3, [pc, #48]	@ (800c734 <prvInsertBlockIntoFreeList+0xb0>)
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	e003      	b.n	800c714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d002      	beq.n	800c722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c722:	bf00      	nop
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	24008e2c 	.word	0x24008e2c
 800c734:	24008e34 	.word	0x24008e34

0800c738 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c742:	f009 fa2d 	bl	8015ba0 <sys_timeouts_sleeptime>
 800c746:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c74e:	d10b      	bne.n	800c768 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c750:	4813      	ldr	r0, [pc, #76]	@ (800c7a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c752:	f00c fbd6 	bl	8018f02 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c756:	2200      	movs	r2, #0
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f00c fb48 	bl	8018df0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c760:	480f      	ldr	r0, [pc, #60]	@ (800c7a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c762:	f00c fbbf 	bl	8018ee4 <sys_mutex_lock>
    return;
 800c766:	e018      	b.n	800c79a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d102      	bne.n	800c774 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c76e:	f009 f9dd 	bl	8015b2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c772:	e7e6      	b.n	800c742 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c774:	480a      	ldr	r0, [pc, #40]	@ (800c7a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c776:	f00c fbc4 	bl	8018f02 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f00c fb36 	bl	8018df0 <sys_arch_mbox_fetch>
 800c784:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c786:	4806      	ldr	r0, [pc, #24]	@ (800c7a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c788:	f00c fbac 	bl	8018ee4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c792:	d102      	bne.n	800c79a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c794:	f009 f9ca 	bl	8015b2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c798:	e7d3      	b.n	800c742 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	24008e58 	.word	0x24008e58

0800c7a4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c7ac:	4810      	ldr	r0, [pc, #64]	@ (800c7f0 <tcpip_thread+0x4c>)
 800c7ae:	f00c fb99 	bl	8018ee4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c7b2:	4b10      	ldr	r3, [pc, #64]	@ (800c7f4 <tcpip_thread+0x50>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c7f4 <tcpip_thread+0x50>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a0e      	ldr	r2, [pc, #56]	@ (800c7f8 <tcpip_thread+0x54>)
 800c7c0:	6812      	ldr	r2, [r2, #0]
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c7c6:	f107 030c 	add.w	r3, r7, #12
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	480b      	ldr	r0, [pc, #44]	@ (800c7fc <tcpip_thread+0x58>)
 800c7ce:	f7ff ffb3 	bl	800c738 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d106      	bne.n	800c7e6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c7d8:	4b09      	ldr	r3, [pc, #36]	@ (800c800 <tcpip_thread+0x5c>)
 800c7da:	2291      	movs	r2, #145	@ 0x91
 800c7dc:	4909      	ldr	r1, [pc, #36]	@ (800c804 <tcpip_thread+0x60>)
 800c7de:	480a      	ldr	r0, [pc, #40]	@ (800c808 <tcpip_thread+0x64>)
 800c7e0:	f00c fce0 	bl	80191a4 <iprintf>
      continue;
 800c7e4:	e003      	b.n	800c7ee <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 f80f 	bl	800c80c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c7ee:	e7ea      	b.n	800c7c6 <tcpip_thread+0x22>
 800c7f0:	24008e58 	.word	0x24008e58
 800c7f4:	24008e4c 	.word	0x24008e4c
 800c7f8:	24008e50 	.word	0x24008e50
 800c7fc:	24008e54 	.word	0x24008e54
 800c800:	0801a614 	.word	0x0801a614
 800c804:	0801a644 	.word	0x0801a644
 800c808:	0801a664 	.word	0x0801a664

0800c80c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d026      	beq.n	800c86a <tcpip_thread_handle_msg+0x5e>
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	dc2b      	bgt.n	800c878 <tcpip_thread_handle_msg+0x6c>
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <tcpip_thread_handle_msg+0x1e>
 800c824:	2b01      	cmp	r3, #1
 800c826:	d015      	beq.n	800c854 <tcpip_thread_handle_msg+0x48>
 800c828:	e026      	b.n	800c878 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	6850      	ldr	r0, [r2, #4]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	6892      	ldr	r2, [r2, #8]
 800c836:	4611      	mov	r1, r2
 800c838:	4798      	blx	r3
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d004      	beq.n	800c84a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	f002 fcdf 	bl	800f208 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c84a:	6879      	ldr	r1, [r7, #4]
 800c84c:	2009      	movs	r0, #9
 800c84e:	f001 fe37 	bl	800e4c0 <memp_free>
      break;
 800c852:	e018      	b.n	800c886 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	6892      	ldr	r2, [r2, #8]
 800c85c:	4610      	mov	r0, r2
 800c85e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	2008      	movs	r0, #8
 800c864:	f001 fe2c 	bl	800e4c0 <memp_free>
      break;
 800c868:	e00d      	b.n	800c886 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	6892      	ldr	r2, [r2, #8]
 800c872:	4610      	mov	r0, r2
 800c874:	4798      	blx	r3
      break;
 800c876:	e006      	b.n	800c886 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c878:	4b05      	ldr	r3, [pc, #20]	@ (800c890 <tcpip_thread_handle_msg+0x84>)
 800c87a:	22cf      	movs	r2, #207	@ 0xcf
 800c87c:	4905      	ldr	r1, [pc, #20]	@ (800c894 <tcpip_thread_handle_msg+0x88>)
 800c87e:	4806      	ldr	r0, [pc, #24]	@ (800c898 <tcpip_thread_handle_msg+0x8c>)
 800c880:	f00c fc90 	bl	80191a4 <iprintf>
      break;
 800c884:	bf00      	nop
  }
}
 800c886:	bf00      	nop
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	0801a614 	.word	0x0801a614
 800c894:	0801a644 	.word	0x0801a644
 800c898:	0801a664 	.word	0x0801a664

0800c89c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c8a8:	481a      	ldr	r0, [pc, #104]	@ (800c914 <tcpip_inpkt+0x78>)
 800c8aa:	f00c fae0 	bl	8018e6e <sys_mbox_valid>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d105      	bne.n	800c8c0 <tcpip_inpkt+0x24>
 800c8b4:	4b18      	ldr	r3, [pc, #96]	@ (800c918 <tcpip_inpkt+0x7c>)
 800c8b6:	22fc      	movs	r2, #252	@ 0xfc
 800c8b8:	4918      	ldr	r1, [pc, #96]	@ (800c91c <tcpip_inpkt+0x80>)
 800c8ba:	4819      	ldr	r0, [pc, #100]	@ (800c920 <tcpip_inpkt+0x84>)
 800c8bc:	f00c fc72 	bl	80191a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c8c0:	2009      	movs	r0, #9
 800c8c2:	f001 fd87 	bl	800e3d4 <memp_malloc>
 800c8c6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c8ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8d2:	e01a      	b.n	800c90a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c8ec:	6979      	ldr	r1, [r7, #20]
 800c8ee:	4809      	ldr	r0, [pc, #36]	@ (800c914 <tcpip_inpkt+0x78>)
 800c8f0:	f00c fa64 	bl	8018dbc <sys_mbox_trypost>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d006      	beq.n	800c908 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c8fa:	6979      	ldr	r1, [r7, #20]
 800c8fc:	2009      	movs	r0, #9
 800c8fe:	f001 fddf 	bl	800e4c0 <memp_free>
    return ERR_MEM;
 800c902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c906:	e000      	b.n	800c90a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c908:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	24008e54 	.word	0x24008e54
 800c918:	0801a614 	.word	0x0801a614
 800c91c:	0801a68c 	.word	0x0801a68c
 800c920:	0801a664 	.word	0x0801a664

0800c924 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c934:	f003 0318 	and.w	r3, r3, #24
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d006      	beq.n	800c94a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c93c:	4a08      	ldr	r2, [pc, #32]	@ (800c960 <tcpip_input+0x3c>)
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff ffab 	bl	800c89c <tcpip_inpkt>
 800c946:	4603      	mov	r3, r0
 800c948:	e005      	b.n	800c956 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c94a:	4a06      	ldr	r2, [pc, #24]	@ (800c964 <tcpip_input+0x40>)
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff ffa4 	bl	800c89c <tcpip_inpkt>
 800c954:	4603      	mov	r3, r0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	080187c1 	.word	0x080187c1
 800c964:	080174bd 	.word	0x080174bd

0800c968 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c972:	4819      	ldr	r0, [pc, #100]	@ (800c9d8 <tcpip_try_callback+0x70>)
 800c974:	f00c fa7b 	bl	8018e6e <sys_mbox_valid>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <tcpip_try_callback+0x24>
 800c97e:	4b17      	ldr	r3, [pc, #92]	@ (800c9dc <tcpip_try_callback+0x74>)
 800c980:	f240 125d 	movw	r2, #349	@ 0x15d
 800c984:	4916      	ldr	r1, [pc, #88]	@ (800c9e0 <tcpip_try_callback+0x78>)
 800c986:	4817      	ldr	r0, [pc, #92]	@ (800c9e4 <tcpip_try_callback+0x7c>)
 800c988:	f00c fc0c 	bl	80191a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c98c:	2008      	movs	r0, #8
 800c98e:	f001 fd21 	bl	800e3d4 <memp_malloc>
 800c992:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c99a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c99e:	e017      	b.n	800c9d0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c9b2:	68f9      	ldr	r1, [r7, #12]
 800c9b4:	4808      	ldr	r0, [pc, #32]	@ (800c9d8 <tcpip_try_callback+0x70>)
 800c9b6:	f00c fa01 	bl	8018dbc <sys_mbox_trypost>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c9c0:	68f9      	ldr	r1, [r7, #12]
 800c9c2:	2008      	movs	r0, #8
 800c9c4:	f001 fd7c 	bl	800e4c0 <memp_free>
    return ERR_MEM;
 800c9c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9cc:	e000      	b.n	800c9d0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	24008e54 	.word	0x24008e54
 800c9dc:	0801a614 	.word	0x0801a614
 800c9e0:	0801a68c 	.word	0x0801a68c
 800c9e4:	0801a664 	.word	0x0801a664

0800c9e8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af02      	add	r7, sp, #8
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c9f2:	f001 f83a 	bl	800da6a <lwip_init>

  tcpip_init_done = initfunc;
 800c9f6:	4a17      	ldr	r2, [pc, #92]	@ (800ca54 <tcpip_init+0x6c>)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c9fc:	4a16      	ldr	r2, [pc, #88]	@ (800ca58 <tcpip_init+0x70>)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ca02:	2106      	movs	r1, #6
 800ca04:	4815      	ldr	r0, [pc, #84]	@ (800ca5c <tcpip_init+0x74>)
 800ca06:	f00c f9b7 	bl	8018d78 <sys_mbox_new>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d006      	beq.n	800ca1e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ca10:	4b13      	ldr	r3, [pc, #76]	@ (800ca60 <tcpip_init+0x78>)
 800ca12:	f240 2261 	movw	r2, #609	@ 0x261
 800ca16:	4913      	ldr	r1, [pc, #76]	@ (800ca64 <tcpip_init+0x7c>)
 800ca18:	4813      	ldr	r0, [pc, #76]	@ (800ca68 <tcpip_init+0x80>)
 800ca1a:	f00c fbc3 	bl	80191a4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ca1e:	4813      	ldr	r0, [pc, #76]	@ (800ca6c <tcpip_init+0x84>)
 800ca20:	f00c fa44 	bl	8018eac <sys_mutex_new>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d006      	beq.n	800ca38 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ca2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca60 <tcpip_init+0x78>)
 800ca2c:	f240 2265 	movw	r2, #613	@ 0x265
 800ca30:	490f      	ldr	r1, [pc, #60]	@ (800ca70 <tcpip_init+0x88>)
 800ca32:	480d      	ldr	r0, [pc, #52]	@ (800ca68 <tcpip_init+0x80>)
 800ca34:	f00c fbb6 	bl	80191a4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca40:	2200      	movs	r2, #0
 800ca42:	490c      	ldr	r1, [pc, #48]	@ (800ca74 <tcpip_init+0x8c>)
 800ca44:	480c      	ldr	r0, [pc, #48]	@ (800ca78 <tcpip_init+0x90>)
 800ca46:	f00c fa69 	bl	8018f1c <sys_thread_new>
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	24008e4c 	.word	0x24008e4c
 800ca58:	24008e50 	.word	0x24008e50
 800ca5c:	24008e54 	.word	0x24008e54
 800ca60:	0801a614 	.word	0x0801a614
 800ca64:	0801a69c 	.word	0x0801a69c
 800ca68:	0801a664 	.word	0x0801a664
 800ca6c:	24008e58 	.word	0x24008e58
 800ca70:	0801a6c0 	.word	0x0801a6c0
 800ca74:	0800c7a5 	.word	0x0800c7a5
 800ca78:	0801a6e4 	.word	0x0801a6e4

0800ca7c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <fs_open+0x16>
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d102      	bne.n	800ca98 <fs_open+0x1c>
    return ERR_ARG;
 800ca92:	f06f 030f 	mvn.w	r3, #15
 800ca96:	e028      	b.n	800caea <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ca98:	4b16      	ldr	r3, [pc, #88]	@ (800caf4 <fs_open+0x78>)
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e020      	b.n	800cae0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	4619      	mov	r1, r3
 800caa4:	6838      	ldr	r0, [r7, #0]
 800caa6:	f7f3 fc1b 	bl	80002e0 <strcmp>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d114      	bne.n	800cada <fs_open+0x5e>
      file->data = (const char *)f->data;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	68da      	ldr	r2, [r3, #12]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	68da      	ldr	r2, [r3, #12]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	7c1a      	ldrb	r2, [r3, #16]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	e007      	b.n	800caea <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1db      	bne.n	800ca9e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800cae6:	f06f 0305 	mvn.w	r3, #5
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	0801e160 	.word	0x0801e160

0800caf8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	1ad3      	subs	r3, r2, r3
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800cb32:	222c      	movs	r2, #44	@ 0x2c
 800cb34:	2100      	movs	r1, #0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f00c fcc6 	bl	80194c8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800cb4a:	202c      	movs	r0, #44	@ 0x2c
 800cb4c:	f001 fa9a 	bl	800e084 <mem_malloc>
 800cb50:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <http_state_alloc+0x1a>
    http_state_init(ret);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff ffe6 	bl	800cb2a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800cb5e:	687b      	ldr	r3, [r7, #4]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d007      	beq.n	800cb88 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff ffbb 	bl	800caf8 <fs_close>
    hs->handle = NULL;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d007      	beq.n	800cba0 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6a1b      	ldr	r3, [r3, #32]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f002 fb37 	bl	800f208 <pbuf_free>
    hs->req = NULL;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d005      	beq.n	800cbc2 <http_state_free+0x1a>
    http_state_eof(hs);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff ffd6 	bl	800cb68 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f001 f8c1 	bl	800dd44 <mem_free>
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <http_write+0x22>
 800cbe0:	4b2c      	ldr	r3, [pc, #176]	@ (800cc94 <http_write+0xc8>)
 800cbe2:	f240 2219 	movw	r2, #537	@ 0x219
 800cbe6:	492c      	ldr	r1, [pc, #176]	@ (800cc98 <http_write+0xcc>)
 800cbe8:	482c      	ldr	r0, [pc, #176]	@ (800cc9c <http_write+0xd0>)
 800cbea:	f00c fadb 	bl	80191a4 <iprintf>
  len = *length;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800cbf4:	8afb      	ldrh	r3, [r7, #22]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <http_write+0x32>
    return ERR_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e045      	b.n	800cc8a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cc04:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800cc06:	8aba      	ldrh	r2, [r7, #20]
 800cc08:	8afb      	ldrh	r3, [r7, #22]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d201      	bcs.n	800cc12 <http_write+0x46>
    len = max_len;
 800cc0e:	8abb      	ldrh	r3, [r7, #20]
 800cc10:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800cc1a:	8afa      	ldrh	r2, [r7, #22]
 800cc1c:	8abb      	ldrh	r3, [r7, #20]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d901      	bls.n	800cc26 <http_write+0x5a>
    len = max_len;
 800cc22:	8abb      	ldrh	r3, [r7, #20]
 800cc24:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800cc26:	78fb      	ldrb	r3, [r7, #3]
 800cc28:	8afa      	ldrh	r2, [r7, #22]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f007 f8f3 	bl	8013e18 <tcp_write>
 800cc32:	4603      	mov	r3, r0
 800cc34:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800cc36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc3e:	d10f      	bne.n	800cc60 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d004      	beq.n	800cc54 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d902      	bls.n	800cc5a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800cc54:	2301      	movs	r3, #1
 800cc56:	82fb      	strh	r3, [r7, #22]
 800cc58:	e002      	b.n	800cc60 <http_write+0x94>
      } else {
        len /= 2;
 800cc5a:	8afb      	ldrh	r3, [r7, #22]
 800cc5c:	085b      	lsrs	r3, r3, #1
 800cc5e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800cc60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc68:	d102      	bne.n	800cc70 <http_write+0xa4>
 800cc6a:	8afb      	ldrh	r3, [r7, #22]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d8da      	bhi.n	800cc26 <http_write+0x5a>

  if (err == ERR_OK) {
 800cc70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d103      	bne.n	800cc80 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	8afa      	ldrh	r2, [r7, #22]
 800cc7c:	801a      	strh	r2, [r3, #0]
 800cc7e:	e002      	b.n	800cc86 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800cc86:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	0801a734 	.word	0x0801a734
 800cc98:	0801a76c 	.word	0x0801a76c
 800cc9c:	0801a77c 	.word	0x0801a77c

0800cca0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ccae:	2100      	movs	r1, #0
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f004 f975 	bl	8010fa0 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f004 f983 	bl	8010fc4 <tcp_recv>
  altcp_err(pcb, NULL);
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f004 f9c3 	bl	801104c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	2100      	movs	r1, #0
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f004 f9f8 	bl	80110c0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f004 f998 	bl	8011008 <tcp_sent>
  if (hs != NULL) {
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ccde:	68b8      	ldr	r0, [r7, #8]
 800cce0:	f7ff ff62 	bl	800cba8 <http_state_free>
  }

  if (abort_conn) {
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d004      	beq.n	800ccf4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f003 f890 	bl	800fe10 <tcp_abort>
    return ERR_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	e00f      	b.n	800cd14 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f002 ffa1 	bl	800fc3c <tcp_close>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ccfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800cd06:	2204      	movs	r2, #4
 800cd08:	4904      	ldr	r1, [pc, #16]	@ (800cd1c <http_close_or_abort_conn+0x7c>)
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f004 f9d8 	bl	80110c0 <tcp_poll>
  }
  return err;
 800cd10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	0800d3e3 	.word	0x0800d3e3

0800cd20 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff ffb6 	bl	800cca0 <http_close_or_abort_conn>
 800cd34:	4603      	mov	r3, r0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b082      	sub	sp, #8
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff ffe8 	bl	800cd20 <http_close_conn>
  }
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d105      	bne.n	800cd76 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff ffe6 	bl	800cd3e <http_eof>
    return 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	e016      	b.n	800cda4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff fec6 	bl	800cb0c <fs_bytes_left>
 800cd80:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	dc05      	bgt.n	800cd94 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff ffd7 	bl	800cd3e <http_eof>
    return 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	e007      	b.n	800cda4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800cd94:	4b05      	ldr	r3, [pc, #20]	@ (800cdac <http_check_eof+0x54>)
 800cd96:	f240 429d 	movw	r2, #1181	@ 0x49d
 800cd9a:	4905      	ldr	r1, [pc, #20]	@ (800cdb0 <http_check_eof+0x58>)
 800cd9c:	4805      	ldr	r0, [pc, #20]	@ (800cdb4 <http_check_eof+0x5c>)
 800cd9e:	f00c fa01 	bl	80191a4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800cda2:	2301      	movs	r3, #1
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	0801a734 	.word	0x0801a734
 800cdb0:	0801a7a4 	.word	0x0801a7a4
 800cdb4:	0801a77c 	.word	0x0801a77c

0800cdb8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d803      	bhi.n	800cdda <http_send_data_nonssi+0x22>
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	e001      	b.n	800cdde <http_send_data_nonssi+0x26>
 800cdda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdde:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	6999      	ldr	r1, [r3, #24]
 800cde4:	f107 020c 	add.w	r2, r7, #12
 800cde8:	2300      	movs	r3, #0
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff feee 	bl	800cbcc <http_write>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800cdf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10d      	bne.n	800ce18 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	89ba      	ldrh	r2, [r7, #12]
 800ce06:	441a      	add	r2, r3
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce10:	89ba      	ldrh	r2, [r7, #12]
 800ce12:	1a9a      	subs	r2, r3, r2
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <http_send+0x18>
    return 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	e025      	b.n	800ce86 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d108      	bne.n	800ce54 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff ff87 	bl	800cd58 <http_check_eof>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <http_send+0x32>
      return 0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	e018      	b.n	800ce86 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7ff ffae 	bl	800cdb8 <http_send_data_nonssi>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10d      	bne.n	800ce84 <http_send+0x62>
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fe4d 	bl	800cb0c <fs_bytes_left>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	dc05      	bgt.n	800ce84 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7ff ff5f 	bl	800cd3e <http_eof>
    return 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e000      	b.n	800ce86 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	4a1c      	ldr	r2, [pc, #112]	@ (800cf10 <http_get_404_file+0x80>)
 800ce9e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4619      	mov	r1, r3
 800cea8:	4610      	mov	r0, r2
 800ceaa:	f7ff fde7 	bl	800ca7c <fs_open>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ceb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d024      	beq.n	800cf04 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	4a15      	ldr	r2, [pc, #84]	@ (800cf14 <http_get_404_file+0x84>)
 800cebe:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4619      	mov	r1, r3
 800cec8:	4610      	mov	r0, r2
 800ceca:	f7ff fdd7 	bl	800ca7c <fs_open>
 800cece:	4603      	mov	r3, r0
 800ced0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ced2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d014      	beq.n	800cf04 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	4a0e      	ldr	r2, [pc, #56]	@ (800cf18 <http_get_404_file+0x88>)
 800cede:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4619      	mov	r1, r3
 800cee8:	4610      	mov	r0, r2
 800ceea:	f7ff fdc7 	bl	800ca7c <fs_open>
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800cef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d004      	beq.n	800cf04 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]
        return NULL;
 800cf00:	2300      	movs	r3, #0
 800cf02:	e000      	b.n	800cf06 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800cf04:	687b      	ldr	r3, [r7, #4]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	0801a7dc 	.word	0x0801a7dc
 800cf14:	0801a7e8 	.word	0x0801a7e8
 800cf18:	0801a7f4 	.word	0x0801a7f4

0800cf1c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08e      	sub	sp, #56	@ 0x38
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <http_parse_request+0x24>
 800cf32:	4b65      	ldr	r3, [pc, #404]	@ (800d0c8 <http_parse_request+0x1ac>)
 800cf34:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800cf38:	4964      	ldr	r1, [pc, #400]	@ (800d0cc <http_parse_request+0x1b0>)
 800cf3a:	4865      	ldr	r0, [pc, #404]	@ (800d0d0 <http_parse_request+0x1b4>)
 800cf3c:	f00c f932 	bl	80191a4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <http_parse_request+0x38>
 800cf46:	4b60      	ldr	r3, [pc, #384]	@ (800d0c8 <http_parse_request+0x1ac>)
 800cf48:	f240 72af 	movw	r2, #1967	@ 0x7af
 800cf4c:	4961      	ldr	r1, [pc, #388]	@ (800d0d4 <http_parse_request+0x1b8>)
 800cf4e:	4860      	ldr	r0, [pc, #384]	@ (800d0d0 <http_parse_request+0x1b4>)
 800cf50:	f00c f928 	bl	80191a4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d103      	bne.n	800cf64 <http_parse_request+0x48>
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	699b      	ldr	r3, [r3, #24]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800cf64:	f06f 0307 	mvn.w	r3, #7
 800cf68:	e0a9      	b.n	800d0be <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d103      	bne.n	800cf7a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf76:	621a      	str	r2, [r3, #32]
 800cf78:	e005      	b.n	800cf86 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f002 fa0f 	bl	800f3a4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800cf86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf88:	f002 f9e4 	bl	800f354 <pbuf_ref>

  if (hs->req->next != NULL) {
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	6a1b      	ldr	r3, [r3, #32]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d012      	beq.n	800cfbc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	891b      	ldrh	r3, [r3, #8]
 800cf9c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	bf28      	it	cs
 800cfa4:	4613      	movcs	r3, r2
 800cfa6:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	6a18      	ldr	r0, [r3, #32]
 800cfac:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800cfae:	2300      	movs	r3, #0
 800cfb0:	4949      	ldr	r1, [pc, #292]	@ (800d0d8 <http_parse_request+0x1bc>)
 800cfb2:	f002 fb2f 	bl	800f614 <pbuf_copy_partial>
    data = httpd_req_buf;
 800cfb6:	4b48      	ldr	r3, [pc, #288]	@ (800d0d8 <http_parse_request+0x1bc>)
 800cfb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfba:	e005      	b.n	800cfc8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc4:	895b      	ldrh	r3, [r3, #10]
 800cfc6:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800cfc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800cfca:	2b06      	cmp	r3, #6
 800cfcc:	d962      	bls.n	800d094 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800cfce:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	4942      	ldr	r1, [pc, #264]	@ (800d0dc <http_parse_request+0x1c0>)
 800cfd4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfd6:	f000 fb99 	bl	800d70c <lwip_strnstr>
 800cfda:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d058      	beq.n	800d094 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800cfe6:	2204      	movs	r2, #4
 800cfe8:	493d      	ldr	r1, [pc, #244]	@ (800d0e0 <http_parse_request+0x1c4>)
 800cfea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfec:	f00c fa81 	bl	80194f2 <strncmp>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d116      	bne.n	800d024 <http_parse_request+0x108>
        sp1 = data + 3;
 800cff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cff8:	3303      	adds	r3, #3
 800cffa:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	1c5a      	adds	r2, r3, #1
 800d000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	b29b      	uxth	r3, r3
 800d006:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	3301      	adds	r3, #1
 800d010:	8b7a      	ldrh	r2, [r7, #26]
 800d012:	4934      	ldr	r1, [pc, #208]	@ (800d0e4 <http_parse_request+0x1c8>)
 800d014:	4618      	mov	r0, r3
 800d016:	f000 fb79 	bl	800d70c <lwip_strnstr>
 800d01a:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800d01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d111      	bne.n	800d046 <http_parse_request+0x12a>
 800d022:	e006      	b.n	800d032 <http_parse_request+0x116>
        data[4] = 0;
 800d024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d026:	3304      	adds	r3, #4
 800d028:	2200      	movs	r2, #0
 800d02a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800d02c:	f06f 030f 	mvn.w	r3, #15
 800d030:	e045      	b.n	800d0be <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	3301      	adds	r3, #1
 800d036:	8b7a      	ldrh	r2, [r7, #26]
 800d038:	4928      	ldr	r1, [pc, #160]	@ (800d0dc <http_parse_request+0x1c0>)
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 fb66 	bl	800d70c <lwip_strnstr>
 800d040:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800d042:	2301      	movs	r3, #1
 800d044:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	3301      	adds	r3, #1
 800d04a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800d050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d052:	2b00      	cmp	r3, #0
 800d054:	d01e      	beq.n	800d094 <http_parse_request+0x178>
 800d056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d91a      	bls.n	800d094 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800d05e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d060:	461a      	mov	r2, r3
 800d062:	4921      	ldr	r1, [pc, #132]	@ (800d0e8 <http_parse_request+0x1cc>)
 800d064:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d066:	f000 fb51 	bl	800d70c <lwip_strnstr>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d011      	beq.n	800d094 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	3301      	adds	r3, #1
 800d074:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	2200      	movs	r2, #0
 800d07a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800d07c:	8b3b      	ldrh	r3, [r7, #24]
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	4413      	add	r3, r2
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800d086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d088:	6979      	ldr	r1, [r7, #20]
 800d08a:	68b8      	ldr	r0, [r7, #8]
 800d08c:	f000 f82e 	bl	800d0ec <http_find_file>
 800d090:	4603      	mov	r3, r0
 800d092:	e014      	b.n	800d0be <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	4618      	mov	r0, r3
 800d09a:	f002 f943 	bl	800f324 <pbuf_clen>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	891b      	ldrh	r3, [r3, #8]
 800d0a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0ac:	d205      	bcs.n	800d0ba <http_parse_request+0x19e>
 800d0ae:	8a7b      	ldrh	r3, [r7, #18]
 800d0b0:	2b05      	cmp	r3, #5
 800d0b2:	d802      	bhi.n	800d0ba <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800d0b4:	f06f 0304 	mvn.w	r3, #4
 800d0b8:	e001      	b.n	800d0be <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800d0ba:	f06f 030f 	mvn.w	r3, #15
  }
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3738      	adds	r7, #56	@ 0x38
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	0801a734 	.word	0x0801a734
 800d0cc:	0801a800 	.word	0x0801a800
 800d0d0:	0801a77c 	.word	0x0801a77c
 800d0d4:	0801a80c 	.word	0x0801a80c
 800d0d8:	24008e5c 	.word	0x24008e5c
 800d0dc:	0801a818 	.word	0x0801a818
 800d0e0:	0801a81c 	.word	0x0801a81c
 800d0e4:	0801a824 	.word	0x0801a824
 800d0e8:	0801a828 	.word	0x0801a828

0800d0ec <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b092      	sub	sp, #72	@ 0x48
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7f3 f8f3 	bl	80002f4 <strlen>
 800d10e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800d110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d112:	2b00      	cmp	r3, #0
 800d114:	d06b      	beq.n	800d1ee <http_find_file+0x102>
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11a:	3b01      	subs	r3, #1
 800d11c:	4413      	add	r3, r2
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	2b2f      	cmp	r3, #47	@ 0x2f
 800d122:	d164      	bne.n	800d1ee <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d124:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800d126:	4a53      	ldr	r2, [pc, #332]	@ (800d274 <http_find_file+0x188>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d102      	bne.n	800d132 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d15d      	bne.n	800d1ee <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800d132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d134:	3b01      	subs	r3, #1
 800d136:	2b3f      	cmp	r3, #63	@ 0x3f
 800d138:	bf28      	it	cs
 800d13a:	233f      	movcs	r3, #63	@ 0x3f
 800d13c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 800d13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00a      	beq.n	800d15a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d148:	4619      	mov	r1, r3
 800d14a:	484a      	ldr	r0, [pc, #296]	@ (800d274 <http_find_file+0x188>)
 800d14c:	f00c fab9 	bl	80196c2 <memcpy>
      http_uri_buf[copy_len] = 0;
 800d150:	4a48      	ldr	r2, [pc, #288]	@ (800d274 <http_find_file+0x188>)
 800d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d154:	4413      	add	r3, r2
 800d156:	2200      	movs	r2, #0
 800d158:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d15a:	2300      	movs	r3, #0
 800d15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d15e:	e043      	b.n	800d1e8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d162:	2b00      	cmp	r3, #0
 800d164:	d028      	beq.n	800d1b8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800d16c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d01e      	beq.n	800d1b2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800d174:	4a40      	ldr	r2, [pc, #256]	@ (800d278 <http_find_file+0x18c>)
 800d176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7f3 f8b9 	bl	80002f4 <strlen>
 800d182:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800d184:	69fa      	ldr	r2, [r7, #28]
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	4293      	cmp	r3, r2
 800d18a:	bf28      	it	cs
 800d18c:	4613      	movcs	r3, r2
 800d18e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	4a38      	ldr	r2, [pc, #224]	@ (800d274 <http_find_file+0x188>)
 800d194:	1898      	adds	r0, r3, r2
 800d196:	4a38      	ldr	r2, [pc, #224]	@ (800d278 <http_find_file+0x18c>)
 800d198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d19a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	f00c fa8e 	bl	80196c2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800d1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	4a31      	ldr	r2, [pc, #196]	@ (800d274 <http_find_file+0x188>)
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800d1b2:	4b30      	ldr	r3, [pc, #192]	@ (800d274 <http_find_file+0x188>)
 800d1b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1b6:	e004      	b.n	800d1c2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800d1b8:	4a2f      	ldr	r2, [pc, #188]	@ (800d278 <http_find_file+0x18c>)
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d1c0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fc58 	bl	800ca7c <fs_open>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800d1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d104      	bne.n	800d1e2 <http_find_file+0xf6>
        uri = file_name;
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1da:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800d1e0:	e005      	b.n	800d1ee <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ea:	2b04      	cmp	r3, #4
 800d1ec:	d9b8      	bls.n	800d160 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d124      	bne.n	800d23e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	213f      	movs	r1, #63	@ 0x3f
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f00c f96d 	bl	80194d8 <strchr>
 800d1fe:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800d200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d202:	2b00      	cmp	r3, #0
 800d204:	d005      	beq.n	800d212 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800d206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
      params++;
 800d20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20e:	3301      	adds	r3, #1
 800d210:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fc2f 	bl	800ca7c <fs_open>
 800d21e:	4603      	mov	r3, r0
 800d220:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <http_find_file+0x144>
      file = &hs->file_handle;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d22e:	e006      	b.n	800d23e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	4619      	mov	r1, r3
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f7ff fe2a 	bl	800ce90 <http_get_404_file>
 800d23c:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800d244:	f107 0308 	add.w	r3, r7, #8
 800d248:	4619      	mov	r1, r3
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f7ff fe20 	bl	800ce90 <http_get_404_file>
 800d250:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	4613      	mov	r3, r2
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f000 f809 	bl	800d27c <http_init_file>
 800d26a:	4603      	mov	r3, r0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3740      	adds	r7, #64	@ 0x40
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	2400925c 	.word	0x2400925c
 800d278:	0801e174 	.word	0x0801e174

0800d27c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
 800d288:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d05c      	beq.n	800d34a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d106      	bne.n	800d2a6 <http_init_file+0x2a>
 800d298:	4b35      	ldr	r3, [pc, #212]	@ (800d370 <http_init_file+0xf4>)
 800d29a:	f640 120b 	movw	r2, #2315	@ 0x90b
 800d29e:	4935      	ldr	r1, [pc, #212]	@ (800d374 <http_init_file+0xf8>)
 800d2a0:	4835      	ldr	r0, [pc, #212]	@ (800d378 <http_init_file+0xfc>)
 800d2a2:	f00b ff7f 	bl	80191a4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	da06      	bge.n	800d2ca <http_init_file+0x4e>
 800d2bc:	4b2c      	ldr	r3, [pc, #176]	@ (800d370 <http_init_file+0xf4>)
 800d2be:	f640 1234 	movw	r2, #2356	@ 0x934
 800d2c2:	492e      	ldr	r1, [pc, #184]	@ (800d37c <http_init_file+0x100>)
 800d2c4:	482c      	ldr	r0, [pc, #176]	@ (800d378 <http_init_file+0xfc>)
 800d2c6:	f00b ff6d 	bl	80191a4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	7c1b      	ldrb	r3, [r3, #16]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <http_init_file+0x7c>
 800d2ea:	4b21      	ldr	r3, [pc, #132]	@ (800d370 <http_init_file+0xf4>)
 800d2ec:	f640 1243 	movw	r2, #2371	@ 0x943
 800d2f0:	4923      	ldr	r1, [pc, #140]	@ (800d380 <http_init_file+0x104>)
 800d2f2:	4821      	ldr	r0, [pc, #132]	@ (800d378 <http_init_file+0xfc>)
 800d2f4:	f00b ff56 	bl	80191a4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d032      	beq.n	800d364 <http_init_file+0xe8>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	7c1b      	ldrb	r3, [r3, #16]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d02b      	beq.n	800d364 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6998      	ldr	r0, [r3, #24]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d314:	461a      	mov	r2, r3
 800d316:	491b      	ldr	r1, [pc, #108]	@ (800d384 <http_init_file+0x108>)
 800d318:	f000 f9f8 	bl	800d70c <lwip_strnstr>
 800d31c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01f      	beq.n	800d364 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	1d1a      	adds	r2, r3, #4
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	699a      	ldr	r2, [r3, #24]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	441a      	add	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	1ad2      	subs	r2, r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	625a      	str	r2, [r3, #36]	@ 0x24
 800d348:	e00c      	b.n	800d364 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	0801a734 	.word	0x0801a734
 800d374:	0801a830 	.word	0x0801a830
 800d378:	0801a77c 	.word	0x0801a77c
 800d37c:	0801a844 	.word	0x0801a844
 800d380:	0801a864 	.word	0x0801a864
 800d384:	0801a828 	.word	0x0801a828

0800d388 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	460b      	mov	r3, r1
 800d392:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d002      	beq.n	800d3a4 <http_err+0x1c>
    http_state_free(hs);
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f7ff fc02 	bl	800cba8 <http_state_free>
  }
}
 800d3a4:	bf00      	nop
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d101      	bne.n	800d3c8 <http_sent+0x1c>
    return ERR_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e008      	b.n	800d3da <http_sent+0x2e>
  }

  hs->retries = 0;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800d3d0:	6979      	ldr	r1, [r7, #20]
 800d3d2:	68b8      	ldr	r0, [r7, #8]
 800d3d4:	f7ff fd25 	bl	800ce22 <http_send>

  return ERR_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	6838      	ldr	r0, [r7, #0]
 800d3fa:	f7ff fc91 	bl	800cd20 <http_close_conn>
 800d3fe:	4603      	mov	r3, r0
 800d400:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	e021      	b.n	800d44a <http_poll+0x68>
  } else {
    hs->retries++;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d40c:	3301      	adds	r3, #1
 800d40e:	b2da      	uxtb	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d41c:	2b04      	cmp	r3, #4
 800d41e:	d105      	bne.n	800d42c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800d420:	68f9      	ldr	r1, [r7, #12]
 800d422:	6838      	ldr	r0, [r7, #0]
 800d424:	f7ff fc7c 	bl	800cd20 <http_close_conn>
      return ERR_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	e00e      	b.n	800d44a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d009      	beq.n	800d448 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800d434:	68f9      	ldr	r1, [r7, #12]
 800d436:	6838      	ldr	r0, [r7, #0]
 800d438:	f7ff fcf3 	bl	800ce22 <http_send>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800d442:	6838      	ldr	r0, [r7, #0]
 800d444:	f007 fad2 	bl	80149ec <tcp_output>
      }
    }
  }

  return ERR_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
	...

0800d454 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800d466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d105      	bne.n	800d47a <http_recv+0x26>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <http_recv+0x26>
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d111      	bne.n	800d49e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d008      	beq.n	800d492 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	891b      	ldrh	r3, [r3, #8]
 800d484:	4619      	mov	r1, r3
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f002 fe9c 	bl	80101c4 <tcp_recved>
      pbuf_free(p);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f001 febb 	bl	800f208 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800d492:	6979      	ldr	r1, [r7, #20]
 800d494:	68b8      	ldr	r0, [r7, #8]
 800d496:	f7ff fc43 	bl	800cd20 <http_close_conn>
    return ERR_OK;
 800d49a:	2300      	movs	r3, #0
 800d49c:	e055      	b.n	800d54a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	891b      	ldrh	r3, [r3, #8]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	68b8      	ldr	r0, [r7, #8]
 800d4a6:	f002 fe8d 	bl	80101c4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d147      	bne.n	800d542 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	6979      	ldr	r1, [r7, #20]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff fd30 	bl	800cf1c <http_parse_request>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800d4c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d015      	beq.n	800d4f4 <http_recv+0xa0>
 800d4c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4cc:	f113 0f05 	cmn.w	r3, #5
 800d4d0:	d010      	beq.n	800d4f4 <http_recv+0xa0>
 800d4d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4d6:	f113 0f10 	cmn.w	r3, #16
 800d4da:	d00b      	beq.n	800d4f4 <http_recv+0xa0>
 800d4dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4e0:	f113 0f08 	cmn.w	r3, #8
 800d4e4:	d006      	beq.n	800d4f4 <http_recv+0xa0>
 800d4e6:	4b1b      	ldr	r3, [pc, #108]	@ (800d554 <http_recv+0x100>)
 800d4e8:	f640 2204 	movw	r2, #2564	@ 0xa04
 800d4ec:	491a      	ldr	r1, [pc, #104]	@ (800d558 <http_recv+0x104>)
 800d4ee:	481b      	ldr	r0, [pc, #108]	@ (800d55c <http_recv+0x108>)
 800d4f0:	f00b fe58 	bl	80191a4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800d4f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4f8:	f113 0f05 	cmn.w	r3, #5
 800d4fc:	d00b      	beq.n	800d516 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d007      	beq.n	800d516 <http_recv+0xc2>
          pbuf_free(hs->req);
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f001 fe7c 	bl	800f208 <pbuf_free>
          hs->req = NULL;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	2200      	movs	r2, #0
 800d514:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 fe76 	bl	800f208 <pbuf_free>
      if (parsed == ERR_OK) {
 800d51c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d104      	bne.n	800d52e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800d524:	6979      	ldr	r1, [r7, #20]
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f7ff fc7b 	bl	800ce22 <http_send>
 800d52c:	e00c      	b.n	800d548 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800d52e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d532:	f113 0f10 	cmn.w	r3, #16
 800d536:	d107      	bne.n	800d548 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800d538:	6979      	ldr	r1, [r7, #20]
 800d53a:	68b8      	ldr	r0, [r7, #8]
 800d53c:	f7ff fbf0 	bl	800cd20 <http_close_conn>
 800d540:	e002      	b.n	800d548 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f001 fe60 	bl	800f208 <pbuf_free>
    }
  }
  return ERR_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3718      	adds	r7, #24
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	0801a734 	.word	0x0801a734
 800d558:	0801a890 	.word	0x0801a890
 800d55c:	0801a77c 	.word	0x0801a77c

0800d560 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	4613      	mov	r3, r2
 800d56c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800d56e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d102      	bne.n	800d57c <http_accept+0x1c>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d102      	bne.n	800d582 <http_accept+0x22>
    return ERR_VAL;
 800d57c:	f06f 0305 	mvn.w	r3, #5
 800d580:	e025      	b.n	800d5ce <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d582:	2101      	movs	r1, #1
 800d584:	68b8      	ldr	r0, [r7, #8]
 800d586:	f003 fb03 	bl	8010b90 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800d58a:	f7ff fadb 	bl	800cb44 <http_state_alloc>
 800d58e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d102      	bne.n	800d59c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800d596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d59a:	e018      	b.n	800d5ce <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	68ba      	ldr	r2, [r7, #8]
 800d5a0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800d5a2:	6979      	ldr	r1, [r7, #20]
 800d5a4:	68b8      	ldr	r0, [r7, #8]
 800d5a6:	f003 fcfb 	bl	8010fa0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800d5aa:	490b      	ldr	r1, [pc, #44]	@ (800d5d8 <http_accept+0x78>)
 800d5ac:	68b8      	ldr	r0, [r7, #8]
 800d5ae:	f003 fd09 	bl	8010fc4 <tcp_recv>
  altcp_err(pcb, http_err);
 800d5b2:	490a      	ldr	r1, [pc, #40]	@ (800d5dc <http_accept+0x7c>)
 800d5b4:	68b8      	ldr	r0, [r7, #8]
 800d5b6:	f003 fd49 	bl	801104c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d5ba:	2204      	movs	r2, #4
 800d5bc:	4908      	ldr	r1, [pc, #32]	@ (800d5e0 <http_accept+0x80>)
 800d5be:	68b8      	ldr	r0, [r7, #8]
 800d5c0:	f003 fd7e 	bl	80110c0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800d5c4:	4907      	ldr	r1, [pc, #28]	@ (800d5e4 <http_accept+0x84>)
 800d5c6:	68b8      	ldr	r0, [r7, #8]
 800d5c8:	f003 fd1e 	bl	8011008 <tcp_sent>

  return ERR_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0800d455 	.word	0x0800d455
 800d5dc:	0800d389 	.word	0x0800d389
 800d5e0:	0800d3e3 	.word	0x0800d3e3
 800d5e4:	0800d3ad 	.word	0x0800d3ad

0800d5e8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d029      	beq.n	800d64e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d5fa:	2101      	movs	r1, #1
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f003 fac7 	bl	8010b90 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800d602:	887b      	ldrh	r3, [r7, #2]
 800d604:	461a      	mov	r2, r3
 800d606:	4914      	ldr	r1, [pc, #80]	@ (800d658 <httpd_init_pcb+0x70>)
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f002 fc0d 	bl	800fe28 <tcp_bind>
 800d60e:	4603      	mov	r3, r0
 800d610:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800d612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d006      	beq.n	800d628 <httpd_init_pcb+0x40>
 800d61a:	4b10      	ldr	r3, [pc, #64]	@ (800d65c <httpd_init_pcb+0x74>)
 800d61c:	f640 2257 	movw	r2, #2647	@ 0xa57
 800d620:	490f      	ldr	r1, [pc, #60]	@ (800d660 <httpd_init_pcb+0x78>)
 800d622:	4810      	ldr	r0, [pc, #64]	@ (800d664 <httpd_init_pcb+0x7c>)
 800d624:	f00b fdbe 	bl	80191a4 <iprintf>
    pcb = altcp_listen(pcb);
 800d628:	21ff      	movs	r1, #255	@ 0xff
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f002 fcb4 	bl	800ff98 <tcp_listen_with_backlog>
 800d630:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <httpd_init_pcb+0x5e>
 800d638:	4b08      	ldr	r3, [pc, #32]	@ (800d65c <httpd_init_pcb+0x74>)
 800d63a:	f640 2259 	movw	r2, #2649	@ 0xa59
 800d63e:	490a      	ldr	r1, [pc, #40]	@ (800d668 <httpd_init_pcb+0x80>)
 800d640:	4808      	ldr	r0, [pc, #32]	@ (800d664 <httpd_init_pcb+0x7c>)
 800d642:	f00b fdaf 	bl	80191a4 <iprintf>
    altcp_accept(pcb, http_accept);
 800d646:	4909      	ldr	r1, [pc, #36]	@ (800d66c <httpd_init_pcb+0x84>)
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f003 fd21 	bl	8011090 <tcp_accept>
  }
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	0801e2ac 	.word	0x0801e2ac
 800d65c:	0801a734 	.word	0x0801a734
 800d660:	0801a8bc 	.word	0x0801a8bc
 800d664:	0801a77c 	.word	0x0801a77c
 800d668:	0801a8d8 	.word	0x0801a8d8
 800d66c:	0800d561 	.word	0x0800d561

0800d670 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800d676:	202e      	movs	r0, #46	@ 0x2e
 800d678:	f003 fc84 	bl	8010f84 <tcp_new_ip_type>
 800d67c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <httpd_init+0x22>
 800d684:	4b07      	ldr	r3, [pc, #28]	@ (800d6a4 <httpd_init+0x34>)
 800d686:	f640 2272 	movw	r2, #2674	@ 0xa72
 800d68a:	4907      	ldr	r1, [pc, #28]	@ (800d6a8 <httpd_init+0x38>)
 800d68c:	4807      	ldr	r0, [pc, #28]	@ (800d6ac <httpd_init+0x3c>)
 800d68e:	f00b fd89 	bl	80191a4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800d692:	2150      	movs	r1, #80	@ 0x50
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ffa7 	bl	800d5e8 <httpd_init_pcb>
}
 800d69a:	bf00      	nop
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	0801a734 	.word	0x0801a734
 800d6a8:	0801a8f8 	.word	0x0801a8f8
 800d6ac:	0801a77c 	.word	0x0801a77c

0800d6b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d6ba:	88fb      	ldrh	r3, [r7, #6]
 800d6bc:	021b      	lsls	r3, r3, #8
 800d6be:	b21a      	sxth	r2, r3
 800d6c0:	88fb      	ldrh	r3, [r7, #6]
 800d6c2:	0a1b      	lsrs	r3, r3, #8
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	b21b      	sxth	r3, r3
 800d6cc:	b29b      	uxth	r3, r3
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	061a      	lsls	r2, r3, #24
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	021b      	lsls	r3, r3, #8
 800d6ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6ee:	431a      	orrs	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	0a1b      	lsrs	r3, r3, #8
 800d6f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	0e1b      	lsrs	r3, r3, #24
 800d6fe:	4313      	orrs	r3, r2
}
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800d718:	68b8      	ldr	r0, [r7, #8]
 800d71a:	f7f2 fdeb 	bl	80002f4 <strlen>
 800d71e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	e022      	b.n	800d770 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	617b      	str	r3, [r7, #20]
 800d72e:	e012      	b.n	800d756 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d109      	bne.n	800d750 <lwip_strnstr+0x44>
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	6978      	ldr	r0, [r7, #20]
 800d742:	f00b fed6 	bl	80194f2 <strncmp>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	e00f      	b.n	800d770 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	3301      	adds	r3, #1
 800d754:	617b      	str	r3, [r7, #20]
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d007      	beq.n	800d76e <lwip_strnstr+0x62>
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	441a      	add	r2, r3
 800d764:	68f9      	ldr	r1, [r7, #12]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	440b      	add	r3, r1
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d9e0      	bls.n	800d730 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d778:	b480      	push	{r7}
 800d77a:	b089      	sub	sp, #36	@ 0x24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	f003 0301 	and.w	r3, r3, #1
 800d794:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00d      	beq.n	800d7b8 <lwip_standard_chksum+0x40>
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	dd0a      	ble.n	800d7b8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	1c53      	adds	r3, r2, #1
 800d7a6:	61fb      	str	r3, [r7, #28]
 800d7a8:	f107 030e 	add.w	r3, r7, #14
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	701a      	strb	r2, [r3, #0]
    len--;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d7bc:	e00a      	b.n	800d7d4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	1c9a      	adds	r2, r3, #2
 800d7c2:	61ba      	str	r2, [r7, #24]
 800d7c4:	881b      	ldrh	r3, [r3, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	3b02      	subs	r3, #2
 800d7d2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	dcf1      	bgt.n	800d7be <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	dd04      	ble.n	800d7ea <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d7e0:	f107 030e 	add.w	r3, r7, #14
 800d7e4:	69ba      	ldr	r2, [r7, #24]
 800d7e6:	7812      	ldrb	r2, [r2, #0]
 800d7e8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d7ea:	89fb      	ldrh	r3, [r7, #14]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	0c1a      	lsrs	r2, r3, #16
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4413      	add	r3, r2
 800d7fe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	0c1a      	lsrs	r2, r3, #16
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	b29b      	uxth	r3, r3
 800d808:	4413      	add	r3, r2
 800d80a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d007      	beq.n	800d822 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	021b      	lsls	r3, r3, #8
 800d816:	b29a      	uxth	r2, r3
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	0a1b      	lsrs	r3, r3, #8
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	4313      	orrs	r3, r2
 800d820:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	b29b      	uxth	r3, r3
}
 800d826:	4618      	mov	r0, r3
 800d828:	3724      	adds	r7, #36	@ 0x24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b086      	sub	sp, #24
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	607b      	str	r3, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	72fb      	strb	r3, [r7, #11]
 800d840:	4613      	mov	r3, r2
 800d842:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e02b      	b.n	800d8a6 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	895b      	ldrh	r3, [r3, #10]
 800d856:	4619      	mov	r1, r3
 800d858:	4610      	mov	r0, r2
 800d85a:	f7ff ff8d 	bl	800d778 <lwip_standard_chksum>
 800d85e:	4603      	mov	r3, r0
 800d860:	461a      	mov	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4413      	add	r3, r2
 800d866:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	0c1a      	lsrs	r2, r3, #16
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	4413      	add	r3, r2
 800d872:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	895b      	ldrh	r3, [r3, #10]
 800d878:	f003 0301 	and.w	r3, r3, #1
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00e      	beq.n	800d8a0 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	2b00      	cmp	r3, #0
 800d886:	bf0c      	ite	eq
 800d888:	2301      	moveq	r3, #1
 800d88a:	2300      	movne	r3, #0
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	021b      	lsls	r3, r3, #8
 800d894:	b29a      	uxth	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	0a1b      	lsrs	r3, r3, #8
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	4313      	orrs	r3, r2
 800d89e:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1d0      	bne.n	800d84e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d007      	beq.n	800d8c2 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	0a1b      	lsrs	r3, r3, #8
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800d8c2:	7afb      	ldrb	r3, [r7, #11]
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fef2 	bl	800d6b0 <lwip_htons>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800d8d6:	893b      	ldrh	r3, [r7, #8]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff fee9 	bl	800d6b0 <lwip_htons>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	0c1a      	lsrs	r2, r3, #16
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	0c1a      	lsrs	r2, r3, #16
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4413      	add	r3, r2
 800d8fe:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	b29b      	uxth	r3, r3
 800d904:	43db      	mvns	r3, r3
 800d906:	b29b      	uxth	r3, r3
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	607b      	str	r3, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	72fb      	strb	r3, [r7, #11]
 800d91e:	4613      	mov	r3, r2
 800d920:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	0c1b      	lsrs	r3, r3, #16
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	4413      	add	r3, r2
 800d936:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	b29b      	uxth	r3, r3
 800d942:	693a      	ldr	r2, [r7, #16]
 800d944:	4413      	add	r3, r2
 800d946:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	0c1b      	lsrs	r3, r3, #16
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4413      	add	r3, r2
 800d950:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	0c1a      	lsrs	r2, r3, #16
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	4413      	add	r3, r2
 800d95c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	0c1a      	lsrs	r2, r3, #16
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	b29b      	uxth	r3, r3
 800d966:	4413      	add	r3, r2
 800d968:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800d96a:	893a      	ldrh	r2, [r7, #8]
 800d96c:	7af9      	ldrb	r1, [r7, #11]
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff ff5e 	bl	800d832 <inet_cksum_pseudo_base>
 800d976:	4603      	mov	r3, r0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af02      	add	r7, sp, #8
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	607b      	str	r3, [r7, #4]
 800d98a:	460b      	mov	r3, r1
 800d98c:	72fb      	strb	r3, [r7, #11]
 800d98e:	4613      	mov	r3, r2
 800d990:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800d992:	893a      	ldrh	r2, [r7, #8]
 800d994:	7af9      	ldrb	r1, [r7, #11]
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f7ff ffb7 	bl	800d910 <inet_chksum_pseudo>
 800d9a2:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d9b8:	887b      	ldrh	r3, [r7, #2]
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff fedb 	bl	800d778 <lwip_standard_chksum>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	43db      	mvns	r3, r3
 800d9c6:	b29b      	uxth	r3, r3
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	613b      	str	r3, [r7, #16]
 800d9e4:	e02b      	b.n	800da3e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	895b      	ldrh	r3, [r3, #10]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	f7ff fec1 	bl	800d778 <lwip_standard_chksum>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	0c1a      	lsrs	r2, r3, #16
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	b29b      	uxth	r3, r3
 800da08:	4413      	add	r3, r2
 800da0a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	895b      	ldrh	r3, [r3, #10]
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	b29b      	uxth	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00e      	beq.n	800da38 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	bf0c      	ite	eq
 800da20:	2301      	moveq	r3, #1
 800da22:	2300      	movne	r3, #0
 800da24:	b2db      	uxtb	r3, r3
 800da26:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	021b      	lsls	r3, r3, #8
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	0a1b      	lsrs	r3, r3, #8
 800da32:	b2db      	uxtb	r3, r3
 800da34:	4313      	orrs	r3, r2
 800da36:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1d0      	bne.n	800d9e6 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d007      	beq.n	800da5a <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	021b      	lsls	r3, r3, #8
 800da4e:	b29a      	uxth	r2, r3
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	0a1b      	lsrs	r3, r3, #8
 800da54:	b2db      	uxtb	r3, r3
 800da56:	4313      	orrs	r3, r2
 800da58:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	43db      	mvns	r3, r3
 800da60:	b29b      	uxth	r3, r3
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800da74:	f00b fa0c 	bl	8018e90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800da78:	f000 f8d8 	bl	800dc2c <mem_init>
  memp_init();
 800da7c:	f000 fc3c 	bl	800e2f8 <memp_init>
  pbuf_init();
  netif_init();
 800da80:	f000 fd48 	bl	800e514 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800da84:	f008 f8c4 	bl	8015c10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800da88:	f001 fec8 	bl	800f81c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800da8c:	f008 f806 	bl	8015a9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800da90:	bf00      	nop
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800daa2:	4b05      	ldr	r3, [pc, #20]	@ (800dab8 <ptr_to_mem+0x20>)
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	88fb      	ldrh	r3, [r7, #6]
 800daa8:	4413      	add	r3, r2
}
 800daaa:	4618      	mov	r0, r3
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	240092b4 	.word	0x240092b4

0800dabc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dac4:	4b05      	ldr	r3, [pc, #20]	@ (800dadc <mem_to_ptr+0x20>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	b29b      	uxth	r3, r3
}
 800dace:	4618      	mov	r0, r3
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	240092b4 	.word	0x240092b4

0800dae0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dae8:	4b47      	ldr	r3, [pc, #284]	@ (800dc08 <plug_holes+0x128>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d206      	bcs.n	800db00 <plug_holes+0x20>
 800daf2:	4b46      	ldr	r3, [pc, #280]	@ (800dc0c <plug_holes+0x12c>)
 800daf4:	f240 12df 	movw	r2, #479	@ 0x1df
 800daf8:	4945      	ldr	r1, [pc, #276]	@ (800dc10 <plug_holes+0x130>)
 800dafa:	4846      	ldr	r0, [pc, #280]	@ (800dc14 <plug_holes+0x134>)
 800dafc:	f00b fb52 	bl	80191a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800db00:	4b45      	ldr	r3, [pc, #276]	@ (800dc18 <plug_holes+0x138>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	429a      	cmp	r2, r3
 800db08:	d306      	bcc.n	800db18 <plug_holes+0x38>
 800db0a:	4b40      	ldr	r3, [pc, #256]	@ (800dc0c <plug_holes+0x12c>)
 800db0c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800db10:	4942      	ldr	r1, [pc, #264]	@ (800dc1c <plug_holes+0x13c>)
 800db12:	4840      	ldr	r0, [pc, #256]	@ (800dc14 <plug_holes+0x134>)
 800db14:	f00b fb46 	bl	80191a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	791b      	ldrb	r3, [r3, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <plug_holes+0x4e>
 800db20:	4b3a      	ldr	r3, [pc, #232]	@ (800dc0c <plug_holes+0x12c>)
 800db22:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800db26:	493e      	ldr	r1, [pc, #248]	@ (800dc20 <plug_holes+0x140>)
 800db28:	483a      	ldr	r0, [pc, #232]	@ (800dc14 <plug_holes+0x134>)
 800db2a:	f00b fb3b 	bl	80191a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800db36:	4293      	cmp	r3, r2
 800db38:	d906      	bls.n	800db48 <plug_holes+0x68>
 800db3a:	4b34      	ldr	r3, [pc, #208]	@ (800dc0c <plug_holes+0x12c>)
 800db3c:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800db40:	4938      	ldr	r1, [pc, #224]	@ (800dc24 <plug_holes+0x144>)
 800db42:	4834      	ldr	r0, [pc, #208]	@ (800dc14 <plug_holes+0x134>)
 800db44:	f00b fb2e 	bl	80191a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff ffa3 	bl	800da98 <ptr_to_mem>
 800db52:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d025      	beq.n	800dba8 <plug_holes+0xc8>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	791b      	ldrb	r3, [r3, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d121      	bne.n	800dba8 <plug_holes+0xc8>
 800db64:	4b2c      	ldr	r3, [pc, #176]	@ (800dc18 <plug_holes+0x138>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d01c      	beq.n	800dba8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800db6e:	4b2e      	ldr	r3, [pc, #184]	@ (800dc28 <plug_holes+0x148>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	429a      	cmp	r2, r3
 800db76:	d102      	bne.n	800db7e <plug_holes+0x9e>
      lfree = mem;
 800db78:	4a2b      	ldr	r2, [pc, #172]	@ (800dc28 <plug_holes+0x148>)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	881a      	ldrh	r2, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800db8e:	4293      	cmp	r3, r2
 800db90:	d00a      	beq.n	800dba8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff ff7e 	bl	800da98 <ptr_to_mem>
 800db9c:	4604      	mov	r4, r0
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff ff8c 	bl	800dabc <mem_to_ptr>
 800dba4:	4603      	mov	r3, r0
 800dba6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	885b      	ldrh	r3, [r3, #2]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7ff ff73 	bl	800da98 <ptr_to_mem>
 800dbb2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d020      	beq.n	800dbfe <plug_holes+0x11e>
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	791b      	ldrb	r3, [r3, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d11c      	bne.n	800dbfe <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dbc4:	4b18      	ldr	r3, [pc, #96]	@ (800dc28 <plug_holes+0x148>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d102      	bne.n	800dbd4 <plug_holes+0xf4>
      lfree = pmem;
 800dbce:	4a16      	ldr	r2, [pc, #88]	@ (800dc28 <plug_holes+0x148>)
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	881a      	ldrh	r2, [r3, #0]
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d00a      	beq.n	800dbfe <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7ff ff53 	bl	800da98 <ptr_to_mem>
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	68b8      	ldr	r0, [r7, #8]
 800dbf6:	f7ff ff61 	bl	800dabc <mem_to_ptr>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dbfe:	bf00      	nop
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd90      	pop	{r4, r7, pc}
 800dc06:	bf00      	nop
 800dc08:	240092b4 	.word	0x240092b4
 800dc0c:	0801a914 	.word	0x0801a914
 800dc10:	0801a944 	.word	0x0801a944
 800dc14:	0801a95c 	.word	0x0801a95c
 800dc18:	240092b8 	.word	0x240092b8
 800dc1c:	0801a984 	.word	0x0801a984
 800dc20:	0801a9a0 	.word	0x0801a9a0
 800dc24:	0801a9bc 	.word	0x0801a9bc
 800dc28:	240092c0 	.word	0x240092c0

0800dc2c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dc32:	4b1d      	ldr	r3, [pc, #116]	@ (800dca8 <mem_init+0x7c>)
 800dc34:	4a1d      	ldr	r2, [pc, #116]	@ (800dcac <mem_init+0x80>)
 800dc36:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dc38:	4b1b      	ldr	r3, [pc, #108]	@ (800dca8 <mem_init+0x7c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dc44:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dc52:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 800dc56:	f7ff ff1f 	bl	800da98 <ptr_to_mem>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	4a14      	ldr	r2, [pc, #80]	@ (800dcb0 <mem_init+0x84>)
 800dc5e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dc60:	4b13      	ldr	r3, [pc, #76]	@ (800dcb0 <mem_init+0x84>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2201      	movs	r2, #1
 800dc66:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dc68:	4b11      	ldr	r3, [pc, #68]	@ (800dcb0 <mem_init+0x84>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dc70:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dc72:	4b0f      	ldr	r3, [pc, #60]	@ (800dcb0 <mem_init+0x84>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dc7a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <mem_init+0x7c>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a0c      	ldr	r2, [pc, #48]	@ (800dcb4 <mem_init+0x88>)
 800dc82:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dc84:	480c      	ldr	r0, [pc, #48]	@ (800dcb8 <mem_init+0x8c>)
 800dc86:	f00b f911 	bl	8018eac <sys_mutex_new>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d006      	beq.n	800dc9e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dc90:	4b0a      	ldr	r3, [pc, #40]	@ (800dcbc <mem_init+0x90>)
 800dc92:	f240 221f 	movw	r2, #543	@ 0x21f
 800dc96:	490a      	ldr	r1, [pc, #40]	@ (800dcc0 <mem_init+0x94>)
 800dc98:	480a      	ldr	r0, [pc, #40]	@ (800dcc4 <mem_init+0x98>)
 800dc9a:	f00b fa83 	bl	80191a4 <iprintf>
  }
}
 800dc9e:	bf00      	nop
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	240092b4 	.word	0x240092b4
 800dcac:	30004000 	.word	0x30004000
 800dcb0:	240092b8 	.word	0x240092b8
 800dcb4:	240092c0 	.word	0x240092c0
 800dcb8:	240092bc 	.word	0x240092bc
 800dcbc:	0801a914 	.word	0x0801a914
 800dcc0:	0801a9e8 	.word	0x0801a9e8
 800dcc4:	0801a95c 	.word	0x0801a95c

0800dcc8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff fef3 	bl	800dabc <mem_to_ptr>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	881b      	ldrh	r3, [r3, #0]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7ff feda 	bl	800da98 <ptr_to_mem>
 800dce4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	885b      	ldrh	r3, [r3, #2]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff fed4 	bl	800da98 <ptr_to_mem>
 800dcf0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d819      	bhi.n	800dd32 <mem_link_valid+0x6a>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	885b      	ldrh	r3, [r3, #2]
 800dd02:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d813      	bhi.n	800dd32 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dd0e:	8afa      	ldrh	r2, [r7, #22]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d004      	beq.n	800dd1e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	8afa      	ldrh	r2, [r7, #22]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d109      	bne.n	800dd32 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dd1e:	4b08      	ldr	r3, [pc, #32]	@ (800dd40 <mem_link_valid+0x78>)
 800dd20:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d006      	beq.n	800dd36 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	885b      	ldrh	r3, [r3, #2]
 800dd2c:	8afa      	ldrh	r2, [r7, #22]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d001      	beq.n	800dd36 <mem_link_valid+0x6e>
    return 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	e000      	b.n	800dd38 <mem_link_valid+0x70>
  }
  return 1;
 800dd36:	2301      	movs	r3, #1
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	240092b8 	.word	0x240092b8

0800dd44 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d070      	beq.n	800de34 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f003 0303 	and.w	r3, r3, #3
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00d      	beq.n	800dd78 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dd5c:	4b37      	ldr	r3, [pc, #220]	@ (800de3c <mem_free+0xf8>)
 800dd5e:	f240 2273 	movw	r2, #627	@ 0x273
 800dd62:	4937      	ldr	r1, [pc, #220]	@ (800de40 <mem_free+0xfc>)
 800dd64:	4837      	ldr	r0, [pc, #220]	@ (800de44 <mem_free+0x100>)
 800dd66:	f00b fa1d 	bl	80191a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd6a:	f00b f8fd 	bl	8018f68 <sys_arch_protect>
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f00b f907 	bl	8018f84 <sys_arch_unprotect>
    return;
 800dd76:	e05e      	b.n	800de36 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	3b08      	subs	r3, #8
 800dd7c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dd7e:	4b32      	ldr	r3, [pc, #200]	@ (800de48 <mem_free+0x104>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	69fa      	ldr	r2, [r7, #28]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d306      	bcc.n	800dd96 <mem_free+0x52>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f103 020c 	add.w	r2, r3, #12
 800dd8e:	4b2f      	ldr	r3, [pc, #188]	@ (800de4c <mem_free+0x108>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d90d      	bls.n	800ddb2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dd96:	4b29      	ldr	r3, [pc, #164]	@ (800de3c <mem_free+0xf8>)
 800dd98:	f240 227f 	movw	r2, #639	@ 0x27f
 800dd9c:	492c      	ldr	r1, [pc, #176]	@ (800de50 <mem_free+0x10c>)
 800dd9e:	4829      	ldr	r0, [pc, #164]	@ (800de44 <mem_free+0x100>)
 800dda0:	f00b fa00 	bl	80191a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dda4:	f00b f8e0 	bl	8018f68 <sys_arch_protect>
 800dda8:	6138      	str	r0, [r7, #16]
 800ddaa:	6938      	ldr	r0, [r7, #16]
 800ddac:	f00b f8ea 	bl	8018f84 <sys_arch_unprotect>
    return;
 800ddb0:	e041      	b.n	800de36 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ddb2:	4828      	ldr	r0, [pc, #160]	@ (800de54 <mem_free+0x110>)
 800ddb4:	f00b f896 	bl	8018ee4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	791b      	ldrb	r3, [r3, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d110      	bne.n	800dde2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ddc0:	4b1e      	ldr	r3, [pc, #120]	@ (800de3c <mem_free+0xf8>)
 800ddc2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ddc6:	4924      	ldr	r1, [pc, #144]	@ (800de58 <mem_free+0x114>)
 800ddc8:	481e      	ldr	r0, [pc, #120]	@ (800de44 <mem_free+0x100>)
 800ddca:	f00b f9eb 	bl	80191a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ddce:	4821      	ldr	r0, [pc, #132]	@ (800de54 <mem_free+0x110>)
 800ddd0:	f00b f897 	bl	8018f02 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ddd4:	f00b f8c8 	bl	8018f68 <sys_arch_protect>
 800ddd8:	6178      	str	r0, [r7, #20]
 800ddda:	6978      	ldr	r0, [r7, #20]
 800dddc:	f00b f8d2 	bl	8018f84 <sys_arch_unprotect>
    return;
 800dde0:	e029      	b.n	800de36 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dde2:	69f8      	ldr	r0, [r7, #28]
 800dde4:	f7ff ff70 	bl	800dcc8 <mem_link_valid>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d110      	bne.n	800de10 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ddee:	4b13      	ldr	r3, [pc, #76]	@ (800de3c <mem_free+0xf8>)
 800ddf0:	f240 2295 	movw	r2, #661	@ 0x295
 800ddf4:	4919      	ldr	r1, [pc, #100]	@ (800de5c <mem_free+0x118>)
 800ddf6:	4813      	ldr	r0, [pc, #76]	@ (800de44 <mem_free+0x100>)
 800ddf8:	f00b f9d4 	bl	80191a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ddfc:	4815      	ldr	r0, [pc, #84]	@ (800de54 <mem_free+0x110>)
 800ddfe:	f00b f880 	bl	8018f02 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de02:	f00b f8b1 	bl	8018f68 <sys_arch_protect>
 800de06:	61b8      	str	r0, [r7, #24]
 800de08:	69b8      	ldr	r0, [r7, #24]
 800de0a:	f00b f8bb 	bl	8018f84 <sys_arch_unprotect>
    return;
 800de0e:	e012      	b.n	800de36 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	2200      	movs	r2, #0
 800de14:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800de16:	4b12      	ldr	r3, [pc, #72]	@ (800de60 <mem_free+0x11c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	69fa      	ldr	r2, [r7, #28]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d202      	bcs.n	800de26 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800de20:	4a0f      	ldr	r2, [pc, #60]	@ (800de60 <mem_free+0x11c>)
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800de26:	69f8      	ldr	r0, [r7, #28]
 800de28:	f7ff fe5a 	bl	800dae0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800de2c:	4809      	ldr	r0, [pc, #36]	@ (800de54 <mem_free+0x110>)
 800de2e:	f00b f868 	bl	8018f02 <sys_mutex_unlock>
 800de32:	e000      	b.n	800de36 <mem_free+0xf2>
    return;
 800de34:	bf00      	nop
}
 800de36:	3720      	adds	r7, #32
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	0801a914 	.word	0x0801a914
 800de40:	0801aa04 	.word	0x0801aa04
 800de44:	0801a95c 	.word	0x0801a95c
 800de48:	240092b4 	.word	0x240092b4
 800de4c:	240092b8 	.word	0x240092b8
 800de50:	0801aa28 	.word	0x0801aa28
 800de54:	240092bc 	.word	0x240092bc
 800de58:	0801aa44 	.word	0x0801aa44
 800de5c:	0801aa6c 	.word	0x0801aa6c
 800de60:	240092c0 	.word	0x240092c0

0800de64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800de70:	887b      	ldrh	r3, [r7, #2]
 800de72:	3303      	adds	r3, #3
 800de74:	b29b      	uxth	r3, r3
 800de76:	f023 0303 	bic.w	r3, r3, #3
 800de7a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800de7c:	8bfb      	ldrh	r3, [r7, #30]
 800de7e:	2b0b      	cmp	r3, #11
 800de80:	d801      	bhi.n	800de86 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800de82:	230c      	movs	r3, #12
 800de84:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800de86:	8bfb      	ldrh	r3, [r7, #30]
 800de88:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d803      	bhi.n	800de98 <mem_trim+0x34>
 800de90:	8bfa      	ldrh	r2, [r7, #30]
 800de92:	887b      	ldrh	r3, [r7, #2]
 800de94:	429a      	cmp	r2, r3
 800de96:	d201      	bcs.n	800de9c <mem_trim+0x38>
    return NULL;
 800de98:	2300      	movs	r3, #0
 800de9a:	e0dc      	b.n	800e056 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800de9c:	4b70      	ldr	r3, [pc, #448]	@ (800e060 <mem_trim+0x1fc>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d304      	bcc.n	800deb0 <mem_trim+0x4c>
 800dea6:	4b6f      	ldr	r3, [pc, #444]	@ (800e064 <mem_trim+0x200>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	429a      	cmp	r2, r3
 800deae:	d306      	bcc.n	800debe <mem_trim+0x5a>
 800deb0:	4b6d      	ldr	r3, [pc, #436]	@ (800e068 <mem_trim+0x204>)
 800deb2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800deb6:	496d      	ldr	r1, [pc, #436]	@ (800e06c <mem_trim+0x208>)
 800deb8:	486d      	ldr	r0, [pc, #436]	@ (800e070 <mem_trim+0x20c>)
 800deba:	f00b f973 	bl	80191a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800debe:	4b68      	ldr	r3, [pc, #416]	@ (800e060 <mem_trim+0x1fc>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d304      	bcc.n	800ded2 <mem_trim+0x6e>
 800dec8:	4b66      	ldr	r3, [pc, #408]	@ (800e064 <mem_trim+0x200>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d307      	bcc.n	800dee2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ded2:	f00b f849 	bl	8018f68 <sys_arch_protect>
 800ded6:	60b8      	str	r0, [r7, #8]
 800ded8:	68b8      	ldr	r0, [r7, #8]
 800deda:	f00b f853 	bl	8018f84 <sys_arch_unprotect>
    return rmem;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	e0b9      	b.n	800e056 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	3b08      	subs	r3, #8
 800dee6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dee8:	69b8      	ldr	r0, [r7, #24]
 800deea:	f7ff fde7 	bl	800dabc <mem_to_ptr>
 800deee:	4603      	mov	r3, r0
 800def0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	881a      	ldrh	r2, [r3, #0]
 800def6:	8afb      	ldrh	r3, [r7, #22]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	b29b      	uxth	r3, r3
 800defc:	3b08      	subs	r3, #8
 800defe:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800df00:	8bfa      	ldrh	r2, [r7, #30]
 800df02:	8abb      	ldrh	r3, [r7, #20]
 800df04:	429a      	cmp	r2, r3
 800df06:	d906      	bls.n	800df16 <mem_trim+0xb2>
 800df08:	4b57      	ldr	r3, [pc, #348]	@ (800e068 <mem_trim+0x204>)
 800df0a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800df0e:	4959      	ldr	r1, [pc, #356]	@ (800e074 <mem_trim+0x210>)
 800df10:	4857      	ldr	r0, [pc, #348]	@ (800e070 <mem_trim+0x20c>)
 800df12:	f00b f947 	bl	80191a4 <iprintf>
  if (newsize > size) {
 800df16:	8bfa      	ldrh	r2, [r7, #30]
 800df18:	8abb      	ldrh	r3, [r7, #20]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d901      	bls.n	800df22 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	e099      	b.n	800e056 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800df22:	8bfa      	ldrh	r2, [r7, #30]
 800df24:	8abb      	ldrh	r3, [r7, #20]
 800df26:	429a      	cmp	r2, r3
 800df28:	d101      	bne.n	800df2e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	e093      	b.n	800e056 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800df2e:	4852      	ldr	r0, [pc, #328]	@ (800e078 <mem_trim+0x214>)
 800df30:	f00a ffd8 	bl	8018ee4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	881b      	ldrh	r3, [r3, #0]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fdad 	bl	800da98 <ptr_to_mem>
 800df3e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	791b      	ldrb	r3, [r3, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d141      	bne.n	800dfcc <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800df50:	4293      	cmp	r3, r2
 800df52:	d106      	bne.n	800df62 <mem_trim+0xfe>
 800df54:	4b44      	ldr	r3, [pc, #272]	@ (800e068 <mem_trim+0x204>)
 800df56:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800df5a:	4948      	ldr	r1, [pc, #288]	@ (800e07c <mem_trim+0x218>)
 800df5c:	4844      	ldr	r0, [pc, #272]	@ (800e070 <mem_trim+0x20c>)
 800df5e:	f00b f921 	bl	80191a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800df68:	8afa      	ldrh	r2, [r7, #22]
 800df6a:	8bfb      	ldrh	r3, [r7, #30]
 800df6c:	4413      	add	r3, r2
 800df6e:	b29b      	uxth	r3, r3
 800df70:	3308      	adds	r3, #8
 800df72:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800df74:	4b42      	ldr	r3, [pc, #264]	@ (800e080 <mem_trim+0x21c>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d106      	bne.n	800df8c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800df7e:	89fb      	ldrh	r3, [r7, #14]
 800df80:	4618      	mov	r0, r3
 800df82:	f7ff fd89 	bl	800da98 <ptr_to_mem>
 800df86:	4603      	mov	r3, r0
 800df88:	4a3d      	ldr	r2, [pc, #244]	@ (800e080 <mem_trim+0x21c>)
 800df8a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800df8c:	89fb      	ldrh	r3, [r7, #14]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff fd82 	bl	800da98 <ptr_to_mem>
 800df94:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2200      	movs	r2, #0
 800df9a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	89ba      	ldrh	r2, [r7, #12]
 800dfa0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	8afa      	ldrh	r2, [r7, #22]
 800dfa6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	89fa      	ldrh	r2, [r7, #14]
 800dfac:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d049      	beq.n	800e04e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff fd6a 	bl	800da98 <ptr_to_mem>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	89fb      	ldrh	r3, [r7, #14]
 800dfc8:	8053      	strh	r3, [r2, #2]
 800dfca:	e040      	b.n	800e04e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800dfcc:	8bfb      	ldrh	r3, [r7, #30]
 800dfce:	f103 0214 	add.w	r2, r3, #20
 800dfd2:	8abb      	ldrh	r3, [r7, #20]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d83a      	bhi.n	800e04e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dfd8:	8afa      	ldrh	r2, [r7, #22]
 800dfda:	8bfb      	ldrh	r3, [r7, #30]
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d106      	bne.n	800dffe <mem_trim+0x19a>
 800dff0:	4b1d      	ldr	r3, [pc, #116]	@ (800e068 <mem_trim+0x204>)
 800dff2:	f240 3216 	movw	r2, #790	@ 0x316
 800dff6:	4921      	ldr	r1, [pc, #132]	@ (800e07c <mem_trim+0x218>)
 800dff8:	481d      	ldr	r0, [pc, #116]	@ (800e070 <mem_trim+0x20c>)
 800dffa:	f00b f8d3 	bl	80191a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800dffe:	89fb      	ldrh	r3, [r7, #14]
 800e000:	4618      	mov	r0, r3
 800e002:	f7ff fd49 	bl	800da98 <ptr_to_mem>
 800e006:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e008:	4b1d      	ldr	r3, [pc, #116]	@ (800e080 <mem_trim+0x21c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d202      	bcs.n	800e018 <mem_trim+0x1b4>
      lfree = mem2;
 800e012:	4a1b      	ldr	r2, [pc, #108]	@ (800e080 <mem_trim+0x21c>)
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	2200      	movs	r2, #0
 800e01c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	881a      	ldrh	r2, [r3, #0]
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	8afa      	ldrh	r2, [r7, #22]
 800e02a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	89fa      	ldrh	r2, [r7, #14]
 800e030:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d007      	beq.n	800e04e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	4618      	mov	r0, r3
 800e044:	f7ff fd28 	bl	800da98 <ptr_to_mem>
 800e048:	4602      	mov	r2, r0
 800e04a:	89fb      	ldrh	r3, [r7, #14]
 800e04c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e04e:	480a      	ldr	r0, [pc, #40]	@ (800e078 <mem_trim+0x214>)
 800e050:	f00a ff57 	bl	8018f02 <sys_mutex_unlock>
  return rmem;
 800e054:	687b      	ldr	r3, [r7, #4]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	240092b4 	.word	0x240092b4
 800e064:	240092b8 	.word	0x240092b8
 800e068:	0801a914 	.word	0x0801a914
 800e06c:	0801aaa0 	.word	0x0801aaa0
 800e070:	0801a95c 	.word	0x0801a95c
 800e074:	0801aab8 	.word	0x0801aab8
 800e078:	240092bc 	.word	0x240092bc
 800e07c:	0801aad8 	.word	0x0801aad8
 800e080:	240092c0 	.word	0x240092c0

0800e084 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e08e:	88fb      	ldrh	r3, [r7, #6]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <mem_malloc+0x14>
    return NULL;
 800e094:	2300      	movs	r3, #0
 800e096:	e0e6      	b.n	800e266 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e098:	88fb      	ldrh	r3, [r7, #6]
 800e09a:	3303      	adds	r3, #3
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	f023 0303 	bic.w	r3, r3, #3
 800e0a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e0a4:	8bbb      	ldrh	r3, [r7, #28]
 800e0a6:	2b0b      	cmp	r3, #11
 800e0a8:	d801      	bhi.n	800e0ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e0aa:	230c      	movs	r3, #12
 800e0ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e0ae:	8bbb      	ldrh	r3, [r7, #28]
 800e0b0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d803      	bhi.n	800e0c0 <mem_malloc+0x3c>
 800e0b8:	8bba      	ldrh	r2, [r7, #28]
 800e0ba:	88fb      	ldrh	r3, [r7, #6]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d201      	bcs.n	800e0c4 <mem_malloc+0x40>
    return NULL;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	e0d0      	b.n	800e266 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e0c4:	486a      	ldr	r0, [pc, #424]	@ (800e270 <mem_malloc+0x1ec>)
 800e0c6:	f00a ff0d 	bl	8018ee4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e0ca:	4b6a      	ldr	r3, [pc, #424]	@ (800e274 <mem_malloc+0x1f0>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7ff fcf4 	bl	800dabc <mem_to_ptr>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	83fb      	strh	r3, [r7, #30]
 800e0d8:	e0b9      	b.n	800e24e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e0da:	8bfb      	ldrh	r3, [r7, #30]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff fcdb 	bl	800da98 <ptr_to_mem>
 800e0e2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	791b      	ldrb	r3, [r3, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f040 80a9 	bne.w	800e240 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	8bfb      	ldrh	r3, [r7, #30]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	f1a3 0208 	sub.w	r2, r3, #8
 800e0fc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e0fe:	429a      	cmp	r2, r3
 800e100:	f0c0 809e 	bcc.w	800e240 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	881b      	ldrh	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	8bfb      	ldrh	r3, [r7, #30]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	f1a3 0208 	sub.w	r2, r3, #8
 800e112:	8bbb      	ldrh	r3, [r7, #28]
 800e114:	3314      	adds	r3, #20
 800e116:	429a      	cmp	r2, r3
 800e118:	d335      	bcc.n	800e186 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e11a:	8bfa      	ldrh	r2, [r7, #30]
 800e11c:	8bbb      	ldrh	r3, [r7, #28]
 800e11e:	4413      	add	r3, r2
 800e120:	b29b      	uxth	r3, r3
 800e122:	3308      	adds	r3, #8
 800e124:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e126:	8a7b      	ldrh	r3, [r7, #18]
 800e128:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d106      	bne.n	800e13e <mem_malloc+0xba>
 800e130:	4b51      	ldr	r3, [pc, #324]	@ (800e278 <mem_malloc+0x1f4>)
 800e132:	f240 3287 	movw	r2, #903	@ 0x387
 800e136:	4951      	ldr	r1, [pc, #324]	@ (800e27c <mem_malloc+0x1f8>)
 800e138:	4851      	ldr	r0, [pc, #324]	@ (800e280 <mem_malloc+0x1fc>)
 800e13a:	f00b f833 	bl	80191a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e13e:	8a7b      	ldrh	r3, [r7, #18]
 800e140:	4618      	mov	r0, r3
 800e142:	f7ff fca9 	bl	800da98 <ptr_to_mem>
 800e146:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	881a      	ldrh	r2, [r3, #0]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8bfa      	ldrh	r2, [r7, #30]
 800e15a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	8a7a      	ldrh	r2, [r7, #18]
 800e160:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	2201      	movs	r2, #1
 800e166:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	881b      	ldrh	r3, [r3, #0]
 800e16c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 800e170:	4293      	cmp	r3, r2
 800e172:	d00b      	beq.n	800e18c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff fc8d 	bl	800da98 <ptr_to_mem>
 800e17e:	4602      	mov	r2, r0
 800e180:	8a7b      	ldrh	r3, [r7, #18]
 800e182:	8053      	strh	r3, [r2, #2]
 800e184:	e002      	b.n	800e18c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	2201      	movs	r2, #1
 800e18a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e18c:	4b39      	ldr	r3, [pc, #228]	@ (800e274 <mem_malloc+0x1f0>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	429a      	cmp	r2, r3
 800e194:	d127      	bne.n	800e1e6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800e196:	4b37      	ldr	r3, [pc, #220]	@ (800e274 <mem_malloc+0x1f0>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e19c:	e005      	b.n	800e1aa <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7ff fc78 	bl	800da98 <ptr_to_mem>
 800e1a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	791b      	ldrb	r3, [r3, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d004      	beq.n	800e1bc <mem_malloc+0x138>
 800e1b2:	4b34      	ldr	r3, [pc, #208]	@ (800e284 <mem_malloc+0x200>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	69ba      	ldr	r2, [r7, #24]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d1f0      	bne.n	800e19e <mem_malloc+0x11a>
          }
          lfree = cur;
 800e1bc:	4a2d      	ldr	r2, [pc, #180]	@ (800e274 <mem_malloc+0x1f0>)
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800e274 <mem_malloc+0x1f0>)
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800e284 <mem_malloc+0x200>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d00b      	beq.n	800e1e6 <mem_malloc+0x162>
 800e1ce:	4b29      	ldr	r3, [pc, #164]	@ (800e274 <mem_malloc+0x1f0>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	791b      	ldrb	r3, [r3, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d006      	beq.n	800e1e6 <mem_malloc+0x162>
 800e1d8:	4b27      	ldr	r3, [pc, #156]	@ (800e278 <mem_malloc+0x1f4>)
 800e1da:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e1de:	492a      	ldr	r1, [pc, #168]	@ (800e288 <mem_malloc+0x204>)
 800e1e0:	4827      	ldr	r0, [pc, #156]	@ (800e280 <mem_malloc+0x1fc>)
 800e1e2:	f00a ffdf 	bl	80191a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e1e6:	4822      	ldr	r0, [pc, #136]	@ (800e270 <mem_malloc+0x1ec>)
 800e1e8:	f00a fe8b 	bl	8018f02 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e1ec:	8bba      	ldrh	r2, [r7, #28]
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	4a23      	ldr	r2, [pc, #140]	@ (800e284 <mem_malloc+0x200>)
 800e1f6:	6812      	ldr	r2, [r2, #0]
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d906      	bls.n	800e20a <mem_malloc+0x186>
 800e1fc:	4b1e      	ldr	r3, [pc, #120]	@ (800e278 <mem_malloc+0x1f4>)
 800e1fe:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e202:	4922      	ldr	r1, [pc, #136]	@ (800e28c <mem_malloc+0x208>)
 800e204:	481e      	ldr	r0, [pc, #120]	@ (800e280 <mem_malloc+0x1fc>)
 800e206:	f00a ffcd 	bl	80191a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f003 0303 	and.w	r3, r3, #3
 800e210:	2b00      	cmp	r3, #0
 800e212:	d006      	beq.n	800e222 <mem_malloc+0x19e>
 800e214:	4b18      	ldr	r3, [pc, #96]	@ (800e278 <mem_malloc+0x1f4>)
 800e216:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e21a:	491d      	ldr	r1, [pc, #116]	@ (800e290 <mem_malloc+0x20c>)
 800e21c:	4818      	ldr	r0, [pc, #96]	@ (800e280 <mem_malloc+0x1fc>)
 800e21e:	f00a ffc1 	bl	80191a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	f003 0303 	and.w	r3, r3, #3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d006      	beq.n	800e23a <mem_malloc+0x1b6>
 800e22c:	4b12      	ldr	r3, [pc, #72]	@ (800e278 <mem_malloc+0x1f4>)
 800e22e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e232:	4918      	ldr	r1, [pc, #96]	@ (800e294 <mem_malloc+0x210>)
 800e234:	4812      	ldr	r0, [pc, #72]	@ (800e280 <mem_malloc+0x1fc>)
 800e236:	f00a ffb5 	bl	80191a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	3308      	adds	r3, #8
 800e23e:	e012      	b.n	800e266 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800e240:	8bfb      	ldrh	r3, [r7, #30]
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff fc28 	bl	800da98 <ptr_to_mem>
 800e248:	4603      	mov	r3, r0
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e24e:	8bfa      	ldrh	r2, [r7, #30]
 800e250:	8bb9      	ldrh	r1, [r7, #28]
 800e252:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 800e256:	1a5b      	subs	r3, r3, r1
 800e258:	429a      	cmp	r2, r3
 800e25a:	f4ff af3e 	bcc.w	800e0da <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e25e:	4804      	ldr	r0, [pc, #16]	@ (800e270 <mem_malloc+0x1ec>)
 800e260:	f00a fe4f 	bl	8018f02 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3720      	adds	r7, #32
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	240092bc 	.word	0x240092bc
 800e274:	240092c0 	.word	0x240092c0
 800e278:	0801a914 	.word	0x0801a914
 800e27c:	0801aad8 	.word	0x0801aad8
 800e280:	0801a95c 	.word	0x0801a95c
 800e284:	240092b8 	.word	0x240092b8
 800e288:	0801aaec 	.word	0x0801aaec
 800e28c:	0801ab08 	.word	0x0801ab08
 800e290:	0801ab38 	.word	0x0801ab38
 800e294:	0801ab68 	.word	0x0801ab68

0800e298 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e298:	b480      	push	{r7}
 800e29a:	b085      	sub	sp, #20
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	3303      	adds	r3, #3
 800e2ae:	f023 0303 	bic.w	r3, r3, #3
 800e2b2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	e011      	b.n	800e2de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	60fb      	str	r3, [r7, #12]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	885b      	ldrh	r3, [r3, #2]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	dbe7      	blt.n	800e2ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e2ea:	bf00      	nop
 800e2ec:	bf00      	nop
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e2fe:	2300      	movs	r3, #0
 800e300:	80fb      	strh	r3, [r7, #6]
 800e302:	e009      	b.n	800e318 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e304:	88fb      	ldrh	r3, [r7, #6]
 800e306:	4a08      	ldr	r2, [pc, #32]	@ (800e328 <memp_init+0x30>)
 800e308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7ff ffc3 	bl	800e298 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e312:	88fb      	ldrh	r3, [r7, #6]
 800e314:	3301      	adds	r3, #1
 800e316:	80fb      	strh	r3, [r7, #6]
 800e318:	88fb      	ldrh	r3, [r7, #6]
 800e31a:	2b0c      	cmp	r3, #12
 800e31c:	d9f2      	bls.n	800e304 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e31e:	bf00      	nop
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	0801e238 	.word	0x0801e238

0800e32c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e334:	f00a fe18 	bl	8018f68 <sys_arch_protect>
 800e338:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d015      	beq.n	800e374 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	6812      	ldr	r2, [r2, #0]
 800e350:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	f003 0303 	and.w	r3, r3, #3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d006      	beq.n	800e36a <do_memp_malloc_pool+0x3e>
 800e35c:	4b09      	ldr	r3, [pc, #36]	@ (800e384 <do_memp_malloc_pool+0x58>)
 800e35e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e362:	4909      	ldr	r1, [pc, #36]	@ (800e388 <do_memp_malloc_pool+0x5c>)
 800e364:	4809      	ldr	r0, [pc, #36]	@ (800e38c <do_memp_malloc_pool+0x60>)
 800e366:	f00a ff1d 	bl	80191a4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f00a fe0a 	bl	8018f84 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	e003      	b.n	800e37c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f00a fe05 	bl	8018f84 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	0801ab8c 	.word	0x0801ab8c
 800e388:	0801abbc 	.word	0x0801abbc
 800e38c:	0801abe0 	.word	0x0801abe0

0800e390 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d106      	bne.n	800e3ac <memp_malloc_pool+0x1c>
 800e39e:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c8 <memp_malloc_pool+0x38>)
 800e3a0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e3a4:	4909      	ldr	r1, [pc, #36]	@ (800e3cc <memp_malloc_pool+0x3c>)
 800e3a6:	480a      	ldr	r0, [pc, #40]	@ (800e3d0 <memp_malloc_pool+0x40>)
 800e3a8:	f00a fefc 	bl	80191a4 <iprintf>
  if (desc == NULL) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <memp_malloc_pool+0x26>
    return NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e003      	b.n	800e3be <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff ffb8 	bl	800e32c <do_memp_malloc_pool>
 800e3bc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	0801ab8c 	.word	0x0801ab8c
 800e3cc:	0801ac08 	.word	0x0801ac08
 800e3d0:	0801abe0 	.word	0x0801abe0

0800e3d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e3de:	79fb      	ldrb	r3, [r7, #7]
 800e3e0:	2b0c      	cmp	r3, #12
 800e3e2:	d908      	bls.n	800e3f6 <memp_malloc+0x22>
 800e3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e410 <memp_malloc+0x3c>)
 800e3e6:	f240 1257 	movw	r2, #343	@ 0x157
 800e3ea:	490a      	ldr	r1, [pc, #40]	@ (800e414 <memp_malloc+0x40>)
 800e3ec:	480a      	ldr	r0, [pc, #40]	@ (800e418 <memp_malloc+0x44>)
 800e3ee:	f00a fed9 	bl	80191a4 <iprintf>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	e008      	b.n	800e408 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	4a08      	ldr	r2, [pc, #32]	@ (800e41c <memp_malloc+0x48>)
 800e3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff ff94 	bl	800e32c <do_memp_malloc_pool>
 800e404:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e406:	68fb      	ldr	r3, [r7, #12]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	0801ab8c 	.word	0x0801ab8c
 800e414:	0801ac1c 	.word	0x0801ac1c
 800e418:	0801abe0 	.word	0x0801abe0
 800e41c:	0801e238 	.word	0x0801e238

0800e420 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <do_memp_free_pool+0x22>
 800e434:	4b0d      	ldr	r3, [pc, #52]	@ (800e46c <do_memp_free_pool+0x4c>)
 800e436:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e43a:	490d      	ldr	r1, [pc, #52]	@ (800e470 <do_memp_free_pool+0x50>)
 800e43c:	480d      	ldr	r0, [pc, #52]	@ (800e474 <do_memp_free_pool+0x54>)
 800e43e:	f00a feb1 	bl	80191a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e446:	f00a fd8f 	bl	8018f68 <sys_arch_protect>
 800e44a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e45e:	68b8      	ldr	r0, [r7, #8]
 800e460:	f00a fd90 	bl	8018f84 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e464:	bf00      	nop
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	0801ab8c 	.word	0x0801ab8c
 800e470:	0801ac3c 	.word	0x0801ac3c
 800e474:	0801abe0 	.word	0x0801abe0

0800e478 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d106      	bne.n	800e496 <memp_free_pool+0x1e>
 800e488:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b4 <memp_free_pool+0x3c>)
 800e48a:	f240 1295 	movw	r2, #405	@ 0x195
 800e48e:	490a      	ldr	r1, [pc, #40]	@ (800e4b8 <memp_free_pool+0x40>)
 800e490:	480a      	ldr	r0, [pc, #40]	@ (800e4bc <memp_free_pool+0x44>)
 800e492:	f00a fe87 	bl	80191a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d007      	beq.n	800e4ac <memp_free_pool+0x34>
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d004      	beq.n	800e4ac <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e4a2:	6839      	ldr	r1, [r7, #0]
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7ff ffbb 	bl	800e420 <do_memp_free_pool>
 800e4aa:	e000      	b.n	800e4ae <memp_free_pool+0x36>
    return;
 800e4ac:	bf00      	nop
}
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	0801ab8c 	.word	0x0801ab8c
 800e4b8:	0801ac08 	.word	0x0801ac08
 800e4bc:	0801abe0 	.word	0x0801abe0

0800e4c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	6039      	str	r1, [r7, #0]
 800e4ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	2b0c      	cmp	r3, #12
 800e4d0:	d907      	bls.n	800e4e2 <memp_free+0x22>
 800e4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e504 <memp_free+0x44>)
 800e4d4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e4d8:	490b      	ldr	r1, [pc, #44]	@ (800e508 <memp_free+0x48>)
 800e4da:	480c      	ldr	r0, [pc, #48]	@ (800e50c <memp_free+0x4c>)
 800e4dc:	f00a fe62 	bl	80191a4 <iprintf>
 800e4e0:	e00c      	b.n	800e4fc <memp_free+0x3c>

  if (mem == NULL) {
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d008      	beq.n	800e4fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	4a09      	ldr	r2, [pc, #36]	@ (800e510 <memp_free+0x50>)
 800e4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7ff ff94 	bl	800e420 <do_memp_free_pool>
 800e4f8:	e000      	b.n	800e4fc <memp_free+0x3c>
    return;
 800e4fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	0801ab8c 	.word	0x0801ab8c
 800e508:	0801ac5c 	.word	0x0801ac5c
 800e50c:	0801abe0 	.word	0x0801abe0
 800e510:	0801e238 	.word	0x0801e238

0800e514 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e514:	b480      	push	{r7}
 800e516:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e518:	bf00      	nop
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
	...

0800e524 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
 800e530:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d108      	bne.n	800e54a <netif_add+0x26>
 800e538:	4b57      	ldr	r3, [pc, #348]	@ (800e698 <netif_add+0x174>)
 800e53a:	f240 1227 	movw	r2, #295	@ 0x127
 800e53e:	4957      	ldr	r1, [pc, #348]	@ (800e69c <netif_add+0x178>)
 800e540:	4857      	ldr	r0, [pc, #348]	@ (800e6a0 <netif_add+0x17c>)
 800e542:	f00a fe2f 	bl	80191a4 <iprintf>
 800e546:	2300      	movs	r3, #0
 800e548:	e0a2      	b.n	800e690 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d108      	bne.n	800e562 <netif_add+0x3e>
 800e550:	4b51      	ldr	r3, [pc, #324]	@ (800e698 <netif_add+0x174>)
 800e552:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e556:	4953      	ldr	r1, [pc, #332]	@ (800e6a4 <netif_add+0x180>)
 800e558:	4851      	ldr	r0, [pc, #324]	@ (800e6a0 <netif_add+0x17c>)
 800e55a:	f00a fe23 	bl	80191a4 <iprintf>
 800e55e:	2300      	movs	r3, #0
 800e560:	e096      	b.n	800e690 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d101      	bne.n	800e56c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e568:	4b4f      	ldr	r3, [pc, #316]	@ (800e6a8 <netif_add+0x184>)
 800e56a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d101      	bne.n	800e576 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e572:	4b4d      	ldr	r3, [pc, #308]	@ (800e6a8 <netif_add+0x184>)
 800e574:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d101      	bne.n	800e580 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e57c:	4b4a      	ldr	r3, [pc, #296]	@ (800e6a8 <netif_add+0x184>)
 800e57e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2200      	movs	r2, #0
 800e590:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	4a45      	ldr	r2, [pc, #276]	@ (800e6ac <netif_add+0x188>)
 800e596:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	6a3a      	ldr	r2, [r7, #32]
 800e5b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e5b2:	4b3f      	ldr	r3, [pc, #252]	@ (800e6b0 <netif_add+0x18c>)
 800e5b4:	781a      	ldrb	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	68b9      	ldr	r1, [r7, #8]
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f913 	bl	800e7f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	4798      	blx	r3
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <netif_add+0xba>
    return NULL;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e058      	b.n	800e690 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e5e4:	2bff      	cmp	r3, #255	@ 0xff
 800e5e6:	d103      	bne.n	800e5f0 <netif_add+0xcc>
        netif->num = 0;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e5f4:	4b2f      	ldr	r3, [pc, #188]	@ (800e6b4 <netif_add+0x190>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	617b      	str	r3, [r7, #20]
 800e5fa:	e02b      	b.n	800e654 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	429a      	cmp	r2, r3
 800e602:	d106      	bne.n	800e612 <netif_add+0xee>
 800e604:	4b24      	ldr	r3, [pc, #144]	@ (800e698 <netif_add+0x174>)
 800e606:	f240 128b 	movw	r2, #395	@ 0x18b
 800e60a:	492b      	ldr	r1, [pc, #172]	@ (800e6b8 <netif_add+0x194>)
 800e60c:	4824      	ldr	r0, [pc, #144]	@ (800e6a0 <netif_add+0x17c>)
 800e60e:	f00a fdc9 	bl	80191a4 <iprintf>
        num_netifs++;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	3301      	adds	r3, #1
 800e616:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	2bff      	cmp	r3, #255	@ 0xff
 800e61c:	dd06      	ble.n	800e62c <netif_add+0x108>
 800e61e:	4b1e      	ldr	r3, [pc, #120]	@ (800e698 <netif_add+0x174>)
 800e620:	f240 128d 	movw	r2, #397	@ 0x18d
 800e624:	4925      	ldr	r1, [pc, #148]	@ (800e6bc <netif_add+0x198>)
 800e626:	481e      	ldr	r0, [pc, #120]	@ (800e6a0 <netif_add+0x17c>)
 800e628:	f00a fdbc 	bl	80191a4 <iprintf>
        if (netif2->num == netif->num) {
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e638:	429a      	cmp	r2, r3
 800e63a:	d108      	bne.n	800e64e <netif_add+0x12a>
          netif->num++;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e642:	3301      	adds	r3, #1
 800e644:	b2da      	uxtb	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e64c:	e005      	b.n	800e65a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	617b      	str	r3, [r7, #20]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1d0      	bne.n	800e5fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1be      	bne.n	800e5de <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e666:	2bfe      	cmp	r3, #254	@ 0xfe
 800e668:	d103      	bne.n	800e672 <netif_add+0x14e>
    netif_num = 0;
 800e66a:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <netif_add+0x18c>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	701a      	strb	r2, [r3, #0]
 800e670:	e006      	b.n	800e680 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e678:	3301      	adds	r3, #1
 800e67a:	b2da      	uxtb	r2, r3
 800e67c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b0 <netif_add+0x18c>)
 800e67e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e680:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b4 <netif_add+0x190>)
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e688:	4a0a      	ldr	r2, [pc, #40]	@ (800e6b4 <netif_add+0x190>)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e68e:	68fb      	ldr	r3, [r7, #12]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	0801ac78 	.word	0x0801ac78
 800e69c:	0801ad0c 	.word	0x0801ad0c
 800e6a0:	0801acc8 	.word	0x0801acc8
 800e6a4:	0801ad28 	.word	0x0801ad28
 800e6a8:	0801e2ac 	.word	0x0801e2ac
 800e6ac:	0800eacf 	.word	0x0800eacf
 800e6b0:	2400c398 	.word	0x2400c398
 800e6b4:	2400c390 	.word	0x2400c390
 800e6b8:	0801ad4c 	.word	0x0801ad4c
 800e6bc:	0801ad60 	.word	0x0801ad60

0800e6c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f002 fe9d 	bl	801140c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f007 fff9 	bl	80166cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e6da:	bf00      	nop
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d106      	bne.n	800e704 <netif_do_set_ipaddr+0x20>
 800e6f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e76c <netif_do_set_ipaddr+0x88>)
 800e6f8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e6fc:	491c      	ldr	r1, [pc, #112]	@ (800e770 <netif_do_set_ipaddr+0x8c>)
 800e6fe:	481d      	ldr	r0, [pc, #116]	@ (800e774 <netif_do_set_ipaddr+0x90>)
 800e700:	f00a fd50 	bl	80191a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d106      	bne.n	800e718 <netif_do_set_ipaddr+0x34>
 800e70a:	4b18      	ldr	r3, [pc, #96]	@ (800e76c <netif_do_set_ipaddr+0x88>)
 800e70c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e710:	4917      	ldr	r1, [pc, #92]	@ (800e770 <netif_do_set_ipaddr+0x8c>)
 800e712:	4818      	ldr	r0, [pc, #96]	@ (800e774 <netif_do_set_ipaddr+0x90>)
 800e714:	f00a fd46 	bl	80191a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3304      	adds	r3, #4
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	429a      	cmp	r2, r3
 800e724:	d01c      	beq.n	800e760 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	3304      	adds	r3, #4
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e736:	f107 0314 	add.w	r3, r7, #20
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff ffbf 	bl	800e6c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d002      	beq.n	800e74e <netif_do_set_ipaddr+0x6a>
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	e000      	b.n	800e750 <netif_do_set_ipaddr+0x6c>
 800e74e:	2300      	movs	r3, #0
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e754:	2101      	movs	r1, #1
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f000 f8d2 	bl	800e900 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e75c:	2301      	movs	r3, #1
 800e75e:	e000      	b.n	800e762 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3718      	adds	r7, #24
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	0801ac78 	.word	0x0801ac78
 800e770:	0801ad90 	.word	0x0801ad90
 800e774:	0801acc8 	.word	0x0801acc8

0800e778 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	3308      	adds	r3, #8
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d00a      	beq.n	800e7a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d002      	beq.n	800e79e <netif_do_set_netmask+0x26>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	e000      	b.n	800e7a0 <netif_do_set_netmask+0x28>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e000      	b.n	800e7aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e7b6:	b480      	push	{r7}
 800e7b8:	b085      	sub	sp, #20
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	60f8      	str	r0, [r7, #12]
 800e7be:	60b9      	str	r1, [r7, #8]
 800e7c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	330c      	adds	r3, #12
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d00a      	beq.n	800e7e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d002      	beq.n	800e7dc <netif_do_set_gw+0x26>
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	e000      	b.n	800e7de <netif_do_set_gw+0x28>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e000      	b.n	800e7e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3714      	adds	r7, #20
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e806:	2300      	movs	r3, #0
 800e808:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e810:	4b1c      	ldr	r3, [pc, #112]	@ (800e884 <netif_set_addr+0x90>)
 800e812:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e81a:	4b1a      	ldr	r3, [pc, #104]	@ (800e884 <netif_set_addr+0x90>)
 800e81c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d101      	bne.n	800e828 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e824:	4b17      	ldr	r3, [pc, #92]	@ (800e884 <netif_set_addr+0x90>)
 800e826:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <netif_set_addr+0x42>
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d101      	bne.n	800e83a <netif_set_addr+0x46>
 800e836:	2301      	movs	r3, #1
 800e838:	e000      	b.n	800e83c <netif_set_addr+0x48>
 800e83a:	2300      	movs	r3, #0
 800e83c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d006      	beq.n	800e852 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e844:	f107 0310 	add.w	r3, r7, #16
 800e848:	461a      	mov	r2, r3
 800e84a:	68b9      	ldr	r1, [r7, #8]
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f7ff ff49 	bl	800e6e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e852:	69fa      	ldr	r2, [r7, #28]
 800e854:	6879      	ldr	r1, [r7, #4]
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7ff ff8e 	bl	800e778 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e85c:	69ba      	ldr	r2, [r7, #24]
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f7ff ffa8 	bl	800e7b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d106      	bne.n	800e87a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e86c:	f107 0310 	add.w	r3, r7, #16
 800e870:	461a      	mov	r2, r3
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f7ff ff35 	bl	800e6e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e87a:	bf00      	nop
 800e87c:	3720      	adds	r7, #32
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	0801e2ac 	.word	0x0801e2ac

0800e888 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e890:	4a04      	ldr	r2, [pc, #16]	@ (800e8a4 <netif_set_default+0x1c>)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e896:	bf00      	nop
 800e898:	370c      	adds	r7, #12
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	2400c394 	.word	0x2400c394

0800e8a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d107      	bne.n	800e8c6 <netif_set_up+0x1e>
 800e8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f4 <netif_set_up+0x4c>)
 800e8b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e8bc:	490e      	ldr	r1, [pc, #56]	@ (800e8f8 <netif_set_up+0x50>)
 800e8be:	480f      	ldr	r0, [pc, #60]	@ (800e8fc <netif_set_up+0x54>)
 800e8c0:	f00a fc70 	bl	80191a4 <iprintf>
 800e8c4:	e013      	b.n	800e8ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d10c      	bne.n	800e8ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8da:	f043 0301 	orr.w	r3, r3, #1
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e8e6:	2103      	movs	r1, #3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f809 	bl	800e900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	0801ac78 	.word	0x0801ac78
 800e8f8:	0801ae00 	.word	0x0801ae00
 800e8fc:	0801acc8 	.word	0x0801acc8

0800e900 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d106      	bne.n	800e920 <netif_issue_reports+0x20>
 800e912:	4b18      	ldr	r3, [pc, #96]	@ (800e974 <netif_issue_reports+0x74>)
 800e914:	f240 326d 	movw	r2, #877	@ 0x36d
 800e918:	4917      	ldr	r1, [pc, #92]	@ (800e978 <netif_issue_reports+0x78>)
 800e91a:	4818      	ldr	r0, [pc, #96]	@ (800e97c <netif_issue_reports+0x7c>)
 800e91c:	f00a fc42 	bl	80191a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e926:	f003 0304 	and.w	r3, r3, #4
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d01e      	beq.n	800e96c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e934:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d017      	beq.n	800e96c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e93c:	78fb      	ldrb	r3, [r7, #3]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d013      	beq.n	800e96e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	3304      	adds	r3, #4
 800e94a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00e      	beq.n	800e96e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e956:	f003 0308 	and.w	r3, r3, #8
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d007      	beq.n	800e96e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	3304      	adds	r3, #4
 800e962:	4619      	mov	r1, r3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f008 fb41 	bl	8016fec <etharp_request>
 800e96a:	e000      	b.n	800e96e <netif_issue_reports+0x6e>
    return;
 800e96c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	0801ac78 	.word	0x0801ac78
 800e978:	0801ae1c 	.word	0x0801ae1c
 800e97c:	0801acc8 	.word	0x0801acc8

0800e980 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d107      	bne.n	800e99e <netif_set_down+0x1e>
 800e98e:	4b12      	ldr	r3, [pc, #72]	@ (800e9d8 <netif_set_down+0x58>)
 800e990:	f240 329b 	movw	r2, #923	@ 0x39b
 800e994:	4911      	ldr	r1, [pc, #68]	@ (800e9dc <netif_set_down+0x5c>)
 800e996:	4812      	ldr	r0, [pc, #72]	@ (800e9e0 <netif_set_down+0x60>)
 800e998:	f00a fc04 	bl	80191a4 <iprintf>
 800e99c:	e019      	b.n	800e9d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9a4:	f003 0301 	and.w	r3, r3, #1
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d012      	beq.n	800e9d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9b2:	f023 0301 	bic.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9c4:	f003 0308 	and.w	r3, r3, #8
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f008 f9a5 	bl	8016d1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	0801ac78 	.word	0x0801ac78
 800e9dc:	0801ae40 	.word	0x0801ae40
 800e9e0:	0801acc8 	.word	0x0801acc8

0800e9e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d107      	bne.n	800ea02 <netif_set_link_up+0x1e>
 800e9f2:	4b13      	ldr	r3, [pc, #76]	@ (800ea40 <netif_set_link_up+0x5c>)
 800e9f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e9f8:	4912      	ldr	r1, [pc, #72]	@ (800ea44 <netif_set_link_up+0x60>)
 800e9fa:	4813      	ldr	r0, [pc, #76]	@ (800ea48 <netif_set_link_up+0x64>)
 800e9fc:	f00a fbd2 	bl	80191a4 <iprintf>
 800ea00:	e01b      	b.n	800ea3a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea08:	f003 0304 	and.w	r3, r3, #4
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d114      	bne.n	800ea3a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea16:	f043 0304 	orr.w	r3, r3, #4
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ea22:	2103      	movs	r1, #3
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ff6b 	bl	800e900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <netif_set_link_up+0x56>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	69db      	ldr	r3, [r3, #28]
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	0801ac78 	.word	0x0801ac78
 800ea44:	0801ae60 	.word	0x0801ae60
 800ea48:	0801acc8 	.word	0x0801acc8

0800ea4c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d107      	bne.n	800ea6a <netif_set_link_down+0x1e>
 800ea5a:	4b11      	ldr	r3, [pc, #68]	@ (800eaa0 <netif_set_link_down+0x54>)
 800ea5c:	f240 4206 	movw	r2, #1030	@ 0x406
 800ea60:	4910      	ldr	r1, [pc, #64]	@ (800eaa4 <netif_set_link_down+0x58>)
 800ea62:	4811      	ldr	r0, [pc, #68]	@ (800eaa8 <netif_set_link_down+0x5c>)
 800ea64:	f00a fb9e 	bl	80191a4 <iprintf>
 800ea68:	e017      	b.n	800ea9a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea70:	f003 0304 	and.w	r3, r3, #4
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d010      	beq.n	800ea9a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea7e:	f023 0304 	bic.w	r3, r3, #4
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <netif_set_link_down+0x4e>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	69db      	ldr	r3, [r3, #28]
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	0801ac78 	.word	0x0801ac78
 800eaa4:	0801ae84 	.word	0x0801ae84
 800eaa8:	0801acc8 	.word	0x0801acc8

0800eaac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	61da      	str	r2, [r3, #28]
  }
}
 800eac2:	bf00      	nop
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eace:	b480      	push	{r7}
 800ead0:	b085      	sub	sp, #20
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	60b9      	str	r1, [r7, #8]
 800ead8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eada:	f06f 030b 	mvn.w	r3, #11
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
	...

0800eaec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b085      	sub	sp, #20
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eaf6:	79fb      	ldrb	r3, [r7, #7]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d013      	beq.n	800eb24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eafc:	4b0d      	ldr	r3, [pc, #52]	@ (800eb34 <netif_get_by_index+0x48>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	60fb      	str	r3, [r7, #12]
 800eb02:	e00c      	b.n	800eb1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	79fa      	ldrb	r2, [r7, #7]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d101      	bne.n	800eb18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	e006      	b.n	800eb26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	60fb      	str	r3, [r7, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1ef      	bne.n	800eb04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	2400c390 	.word	0x2400c390

0800eb38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800eb3e:	f00a fa13 	bl	8018f68 <sys_arch_protect>
 800eb42:	6038      	str	r0, [r7, #0]
 800eb44:	4b0d      	ldr	r3, [pc, #52]	@ (800eb7c <pbuf_free_ooseq+0x44>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	701a      	strb	r2, [r3, #0]
 800eb4a:	6838      	ldr	r0, [r7, #0]
 800eb4c:	f00a fa1a 	bl	8018f84 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eb50:	4b0b      	ldr	r3, [pc, #44]	@ (800eb80 <pbuf_free_ooseq+0x48>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	607b      	str	r3, [r7, #4]
 800eb56:	e00a      	b.n	800eb6e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d003      	beq.n	800eb68 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f002 fc91 	bl	8011488 <tcp_free_ooseq>
      return;
 800eb66:	e005      	b.n	800eb74 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	607b      	str	r3, [r7, #4]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1f1      	bne.n	800eb58 <pbuf_free_ooseq+0x20>
    }
  }
}
 800eb74:	3708      	adds	r7, #8
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	2400c399 	.word	0x2400c399
 800eb80:	2400c3a8 	.word	0x2400c3a8

0800eb84 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800eb8c:	f7ff ffd4 	bl	800eb38 <pbuf_free_ooseq>
}
 800eb90:	bf00      	nop
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eb9e:	f00a f9e3 	bl	8018f68 <sys_arch_protect>
 800eba2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800eba4:	4b0f      	ldr	r3, [pc, #60]	@ (800ebe4 <pbuf_pool_is_empty+0x4c>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ebaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe4 <pbuf_pool_is_empty+0x4c>)
 800ebac:	2201      	movs	r2, #1
 800ebae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f00a f9e7 	bl	8018f84 <sys_arch_unprotect>

  if (!queued) {
 800ebb6:	78fb      	ldrb	r3, [r7, #3]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10f      	bne.n	800ebdc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	480a      	ldr	r0, [pc, #40]	@ (800ebe8 <pbuf_pool_is_empty+0x50>)
 800ebc0:	f7fd fed2 	bl	800c968 <tcpip_try_callback>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d008      	beq.n	800ebdc <pbuf_pool_is_empty+0x44>
 800ebca:	f00a f9cd 	bl	8018f68 <sys_arch_protect>
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	4b04      	ldr	r3, [pc, #16]	@ (800ebe4 <pbuf_pool_is_empty+0x4c>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	701a      	strb	r2, [r3, #0]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f00a f9d4 	bl	8018f84 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	2400c399 	.word	0x2400c399
 800ebe8:	0800eb85 	.word	0x0800eb85

0800ebec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	80fb      	strh	r3, [r7, #6]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	88fa      	ldrh	r2, [r7, #6]
 800ec12:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	88ba      	ldrh	r2, [r7, #4]
 800ec18:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ec1a:	8b3b      	ldrh	r3, [r7, #24]
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	7f3a      	ldrb	r2, [r7, #28]
 800ec26:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	73da      	strb	r2, [r3, #15]
}
 800ec34:	bf00      	nop
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08c      	sub	sp, #48	@ 0x30
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	80bb      	strh	r3, [r7, #4]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ec56:	887b      	ldrh	r3, [r7, #2]
 800ec58:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ec5c:	d07f      	beq.n	800ed5e <pbuf_alloc+0x11e>
 800ec5e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ec62:	f300 80c8 	bgt.w	800edf6 <pbuf_alloc+0x1b6>
 800ec66:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ec6a:	d010      	beq.n	800ec8e <pbuf_alloc+0x4e>
 800ec6c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ec70:	f300 80c1 	bgt.w	800edf6 <pbuf_alloc+0x1b6>
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d002      	beq.n	800ec7e <pbuf_alloc+0x3e>
 800ec78:	2b41      	cmp	r3, #65	@ 0x41
 800ec7a:	f040 80bc 	bne.w	800edf6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ec7e:	887a      	ldrh	r2, [r7, #2]
 800ec80:	88bb      	ldrh	r3, [r7, #4]
 800ec82:	4619      	mov	r1, r3
 800ec84:	2000      	movs	r0, #0
 800ec86:	f000 f8d1 	bl	800ee2c <pbuf_alloc_reference>
 800ec8a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ec8c:	e0bd      	b.n	800ee0a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ec96:	88bb      	ldrh	r3, [r7, #4]
 800ec98:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ec9a:	200c      	movs	r0, #12
 800ec9c:	f7ff fb9a 	bl	800e3d4 <memp_malloc>
 800eca0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d109      	bne.n	800ecbc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800eca8:	f7ff ff76 	bl	800eb98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d002      	beq.n	800ecb8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ecb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecb4:	f000 faa8 	bl	800f208 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e0a7      	b.n	800ee0c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ecbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ecbe:	3303      	adds	r3, #3
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	f023 0303 	bic.w	r3, r3, #3
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	8b7a      	ldrh	r2, [r7, #26]
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	bf28      	it	cs
 800ecd4:	4613      	movcs	r3, r2
 800ecd6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ecd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ecda:	3310      	adds	r3, #16
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4413      	add	r3, r2
 800ece0:	3303      	adds	r3, #3
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	4618      	mov	r0, r3
 800ece8:	89f9      	ldrh	r1, [r7, #14]
 800ecea:	8b7a      	ldrh	r2, [r7, #26]
 800ecec:	2300      	movs	r3, #0
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	887b      	ldrh	r3, [r7, #2]
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6938      	ldr	r0, [r7, #16]
 800ecfa:	f7ff ff77 	bl	800ebec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f003 0303 	and.w	r3, r3, #3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d006      	beq.n	800ed18 <pbuf_alloc+0xd8>
 800ed0a:	4b42      	ldr	r3, [pc, #264]	@ (800ee14 <pbuf_alloc+0x1d4>)
 800ed0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ed10:	4941      	ldr	r1, [pc, #260]	@ (800ee18 <pbuf_alloc+0x1d8>)
 800ed12:	4842      	ldr	r0, [pc, #264]	@ (800ee1c <pbuf_alloc+0x1dc>)
 800ed14:	f00a fa46 	bl	80191a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ed18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed1a:	3303      	adds	r3, #3
 800ed1c:	f023 0303 	bic.w	r3, r3, #3
 800ed20:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ed24:	d106      	bne.n	800ed34 <pbuf_alloc+0xf4>
 800ed26:	4b3b      	ldr	r3, [pc, #236]	@ (800ee14 <pbuf_alloc+0x1d4>)
 800ed28:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ed2c:	493c      	ldr	r1, [pc, #240]	@ (800ee20 <pbuf_alloc+0x1e0>)
 800ed2e:	483b      	ldr	r0, [pc, #236]	@ (800ee1c <pbuf_alloc+0x1dc>)
 800ed30:	f00a fa38 	bl	80191a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ed34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed3e:	e002      	b.n	800ed46 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ed4a:	8b7a      	ldrh	r2, [r7, #26]
 800ed4c:	89fb      	ldrh	r3, [r7, #14]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ed56:	8b7b      	ldrh	r3, [r7, #26]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d19e      	bne.n	800ec9a <pbuf_alloc+0x5a>
      break;
 800ed5c:	e055      	b.n	800ee0a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ed5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed60:	3303      	adds	r3, #3
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	f023 0303 	bic.w	r3, r3, #3
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	88bb      	ldrh	r3, [r7, #4]
 800ed6c:	3303      	adds	r3, #3
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	f023 0303 	bic.w	r3, r3, #3
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	4413      	add	r3, r2
 800ed78:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ed7a:	8b3b      	ldrh	r3, [r7, #24]
 800ed7c:	3310      	adds	r3, #16
 800ed7e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ed80:	8b3a      	ldrh	r2, [r7, #24]
 800ed82:	88bb      	ldrh	r3, [r7, #4]
 800ed84:	3303      	adds	r3, #3
 800ed86:	f023 0303 	bic.w	r3, r3, #3
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d306      	bcc.n	800ed9c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ed8e:	8afa      	ldrh	r2, [r7, #22]
 800ed90:	88bb      	ldrh	r3, [r7, #4]
 800ed92:	3303      	adds	r3, #3
 800ed94:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d201      	bcs.n	800eda0 <pbuf_alloc+0x160>
        return NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	e035      	b.n	800ee0c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800eda0:	8afb      	ldrh	r3, [r7, #22]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7ff f96e 	bl	800e084 <mem_malloc>
 800eda8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800edaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <pbuf_alloc+0x174>
        return NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e02b      	b.n	800ee0c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800edb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edb6:	3310      	adds	r3, #16
 800edb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edba:	4413      	add	r3, r2
 800edbc:	3303      	adds	r3, #3
 800edbe:	f023 0303 	bic.w	r3, r3, #3
 800edc2:	4618      	mov	r0, r3
 800edc4:	88b9      	ldrh	r1, [r7, #4]
 800edc6:	88ba      	ldrh	r2, [r7, #4]
 800edc8:	2300      	movs	r3, #0
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	887b      	ldrh	r3, [r7, #2]
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	460b      	mov	r3, r1
 800edd2:	4601      	mov	r1, r0
 800edd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edd6:	f7ff ff09 	bl	800ebec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800edda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f003 0303 	and.w	r3, r3, #3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d010      	beq.n	800ee08 <pbuf_alloc+0x1c8>
 800ede6:	4b0b      	ldr	r3, [pc, #44]	@ (800ee14 <pbuf_alloc+0x1d4>)
 800ede8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800edec:	490d      	ldr	r1, [pc, #52]	@ (800ee24 <pbuf_alloc+0x1e4>)
 800edee:	480b      	ldr	r0, [pc, #44]	@ (800ee1c <pbuf_alloc+0x1dc>)
 800edf0:	f00a f9d8 	bl	80191a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800edf4:	e008      	b.n	800ee08 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800edf6:	4b07      	ldr	r3, [pc, #28]	@ (800ee14 <pbuf_alloc+0x1d4>)
 800edf8:	f240 1227 	movw	r2, #295	@ 0x127
 800edfc:	490a      	ldr	r1, [pc, #40]	@ (800ee28 <pbuf_alloc+0x1e8>)
 800edfe:	4807      	ldr	r0, [pc, #28]	@ (800ee1c <pbuf_alloc+0x1dc>)
 800ee00:	f00a f9d0 	bl	80191a4 <iprintf>
      return NULL;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e001      	b.n	800ee0c <pbuf_alloc+0x1cc>
      break;
 800ee08:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3728      	adds	r7, #40	@ 0x28
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	0801aea8 	.word	0x0801aea8
 800ee18:	0801aed8 	.word	0x0801aed8
 800ee1c:	0801af08 	.word	0x0801af08
 800ee20:	0801af30 	.word	0x0801af30
 800ee24:	0801af64 	.word	0x0801af64
 800ee28:	0801af90 	.word	0x0801af90

0800ee2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af02      	add	r7, sp, #8
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	460b      	mov	r3, r1
 800ee36:	807b      	strh	r3, [r7, #2]
 800ee38:	4613      	mov	r3, r2
 800ee3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ee3c:	883b      	ldrh	r3, [r7, #0]
 800ee3e:	2b41      	cmp	r3, #65	@ 0x41
 800ee40:	d009      	beq.n	800ee56 <pbuf_alloc_reference+0x2a>
 800ee42:	883b      	ldrh	r3, [r7, #0]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d006      	beq.n	800ee56 <pbuf_alloc_reference+0x2a>
 800ee48:	4b0f      	ldr	r3, [pc, #60]	@ (800ee88 <pbuf_alloc_reference+0x5c>)
 800ee4a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ee4e:	490f      	ldr	r1, [pc, #60]	@ (800ee8c <pbuf_alloc_reference+0x60>)
 800ee50:	480f      	ldr	r0, [pc, #60]	@ (800ee90 <pbuf_alloc_reference+0x64>)
 800ee52:	f00a f9a7 	bl	80191a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ee56:	200b      	movs	r0, #11
 800ee58:	f7ff fabc 	bl	800e3d4 <memp_malloc>
 800ee5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ee64:	2300      	movs	r3, #0
 800ee66:	e00b      	b.n	800ee80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ee68:	8879      	ldrh	r1, [r7, #2]
 800ee6a:	887a      	ldrh	r2, [r7, #2]
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	883b      	ldrh	r3, [r7, #0]
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	460b      	mov	r3, r1
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f7ff feb7 	bl	800ebec <pbuf_init_alloced_pbuf>
  return p;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801aea8 	.word	0x0801aea8
 800ee8c:	0801afac 	.word	0x0801afac
 800ee90:	0801af08 	.word	0x0801af08

0800ee94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	607b      	str	r3, [r7, #4]
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	73fb      	strb	r3, [r7, #15]
 800eea0:	460b      	mov	r3, r1
 800eea2:	81bb      	strh	r3, [r7, #12]
 800eea4:	4613      	mov	r3, r2
 800eea6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800eeac:	8a7b      	ldrh	r3, [r7, #18]
 800eeae:	3303      	adds	r3, #3
 800eeb0:	f023 0203 	bic.w	r2, r3, #3
 800eeb4:	89bb      	ldrh	r3, [r7, #12]
 800eeb6:	441a      	add	r2, r3
 800eeb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d901      	bls.n	800eec2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	e018      	b.n	800eef4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d007      	beq.n	800eed8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800eec8:	8a7b      	ldrh	r3, [r7, #18]
 800eeca:	3303      	adds	r3, #3
 800eecc:	f023 0303 	bic.w	r3, r3, #3
 800eed0:	6a3a      	ldr	r2, [r7, #32]
 800eed2:	4413      	add	r3, r2
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	e001      	b.n	800eedc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800eed8:	2300      	movs	r3, #0
 800eeda:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	89b9      	ldrh	r1, [r7, #12]
 800eee0:	89ba      	ldrh	r2, [r7, #12]
 800eee2:	2302      	movs	r3, #2
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	897b      	ldrh	r3, [r7, #10]
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	460b      	mov	r3, r1
 800eeec:	6979      	ldr	r1, [r7, #20]
 800eeee:	f7ff fe7d 	bl	800ebec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800eef2:	687b      	ldr	r3, [r7, #4]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <pbuf_realloc+0x20>
 800ef0e:	4b3a      	ldr	r3, [pc, #232]	@ (800eff8 <pbuf_realloc+0xfc>)
 800ef10:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ef14:	4939      	ldr	r1, [pc, #228]	@ (800effc <pbuf_realloc+0x100>)
 800ef16:	483a      	ldr	r0, [pc, #232]	@ (800f000 <pbuf_realloc+0x104>)
 800ef18:	f00a f944 	bl	80191a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	887a      	ldrh	r2, [r7, #2]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d263      	bcs.n	800efee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	891a      	ldrh	r2, [r3, #8]
 800ef2a:	887b      	ldrh	r3, [r7, #2]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ef30:	887b      	ldrh	r3, [r7, #2]
 800ef32:	817b      	strh	r3, [r7, #10]
  q = p;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ef38:	e018      	b.n	800ef6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	895b      	ldrh	r3, [r3, #10]
 800ef3e:	897a      	ldrh	r2, [r7, #10]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	891a      	ldrh	r2, [r3, #8]
 800ef48:	893b      	ldrh	r3, [r7, #8]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <pbuf_realloc+0x70>
 800ef5e:	4b26      	ldr	r3, [pc, #152]	@ (800eff8 <pbuf_realloc+0xfc>)
 800ef60:	f240 12af 	movw	r2, #431	@ 0x1af
 800ef64:	4927      	ldr	r1, [pc, #156]	@ (800f004 <pbuf_realloc+0x108>)
 800ef66:	4826      	ldr	r0, [pc, #152]	@ (800f000 <pbuf_realloc+0x104>)
 800ef68:	f00a f91c 	bl	80191a4 <iprintf>
  while (rem_len > q->len) {
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	895b      	ldrh	r3, [r3, #10]
 800ef70:	897a      	ldrh	r2, [r7, #10]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d8e1      	bhi.n	800ef3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	7b1b      	ldrb	r3, [r3, #12]
 800ef7a:	f003 030f 	and.w	r3, r3, #15
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d121      	bne.n	800efc6 <pbuf_realloc+0xca>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	895b      	ldrh	r3, [r3, #10]
 800ef86:	897a      	ldrh	r2, [r7, #10]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d01c      	beq.n	800efc6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	7b5b      	ldrb	r3, [r3, #13]
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d116      	bne.n	800efc6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	897b      	ldrh	r3, [r7, #10]
 800efa4:	4413      	add	r3, r2
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4619      	mov	r1, r3
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7fe ff5a 	bl	800de64 <mem_trim>
 800efb0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d106      	bne.n	800efc6 <pbuf_realloc+0xca>
 800efb8:	4b0f      	ldr	r3, [pc, #60]	@ (800eff8 <pbuf_realloc+0xfc>)
 800efba:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800efbe:	4912      	ldr	r1, [pc, #72]	@ (800f008 <pbuf_realloc+0x10c>)
 800efc0:	480f      	ldr	r0, [pc, #60]	@ (800f000 <pbuf_realloc+0x104>)
 800efc2:	f00a f8ef 	bl	80191a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	897a      	ldrh	r2, [r7, #10]
 800efca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	895a      	ldrh	r2, [r3, #10]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d004      	beq.n	800efe6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f000 f911 	bl	800f208 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	e000      	b.n	800eff0 <pbuf_realloc+0xf4>
    return;
 800efee:	bf00      	nop

}
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	0801aea8 	.word	0x0801aea8
 800effc:	0801afc0 	.word	0x0801afc0
 800f000:	0801af08 	.word	0x0801af08
 800f004:	0801afd8 	.word	0x0801afd8
 800f008:	0801aff0 	.word	0x0801aff0

0800f00c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	4613      	mov	r3, r2
 800f018:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d106      	bne.n	800f02e <pbuf_add_header_impl+0x22>
 800f020:	4b2b      	ldr	r3, [pc, #172]	@ (800f0d0 <pbuf_add_header_impl+0xc4>)
 800f022:	f240 12df 	movw	r2, #479	@ 0x1df
 800f026:	492b      	ldr	r1, [pc, #172]	@ (800f0d4 <pbuf_add_header_impl+0xc8>)
 800f028:	482b      	ldr	r0, [pc, #172]	@ (800f0d8 <pbuf_add_header_impl+0xcc>)
 800f02a:	f00a f8bb 	bl	80191a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d003      	beq.n	800f03c <pbuf_add_header_impl+0x30>
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f03a:	d301      	bcc.n	800f040 <pbuf_add_header_impl+0x34>
    return 1;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e043      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d101      	bne.n	800f04a <pbuf_add_header_impl+0x3e>
    return 0;
 800f046:	2300      	movs	r3, #0
 800f048:	e03e      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	891a      	ldrh	r2, [r3, #8]
 800f052:	8a7b      	ldrh	r3, [r7, #18]
 800f054:	4413      	add	r3, r2
 800f056:	b29b      	uxth	r3, r3
 800f058:	8a7a      	ldrh	r2, [r7, #18]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d901      	bls.n	800f062 <pbuf_add_header_impl+0x56>
    return 1;
 800f05e:	2301      	movs	r3, #1
 800f060:	e032      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	7b1b      	ldrb	r3, [r3, #12]
 800f066:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f068:	8a3b      	ldrh	r3, [r7, #16]
 800f06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00c      	beq.n	800f08c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	685a      	ldr	r2, [r3, #4]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	425b      	negs	r3, r3
 800f07a:	4413      	add	r3, r2
 800f07c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3310      	adds	r3, #16
 800f082:	697a      	ldr	r2, [r7, #20]
 800f084:	429a      	cmp	r2, r3
 800f086:	d20d      	bcs.n	800f0a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f088:	2301      	movs	r3, #1
 800f08a:	e01d      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f08c:	79fb      	ldrb	r3, [r7, #7]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d006      	beq.n	800f0a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	685a      	ldr	r2, [r3, #4]
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	425b      	negs	r3, r3
 800f09a:	4413      	add	r3, r2
 800f09c:	617b      	str	r3, [r7, #20]
 800f09e:	e001      	b.n	800f0a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e011      	b.n	800f0c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	895a      	ldrh	r2, [r3, #10]
 800f0ae:	8a7b      	ldrh	r3, [r7, #18]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	891a      	ldrh	r2, [r3, #8]
 800f0bc:	8a7b      	ldrh	r3, [r7, #18]
 800f0be:	4413      	add	r3, r2
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	0801aea8 	.word	0x0801aea8
 800f0d4:	0801b00c 	.word	0x0801b00c
 800f0d8:	0801af08 	.word	0x0801af08

0800f0dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff ff8e 	bl	800f00c <pbuf_add_header_impl>
 800f0f0:	4603      	mov	r3, r0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <pbuf_remove_header+0x1e>
 800f10c:	4b20      	ldr	r3, [pc, #128]	@ (800f190 <pbuf_remove_header+0x94>)
 800f10e:	f240 224b 	movw	r2, #587	@ 0x24b
 800f112:	4920      	ldr	r1, [pc, #128]	@ (800f194 <pbuf_remove_header+0x98>)
 800f114:	4820      	ldr	r0, [pc, #128]	@ (800f198 <pbuf_remove_header+0x9c>)
 800f116:	f00a f845 	bl	80191a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <pbuf_remove_header+0x2c>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f126:	d301      	bcc.n	800f12c <pbuf_remove_header+0x30>
    return 1;
 800f128:	2301      	movs	r3, #1
 800f12a:	e02c      	b.n	800f186 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <pbuf_remove_header+0x3a>
    return 0;
 800f132:	2300      	movs	r3, #0
 800f134:	e027      	b.n	800f186 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	895b      	ldrh	r3, [r3, #10]
 800f13e:	89fa      	ldrh	r2, [r7, #14]
 800f140:	429a      	cmp	r2, r3
 800f142:	d908      	bls.n	800f156 <pbuf_remove_header+0x5a>
 800f144:	4b12      	ldr	r3, [pc, #72]	@ (800f190 <pbuf_remove_header+0x94>)
 800f146:	f240 2255 	movw	r2, #597	@ 0x255
 800f14a:	4914      	ldr	r1, [pc, #80]	@ (800f19c <pbuf_remove_header+0xa0>)
 800f14c:	4812      	ldr	r0, [pc, #72]	@ (800f198 <pbuf_remove_header+0x9c>)
 800f14e:	f00a f829 	bl	80191a4 <iprintf>
 800f152:	2301      	movs	r3, #1
 800f154:	e017      	b.n	800f186 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	685a      	ldr	r2, [r3, #4]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	441a      	add	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	895a      	ldrh	r2, [r3, #10]
 800f16c:	89fb      	ldrh	r3, [r7, #14]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	b29a      	uxth	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	891a      	ldrh	r2, [r3, #8]
 800f17a:	89fb      	ldrh	r3, [r7, #14]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	b29a      	uxth	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	0801aea8 	.word	0x0801aea8
 800f194:	0801b00c 	.word	0x0801b00c
 800f198:	0801af08 	.word	0x0801af08
 800f19c:	0801b018 	.word	0x0801b018

0800f1a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	807b      	strh	r3, [r7, #2]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f1b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	da08      	bge.n	800f1ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f1b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1bc:	425b      	negs	r3, r3
 800f1be:	4619      	mov	r1, r3
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7ff ff9b 	bl	800f0fc <pbuf_remove_header>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	e007      	b.n	800f1da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f1ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1ce:	787a      	ldrb	r2, [r7, #1]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff ff1a 	bl	800f00c <pbuf_add_header_impl>
 800f1d8:	4603      	mov	r3, r0
  }
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f1ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff ffd2 	bl	800f1a0 <pbuf_header_impl>
 800f1fc:	4603      	mov	r3, r0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
	...

0800f208 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b088      	sub	sp, #32
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10b      	bne.n	800f22e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <pbuf_free+0x22>
 800f21c:	4b3b      	ldr	r3, [pc, #236]	@ (800f30c <pbuf_free+0x104>)
 800f21e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f222:	493b      	ldr	r1, [pc, #236]	@ (800f310 <pbuf_free+0x108>)
 800f224:	483b      	ldr	r0, [pc, #236]	@ (800f314 <pbuf_free+0x10c>)
 800f226:	f009 ffbd 	bl	80191a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	e069      	b.n	800f302 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f22e:	2300      	movs	r3, #0
 800f230:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f232:	e062      	b.n	800f2fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f234:	f009 fe98 	bl	8018f68 <sys_arch_protect>
 800f238:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	7b9b      	ldrb	r3, [r3, #14]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <pbuf_free+0x48>
 800f242:	4b32      	ldr	r3, [pc, #200]	@ (800f30c <pbuf_free+0x104>)
 800f244:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f248:	4933      	ldr	r1, [pc, #204]	@ (800f318 <pbuf_free+0x110>)
 800f24a:	4832      	ldr	r0, [pc, #200]	@ (800f314 <pbuf_free+0x10c>)
 800f24c:	f009 ffaa 	bl	80191a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	7b9b      	ldrb	r3, [r3, #14]
 800f254:	3b01      	subs	r3, #1
 800f256:	b2da      	uxtb	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	739a      	strb	r2, [r3, #14]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	7b9b      	ldrb	r3, [r3, #14]
 800f260:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f262:	69b8      	ldr	r0, [r7, #24]
 800f264:	f009 fe8e 	bl	8018f84 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f268:	7dfb      	ldrb	r3, [r7, #23]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d143      	bne.n	800f2f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	7b1b      	ldrb	r3, [r3, #12]
 800f278:	f003 030f 	and.w	r3, r3, #15
 800f27c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	7b5b      	ldrb	r3, [r3, #13]
 800f282:	f003 0302 	and.w	r3, r3, #2
 800f286:	2b00      	cmp	r3, #0
 800f288:	d011      	beq.n	800f2ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <pbuf_free+0x9c>
 800f296:	4b1d      	ldr	r3, [pc, #116]	@ (800f30c <pbuf_free+0x104>)
 800f298:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f29c:	491f      	ldr	r1, [pc, #124]	@ (800f31c <pbuf_free+0x114>)
 800f29e:	481d      	ldr	r0, [pc, #116]	@ (800f314 <pbuf_free+0x10c>)
 800f2a0:	f009 ff80 	bl	80191a4 <iprintf>
        pc->custom_free_function(p);
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	4798      	blx	r3
 800f2ac:	e01d      	b.n	800f2ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f2ae:	7bfb      	ldrb	r3, [r7, #15]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d104      	bne.n	800f2be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f2b4:	6879      	ldr	r1, [r7, #4]
 800f2b6:	200c      	movs	r0, #12
 800f2b8:	f7ff f902 	bl	800e4c0 <memp_free>
 800f2bc:	e015      	b.n	800f2ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d104      	bne.n	800f2ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f2c4:	6879      	ldr	r1, [r7, #4]
 800f2c6:	200b      	movs	r0, #11
 800f2c8:	f7ff f8fa 	bl	800e4c0 <memp_free>
 800f2cc:	e00d      	b.n	800f2ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f2ce:	7bfb      	ldrb	r3, [r7, #15]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d103      	bne.n	800f2dc <pbuf_free+0xd4>
          mem_free(p);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7fe fd35 	bl	800dd44 <mem_free>
 800f2da:	e006      	b.n	800f2ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f2dc:	4b0b      	ldr	r3, [pc, #44]	@ (800f30c <pbuf_free+0x104>)
 800f2de:	f240 320f 	movw	r2, #783	@ 0x30f
 800f2e2:	490f      	ldr	r1, [pc, #60]	@ (800f320 <pbuf_free+0x118>)
 800f2e4:	480b      	ldr	r0, [pc, #44]	@ (800f314 <pbuf_free+0x10c>)
 800f2e6:	f009 ff5d 	bl	80191a4 <iprintf>
        }
      }
      count++;
 800f2ea:	7ffb      	ldrb	r3, [r7, #31]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	607b      	str	r3, [r7, #4]
 800f2f4:	e001      	b.n	800f2fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d199      	bne.n	800f234 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f300:	7ffb      	ldrb	r3, [r7, #31]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3720      	adds	r7, #32
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	0801aea8 	.word	0x0801aea8
 800f310:	0801b00c 	.word	0x0801b00c
 800f314:	0801af08 	.word	0x0801af08
 800f318:	0801b038 	.word	0x0801b038
 800f31c:	0801b050 	.word	0x0801b050
 800f320:	0801b074 	.word	0x0801b074

0800f324 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f330:	e005      	b.n	800f33e <pbuf_clen+0x1a>
    ++len;
 800f332:	89fb      	ldrh	r3, [r7, #14]
 800f334:	3301      	adds	r3, #1
 800f336:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1f6      	bne.n	800f332 <pbuf_clen+0xe>
  }
  return len;
 800f344:	89fb      	ldrh	r3, [r7, #14]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
	...

0800f354 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d016      	beq.n	800f390 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f362:	f009 fe01 	bl	8018f68 <sys_arch_protect>
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	7b9b      	ldrb	r3, [r3, #14]
 800f36c:	3301      	adds	r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	739a      	strb	r2, [r3, #14]
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f009 fe05 	bl	8018f84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7b9b      	ldrb	r3, [r3, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d106      	bne.n	800f390 <pbuf_ref+0x3c>
 800f382:	4b05      	ldr	r3, [pc, #20]	@ (800f398 <pbuf_ref+0x44>)
 800f384:	f240 3242 	movw	r2, #834	@ 0x342
 800f388:	4904      	ldr	r1, [pc, #16]	@ (800f39c <pbuf_ref+0x48>)
 800f38a:	4805      	ldr	r0, [pc, #20]	@ (800f3a0 <pbuf_ref+0x4c>)
 800f38c:	f009 ff0a 	bl	80191a4 <iprintf>
  }
}
 800f390:	bf00      	nop
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	0801aea8 	.word	0x0801aea8
 800f39c:	0801b088 	.word	0x0801b088
 800f3a0:	0801af08 	.word	0x0801af08

0800f3a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <pbuf_cat+0x16>
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d107      	bne.n	800f3ca <pbuf_cat+0x26>
 800f3ba:	4b20      	ldr	r3, [pc, #128]	@ (800f43c <pbuf_cat+0x98>)
 800f3bc:	f240 3259 	movw	r2, #857	@ 0x359
 800f3c0:	491f      	ldr	r1, [pc, #124]	@ (800f440 <pbuf_cat+0x9c>)
 800f3c2:	4820      	ldr	r0, [pc, #128]	@ (800f444 <pbuf_cat+0xa0>)
 800f3c4:	f009 feee 	bl	80191a4 <iprintf>
 800f3c8:	e034      	b.n	800f434 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	60fb      	str	r3, [r7, #12]
 800f3ce:	e00a      	b.n	800f3e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	891a      	ldrh	r2, [r3, #8]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	891b      	ldrh	r3, [r3, #8]
 800f3d8:	4413      	add	r3, r2
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	60fb      	str	r3, [r7, #12]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1f0      	bne.n	800f3d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	891a      	ldrh	r2, [r3, #8]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	895b      	ldrh	r3, [r3, #10]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d006      	beq.n	800f408 <pbuf_cat+0x64>
 800f3fa:	4b10      	ldr	r3, [pc, #64]	@ (800f43c <pbuf_cat+0x98>)
 800f3fc:	f240 3262 	movw	r2, #866	@ 0x362
 800f400:	4911      	ldr	r1, [pc, #68]	@ (800f448 <pbuf_cat+0xa4>)
 800f402:	4810      	ldr	r0, [pc, #64]	@ (800f444 <pbuf_cat+0xa0>)
 800f404:	f009 fece 	bl	80191a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d006      	beq.n	800f41e <pbuf_cat+0x7a>
 800f410:	4b0a      	ldr	r3, [pc, #40]	@ (800f43c <pbuf_cat+0x98>)
 800f412:	f240 3263 	movw	r2, #867	@ 0x363
 800f416:	490d      	ldr	r1, [pc, #52]	@ (800f44c <pbuf_cat+0xa8>)
 800f418:	480a      	ldr	r0, [pc, #40]	@ (800f444 <pbuf_cat+0xa0>)
 800f41a:	f009 fec3 	bl	80191a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	891a      	ldrh	r2, [r3, #8]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	891b      	ldrh	r3, [r3, #8]
 800f426:	4413      	add	r3, r2
 800f428:	b29a      	uxth	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	0801aea8 	.word	0x0801aea8
 800f440:	0801b09c 	.word	0x0801b09c
 800f444:	0801af08 	.word	0x0801af08
 800f448:	0801b0d4 	.word	0x0801b0d4
 800f44c:	0801b104 	.word	0x0801b104

0800f450 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff ffa1 	bl	800f3a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f462:	6838      	ldr	r0, [r7, #0]
 800f464:	f7ff ff76 	bl	800f354 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f468:	bf00      	nop
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f47a:	2300      	movs	r3, #0
 800f47c:	617b      	str	r3, [r7, #20]
 800f47e:	2300      	movs	r3, #0
 800f480:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d008      	beq.n	800f49a <pbuf_copy+0x2a>
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <pbuf_copy+0x2a>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	891a      	ldrh	r2, [r3, #8]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	891b      	ldrh	r3, [r3, #8]
 800f496:	429a      	cmp	r2, r3
 800f498:	d209      	bcs.n	800f4ae <pbuf_copy+0x3e>
 800f49a:	4b57      	ldr	r3, [pc, #348]	@ (800f5f8 <pbuf_copy+0x188>)
 800f49c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f4a0:	4956      	ldr	r1, [pc, #344]	@ (800f5fc <pbuf_copy+0x18c>)
 800f4a2:	4857      	ldr	r0, [pc, #348]	@ (800f600 <pbuf_copy+0x190>)
 800f4a4:	f009 fe7e 	bl	80191a4 <iprintf>
 800f4a8:	f06f 030f 	mvn.w	r3, #15
 800f4ac:	e09f      	b.n	800f5ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	895b      	ldrh	r3, [r3, #10]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	1ad2      	subs	r2, r2, r3
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	895b      	ldrh	r3, [r3, #10]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	1acb      	subs	r3, r1, r3
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d306      	bcc.n	800f4d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	895b      	ldrh	r3, [r3, #10]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	e005      	b.n	800f4e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	895b      	ldrh	r3, [r3, #10]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685a      	ldr	r2, [r3, #4]
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	18d0      	adds	r0, r2, r3
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	f00a f8e5 	bl	80196c2 <memcpy>
    offset_to += len;
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4413      	add	r3, r2
 800f506:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	895b      	ldrh	r3, [r3, #10]
 800f50c:	461a      	mov	r2, r3
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	4293      	cmp	r3, r2
 800f512:	d906      	bls.n	800f522 <pbuf_copy+0xb2>
 800f514:	4b38      	ldr	r3, [pc, #224]	@ (800f5f8 <pbuf_copy+0x188>)
 800f516:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f51a:	493a      	ldr	r1, [pc, #232]	@ (800f604 <pbuf_copy+0x194>)
 800f51c:	4838      	ldr	r0, [pc, #224]	@ (800f600 <pbuf_copy+0x190>)
 800f51e:	f009 fe41 	bl	80191a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	895b      	ldrh	r3, [r3, #10]
 800f526:	461a      	mov	r2, r3
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d906      	bls.n	800f53c <pbuf_copy+0xcc>
 800f52e:	4b32      	ldr	r3, [pc, #200]	@ (800f5f8 <pbuf_copy+0x188>)
 800f530:	f240 32da 	movw	r2, #986	@ 0x3da
 800f534:	4934      	ldr	r1, [pc, #208]	@ (800f608 <pbuf_copy+0x198>)
 800f536:	4832      	ldr	r0, [pc, #200]	@ (800f600 <pbuf_copy+0x190>)
 800f538:	f009 fe34 	bl	80191a4 <iprintf>
    if (offset_from >= p_from->len) {
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	895b      	ldrh	r3, [r3, #10]
 800f540:	461a      	mov	r2, r3
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	4293      	cmp	r3, r2
 800f546:	d304      	bcc.n	800f552 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	895b      	ldrh	r3, [r3, #10]
 800f556:	461a      	mov	r2, r3
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d114      	bne.n	800f588 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10c      	bne.n	800f588 <pbuf_copy+0x118>
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d009      	beq.n	800f588 <pbuf_copy+0x118>
 800f574:	4b20      	ldr	r3, [pc, #128]	@ (800f5f8 <pbuf_copy+0x188>)
 800f576:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f57a:	4924      	ldr	r1, [pc, #144]	@ (800f60c <pbuf_copy+0x19c>)
 800f57c:	4820      	ldr	r0, [pc, #128]	@ (800f600 <pbuf_copy+0x190>)
 800f57e:	f009 fe11 	bl	80191a4 <iprintf>
 800f582:	f06f 030f 	mvn.w	r3, #15
 800f586:	e032      	b.n	800f5ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d013      	beq.n	800f5b6 <pbuf_copy+0x146>
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	895a      	ldrh	r2, [r3, #10]
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	891b      	ldrh	r3, [r3, #8]
 800f596:	429a      	cmp	r2, r3
 800f598:	d10d      	bne.n	800f5b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d009      	beq.n	800f5b6 <pbuf_copy+0x146>
 800f5a2:	4b15      	ldr	r3, [pc, #84]	@ (800f5f8 <pbuf_copy+0x188>)
 800f5a4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f5a8:	4919      	ldr	r1, [pc, #100]	@ (800f610 <pbuf_copy+0x1a0>)
 800f5aa:	4815      	ldr	r0, [pc, #84]	@ (800f600 <pbuf_copy+0x190>)
 800f5ac:	f009 fdfa 	bl	80191a4 <iprintf>
 800f5b0:	f06f 0305 	mvn.w	r3, #5
 800f5b4:	e01b      	b.n	800f5ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d013      	beq.n	800f5e4 <pbuf_copy+0x174>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	895a      	ldrh	r2, [r3, #10]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	891b      	ldrh	r3, [r3, #8]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d10d      	bne.n	800f5e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <pbuf_copy+0x174>
 800f5d0:	4b09      	ldr	r3, [pc, #36]	@ (800f5f8 <pbuf_copy+0x188>)
 800f5d2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f5d6:	490e      	ldr	r1, [pc, #56]	@ (800f610 <pbuf_copy+0x1a0>)
 800f5d8:	4809      	ldr	r0, [pc, #36]	@ (800f600 <pbuf_copy+0x190>)
 800f5da:	f009 fde3 	bl	80191a4 <iprintf>
 800f5de:	f06f 0305 	mvn.w	r3, #5
 800f5e2:	e004      	b.n	800f5ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f47f af61 	bne.w	800f4ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3718      	adds	r7, #24
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	0801aea8 	.word	0x0801aea8
 800f5fc:	0801b150 	.word	0x0801b150
 800f600:	0801af08 	.word	0x0801af08
 800f604:	0801b180 	.word	0x0801b180
 800f608:	0801b198 	.word	0x0801b198
 800f60c:	0801b1b4 	.word	0x0801b1b4
 800f610:	0801b1c4 	.word	0x0801b1c4

0800f614 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	4611      	mov	r1, r2
 800f620:	461a      	mov	r2, r3
 800f622:	460b      	mov	r3, r1
 800f624:	80fb      	strh	r3, [r7, #6]
 800f626:	4613      	mov	r3, r2
 800f628:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d108      	bne.n	800f64a <pbuf_copy_partial+0x36>
 800f638:	4b2b      	ldr	r3, [pc, #172]	@ (800f6e8 <pbuf_copy_partial+0xd4>)
 800f63a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f63e:	492b      	ldr	r1, [pc, #172]	@ (800f6ec <pbuf_copy_partial+0xd8>)
 800f640:	482b      	ldr	r0, [pc, #172]	@ (800f6f0 <pbuf_copy_partial+0xdc>)
 800f642:	f009 fdaf 	bl	80191a4 <iprintf>
 800f646:	2300      	movs	r3, #0
 800f648:	e04a      	b.n	800f6e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d108      	bne.n	800f662 <pbuf_copy_partial+0x4e>
 800f650:	4b25      	ldr	r3, [pc, #148]	@ (800f6e8 <pbuf_copy_partial+0xd4>)
 800f652:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f656:	4927      	ldr	r1, [pc, #156]	@ (800f6f4 <pbuf_copy_partial+0xe0>)
 800f658:	4825      	ldr	r0, [pc, #148]	@ (800f6f0 <pbuf_copy_partial+0xdc>)
 800f65a:	f009 fda3 	bl	80191a4 <iprintf>
 800f65e:	2300      	movs	r3, #0
 800f660:	e03e      	b.n	800f6e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	61fb      	str	r3, [r7, #28]
 800f666:	e034      	b.n	800f6d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f668:	88bb      	ldrh	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00a      	beq.n	800f684 <pbuf_copy_partial+0x70>
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	895b      	ldrh	r3, [r3, #10]
 800f672:	88ba      	ldrh	r2, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d305      	bcc.n	800f684 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	895b      	ldrh	r3, [r3, #10]
 800f67c:	88ba      	ldrh	r2, [r7, #4]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	80bb      	strh	r3, [r7, #4]
 800f682:	e023      	b.n	800f6cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	895a      	ldrh	r2, [r3, #10]
 800f688:	88bb      	ldrh	r3, [r7, #4]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f68e:	8b3a      	ldrh	r2, [r7, #24]
 800f690:	88fb      	ldrh	r3, [r7, #6]
 800f692:	429a      	cmp	r2, r3
 800f694:	d901      	bls.n	800f69a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f696:	88fb      	ldrh	r3, [r7, #6]
 800f698:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f69a:	8b7b      	ldrh	r3, [r7, #26]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	18d0      	adds	r0, r2, r3
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	88bb      	ldrh	r3, [r7, #4]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	8b3a      	ldrh	r2, [r7, #24]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	f00a f809 	bl	80196c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f6b0:	8afa      	ldrh	r2, [r7, #22]
 800f6b2:	8b3b      	ldrh	r3, [r7, #24]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f6b8:	8b7a      	ldrh	r2, [r7, #26]
 800f6ba:	8b3b      	ldrh	r3, [r7, #24]
 800f6bc:	4413      	add	r3, r2
 800f6be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	8b3b      	ldrh	r3, [r7, #24]
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	61fb      	str	r3, [r7, #28]
 800f6d2:	88fb      	ldrh	r3, [r7, #6]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <pbuf_copy_partial+0xca>
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1c4      	bne.n	800f668 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f6de:	8afb      	ldrh	r3, [r7, #22]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3720      	adds	r7, #32
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	0801aea8 	.word	0x0801aea8
 800f6ec:	0801b1f0 	.word	0x0801b1f0
 800f6f0:	0801af08 	.word	0x0801af08
 800f6f4:	0801b210 	.word	0x0801b210

0800f6f8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	4613      	mov	r3, r2
 800f704:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f706:	88fb      	ldrh	r3, [r7, #6]
 800f708:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d109      	bne.n	800f728 <pbuf_take+0x30>
 800f714:	4b3a      	ldr	r3, [pc, #232]	@ (800f800 <pbuf_take+0x108>)
 800f716:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800f71a:	493a      	ldr	r1, [pc, #232]	@ (800f804 <pbuf_take+0x10c>)
 800f71c:	483a      	ldr	r0, [pc, #232]	@ (800f808 <pbuf_take+0x110>)
 800f71e:	f009 fd41 	bl	80191a4 <iprintf>
 800f722:	f06f 030f 	mvn.w	r3, #15
 800f726:	e067      	b.n	800f7f8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d109      	bne.n	800f742 <pbuf_take+0x4a>
 800f72e:	4b34      	ldr	r3, [pc, #208]	@ (800f800 <pbuf_take+0x108>)
 800f730:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800f734:	4935      	ldr	r1, [pc, #212]	@ (800f80c <pbuf_take+0x114>)
 800f736:	4834      	ldr	r0, [pc, #208]	@ (800f808 <pbuf_take+0x110>)
 800f738:	f009 fd34 	bl	80191a4 <iprintf>
 800f73c:	f06f 030f 	mvn.w	r3, #15
 800f740:	e05a      	b.n	800f7f8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	891b      	ldrh	r3, [r3, #8]
 800f746:	88fa      	ldrh	r2, [r7, #6]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d909      	bls.n	800f760 <pbuf_take+0x68>
 800f74c:	4b2c      	ldr	r3, [pc, #176]	@ (800f800 <pbuf_take+0x108>)
 800f74e:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800f752:	492f      	ldr	r1, [pc, #188]	@ (800f810 <pbuf_take+0x118>)
 800f754:	482c      	ldr	r0, [pc, #176]	@ (800f808 <pbuf_take+0x110>)
 800f756:	f009 fd25 	bl	80191a4 <iprintf>
 800f75a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f75e:	e04b      	b.n	800f7f8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <pbuf_take+0x7e>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d004      	beq.n	800f776 <pbuf_take+0x7e>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	891b      	ldrh	r3, [r3, #8]
 800f770:	88fa      	ldrh	r2, [r7, #6]
 800f772:	429a      	cmp	r2, r3
 800f774:	d902      	bls.n	800f77c <pbuf_take+0x84>
    return ERR_ARG;
 800f776:	f06f 030f 	mvn.w	r3, #15
 800f77a:	e03d      	b.n	800f7f8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	61fb      	str	r3, [r7, #28]
 800f780:	e028      	b.n	800f7d4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d106      	bne.n	800f796 <pbuf_take+0x9e>
 800f788:	4b1d      	ldr	r3, [pc, #116]	@ (800f800 <pbuf_take+0x108>)
 800f78a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800f78e:	4921      	ldr	r1, [pc, #132]	@ (800f814 <pbuf_take+0x11c>)
 800f790:	481d      	ldr	r0, [pc, #116]	@ (800f808 <pbuf_take+0x110>)
 800f792:	f009 fd07 	bl	80191a4 <iprintf>
    buf_copy_len = total_copy_len;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	895b      	ldrh	r3, [r3, #10]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d902      	bls.n	800f7ac <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	895b      	ldrh	r3, [r3, #10]
 800f7aa:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	6858      	ldr	r0, [r3, #4]
 800f7b0:	68ba      	ldr	r2, [r7, #8]
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	69ba      	ldr	r2, [r7, #24]
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	f009 ff82 	bl	80196c2 <memcpy>
    total_copy_len -= buf_copy_len;
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1d3      	bne.n	800f782 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d103      	bne.n	800f7e8 <pbuf_take+0xf0>
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d006      	beq.n	800f7f6 <pbuf_take+0xfe>
 800f7e8:	4b05      	ldr	r3, [pc, #20]	@ (800f800 <pbuf_take+0x108>)
 800f7ea:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800f7ee:	490a      	ldr	r1, [pc, #40]	@ (800f818 <pbuf_take+0x120>)
 800f7f0:	4805      	ldr	r0, [pc, #20]	@ (800f808 <pbuf_take+0x110>)
 800f7f2:	f009 fcd7 	bl	80191a4 <iprintf>
  return ERR_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3720      	adds	r7, #32
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	0801aea8 	.word	0x0801aea8
 800f804:	0801b280 	.word	0x0801b280
 800f808:	0801af08 	.word	0x0801af08
 800f80c:	0801b298 	.word	0x0801b298
 800f810:	0801b2b4 	.word	0x0801b2b4
 800f814:	0801b2d4 	.word	0x0801b2d4
 800f818:	0801b2ec 	.word	0x0801b2ec

0800f81c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f820:	f009 fbc0 	bl	8018fa4 <rand>
 800f824:	4603      	mov	r3, r0
 800f826:	b29b      	uxth	r3, r3
 800f828:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f832:	b29a      	uxth	r2, r3
 800f834:	4b01      	ldr	r3, [pc, #4]	@ (800f83c <tcp_init+0x20>)
 800f836:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f838:	bf00      	nop
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	2400002c 	.word	0x2400002c

0800f840 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	7d1b      	ldrb	r3, [r3, #20]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d105      	bne.n	800f85c <tcp_free+0x1c>
 800f850:	4b06      	ldr	r3, [pc, #24]	@ (800f86c <tcp_free+0x2c>)
 800f852:	22d4      	movs	r2, #212	@ 0xd4
 800f854:	4906      	ldr	r1, [pc, #24]	@ (800f870 <tcp_free+0x30>)
 800f856:	4807      	ldr	r0, [pc, #28]	@ (800f874 <tcp_free+0x34>)
 800f858:	f009 fca4 	bl	80191a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f85c:	6879      	ldr	r1, [r7, #4]
 800f85e:	2001      	movs	r0, #1
 800f860:	f7fe fe2e 	bl	800e4c0 <memp_free>
}
 800f864:	bf00      	nop
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	0801b3a8 	.word	0x0801b3a8
 800f870:	0801b3d8 	.word	0x0801b3d8
 800f874:	0801b3ec 	.word	0x0801b3ec

0800f878 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	7d1b      	ldrb	r3, [r3, #20]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d105      	bne.n	800f894 <tcp_free_listen+0x1c>
 800f888:	4b06      	ldr	r3, [pc, #24]	@ (800f8a4 <tcp_free_listen+0x2c>)
 800f88a:	22df      	movs	r2, #223	@ 0xdf
 800f88c:	4906      	ldr	r1, [pc, #24]	@ (800f8a8 <tcp_free_listen+0x30>)
 800f88e:	4807      	ldr	r0, [pc, #28]	@ (800f8ac <tcp_free_listen+0x34>)
 800f890:	f009 fc88 	bl	80191a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f894:	6879      	ldr	r1, [r7, #4]
 800f896:	2002      	movs	r0, #2
 800f898:	f7fe fe12 	bl	800e4c0 <memp_free>
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	0801b3a8 	.word	0x0801b3a8
 800f8a8:	0801b414 	.word	0x0801b414
 800f8ac:	0801b3ec 	.word	0x0801b3ec

0800f8b0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f8b4:	f001 f85e 	bl	8010974 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f8b8:	4b07      	ldr	r3, [pc, #28]	@ (800f8d8 <tcp_tmr+0x28>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	3301      	adds	r3, #1
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	4b05      	ldr	r3, [pc, #20]	@ (800f8d8 <tcp_tmr+0x28>)
 800f8c2:	701a      	strb	r2, [r3, #0]
 800f8c4:	4b04      	ldr	r3, [pc, #16]	@ (800f8d8 <tcp_tmr+0x28>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 0301 	and.w	r3, r3, #1
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d001      	beq.n	800f8d4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f8d0:	f000 fd0e 	bl	80102f0 <tcp_slowtmr>
  }
}
 800f8d4:	bf00      	nop
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	2400c3b1 	.word	0x2400c3b1

0800f8dc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d105      	bne.n	800f8f8 <tcp_remove_listener+0x1c>
 800f8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f924 <tcp_remove_listener+0x48>)
 800f8ee:	22ff      	movs	r2, #255	@ 0xff
 800f8f0:	490d      	ldr	r1, [pc, #52]	@ (800f928 <tcp_remove_listener+0x4c>)
 800f8f2:	480e      	ldr	r0, [pc, #56]	@ (800f92c <tcp_remove_listener+0x50>)
 800f8f4:	f009 fc56 	bl	80191a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60fb      	str	r3, [r7, #12]
 800f8fc:	e00a      	b.n	800f914 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	429a      	cmp	r2, r3
 800f906:	d102      	bne.n	800f90e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1f1      	bne.n	800f8fe <tcp_remove_listener+0x22>
    }
  }
}
 800f91a:	bf00      	nop
 800f91c:	bf00      	nop
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	0801b3a8 	.word	0x0801b3a8
 800f928:	0801b430 	.word	0x0801b430
 800f92c:	0801b3ec 	.word	0x0801b3ec

0800f930 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d106      	bne.n	800f94c <tcp_listen_closed+0x1c>
 800f93e:	4b14      	ldr	r3, [pc, #80]	@ (800f990 <tcp_listen_closed+0x60>)
 800f940:	f240 1211 	movw	r2, #273	@ 0x111
 800f944:	4913      	ldr	r1, [pc, #76]	@ (800f994 <tcp_listen_closed+0x64>)
 800f946:	4814      	ldr	r0, [pc, #80]	@ (800f998 <tcp_listen_closed+0x68>)
 800f948:	f009 fc2c 	bl	80191a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	7d1b      	ldrb	r3, [r3, #20]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d006      	beq.n	800f962 <tcp_listen_closed+0x32>
 800f954:	4b0e      	ldr	r3, [pc, #56]	@ (800f990 <tcp_listen_closed+0x60>)
 800f956:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f95a:	4910      	ldr	r1, [pc, #64]	@ (800f99c <tcp_listen_closed+0x6c>)
 800f95c:	480e      	ldr	r0, [pc, #56]	@ (800f998 <tcp_listen_closed+0x68>)
 800f95e:	f009 fc21 	bl	80191a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f962:	2301      	movs	r3, #1
 800f964:	60fb      	str	r3, [r7, #12]
 800f966:	e00b      	b.n	800f980 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f968:	4a0d      	ldr	r2, [pc, #52]	@ (800f9a0 <tcp_listen_closed+0x70>)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff ffb1 	bl	800f8dc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	3301      	adds	r3, #1
 800f97e:	60fb      	str	r3, [r7, #12]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2b03      	cmp	r3, #3
 800f984:	d9f0      	bls.n	800f968 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f986:	bf00      	nop
 800f988:	bf00      	nop
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	0801b3a8 	.word	0x0801b3a8
 800f994:	0801b458 	.word	0x0801b458
 800f998:	0801b3ec 	.word	0x0801b3ec
 800f99c:	0801b464 	.word	0x0801b464
 800f9a0:	0801e284 	.word	0x0801e284

0800f9a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f9a4:	b5b0      	push	{r4, r5, r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af04      	add	r7, sp, #16
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <tcp_close_shutdown+0x20>
 800f9b6:	4b63      	ldr	r3, [pc, #396]	@ (800fb44 <tcp_close_shutdown+0x1a0>)
 800f9b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f9bc:	4962      	ldr	r1, [pc, #392]	@ (800fb48 <tcp_close_shutdown+0x1a4>)
 800f9be:	4863      	ldr	r0, [pc, #396]	@ (800fb4c <tcp_close_shutdown+0x1a8>)
 800f9c0:	f009 fbf0 	bl	80191a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f9c4:	78fb      	ldrb	r3, [r7, #3]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d066      	beq.n	800fa98 <tcp_close_shutdown+0xf4>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7d1b      	ldrb	r3, [r3, #20]
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	d003      	beq.n	800f9da <tcp_close_shutdown+0x36>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	7d1b      	ldrb	r3, [r3, #20]
 800f9d6:	2b07      	cmp	r3, #7
 800f9d8:	d15e      	bne.n	800fa98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d104      	bne.n	800f9ec <tcp_close_shutdown+0x48>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f9ea:	d055      	beq.n	800fa98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	8b5b      	ldrh	r3, [r3, #26]
 800f9f0:	f003 0310 	and.w	r3, r3, #16
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d106      	bne.n	800fa06 <tcp_close_shutdown+0x62>
 800f9f8:	4b52      	ldr	r3, [pc, #328]	@ (800fb44 <tcp_close_shutdown+0x1a0>)
 800f9fa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800f9fe:	4954      	ldr	r1, [pc, #336]	@ (800fb50 <tcp_close_shutdown+0x1ac>)
 800fa00:	4852      	ldr	r0, [pc, #328]	@ (800fb4c <tcp_close_shutdown+0x1a8>)
 800fa02:	f009 fbcf 	bl	80191a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fa0e:	687d      	ldr	r5, [r7, #4]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	3304      	adds	r3, #4
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	8ad2      	ldrh	r2, [r2, #22]
 800fa18:	6879      	ldr	r1, [r7, #4]
 800fa1a:	8b09      	ldrh	r1, [r1, #24]
 800fa1c:	9102      	str	r1, [sp, #8]
 800fa1e:	9201      	str	r2, [sp, #4]
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	462b      	mov	r3, r5
 800fa24:	4622      	mov	r2, r4
 800fa26:	4601      	mov	r1, r0
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f005 fdb5 	bl	8015598 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f001 fb76 	bl	8011120 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fa34:	4b47      	ldr	r3, [pc, #284]	@ (800fb54 <tcp_close_shutdown+0x1b0>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d105      	bne.n	800fa4a <tcp_close_shutdown+0xa6>
 800fa3e:	4b45      	ldr	r3, [pc, #276]	@ (800fb54 <tcp_close_shutdown+0x1b0>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	4a43      	ldr	r2, [pc, #268]	@ (800fb54 <tcp_close_shutdown+0x1b0>)
 800fa46:	6013      	str	r3, [r2, #0]
 800fa48:	e013      	b.n	800fa72 <tcp_close_shutdown+0xce>
 800fa4a:	4b42      	ldr	r3, [pc, #264]	@ (800fb54 <tcp_close_shutdown+0x1b0>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	60fb      	str	r3, [r7, #12]
 800fa50:	e00c      	b.n	800fa6c <tcp_close_shutdown+0xc8>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d104      	bne.n	800fa66 <tcp_close_shutdown+0xc2>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68da      	ldr	r2, [r3, #12]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	60da      	str	r2, [r3, #12]
 800fa64:	e005      	b.n	800fa72 <tcp_close_shutdown+0xce>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	60fb      	str	r3, [r7, #12]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1ef      	bne.n	800fa52 <tcp_close_shutdown+0xae>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	60da      	str	r2, [r3, #12]
 800fa78:	4b37      	ldr	r3, [pc, #220]	@ (800fb58 <tcp_close_shutdown+0x1b4>)
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fa7e:	4b37      	ldr	r3, [pc, #220]	@ (800fb5c <tcp_close_shutdown+0x1b8>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d102      	bne.n	800fa8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fa88:	f004 f80a 	bl	8013aa0 <tcp_trigger_input_pcb_close>
 800fa8c:	e002      	b.n	800fa94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7ff fed6 	bl	800f840 <tcp_free>
      }
      return ERR_OK;
 800fa94:	2300      	movs	r3, #0
 800fa96:	e050      	b.n	800fb3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	7d1b      	ldrb	r3, [r3, #20]
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d03b      	beq.n	800fb18 <tcp_close_shutdown+0x174>
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	dc44      	bgt.n	800fb2e <tcp_close_shutdown+0x18a>
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d002      	beq.n	800faae <tcp_close_shutdown+0x10a>
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d02a      	beq.n	800fb02 <tcp_close_shutdown+0x15e>
 800faac:	e03f      	b.n	800fb2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	8adb      	ldrh	r3, [r3, #22]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d021      	beq.n	800fafa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fab6:	4b2a      	ldr	r3, [pc, #168]	@ (800fb60 <tcp_close_shutdown+0x1bc>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	687a      	ldr	r2, [r7, #4]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d105      	bne.n	800facc <tcp_close_shutdown+0x128>
 800fac0:	4b27      	ldr	r3, [pc, #156]	@ (800fb60 <tcp_close_shutdown+0x1bc>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	4a26      	ldr	r2, [pc, #152]	@ (800fb60 <tcp_close_shutdown+0x1bc>)
 800fac8:	6013      	str	r3, [r2, #0]
 800faca:	e013      	b.n	800faf4 <tcp_close_shutdown+0x150>
 800facc:	4b24      	ldr	r3, [pc, #144]	@ (800fb60 <tcp_close_shutdown+0x1bc>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	60bb      	str	r3, [r7, #8]
 800fad2:	e00c      	b.n	800faee <tcp_close_shutdown+0x14a>
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d104      	bne.n	800fae8 <tcp_close_shutdown+0x144>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68da      	ldr	r2, [r3, #12]
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	60da      	str	r2, [r3, #12]
 800fae6:	e005      	b.n	800faf4 <tcp_close_shutdown+0x150>
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	60bb      	str	r3, [r7, #8]
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1ef      	bne.n	800fad4 <tcp_close_shutdown+0x130>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7ff fea0 	bl	800f840 <tcp_free>
      break;
 800fb00:	e01a      	b.n	800fb38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff ff14 	bl	800f930 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	4816      	ldr	r0, [pc, #88]	@ (800fb64 <tcp_close_shutdown+0x1c0>)
 800fb0c:	f001 fb58 	bl	80111c0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff feb1 	bl	800f878 <tcp_free_listen>
      break;
 800fb16:	e00f      	b.n	800fb38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fb18:	6879      	ldr	r1, [r7, #4]
 800fb1a:	480e      	ldr	r0, [pc, #56]	@ (800fb54 <tcp_close_shutdown+0x1b0>)
 800fb1c:	f001 fb50 	bl	80111c0 <tcp_pcb_remove>
 800fb20:	4b0d      	ldr	r3, [pc, #52]	@ (800fb58 <tcp_close_shutdown+0x1b4>)
 800fb22:	2201      	movs	r2, #1
 800fb24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff fe8a 	bl	800f840 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fb2c:	e004      	b.n	800fb38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f81a 	bl	800fb68 <tcp_close_shutdown_fin>
 800fb34:	4603      	mov	r3, r0
 800fb36:	e000      	b.n	800fb3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fb38:	2300      	movs	r3, #0
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bdb0      	pop	{r4, r5, r7, pc}
 800fb42:	bf00      	nop
 800fb44:	0801b3a8 	.word	0x0801b3a8
 800fb48:	0801b47c 	.word	0x0801b47c
 800fb4c:	0801b3ec 	.word	0x0801b3ec
 800fb50:	0801b49c 	.word	0x0801b49c
 800fb54:	2400c3a8 	.word	0x2400c3a8
 800fb58:	2400c3b0 	.word	0x2400c3b0
 800fb5c:	2400c3e8 	.word	0x2400c3e8
 800fb60:	2400c3a0 	.word	0x2400c3a0
 800fb64:	2400c3a4 	.word	0x2400c3a4

0800fb68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <tcp_close_shutdown_fin+0x1c>
 800fb76:	4b2e      	ldr	r3, [pc, #184]	@ (800fc30 <tcp_close_shutdown_fin+0xc8>)
 800fb78:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fb7c:	492d      	ldr	r1, [pc, #180]	@ (800fc34 <tcp_close_shutdown_fin+0xcc>)
 800fb7e:	482e      	ldr	r0, [pc, #184]	@ (800fc38 <tcp_close_shutdown_fin+0xd0>)
 800fb80:	f009 fb10 	bl	80191a4 <iprintf>

  switch (pcb->state) {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	7d1b      	ldrb	r3, [r3, #20]
 800fb88:	2b07      	cmp	r3, #7
 800fb8a:	d020      	beq.n	800fbce <tcp_close_shutdown_fin+0x66>
 800fb8c:	2b07      	cmp	r3, #7
 800fb8e:	dc2b      	bgt.n	800fbe8 <tcp_close_shutdown_fin+0x80>
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d002      	beq.n	800fb9a <tcp_close_shutdown_fin+0x32>
 800fb94:	2b04      	cmp	r3, #4
 800fb96:	d00d      	beq.n	800fbb4 <tcp_close_shutdown_fin+0x4c>
 800fb98:	e026      	b.n	800fbe8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f004 fde8 	bl	8014770 <tcp_send_fin>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d11f      	bne.n	800fbec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2205      	movs	r2, #5
 800fbb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fbb2:	e01b      	b.n	800fbec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f004 fddb 	bl	8014770 <tcp_send_fin>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fbbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d114      	bne.n	800fbf0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2205      	movs	r2, #5
 800fbca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fbcc:	e010      	b.n	800fbf0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f004 fdce 	bl	8014770 <tcp_send_fin>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fbd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d109      	bne.n	800fbf4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2209      	movs	r2, #9
 800fbe4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fbe6:	e005      	b.n	800fbf4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e01c      	b.n	800fc26 <tcp_close_shutdown_fin+0xbe>
      break;
 800fbec:	bf00      	nop
 800fbee:	e002      	b.n	800fbf6 <tcp_close_shutdown_fin+0x8e>
      break;
 800fbf0:	bf00      	nop
 800fbf2:	e000      	b.n	800fbf6 <tcp_close_shutdown_fin+0x8e>
      break;
 800fbf4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d103      	bne.n	800fc06 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f004 fef4 	bl	80149ec <tcp_output>
 800fc04:	e00d      	b.n	800fc22 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fc06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc0e:	d108      	bne.n	800fc22 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8b5b      	ldrh	r3, [r3, #26]
 800fc14:	f043 0308 	orr.w	r3, r3, #8
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e001      	b.n	800fc26 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	0801b3a8 	.word	0x0801b3a8
 800fc34:	0801b458 	.word	0x0801b458
 800fc38:	0801b3ec 	.word	0x0801b3ec

0800fc3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d109      	bne.n	800fc5e <tcp_close+0x22>
 800fc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fc88 <tcp_close+0x4c>)
 800fc4c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800fc50:	490e      	ldr	r1, [pc, #56]	@ (800fc8c <tcp_close+0x50>)
 800fc52:	480f      	ldr	r0, [pc, #60]	@ (800fc90 <tcp_close+0x54>)
 800fc54:	f009 faa6 	bl	80191a4 <iprintf>
 800fc58:	f06f 030f 	mvn.w	r3, #15
 800fc5c:	e00f      	b.n	800fc7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7d1b      	ldrb	r3, [r3, #20]
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d006      	beq.n	800fc74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	8b5b      	ldrh	r3, [r3, #26]
 800fc6a:	f043 0310 	orr.w	r3, r3, #16
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fc74:	2101      	movs	r1, #1
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f7ff fe94 	bl	800f9a4 <tcp_close_shutdown>
 800fc7c:	4603      	mov	r3, r0
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	0801b3a8 	.word	0x0801b3a8
 800fc8c:	0801b4b8 	.word	0x0801b4b8
 800fc90:	0801b3ec 	.word	0x0801b3ec

0800fc94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b08e      	sub	sp, #56	@ 0x38
 800fc98:	af04      	add	r7, sp, #16
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d107      	bne.n	800fcb4 <tcp_abandon+0x20>
 800fca4:	4b52      	ldr	r3, [pc, #328]	@ (800fdf0 <tcp_abandon+0x15c>)
 800fca6:	f240 223d 	movw	r2, #573	@ 0x23d
 800fcaa:	4952      	ldr	r1, [pc, #328]	@ (800fdf4 <tcp_abandon+0x160>)
 800fcac:	4852      	ldr	r0, [pc, #328]	@ (800fdf8 <tcp_abandon+0x164>)
 800fcae:	f009 fa79 	bl	80191a4 <iprintf>
 800fcb2:	e099      	b.n	800fde8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7d1b      	ldrb	r3, [r3, #20]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d106      	bne.n	800fcca <tcp_abandon+0x36>
 800fcbc:	4b4c      	ldr	r3, [pc, #304]	@ (800fdf0 <tcp_abandon+0x15c>)
 800fcbe:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800fcc2:	494e      	ldr	r1, [pc, #312]	@ (800fdfc <tcp_abandon+0x168>)
 800fcc4:	484c      	ldr	r0, [pc, #304]	@ (800fdf8 <tcp_abandon+0x164>)
 800fcc6:	f009 fa6d 	bl	80191a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	7d1b      	ldrb	r3, [r3, #20]
 800fcce:	2b0a      	cmp	r3, #10
 800fcd0:	d107      	bne.n	800fce2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	484a      	ldr	r0, [pc, #296]	@ (800fe00 <tcp_abandon+0x16c>)
 800fcd6:	f001 fa73 	bl	80111c0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff fdb0 	bl	800f840 <tcp_free>
 800fce0:	e082      	b.n	800fde8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcfc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7d1b      	ldrb	r3, [r3, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d126      	bne.n	800fd5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	8adb      	ldrh	r3, [r3, #22]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d02e      	beq.n	800fd72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fd14:	4b3b      	ldr	r3, [pc, #236]	@ (800fe04 <tcp_abandon+0x170>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d105      	bne.n	800fd2a <tcp_abandon+0x96>
 800fd1e:	4b39      	ldr	r3, [pc, #228]	@ (800fe04 <tcp_abandon+0x170>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	4a37      	ldr	r2, [pc, #220]	@ (800fe04 <tcp_abandon+0x170>)
 800fd26:	6013      	str	r3, [r2, #0]
 800fd28:	e013      	b.n	800fd52 <tcp_abandon+0xbe>
 800fd2a:	4b36      	ldr	r3, [pc, #216]	@ (800fe04 <tcp_abandon+0x170>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	61fb      	str	r3, [r7, #28]
 800fd30:	e00c      	b.n	800fd4c <tcp_abandon+0xb8>
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d104      	bne.n	800fd46 <tcp_abandon+0xb2>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	68da      	ldr	r2, [r3, #12]
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	60da      	str	r2, [r3, #12]
 800fd44:	e005      	b.n	800fd52 <tcp_abandon+0xbe>
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	61fb      	str	r3, [r7, #28]
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1ef      	bne.n	800fd32 <tcp_abandon+0x9e>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	60da      	str	r2, [r3, #12]
 800fd58:	e00b      	b.n	800fd72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8adb      	ldrh	r3, [r3, #22]
 800fd62:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	4828      	ldr	r0, [pc, #160]	@ (800fe08 <tcp_abandon+0x174>)
 800fd68:	f001 fa2a 	bl	80111c0 <tcp_pcb_remove>
 800fd6c:	4b27      	ldr	r3, [pc, #156]	@ (800fe0c <tcp_abandon+0x178>)
 800fd6e:	2201      	movs	r2, #1
 800fd70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d004      	beq.n	800fd84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f000 fed8 	bl	8010b34 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d004      	beq.n	800fd96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd90:	4618      	mov	r0, r3
 800fd92:	f000 fecf 	bl	8010b34 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d004      	beq.n	800fda8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fda2:	4618      	mov	r0, r3
 800fda4:	f000 fec6 	bl	8010b34 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00e      	beq.n	800fdcc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fdae:	6879      	ldr	r1, [r7, #4]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	8b12      	ldrh	r2, [r2, #24]
 800fdb8:	9202      	str	r2, [sp, #8]
 800fdba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fdbc:	9201      	str	r2, [sp, #4]
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	69b9      	ldr	r1, [r7, #24]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f005 fbe6 	bl	8015598 <tcp_rst>
    }
    last_state = pcb->state;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	7d1b      	ldrb	r3, [r3, #20]
 800fdd0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff fd34 	bl	800f840 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d004      	beq.n	800fde8 <tcp_abandon+0x154>
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	f06f 010c 	mvn.w	r1, #12
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	4798      	blx	r3
  }
}
 800fde8:	3728      	adds	r7, #40	@ 0x28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	0801b3a8 	.word	0x0801b3a8
 800fdf4:	0801b4ec 	.word	0x0801b4ec
 800fdf8:	0801b3ec 	.word	0x0801b3ec
 800fdfc:	0801b508 	.word	0x0801b508
 800fe00:	2400c3ac 	.word	0x2400c3ac
 800fe04:	2400c3a0 	.word	0x2400c3a0
 800fe08:	2400c3a8 	.word	0x2400c3a8
 800fe0c:	2400c3b0 	.word	0x2400c3b0

0800fe10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fe18:	2101      	movs	r1, #1
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff ff3a 	bl	800fc94 <tcp_abandon>
}
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b088      	sub	sp, #32
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	60b9      	str	r1, [r7, #8]
 800fe32:	4613      	mov	r3, r2
 800fe34:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800fe36:	2304      	movs	r3, #4
 800fe38:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d101      	bne.n	800fe44 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800fe40:	4b3e      	ldr	r3, [pc, #248]	@ (800ff3c <tcp_bind+0x114>)
 800fe42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <tcp_bind+0x36>
 800fe4a:	4b3d      	ldr	r3, [pc, #244]	@ (800ff40 <tcp_bind+0x118>)
 800fe4c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800fe50:	493c      	ldr	r1, [pc, #240]	@ (800ff44 <tcp_bind+0x11c>)
 800fe52:	483d      	ldr	r0, [pc, #244]	@ (800ff48 <tcp_bind+0x120>)
 800fe54:	f009 f9a6 	bl	80191a4 <iprintf>
 800fe58:	f06f 030f 	mvn.w	r3, #15
 800fe5c:	e06a      	b.n	800ff34 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	7d1b      	ldrb	r3, [r3, #20]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d009      	beq.n	800fe7a <tcp_bind+0x52>
 800fe66:	4b36      	ldr	r3, [pc, #216]	@ (800ff40 <tcp_bind+0x118>)
 800fe68:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fe6c:	4937      	ldr	r1, [pc, #220]	@ (800ff4c <tcp_bind+0x124>)
 800fe6e:	4836      	ldr	r0, [pc, #216]	@ (800ff48 <tcp_bind+0x120>)
 800fe70:	f009 f998 	bl	80191a4 <iprintf>
 800fe74:	f06f 0305 	mvn.w	r3, #5
 800fe78:	e05c      	b.n	800ff34 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800fe7a:	88fb      	ldrh	r3, [r7, #6]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d109      	bne.n	800fe94 <tcp_bind+0x6c>
    port = tcp_new_port();
 800fe80:	f000 f9f0 	bl	8010264 <tcp_new_port>
 800fe84:	4603      	mov	r3, r0
 800fe86:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fe88:	88fb      	ldrh	r3, [r7, #6]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d135      	bne.n	800fefa <tcp_bind+0xd2>
      return ERR_BUF;
 800fe8e:	f06f 0301 	mvn.w	r3, #1
 800fe92:	e04f      	b.n	800ff34 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800fe94:	2300      	movs	r3, #0
 800fe96:	61fb      	str	r3, [r7, #28]
 800fe98:	e02b      	b.n	800fef2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fe9a:	4a2d      	ldr	r2, [pc, #180]	@ (800ff50 <tcp_bind+0x128>)
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	61bb      	str	r3, [r7, #24]
 800fea6:	e01e      	b.n	800fee6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	8adb      	ldrh	r3, [r3, #22]
 800feac:	88fa      	ldrh	r2, [r7, #6]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d116      	bne.n	800fee0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800feb2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d010      	beq.n	800feda <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00c      	beq.n	800feda <tcp_bind+0xb2>
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d009      	beq.n	800feda <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d005      	beq.n	800feda <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d102      	bne.n	800fee0 <tcp_bind+0xb8>
              return ERR_USE;
 800feda:	f06f 0307 	mvn.w	r3, #7
 800fede:	e029      	b.n	800ff34 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	61bb      	str	r3, [r7, #24]
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1dd      	bne.n	800fea8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	3301      	adds	r3, #1
 800fef0:	61fb      	str	r3, [r7, #28]
 800fef2:	69fa      	ldr	r2, [r7, #28]
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	dbcf      	blt.n	800fe9a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00c      	beq.n	800ff1a <tcp_bind+0xf2>
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d008      	beq.n	800ff1a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d002      	beq.n	800ff14 <tcp_bind+0xec>
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	e000      	b.n	800ff16 <tcp_bind+0xee>
 800ff14:	2300      	movs	r3, #0
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	88fa      	ldrh	r2, [r7, #6]
 800ff1e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ff20:	4b0c      	ldr	r3, [pc, #48]	@ (800ff54 <tcp_bind+0x12c>)
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	60da      	str	r2, [r3, #12]
 800ff28:	4a0a      	ldr	r2, [pc, #40]	@ (800ff54 <tcp_bind+0x12c>)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6013      	str	r3, [r2, #0]
 800ff2e:	f005 fcf5 	bl	801591c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ff32:	2300      	movs	r3, #0
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3720      	adds	r7, #32
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	0801e2ac 	.word	0x0801e2ac
 800ff40:	0801b3a8 	.word	0x0801b3a8
 800ff44:	0801b53c 	.word	0x0801b53c
 800ff48:	0801b3ec 	.word	0x0801b3ec
 800ff4c:	0801b554 	.word	0x0801b554
 800ff50:	0801e284 	.word	0x0801e284
 800ff54:	2400c3a0 	.word	0x2400c3a0

0800ff58 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	4613      	mov	r3, r2
 800ff64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d106      	bne.n	800ff7a <tcp_accept_null+0x22>
 800ff6c:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <tcp_accept_null+0x34>)
 800ff6e:	f240 320f 	movw	r2, #783	@ 0x30f
 800ff72:	4907      	ldr	r1, [pc, #28]	@ (800ff90 <tcp_accept_null+0x38>)
 800ff74:	4807      	ldr	r0, [pc, #28]	@ (800ff94 <tcp_accept_null+0x3c>)
 800ff76:	f009 f915 	bl	80191a4 <iprintf>

  tcp_abort(pcb);
 800ff7a:	68b8      	ldr	r0, [r7, #8]
 800ff7c:	f7ff ff48 	bl	800fe10 <tcp_abort>

  return ERR_ABRT;
 800ff80:	f06f 030c 	mvn.w	r3, #12
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	0801b3a8 	.word	0x0801b3a8
 800ff90:	0801b57c 	.word	0x0801b57c
 800ff94:	0801b3ec 	.word	0x0801b3ec

0800ff98 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ffa4:	78fb      	ldrb	r3, [r7, #3]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 f806 	bl	800ffbc <tcp_listen_with_backlog_and_err>
 800ffb0:	4603      	mov	r3, r0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
	...

0800ffbc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b088      	sub	sp, #32
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d109      	bne.n	800ffe8 <tcp_listen_with_backlog_and_err+0x2c>
 800ffd4:	4b47      	ldr	r3, [pc, #284]	@ (80100f4 <tcp_listen_with_backlog_and_err+0x138>)
 800ffd6:	f240 3259 	movw	r2, #857	@ 0x359
 800ffda:	4947      	ldr	r1, [pc, #284]	@ (80100f8 <tcp_listen_with_backlog_and_err+0x13c>)
 800ffdc:	4847      	ldr	r0, [pc, #284]	@ (80100fc <tcp_listen_with_backlog_and_err+0x140>)
 800ffde:	f009 f8e1 	bl	80191a4 <iprintf>
 800ffe2:	23f0      	movs	r3, #240	@ 0xf0
 800ffe4:	76fb      	strb	r3, [r7, #27]
 800ffe6:	e079      	b.n	80100dc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	7d1b      	ldrb	r3, [r3, #20]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d009      	beq.n	8010004 <tcp_listen_with_backlog_and_err+0x48>
 800fff0:	4b40      	ldr	r3, [pc, #256]	@ (80100f4 <tcp_listen_with_backlog_and_err+0x138>)
 800fff2:	f240 325a 	movw	r2, #858	@ 0x35a
 800fff6:	4942      	ldr	r1, [pc, #264]	@ (8010100 <tcp_listen_with_backlog_and_err+0x144>)
 800fff8:	4840      	ldr	r0, [pc, #256]	@ (80100fc <tcp_listen_with_backlog_and_err+0x140>)
 800fffa:	f009 f8d3 	bl	80191a4 <iprintf>
 800fffe:	23f1      	movs	r3, #241	@ 0xf1
 8010000:	76fb      	strb	r3, [r7, #27]
 8010002:	e06b      	b.n	80100dc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	7d1b      	ldrb	r3, [r3, #20]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d104      	bne.n	8010016 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8010010:	23f7      	movs	r3, #247	@ 0xf7
 8010012:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010014:	e062      	b.n	80100dc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010016:	2002      	movs	r0, #2
 8010018:	f7fe f9dc 	bl	800e3d4 <memp_malloc>
 801001c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d102      	bne.n	801002a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010024:	23ff      	movs	r3, #255	@ 0xff
 8010026:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010028:	e058      	b.n	80100dc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	691a      	ldr	r2, [r3, #16]
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	8ada      	ldrh	r2, [r3, #22]
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	2201      	movs	r2, #1
 801003e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	7d5a      	ldrb	r2, [r3, #21]
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	7a5a      	ldrb	r2, [r3, #9]
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	2200      	movs	r2, #0
 8010054:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	7ada      	ldrb	r2, [r3, #11]
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	7a9a      	ldrb	r2, [r3, #10]
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	8adb      	ldrh	r3, [r3, #22]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d021      	beq.n	80100ba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010076:	4b23      	ldr	r3, [pc, #140]	@ (8010104 <tcp_listen_with_backlog_and_err+0x148>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	429a      	cmp	r2, r3
 801007e:	d105      	bne.n	801008c <tcp_listen_with_backlog_and_err+0xd0>
 8010080:	4b20      	ldr	r3, [pc, #128]	@ (8010104 <tcp_listen_with_backlog_and_err+0x148>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	4a1f      	ldr	r2, [pc, #124]	@ (8010104 <tcp_listen_with_backlog_and_err+0x148>)
 8010088:	6013      	str	r3, [r2, #0]
 801008a:	e013      	b.n	80100b4 <tcp_listen_with_backlog_and_err+0xf8>
 801008c:	4b1d      	ldr	r3, [pc, #116]	@ (8010104 <tcp_listen_with_backlog_and_err+0x148>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	617b      	str	r3, [r7, #20]
 8010092:	e00c      	b.n	80100ae <tcp_listen_with_backlog_and_err+0xf2>
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	429a      	cmp	r2, r3
 801009c:	d104      	bne.n	80100a8 <tcp_listen_with_backlog_and_err+0xec>
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	68da      	ldr	r2, [r3, #12]
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	60da      	str	r2, [r3, #12]
 80100a6:	e005      	b.n	80100b4 <tcp_listen_with_backlog_and_err+0xf8>
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	617b      	str	r3, [r7, #20]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1ef      	bne.n	8010094 <tcp_listen_with_backlog_and_err+0xd8>
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2200      	movs	r2, #0
 80100b8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7ff fbc0 	bl	800f840 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	4a11      	ldr	r2, [pc, #68]	@ (8010108 <tcp_listen_with_backlog_and_err+0x14c>)
 80100c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80100c6:	4b11      	ldr	r3, [pc, #68]	@ (801010c <tcp_listen_with_backlog_and_err+0x150>)
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	60da      	str	r2, [r3, #12]
 80100ce:	4a0f      	ldr	r2, [pc, #60]	@ (801010c <tcp_listen_with_backlog_and_err+0x150>)
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	f005 fc22 	bl	801591c <tcp_timer_needed>
  res = ERR_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d002      	beq.n	80100e8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	7efa      	ldrb	r2, [r7, #27]
 80100e6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80100e8:	69fb      	ldr	r3, [r7, #28]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3720      	adds	r7, #32
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	0801b3a8 	.word	0x0801b3a8
 80100f8:	0801b59c 	.word	0x0801b59c
 80100fc:	0801b3ec 	.word	0x0801b3ec
 8010100:	0801b5cc 	.word	0x0801b5cc
 8010104:	2400c3a0 	.word	0x2400c3a0
 8010108:	0800ff59 	.word	0x0800ff59
 801010c:	2400c3a4 	.word	0x2400c3a4

08010110 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d106      	bne.n	801012c <tcp_update_rcv_ann_wnd+0x1c>
 801011e:	4b25      	ldr	r3, [pc, #148]	@ (80101b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8010120:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010124:	4924      	ldr	r1, [pc, #144]	@ (80101b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8010126:	4825      	ldr	r0, [pc, #148]	@ (80101bc <tcp_update_rcv_ann_wnd+0xac>)
 8010128:	f009 f83c 	bl	80191a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010134:	4413      	add	r3, r2
 8010136:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8010140:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8010144:	bf28      	it	cs
 8010146:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801014a:	b292      	uxth	r2, r2
 801014c:	4413      	add	r3, r2
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	2b00      	cmp	r3, #0
 8010154:	db08      	blt.n	8010168 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	e020      	b.n	80101aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	dd03      	ble.n	801017e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801017c:	e014      	b.n	80101a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010186:	1ad3      	subs	r3, r2, r3
 8010188:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010190:	d306      	bcc.n	80101a0 <tcp_update_rcv_ann_wnd+0x90>
 8010192:	4b08      	ldr	r3, [pc, #32]	@ (80101b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8010194:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8010198:	4909      	ldr	r1, [pc, #36]	@ (80101c0 <tcp_update_rcv_ann_wnd+0xb0>)
 801019a:	4808      	ldr	r0, [pc, #32]	@ (80101bc <tcp_update_rcv_ann_wnd+0xac>)
 801019c:	f009 f802 	bl	80191a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80101a8:	2300      	movs	r3, #0
  }
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	0801b3a8 	.word	0x0801b3a8
 80101b8:	0801b604 	.word	0x0801b604
 80101bc:	0801b3ec 	.word	0x0801b3ec
 80101c0:	0801b628 	.word	0x0801b628

080101c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	460b      	mov	r3, r1
 80101ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d107      	bne.n	80101e6 <tcp_recved+0x22>
 80101d6:	4b1f      	ldr	r3, [pc, #124]	@ (8010254 <tcp_recved+0x90>)
 80101d8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80101dc:	491e      	ldr	r1, [pc, #120]	@ (8010258 <tcp_recved+0x94>)
 80101de:	481f      	ldr	r0, [pc, #124]	@ (801025c <tcp_recved+0x98>)
 80101e0:	f008 ffe0 	bl	80191a4 <iprintf>
 80101e4:	e032      	b.n	801024c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	7d1b      	ldrb	r3, [r3, #20]
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d106      	bne.n	80101fc <tcp_recved+0x38>
 80101ee:	4b19      	ldr	r3, [pc, #100]	@ (8010254 <tcp_recved+0x90>)
 80101f0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80101f4:	491a      	ldr	r1, [pc, #104]	@ (8010260 <tcp_recved+0x9c>)
 80101f6:	4819      	ldr	r0, [pc, #100]	@ (801025c <tcp_recved+0x98>)
 80101f8:	f008 ffd4 	bl	80191a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010200:	887b      	ldrh	r3, [r7, #2]
 8010202:	4413      	add	r3, r2
 8010204:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010206:	89fb      	ldrh	r3, [r7, #14]
 8010208:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801020c:	d804      	bhi.n	8010218 <tcp_recved+0x54>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010212:	89fa      	ldrh	r2, [r7, #14]
 8010214:	429a      	cmp	r2, r3
 8010216:	d204      	bcs.n	8010222 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801021e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010220:	e002      	b.n	8010228 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	89fa      	ldrh	r2, [r7, #14]
 8010226:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff ff71 	bl	8010110 <tcp_update_rcv_ann_wnd>
 801022e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010236:	d309      	bcc.n	801024c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	8b5b      	ldrh	r3, [r3, #26]
 801023c:	f043 0302 	orr.w	r3, r3, #2
 8010240:	b29a      	uxth	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f004 fbd0 	bl	80149ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	0801b3a8 	.word	0x0801b3a8
 8010258:	0801b644 	.word	0x0801b644
 801025c:	0801b3ec 	.word	0x0801b3ec
 8010260:	0801b65c 	.word	0x0801b65c

08010264 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801026e:	4b1e      	ldr	r3, [pc, #120]	@ (80102e8 <tcp_new_port+0x84>)
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	3301      	adds	r3, #1
 8010274:	b29a      	uxth	r2, r3
 8010276:	4b1c      	ldr	r3, [pc, #112]	@ (80102e8 <tcp_new_port+0x84>)
 8010278:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801027a:	4b1b      	ldr	r3, [pc, #108]	@ (80102e8 <tcp_new_port+0x84>)
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010282:	4293      	cmp	r3, r2
 8010284:	d103      	bne.n	801028e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010286:	4b18      	ldr	r3, [pc, #96]	@ (80102e8 <tcp_new_port+0x84>)
 8010288:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801028c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801028e:	2300      	movs	r3, #0
 8010290:	71fb      	strb	r3, [r7, #7]
 8010292:	e01e      	b.n	80102d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	4a15      	ldr	r2, [pc, #84]	@ (80102ec <tcp_new_port+0x88>)
 8010298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	603b      	str	r3, [r7, #0]
 80102a0:	e011      	b.n	80102c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	8ada      	ldrh	r2, [r3, #22]
 80102a6:	4b10      	ldr	r3, [pc, #64]	@ (80102e8 <tcp_new_port+0x84>)
 80102a8:	881b      	ldrh	r3, [r3, #0]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d108      	bne.n	80102c0 <tcp_new_port+0x5c>
        n++;
 80102ae:	88bb      	ldrh	r3, [r7, #4]
 80102b0:	3301      	adds	r3, #1
 80102b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80102b4:	88bb      	ldrh	r3, [r7, #4]
 80102b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80102ba:	d3d8      	bcc.n	801026e <tcp_new_port+0xa>
          return 0;
 80102bc:	2300      	movs	r3, #0
 80102be:	e00d      	b.n	80102dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	603b      	str	r3, [r7, #0]
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1ea      	bne.n	80102a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	3301      	adds	r3, #1
 80102d0:	71fb      	strb	r3, [r7, #7]
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	2b03      	cmp	r3, #3
 80102d6:	d9dd      	bls.n	8010294 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80102d8:	4b03      	ldr	r3, [pc, #12]	@ (80102e8 <tcp_new_port+0x84>)
 80102da:	881b      	ldrh	r3, [r3, #0]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr
 80102e8:	2400002c 	.word	0x2400002c
 80102ec:	0801e284 	.word	0x0801e284

080102f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80102f0:	b5b0      	push	{r4, r5, r7, lr}
 80102f2:	b090      	sub	sp, #64	@ 0x40
 80102f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80102f6:	2300      	movs	r3, #0
 80102f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80102fc:	4b95      	ldr	r3, [pc, #596]	@ (8010554 <tcp_slowtmr+0x264>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3301      	adds	r3, #1
 8010302:	4a94      	ldr	r2, [pc, #592]	@ (8010554 <tcp_slowtmr+0x264>)
 8010304:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010306:	4b94      	ldr	r3, [pc, #592]	@ (8010558 <tcp_slowtmr+0x268>)
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	b2da      	uxtb	r2, r3
 801030e:	4b92      	ldr	r3, [pc, #584]	@ (8010558 <tcp_slowtmr+0x268>)
 8010310:	701a      	strb	r2, [r3, #0]
 8010312:	e000      	b.n	8010316 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010314:	bf00      	nop
  prev = NULL;
 8010316:	2300      	movs	r3, #0
 8010318:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801031a:	4b90      	ldr	r3, [pc, #576]	@ (801055c <tcp_slowtmr+0x26c>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010320:	e29d      	b.n	801085e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010324:	7d1b      	ldrb	r3, [r3, #20]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d106      	bne.n	8010338 <tcp_slowtmr+0x48>
 801032a:	4b8d      	ldr	r3, [pc, #564]	@ (8010560 <tcp_slowtmr+0x270>)
 801032c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8010330:	498c      	ldr	r1, [pc, #560]	@ (8010564 <tcp_slowtmr+0x274>)
 8010332:	488d      	ldr	r0, [pc, #564]	@ (8010568 <tcp_slowtmr+0x278>)
 8010334:	f008 ff36 	bl	80191a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801033a:	7d1b      	ldrb	r3, [r3, #20]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d106      	bne.n	801034e <tcp_slowtmr+0x5e>
 8010340:	4b87      	ldr	r3, [pc, #540]	@ (8010560 <tcp_slowtmr+0x270>)
 8010342:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010346:	4989      	ldr	r1, [pc, #548]	@ (801056c <tcp_slowtmr+0x27c>)
 8010348:	4887      	ldr	r0, [pc, #540]	@ (8010568 <tcp_slowtmr+0x278>)
 801034a:	f008 ff2b 	bl	80191a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801034e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010350:	7d1b      	ldrb	r3, [r3, #20]
 8010352:	2b0a      	cmp	r3, #10
 8010354:	d106      	bne.n	8010364 <tcp_slowtmr+0x74>
 8010356:	4b82      	ldr	r3, [pc, #520]	@ (8010560 <tcp_slowtmr+0x270>)
 8010358:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801035c:	4984      	ldr	r1, [pc, #528]	@ (8010570 <tcp_slowtmr+0x280>)
 801035e:	4882      	ldr	r0, [pc, #520]	@ (8010568 <tcp_slowtmr+0x278>)
 8010360:	f008 ff20 	bl	80191a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	7f9a      	ldrb	r2, [r3, #30]
 8010368:	4b7b      	ldr	r3, [pc, #492]	@ (8010558 <tcp_slowtmr+0x268>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	429a      	cmp	r2, r3
 801036e:	d105      	bne.n	801037c <tcp_slowtmr+0x8c>
      prev = pcb;
 8010370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010372:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801037a:	e270      	b.n	801085e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801037c:	4b76      	ldr	r3, [pc, #472]	@ (8010558 <tcp_slowtmr+0x268>)
 801037e:	781a      	ldrb	r2, [r3, #0]
 8010380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010382:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010384:	2300      	movs	r3, #0
 8010386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010392:	7d1b      	ldrb	r3, [r3, #20]
 8010394:	2b02      	cmp	r3, #2
 8010396:	d10a      	bne.n	80103ae <tcp_slowtmr+0xbe>
 8010398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801039e:	2b05      	cmp	r3, #5
 80103a0:	d905      	bls.n	80103ae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80103a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103a6:	3301      	adds	r3, #1
 80103a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103ac:	e11e      	b.n	80105ec <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80103ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80103b4:	2b0b      	cmp	r3, #11
 80103b6:	d905      	bls.n	80103c4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80103b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103bc:	3301      	adds	r3, #1
 80103be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103c2:	e113      	b.n	80105ec <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80103c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d075      	beq.n	80104ba <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80103ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d006      	beq.n	80103e4 <tcp_slowtmr+0xf4>
 80103d6:	4b62      	ldr	r3, [pc, #392]	@ (8010560 <tcp_slowtmr+0x270>)
 80103d8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80103dc:	4965      	ldr	r1, [pc, #404]	@ (8010574 <tcp_slowtmr+0x284>)
 80103de:	4862      	ldr	r0, [pc, #392]	@ (8010568 <tcp_slowtmr+0x278>)
 80103e0:	f008 fee0 	bl	80191a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80103e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d106      	bne.n	80103fa <tcp_slowtmr+0x10a>
 80103ec:	4b5c      	ldr	r3, [pc, #368]	@ (8010560 <tcp_slowtmr+0x270>)
 80103ee:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80103f2:	4961      	ldr	r1, [pc, #388]	@ (8010578 <tcp_slowtmr+0x288>)
 80103f4:	485c      	ldr	r0, [pc, #368]	@ (8010568 <tcp_slowtmr+0x278>)
 80103f6:	f008 fed5 	bl	80191a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80103fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103fc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010400:	2b0b      	cmp	r3, #11
 8010402:	d905      	bls.n	8010410 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010408:	3301      	adds	r3, #1
 801040a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801040e:	e0ed      	b.n	80105ec <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010412:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010416:	3b01      	subs	r3, #1
 8010418:	4a58      	ldr	r2, [pc, #352]	@ (801057c <tcp_slowtmr+0x28c>)
 801041a:	5cd3      	ldrb	r3, [r2, r3]
 801041c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801041e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010420:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010424:	7c7a      	ldrb	r2, [r7, #17]
 8010426:	429a      	cmp	r2, r3
 8010428:	d907      	bls.n	801043a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801042a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801042c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010430:	3301      	adds	r3, #1
 8010432:	b2da      	uxtb	r2, r3
 8010434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010436:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801043a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010440:	7c7a      	ldrb	r2, [r7, #17]
 8010442:	429a      	cmp	r2, r3
 8010444:	f200 80d2 	bhi.w	80105ec <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010448:	2301      	movs	r3, #1
 801044a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801044c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801044e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010452:	2b00      	cmp	r3, #0
 8010454:	d108      	bne.n	8010468 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010458:	f005 f992 	bl	8015780 <tcp_zero_window_probe>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d014      	beq.n	801048c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8010462:	2300      	movs	r3, #0
 8010464:	623b      	str	r3, [r7, #32]
 8010466:	e011      	b.n	801048c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801046e:	4619      	mov	r1, r3
 8010470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010472:	f004 f835 	bl	80144e0 <tcp_split_unsent_seg>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d107      	bne.n	801048c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801047c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801047e:	f004 fab5 	bl	80149ec <tcp_output>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d101      	bne.n	801048c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	2b00      	cmp	r3, #0
 8010490:	f000 80ac 	beq.w	80105ec <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010496:	2200      	movs	r2, #0
 8010498:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801049c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801049e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80104a2:	2b06      	cmp	r3, #6
 80104a4:	f200 80a2 	bhi.w	80105ec <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80104a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80104ae:	3301      	adds	r3, #1
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80104b8:	e098      	b.n	80105ec <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80104ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	db0f      	blt.n	80104e4 <tcp_slowtmr+0x1f4>
 80104c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80104ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d008      	beq.n	80104e4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80104d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80104d8:	b29b      	uxth	r3, r3
 80104da:	3301      	adds	r3, #1
 80104dc:	b29b      	uxth	r3, r3
 80104de:	b21a      	sxth	r2, r3
 80104e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80104e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80104ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80104f0:	429a      	cmp	r2, r3
 80104f2:	db7b      	blt.n	80105ec <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80104f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104f6:	f004 fd7f 	bl	8014ff8 <tcp_rexmit_rto_prepare>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d007      	beq.n	8010510 <tcp_slowtmr+0x220>
 8010500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010504:	2b00      	cmp	r3, #0
 8010506:	d171      	bne.n	80105ec <tcp_slowtmr+0x2fc>
 8010508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801050c:	2b00      	cmp	r3, #0
 801050e:	d06d      	beq.n	80105ec <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8010510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010512:	7d1b      	ldrb	r3, [r3, #20]
 8010514:	2b02      	cmp	r3, #2
 8010516:	d03a      	beq.n	801058e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801051e:	2b0c      	cmp	r3, #12
 8010520:	bf28      	it	cs
 8010522:	230c      	movcs	r3, #12
 8010524:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010528:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801052c:	10db      	asrs	r3, r3, #3
 801052e:	b21b      	sxth	r3, r3
 8010530:	461a      	mov	r2, r3
 8010532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010534:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010538:	4413      	add	r3, r2
 801053a:	7efa      	ldrb	r2, [r7, #27]
 801053c:	4910      	ldr	r1, [pc, #64]	@ (8010580 <tcp_slowtmr+0x290>)
 801053e:	5c8a      	ldrb	r2, [r1, r2]
 8010540:	4093      	lsls	r3, r2
 8010542:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801054a:	4293      	cmp	r3, r2
 801054c:	dc1a      	bgt.n	8010584 <tcp_slowtmr+0x294>
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	b21a      	sxth	r2, r3
 8010552:	e019      	b.n	8010588 <tcp_slowtmr+0x298>
 8010554:	2400c39c 	.word	0x2400c39c
 8010558:	2400c3b2 	.word	0x2400c3b2
 801055c:	2400c3a8 	.word	0x2400c3a8
 8010560:	0801b3a8 	.word	0x0801b3a8
 8010564:	0801b6ec 	.word	0x0801b6ec
 8010568:	0801b3ec 	.word	0x0801b3ec
 801056c:	0801b718 	.word	0x0801b718
 8010570:	0801b744 	.word	0x0801b744
 8010574:	0801b774 	.word	0x0801b774
 8010578:	0801b7a8 	.word	0x0801b7a8
 801057c:	0801e27c 	.word	0x0801e27c
 8010580:	0801e26c 	.word	0x0801e26c
 8010584:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801058e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010590:	2200      	movs	r2, #0
 8010592:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801059a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801059c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105a0:	4293      	cmp	r3, r2
 80105a2:	bf28      	it	cs
 80105a4:	4613      	movcs	r3, r2
 80105a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80105a8:	8a7b      	ldrh	r3, [r7, #18]
 80105aa:	085b      	lsrs	r3, r3, #1
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80105b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80105ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105be:	005b      	lsls	r3, r3, #1
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d206      	bcs.n	80105d4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80105c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80105d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80105d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80105de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e0:	2200      	movs	r2, #0
 80105e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80105e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105e8:	f004 fd76 	bl	80150d8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80105ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ee:	7d1b      	ldrb	r3, [r3, #20]
 80105f0:	2b06      	cmp	r3, #6
 80105f2:	d111      	bne.n	8010618 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80105f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f6:	8b5b      	ldrh	r3, [r3, #26]
 80105f8:	f003 0310 	and.w	r3, r3, #16
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010600:	4b9c      	ldr	r3, [pc, #624]	@ (8010874 <tcp_slowtmr+0x584>)
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010606:	6a1b      	ldr	r3, [r3, #32]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	2b28      	cmp	r3, #40	@ 0x28
 801060c:	d904      	bls.n	8010618 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801060e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010612:	3301      	adds	r3, #1
 8010614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061a:	7a5b      	ldrb	r3, [r3, #9]
 801061c:	f003 0308 	and.w	r3, r3, #8
 8010620:	2b00      	cmp	r3, #0
 8010622:	d04a      	beq.n	80106ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010626:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010628:	2b04      	cmp	r3, #4
 801062a:	d003      	beq.n	8010634 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801062c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801062e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010630:	2b07      	cmp	r3, #7
 8010632:	d142      	bne.n	80106ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010634:	4b8f      	ldr	r3, [pc, #572]	@ (8010874 <tcp_slowtmr+0x584>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063a:	6a1b      	ldr	r3, [r3, #32]
 801063c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010640:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010644:	4b8c      	ldr	r3, [pc, #560]	@ (8010878 <tcp_slowtmr+0x588>)
 8010646:	440b      	add	r3, r1
 8010648:	498c      	ldr	r1, [pc, #560]	@ (801087c <tcp_slowtmr+0x58c>)
 801064a:	fba1 1303 	umull	r1, r3, r1, r3
 801064e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010650:	429a      	cmp	r2, r3
 8010652:	d90a      	bls.n	801066a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010658:	3301      	adds	r3, #1
 801065a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801065e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010662:	3301      	adds	r3, #1
 8010664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010668:	e027      	b.n	80106ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801066a:	4b82      	ldr	r3, [pc, #520]	@ (8010874 <tcp_slowtmr+0x584>)
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010670:	6a1b      	ldr	r3, [r3, #32]
 8010672:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010676:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801067a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801067c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010680:	4618      	mov	r0, r3
 8010682:	4b7f      	ldr	r3, [pc, #508]	@ (8010880 <tcp_slowtmr+0x590>)
 8010684:	fb00 f303 	mul.w	r3, r0, r3
 8010688:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801068a:	497c      	ldr	r1, [pc, #496]	@ (801087c <tcp_slowtmr+0x58c>)
 801068c:	fba1 1303 	umull	r1, r3, r1, r3
 8010690:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010692:	429a      	cmp	r2, r3
 8010694:	d911      	bls.n	80106ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010696:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010698:	f005 f832 	bl	8015700 <tcp_keepalive>
 801069c:	4603      	mov	r3, r0
 801069e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80106a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d107      	bne.n	80106ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80106aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80106b0:	3301      	adds	r3, #1
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80106ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d011      	beq.n	80106e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80106c2:	4b6c      	ldr	r3, [pc, #432]	@ (8010874 <tcp_slowtmr+0x584>)
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	1ad2      	subs	r2, r2, r3
 80106cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80106d2:	4619      	mov	r1, r3
 80106d4:	460b      	mov	r3, r1
 80106d6:	005b      	lsls	r3, r3, #1
 80106d8:	440b      	add	r3, r1
 80106da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80106dc:	429a      	cmp	r2, r3
 80106de:	d302      	bcc.n	80106e6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80106e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106e2:	f000 fed1 	bl	8011488 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80106e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e8:	7d1b      	ldrb	r3, [r3, #20]
 80106ea:	2b03      	cmp	r3, #3
 80106ec:	d10b      	bne.n	8010706 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106ee:	4b61      	ldr	r3, [pc, #388]	@ (8010874 <tcp_slowtmr+0x584>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f4:	6a1b      	ldr	r3, [r3, #32]
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	2b28      	cmp	r3, #40	@ 0x28
 80106fa:	d904      	bls.n	8010706 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80106fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010700:	3301      	adds	r3, #1
 8010702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010708:	7d1b      	ldrb	r3, [r3, #20]
 801070a:	2b09      	cmp	r3, #9
 801070c:	d10b      	bne.n	8010726 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801070e:	4b59      	ldr	r3, [pc, #356]	@ (8010874 <tcp_slowtmr+0x584>)
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010714:	6a1b      	ldr	r3, [r3, #32]
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	2bf0      	cmp	r3, #240	@ 0xf0
 801071a:	d904      	bls.n	8010726 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801071c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010720:	3301      	adds	r3, #1
 8010722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801072a:	2b00      	cmp	r3, #0
 801072c:	d060      	beq.n	80107f0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801072e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010734:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010738:	f000 fcf2 	bl	8011120 <tcp_pcb_purge>
      if (prev != NULL) {
 801073c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073e:	2b00      	cmp	r3, #0
 8010740:	d010      	beq.n	8010764 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010742:	4b50      	ldr	r3, [pc, #320]	@ (8010884 <tcp_slowtmr+0x594>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010748:	429a      	cmp	r2, r3
 801074a:	d106      	bne.n	801075a <tcp_slowtmr+0x46a>
 801074c:	4b4e      	ldr	r3, [pc, #312]	@ (8010888 <tcp_slowtmr+0x598>)
 801074e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010752:	494e      	ldr	r1, [pc, #312]	@ (801088c <tcp_slowtmr+0x59c>)
 8010754:	484e      	ldr	r0, [pc, #312]	@ (8010890 <tcp_slowtmr+0x5a0>)
 8010756:	f008 fd25 	bl	80191a4 <iprintf>
        prev->next = pcb->next;
 801075a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075c:	68da      	ldr	r2, [r3, #12]
 801075e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010760:	60da      	str	r2, [r3, #12]
 8010762:	e00f      	b.n	8010784 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010764:	4b47      	ldr	r3, [pc, #284]	@ (8010884 <tcp_slowtmr+0x594>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801076a:	429a      	cmp	r2, r3
 801076c:	d006      	beq.n	801077c <tcp_slowtmr+0x48c>
 801076e:	4b46      	ldr	r3, [pc, #280]	@ (8010888 <tcp_slowtmr+0x598>)
 8010770:	f240 5271 	movw	r2, #1393	@ 0x571
 8010774:	4947      	ldr	r1, [pc, #284]	@ (8010894 <tcp_slowtmr+0x5a4>)
 8010776:	4846      	ldr	r0, [pc, #280]	@ (8010890 <tcp_slowtmr+0x5a0>)
 8010778:	f008 fd14 	bl	80191a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	4a40      	ldr	r2, [pc, #256]	@ (8010884 <tcp_slowtmr+0x594>)
 8010782:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010788:	2b00      	cmp	r3, #0
 801078a:	d013      	beq.n	80107b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801078c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010792:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010794:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010798:	3304      	adds	r3, #4
 801079a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801079c:	8ad2      	ldrh	r2, [r2, #22]
 801079e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107a0:	8b09      	ldrh	r1, [r1, #24]
 80107a2:	9102      	str	r1, [sp, #8]
 80107a4:	9201      	str	r2, [sp, #4]
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	462b      	mov	r3, r5
 80107aa:	4622      	mov	r2, r4
 80107ac:	4601      	mov	r1, r0
 80107ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107b0:	f004 fef2 	bl	8015598 <tcp_rst>
      err_arg = pcb->callback_arg;
 80107b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b6:	691b      	ldr	r3, [r3, #16]
 80107b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80107ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107bc:	7d1b      	ldrb	r3, [r3, #20]
 80107be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80107c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80107ca:	6838      	ldr	r0, [r7, #0]
 80107cc:	f7ff f838 	bl	800f840 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80107d0:	4b31      	ldr	r3, [pc, #196]	@ (8010898 <tcp_slowtmr+0x5a8>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d004      	beq.n	80107e6 <tcp_slowtmr+0x4f6>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f06f 010c 	mvn.w	r1, #12
 80107e2:	68b8      	ldr	r0, [r7, #8]
 80107e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80107e6:	4b2c      	ldr	r3, [pc, #176]	@ (8010898 <tcp_slowtmr+0x5a8>)
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d037      	beq.n	801085e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80107ee:	e592      	b.n	8010316 <tcp_slowtmr+0x26>
      prev = pcb;
 80107f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80107f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80107fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fc:	7f1b      	ldrb	r3, [r3, #28]
 80107fe:	3301      	adds	r3, #1
 8010800:	b2da      	uxtb	r2, r3
 8010802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010804:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010808:	7f1a      	ldrb	r2, [r3, #28]
 801080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080c:	7f5b      	ldrb	r3, [r3, #29]
 801080e:	429a      	cmp	r2, r3
 8010810:	d325      	bcc.n	801085e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010814:	2200      	movs	r2, #0
 8010816:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010818:	4b1f      	ldr	r3, [pc, #124]	@ (8010898 <tcp_slowtmr+0x5a8>)
 801081a:	2200      	movs	r2, #0
 801081c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010824:	2b00      	cmp	r3, #0
 8010826:	d00b      	beq.n	8010840 <tcp_slowtmr+0x550>
 8010828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801082e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010830:	6912      	ldr	r2, [r2, #16]
 8010832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010834:	4610      	mov	r0, r2
 8010836:	4798      	blx	r3
 8010838:	4603      	mov	r3, r0
 801083a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801083e:	e002      	b.n	8010846 <tcp_slowtmr+0x556>
 8010840:	2300      	movs	r3, #0
 8010842:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010846:	4b14      	ldr	r3, [pc, #80]	@ (8010898 <tcp_slowtmr+0x5a8>)
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	f47f ad62 	bne.w	8010314 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010850:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010854:	2b00      	cmp	r3, #0
 8010856:	d102      	bne.n	801085e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801085a:	f004 f8c7 	bl	80149ec <tcp_output>
  while (pcb != NULL) {
 801085e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010860:	2b00      	cmp	r3, #0
 8010862:	f47f ad5e 	bne.w	8010322 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010866:	2300      	movs	r3, #0
 8010868:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801086a:	4b0c      	ldr	r3, [pc, #48]	@ (801089c <tcp_slowtmr+0x5ac>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010870:	e069      	b.n	8010946 <tcp_slowtmr+0x656>
 8010872:	bf00      	nop
 8010874:	2400c39c 	.word	0x2400c39c
 8010878:	000a4cb8 	.word	0x000a4cb8
 801087c:	10624dd3 	.word	0x10624dd3
 8010880:	000124f8 	.word	0x000124f8
 8010884:	2400c3a8 	.word	0x2400c3a8
 8010888:	0801b3a8 	.word	0x0801b3a8
 801088c:	0801b7e0 	.word	0x0801b7e0
 8010890:	0801b3ec 	.word	0x0801b3ec
 8010894:	0801b80c 	.word	0x0801b80c
 8010898:	2400c3b0 	.word	0x2400c3b0
 801089c:	2400c3ac 	.word	0x2400c3ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	7d1b      	ldrb	r3, [r3, #20]
 80108a4:	2b0a      	cmp	r3, #10
 80108a6:	d006      	beq.n	80108b6 <tcp_slowtmr+0x5c6>
 80108a8:	4b2b      	ldr	r3, [pc, #172]	@ (8010958 <tcp_slowtmr+0x668>)
 80108aa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80108ae:	492b      	ldr	r1, [pc, #172]	@ (801095c <tcp_slowtmr+0x66c>)
 80108b0:	482b      	ldr	r0, [pc, #172]	@ (8010960 <tcp_slowtmr+0x670>)
 80108b2:	f008 fc77 	bl	80191a4 <iprintf>
    pcb_remove = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80108bc:	4b29      	ldr	r3, [pc, #164]	@ (8010964 <tcp_slowtmr+0x674>)
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c2:	6a1b      	ldr	r3, [r3, #32]
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80108c8:	d904      	bls.n	80108d4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80108ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108ce:	3301      	adds	r3, #1
 80108d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80108d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d02f      	beq.n	801093c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80108dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108de:	f000 fc1f 	bl	8011120 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80108e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d010      	beq.n	801090a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80108e8:	4b1f      	ldr	r3, [pc, #124]	@ (8010968 <tcp_slowtmr+0x678>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d106      	bne.n	8010900 <tcp_slowtmr+0x610>
 80108f2:	4b19      	ldr	r3, [pc, #100]	@ (8010958 <tcp_slowtmr+0x668>)
 80108f4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80108f8:	491c      	ldr	r1, [pc, #112]	@ (801096c <tcp_slowtmr+0x67c>)
 80108fa:	4819      	ldr	r0, [pc, #100]	@ (8010960 <tcp_slowtmr+0x670>)
 80108fc:	f008 fc52 	bl	80191a4 <iprintf>
        prev->next = pcb->next;
 8010900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010902:	68da      	ldr	r2, [r3, #12]
 8010904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010906:	60da      	str	r2, [r3, #12]
 8010908:	e00f      	b.n	801092a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801090a:	4b17      	ldr	r3, [pc, #92]	@ (8010968 <tcp_slowtmr+0x678>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010910:	429a      	cmp	r2, r3
 8010912:	d006      	beq.n	8010922 <tcp_slowtmr+0x632>
 8010914:	4b10      	ldr	r3, [pc, #64]	@ (8010958 <tcp_slowtmr+0x668>)
 8010916:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801091a:	4915      	ldr	r1, [pc, #84]	@ (8010970 <tcp_slowtmr+0x680>)
 801091c:	4810      	ldr	r0, [pc, #64]	@ (8010960 <tcp_slowtmr+0x670>)
 801091e:	f008 fc41 	bl	80191a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	4a10      	ldr	r2, [pc, #64]	@ (8010968 <tcp_slowtmr+0x678>)
 8010928:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801092a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010934:	69f8      	ldr	r0, [r7, #28]
 8010936:	f7fe ff83 	bl	800f840 <tcp_free>
 801093a:	e004      	b.n	8010946 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801093c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801093e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1a9      	bne.n	80108a0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801094c:	bf00      	nop
 801094e:	bf00      	nop
 8010950:	3730      	adds	r7, #48	@ 0x30
 8010952:	46bd      	mov	sp, r7
 8010954:	bdb0      	pop	{r4, r5, r7, pc}
 8010956:	bf00      	nop
 8010958:	0801b3a8 	.word	0x0801b3a8
 801095c:	0801b838 	.word	0x0801b838
 8010960:	0801b3ec 	.word	0x0801b3ec
 8010964:	2400c39c 	.word	0x2400c39c
 8010968:	2400c3ac 	.word	0x2400c3ac
 801096c:	0801b868 	.word	0x0801b868
 8010970:	0801b890 	.word	0x0801b890

08010974 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801097a:	4b2d      	ldr	r3, [pc, #180]	@ (8010a30 <tcp_fasttmr+0xbc>)
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	3301      	adds	r3, #1
 8010980:	b2da      	uxtb	r2, r3
 8010982:	4b2b      	ldr	r3, [pc, #172]	@ (8010a30 <tcp_fasttmr+0xbc>)
 8010984:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010986:	4b2b      	ldr	r3, [pc, #172]	@ (8010a34 <tcp_fasttmr+0xc0>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801098c:	e048      	b.n	8010a20 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	7f9a      	ldrb	r2, [r3, #30]
 8010992:	4b27      	ldr	r3, [pc, #156]	@ (8010a30 <tcp_fasttmr+0xbc>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	429a      	cmp	r2, r3
 8010998:	d03f      	beq.n	8010a1a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801099a:	4b25      	ldr	r3, [pc, #148]	@ (8010a30 <tcp_fasttmr+0xbc>)
 801099c:	781a      	ldrb	r2, [r3, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	8b5b      	ldrh	r3, [r3, #26]
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d010      	beq.n	80109d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	8b5b      	ldrh	r3, [r3, #26]
 80109b2:	f043 0302 	orr.w	r3, r3, #2
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f004 f815 	bl	80149ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	8b5b      	ldrh	r3, [r3, #26]
 80109c6:	f023 0303 	bic.w	r3, r3, #3
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	8b5b      	ldrh	r3, [r3, #26]
 80109d4:	f003 0308 	and.w	r3, r3, #8
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d009      	beq.n	80109f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8b5b      	ldrh	r3, [r3, #26]
 80109e0:	f023 0308 	bic.w	r3, r3, #8
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff f8bc 	bl	800fb68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00a      	beq.n	8010a14 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80109fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010a38 <tcp_fasttmr+0xc4>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 f819 	bl	8010a3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a38 <tcp_fasttmr+0xc4>)
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d000      	beq.n	8010a14 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010a12:	e7b8      	b.n	8010986 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	607b      	str	r3, [r7, #4]
 8010a18:	e002      	b.n	8010a20 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d1b3      	bne.n	801098e <tcp_fasttmr+0x1a>
    }
  }
}
 8010a26:	bf00      	nop
 8010a28:	bf00      	nop
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	2400c3b2 	.word	0x2400c3b2
 8010a34:	2400c3a8 	.word	0x2400c3a8
 8010a38:	2400c3b0 	.word	0x2400c3b0

08010a3c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010a3c:	b590      	push	{r4, r7, lr}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d109      	bne.n	8010a5e <tcp_process_refused_data+0x22>
 8010a4a:	4b37      	ldr	r3, [pc, #220]	@ (8010b28 <tcp_process_refused_data+0xec>)
 8010a4c:	f240 6209 	movw	r2, #1545	@ 0x609
 8010a50:	4936      	ldr	r1, [pc, #216]	@ (8010b2c <tcp_process_refused_data+0xf0>)
 8010a52:	4837      	ldr	r0, [pc, #220]	@ (8010b30 <tcp_process_refused_data+0xf4>)
 8010a54:	f008 fba6 	bl	80191a4 <iprintf>
 8010a58:	f06f 030f 	mvn.w	r3, #15
 8010a5c:	e060      	b.n	8010b20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a62:	7b5b      	ldrb	r3, [r3, #13]
 8010a64:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a6a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00b      	beq.n	8010a94 <tcp_process_refused_data+0x58>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6918      	ldr	r0, [r3, #16]
 8010a86:	2300      	movs	r3, #0
 8010a88:	68ba      	ldr	r2, [r7, #8]
 8010a8a:	6879      	ldr	r1, [r7, #4]
 8010a8c:	47a0      	blx	r4
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73fb      	strb	r3, [r7, #15]
 8010a92:	e007      	b.n	8010aa4 <tcp_process_refused_data+0x68>
 8010a94:	2300      	movs	r3, #0
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	6879      	ldr	r1, [r7, #4]
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	f000 f8c2 	bl	8010c24 <tcp_recv_null>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d12a      	bne.n	8010b02 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010aac:	7bbb      	ldrb	r3, [r7, #14]
 8010aae:	f003 0320 	and.w	r3, r3, #32
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d033      	beq.n	8010b1e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010abe:	d005      	beq.n	8010acc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d00b      	beq.n	8010aee <tcp_process_refused_data+0xb2>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6918      	ldr	r0, [r3, #16]
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	6879      	ldr	r1, [r7, #4]
 8010ae6:	47a0      	blx	r4
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]
 8010aec:	e001      	b.n	8010af2 <tcp_process_refused_data+0xb6>
 8010aee:	2300      	movs	r3, #0
 8010af0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010af6:	f113 0f0d 	cmn.w	r3, #13
 8010afa:	d110      	bne.n	8010b1e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010afc:	f06f 030c 	mvn.w	r3, #12
 8010b00:	e00e      	b.n	8010b20 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b06:	f113 0f0d 	cmn.w	r3, #13
 8010b0a:	d102      	bne.n	8010b12 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010b0c:	f06f 030c 	mvn.w	r3, #12
 8010b10:	e006      	b.n	8010b20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010b18:	f06f 0304 	mvn.w	r3, #4
 8010b1c:	e000      	b.n	8010b20 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3714      	adds	r7, #20
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd90      	pop	{r4, r7, pc}
 8010b28:	0801b3a8 	.word	0x0801b3a8
 8010b2c:	0801b8b8 	.word	0x0801b8b8
 8010b30:	0801b3ec 	.word	0x0801b3ec

08010b34 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010b3c:	e007      	b.n	8010b4e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 f80a 	bl	8010b5e <tcp_seg_free>
    seg = next;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1f4      	bne.n	8010b3e <tcp_segs_free+0xa>
  }
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b082      	sub	sp, #8
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00c      	beq.n	8010b86 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d004      	beq.n	8010b7e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fb45 	bl	800f208 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010b7e:	6879      	ldr	r1, [r7, #4]
 8010b80:	2003      	movs	r0, #3
 8010b82:	f7fd fc9d 	bl	800e4c0 <memp_free>
  }
}
 8010b86:	bf00      	nop
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
	...

08010b90 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d107      	bne.n	8010bb2 <tcp_setprio+0x22>
 8010ba2:	4b07      	ldr	r3, [pc, #28]	@ (8010bc0 <tcp_setprio+0x30>)
 8010ba4:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8010ba8:	4906      	ldr	r1, [pc, #24]	@ (8010bc4 <tcp_setprio+0x34>)
 8010baa:	4807      	ldr	r0, [pc, #28]	@ (8010bc8 <tcp_setprio+0x38>)
 8010bac:	f008 fafa 	bl	80191a4 <iprintf>
 8010bb0:	e002      	b.n	8010bb8 <tcp_setprio+0x28>

  pcb->prio = prio;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	78fa      	ldrb	r2, [r7, #3]
 8010bb6:	755a      	strb	r2, [r3, #21]
}
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	0801b3a8 	.word	0x0801b3a8
 8010bc4:	0801b8e0 	.word	0x0801b8e0
 8010bc8:	0801b3ec 	.word	0x0801b3ec

08010bcc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d106      	bne.n	8010be8 <tcp_seg_copy+0x1c>
 8010bda:	4b0f      	ldr	r3, [pc, #60]	@ (8010c18 <tcp_seg_copy+0x4c>)
 8010bdc:	f240 6282 	movw	r2, #1666	@ 0x682
 8010be0:	490e      	ldr	r1, [pc, #56]	@ (8010c1c <tcp_seg_copy+0x50>)
 8010be2:	480f      	ldr	r0, [pc, #60]	@ (8010c20 <tcp_seg_copy+0x54>)
 8010be4:	f008 fade 	bl	80191a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010be8:	2003      	movs	r0, #3
 8010bea:	f7fd fbf3 	bl	800e3d4 <memp_malloc>
 8010bee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <tcp_seg_copy+0x2e>
    return NULL;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e00a      	b.n	8010c10 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010bfa:	2210      	movs	r2, #16
 8010bfc:	6879      	ldr	r1, [r7, #4]
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f008 fd5f 	bl	80196c2 <memcpy>
  pbuf_ref(cseg->p);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fe fba3 	bl	800f354 <pbuf_ref>
  return cseg;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	0801b3a8 	.word	0x0801b3a8
 8010c1c:	0801b8fc 	.word	0x0801b8fc
 8010c20:	0801b3ec 	.word	0x0801b3ec

08010c24 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	60b9      	str	r1, [r7, #8]
 8010c2e:	607a      	str	r2, [r7, #4]
 8010c30:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d109      	bne.n	8010c4c <tcp_recv_null+0x28>
 8010c38:	4b12      	ldr	r3, [pc, #72]	@ (8010c84 <tcp_recv_null+0x60>)
 8010c3a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010c3e:	4912      	ldr	r1, [pc, #72]	@ (8010c88 <tcp_recv_null+0x64>)
 8010c40:	4812      	ldr	r0, [pc, #72]	@ (8010c8c <tcp_recv_null+0x68>)
 8010c42:	f008 faaf 	bl	80191a4 <iprintf>
 8010c46:	f06f 030f 	mvn.w	r3, #15
 8010c4a:	e016      	b.n	8010c7a <tcp_recv_null+0x56>

  if (p != NULL) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d009      	beq.n	8010c66 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	891b      	ldrh	r3, [r3, #8]
 8010c56:	4619      	mov	r1, r3
 8010c58:	68b8      	ldr	r0, [r7, #8]
 8010c5a:	f7ff fab3 	bl	80101c4 <tcp_recved>
    pbuf_free(p);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7fe fad2 	bl	800f208 <pbuf_free>
 8010c64:	e008      	b.n	8010c78 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d104      	bne.n	8010c78 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010c6e:	68b8      	ldr	r0, [r7, #8]
 8010c70:	f7fe ffe4 	bl	800fc3c <tcp_close>
 8010c74:	4603      	mov	r3, r0
 8010c76:	e000      	b.n	8010c7a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	0801b3a8 	.word	0x0801b3a8
 8010c88:	0801b918 	.word	0x0801b918
 8010c8c:	0801b3ec 	.word	0x0801b3ec

08010c90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	4603      	mov	r3, r0
 8010c98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	db01      	blt.n	8010ca6 <tcp_kill_prio+0x16>
 8010ca2:	79fb      	ldrb	r3, [r7, #7]
 8010ca4:	e000      	b.n	8010ca8 <tcp_kill_prio+0x18>
 8010ca6:	237f      	movs	r3, #127	@ 0x7f
 8010ca8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010caa:	7afb      	ldrb	r3, [r7, #11]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d034      	beq.n	8010d1a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010cb0:	7afb      	ldrb	r3, [r7, #11]
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cbe:	4b19      	ldr	r3, [pc, #100]	@ (8010d24 <tcp_kill_prio+0x94>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	617b      	str	r3, [r7, #20]
 8010cc4:	e01f      	b.n	8010d06 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	7d5b      	ldrb	r3, [r3, #21]
 8010cca:	7afa      	ldrb	r2, [r7, #11]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d80c      	bhi.n	8010cea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010cd4:	7afa      	ldrb	r2, [r7, #11]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d112      	bne.n	8010d00 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cda:	4b13      	ldr	r3, [pc, #76]	@ (8010d28 <tcp_kill_prio+0x98>)
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	6a1b      	ldr	r3, [r3, #32]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d80a      	bhi.n	8010d00 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010cea:	4b0f      	ldr	r3, [pc, #60]	@ (8010d28 <tcp_kill_prio+0x98>)
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	7d5b      	ldrb	r3, [r3, #21]
 8010cfe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1dc      	bne.n	8010cc6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d004      	beq.n	8010d1c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010d12:	6938      	ldr	r0, [r7, #16]
 8010d14:	f7ff f87c 	bl	800fe10 <tcp_abort>
 8010d18:	e000      	b.n	8010d1c <tcp_kill_prio+0x8c>
    return;
 8010d1a:	bf00      	nop
  }
}
 8010d1c:	3718      	adds	r7, #24
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	2400c3a8 	.word	0x2400c3a8
 8010d28:	2400c39c 	.word	0x2400c39c

08010d2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b086      	sub	sp, #24
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	4603      	mov	r3, r0
 8010d34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	2b08      	cmp	r3, #8
 8010d3a:	d009      	beq.n	8010d50 <tcp_kill_state+0x24>
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	2b09      	cmp	r3, #9
 8010d40:	d006      	beq.n	8010d50 <tcp_kill_state+0x24>
 8010d42:	4b1a      	ldr	r3, [pc, #104]	@ (8010dac <tcp_kill_state+0x80>)
 8010d44:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010d48:	4919      	ldr	r1, [pc, #100]	@ (8010db0 <tcp_kill_state+0x84>)
 8010d4a:	481a      	ldr	r0, [pc, #104]	@ (8010db4 <tcp_kill_state+0x88>)
 8010d4c:	f008 fa2a 	bl	80191a4 <iprintf>

  inactivity = 0;
 8010d50:	2300      	movs	r3, #0
 8010d52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010d54:	2300      	movs	r3, #0
 8010d56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d58:	4b17      	ldr	r3, [pc, #92]	@ (8010db8 <tcp_kill_state+0x8c>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	617b      	str	r3, [r7, #20]
 8010d5e:	e017      	b.n	8010d90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	7d1b      	ldrb	r3, [r3, #20]
 8010d64:	79fa      	ldrb	r2, [r7, #7]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d10f      	bne.n	8010d8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010d6a:	4b14      	ldr	r3, [pc, #80]	@ (8010dbc <tcp_kill_state+0x90>)
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	1ad3      	subs	r3, r2, r3
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d807      	bhi.n	8010d8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010d7a:	4b10      	ldr	r3, [pc, #64]	@ (8010dbc <tcp_kill_state+0x90>)
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	6a1b      	ldr	r3, [r3, #32]
 8010d82:	1ad3      	subs	r3, r2, r3
 8010d84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	617b      	str	r3, [r7, #20]
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1e4      	bne.n	8010d60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d003      	beq.n	8010da4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	6938      	ldr	r0, [r7, #16]
 8010da0:	f7fe ff78 	bl	800fc94 <tcp_abandon>
  }
}
 8010da4:	bf00      	nop
 8010da6:	3718      	adds	r7, #24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	0801b3a8 	.word	0x0801b3a8
 8010db0:	0801b934 	.word	0x0801b934
 8010db4:	0801b3ec 	.word	0x0801b3ec
 8010db8:	2400c3a8 	.word	0x2400c3a8
 8010dbc:	2400c39c 	.word	0x2400c39c

08010dc0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dce:	4b12      	ldr	r3, [pc, #72]	@ (8010e18 <tcp_kill_timewait+0x58>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	60fb      	str	r3, [r7, #12]
 8010dd4:	e012      	b.n	8010dfc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010dd6:	4b11      	ldr	r3, [pc, #68]	@ (8010e1c <tcp_kill_timewait+0x5c>)
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d807      	bhi.n	8010df6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010de6:	4b0d      	ldr	r3, [pc, #52]	@ (8010e1c <tcp_kill_timewait+0x5c>)
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6a1b      	ldr	r3, [r3, #32]
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	60fb      	str	r3, [r7, #12]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1e9      	bne.n	8010dd6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010e08:	68b8      	ldr	r0, [r7, #8]
 8010e0a:	f7ff f801 	bl	800fe10 <tcp_abort>
  }
}
 8010e0e:	bf00      	nop
 8010e10:	3710      	adds	r7, #16
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	2400c3ac 	.word	0x2400c3ac
 8010e1c:	2400c39c 	.word	0x2400c39c

08010e20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010e26:	4b10      	ldr	r3, [pc, #64]	@ (8010e68 <tcp_handle_closepend+0x48>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010e2c:	e014      	b.n	8010e58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	8b5b      	ldrh	r3, [r3, #26]
 8010e38:	f003 0308 	and.w	r3, r3, #8
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d009      	beq.n	8010e54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	8b5b      	ldrh	r3, [r3, #26]
 8010e44:	f023 0308 	bic.w	r3, r3, #8
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7fe fe8a 	bl	800fb68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1e7      	bne.n	8010e2e <tcp_handle_closepend+0xe>
  }
}
 8010e5e:	bf00      	nop
 8010e60:	bf00      	nop
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	2400c3a8 	.word	0x2400c3a8

08010e6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e76:	2001      	movs	r0, #1
 8010e78:	f7fd faac 	bl	800e3d4 <memp_malloc>
 8010e7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d126      	bne.n	8010ed2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010e84:	f7ff ffcc 	bl	8010e20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010e88:	f7ff ff9a 	bl	8010dc0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e8c:	2001      	movs	r0, #1
 8010e8e:	f7fd faa1 	bl	800e3d4 <memp_malloc>
 8010e92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d11b      	bne.n	8010ed2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010e9a:	2009      	movs	r0, #9
 8010e9c:	f7ff ff46 	bl	8010d2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ea0:	2001      	movs	r0, #1
 8010ea2:	f7fd fa97 	bl	800e3d4 <memp_malloc>
 8010ea6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d111      	bne.n	8010ed2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010eae:	2008      	movs	r0, #8
 8010eb0:	f7ff ff3c 	bl	8010d2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010eb4:	2001      	movs	r0, #1
 8010eb6:	f7fd fa8d 	bl	800e3d4 <memp_malloc>
 8010eba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d107      	bne.n	8010ed2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7ff fee3 	bl	8010c90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010eca:	2001      	movs	r0, #1
 8010ecc:	f7fd fa82 	bl	800e3d4 <memp_malloc>
 8010ed0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d03f      	beq.n	8010f58 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010ed8:	229c      	movs	r2, #156	@ 0x9c
 8010eda:	2100      	movs	r1, #0
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f008 faf3 	bl	80194c8 <memset>
    pcb->prio = prio;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	79fa      	ldrb	r2, [r7, #7]
 8010ee6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010eee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	22ff      	movs	r2, #255	@ 0xff
 8010f06:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010f0e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2206      	movs	r2, #6
 8010f14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2206      	movs	r2, #6
 8010f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f24:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8010f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <tcp_alloc+0xf8>)
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010f36:	4b0c      	ldr	r3, [pc, #48]	@ (8010f68 <tcp_alloc+0xfc>)
 8010f38:	781a      	ldrb	r2, [r3, #0]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010f44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	4a08      	ldr	r2, [pc, #32]	@ (8010f6c <tcp_alloc+0x100>)
 8010f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	4a07      	ldr	r2, [pc, #28]	@ (8010f70 <tcp_alloc+0x104>)
 8010f54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010f58:	68fb      	ldr	r3, [r7, #12]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3710      	adds	r7, #16
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	2400c39c 	.word	0x2400c39c
 8010f68:	2400c3b2 	.word	0x2400c3b2
 8010f6c:	08010c25 	.word	0x08010c25
 8010f70:	006ddd00 	.word	0x006ddd00

08010f74 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8010f78:	2040      	movs	r0, #64	@ 0x40
 8010f7a:	f7ff ff77 	bl	8010e6c <tcp_alloc>
 8010f7e:	4603      	mov	r3, r0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010f8e:	2040      	movs	r0, #64	@ 0x40
 8010f90:	f7ff ff6c 	bl	8010e6c <tcp_alloc>
 8010f94:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010f96:	68fb      	ldr	r3, [r7, #12]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d002      	beq.n	8010fb6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	611a      	str	r2, [r3, #16]
  }
}
 8010fb6:	bf00      	nop
 8010fb8:	370c      	adds	r7, #12
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
	...

08010fc4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00e      	beq.n	8010ff2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	7d1b      	ldrb	r3, [r3, #20]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d106      	bne.n	8010fea <tcp_recv+0x26>
 8010fdc:	4b07      	ldr	r3, [pc, #28]	@ (8010ffc <tcp_recv+0x38>)
 8010fde:	f240 72df 	movw	r2, #2015	@ 0x7df
 8010fe2:	4907      	ldr	r1, [pc, #28]	@ (8011000 <tcp_recv+0x3c>)
 8010fe4:	4807      	ldr	r0, [pc, #28]	@ (8011004 <tcp_recv+0x40>)
 8010fe6:	f008 f8dd 	bl	80191a4 <iprintf>
    pcb->recv = recv;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8010ff2:	bf00      	nop
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	0801b3a8 	.word	0x0801b3a8
 8011000:	0801b944 	.word	0x0801b944
 8011004:	0801b3ec 	.word	0x0801b3ec

08011008 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00e      	beq.n	8011036 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	7d1b      	ldrb	r3, [r3, #20]
 801101c:	2b01      	cmp	r3, #1
 801101e:	d106      	bne.n	801102e <tcp_sent+0x26>
 8011020:	4b07      	ldr	r3, [pc, #28]	@ (8011040 <tcp_sent+0x38>)
 8011022:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8011026:	4907      	ldr	r1, [pc, #28]	@ (8011044 <tcp_sent+0x3c>)
 8011028:	4807      	ldr	r0, [pc, #28]	@ (8011048 <tcp_sent+0x40>)
 801102a:	f008 f8bb 	bl	80191a4 <iprintf>
    pcb->sent = sent;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	683a      	ldr	r2, [r7, #0]
 8011032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8011036:	bf00      	nop
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	0801b3a8 	.word	0x0801b3a8
 8011044:	0801b96c 	.word	0x0801b96c
 8011048:	0801b3ec 	.word	0x0801b3ec

0801104c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00e      	beq.n	801107a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	7d1b      	ldrb	r3, [r3, #20]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d106      	bne.n	8011072 <tcp_err+0x26>
 8011064:	4b07      	ldr	r3, [pc, #28]	@ (8011084 <tcp_err+0x38>)
 8011066:	f640 020d 	movw	r2, #2061	@ 0x80d
 801106a:	4907      	ldr	r1, [pc, #28]	@ (8011088 <tcp_err+0x3c>)
 801106c:	4807      	ldr	r0, [pc, #28]	@ (801108c <tcp_err+0x40>)
 801106e:	f008 f899 	bl	80191a4 <iprintf>
    pcb->errf = err;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	683a      	ldr	r2, [r7, #0]
 8011076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801107a:	bf00      	nop
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	0801b3a8 	.word	0x0801b3a8
 8011088:	0801b994 	.word	0x0801b994
 801108c:	0801b3ec 	.word	0x0801b3ec

08011090 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d008      	beq.n	80110b2 <tcp_accept+0x22>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	7d1b      	ldrb	r3, [r3, #20]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d104      	bne.n	80110b2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	619a      	str	r2, [r3, #24]
  }
}
 80110b2:	bf00      	nop
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
	...

080110c0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	4613      	mov	r3, r2
 80110cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d107      	bne.n	80110e4 <tcp_poll+0x24>
 80110d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011110 <tcp_poll+0x50>)
 80110d6:	f640 023d 	movw	r2, #2109	@ 0x83d
 80110da:	490e      	ldr	r1, [pc, #56]	@ (8011114 <tcp_poll+0x54>)
 80110dc:	480e      	ldr	r0, [pc, #56]	@ (8011118 <tcp_poll+0x58>)
 80110de:	f008 f861 	bl	80191a4 <iprintf>
 80110e2:	e011      	b.n	8011108 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	7d1b      	ldrb	r3, [r3, #20]
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d106      	bne.n	80110fa <tcp_poll+0x3a>
 80110ec:	4b08      	ldr	r3, [pc, #32]	@ (8011110 <tcp_poll+0x50>)
 80110ee:	f640 023e 	movw	r2, #2110	@ 0x83e
 80110f2:	490a      	ldr	r1, [pc, #40]	@ (801111c <tcp_poll+0x5c>)
 80110f4:	4808      	ldr	r0, [pc, #32]	@ (8011118 <tcp_poll+0x58>)
 80110f6:	f008 f855 	bl	80191a4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	68ba      	ldr	r2, [r7, #8]
 80110fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	79fa      	ldrb	r2, [r7, #7]
 8011106:	775a      	strb	r2, [r3, #29]
}
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	0801b3a8 	.word	0x0801b3a8
 8011114:	0801b9bc 	.word	0x0801b9bc
 8011118:	0801b3ec 	.word	0x0801b3ec
 801111c:	0801b9d4 	.word	0x0801b9d4

08011120 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d107      	bne.n	801113e <tcp_pcb_purge+0x1e>
 801112e:	4b21      	ldr	r3, [pc, #132]	@ (80111b4 <tcp_pcb_purge+0x94>)
 8011130:	f640 0251 	movw	r2, #2129	@ 0x851
 8011134:	4920      	ldr	r1, [pc, #128]	@ (80111b8 <tcp_pcb_purge+0x98>)
 8011136:	4821      	ldr	r0, [pc, #132]	@ (80111bc <tcp_pcb_purge+0x9c>)
 8011138:	f008 f834 	bl	80191a4 <iprintf>
 801113c:	e037      	b.n	80111ae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	7d1b      	ldrb	r3, [r3, #20]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d033      	beq.n	80111ae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801114a:	2b0a      	cmp	r3, #10
 801114c:	d02f      	beq.n	80111ae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011152:	2b01      	cmp	r3, #1
 8011154:	d02b      	beq.n	80111ae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801115a:	2b00      	cmp	r3, #0
 801115c:	d007      	beq.n	801116e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011162:	4618      	mov	r0, r3
 8011164:	f7fe f850 	bl	800f208 <pbuf_free>
      pcb->refused_data = NULL;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011172:	2b00      	cmp	r3, #0
 8011174:	d002      	beq.n	801117c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 f986 	bl	8011488 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011182:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011188:	4618      	mov	r0, r3
 801118a:	f7ff fcd3 	bl	8010b34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff fcce 	bl	8010b34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	0801b3a8 	.word	0x0801b3a8
 80111b8:	0801b9f4 	.word	0x0801b9f4
 80111bc:	0801b3ec 	.word	0x0801b3ec

080111c0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d106      	bne.n	80111de <tcp_pcb_remove+0x1e>
 80111d0:	4b3e      	ldr	r3, [pc, #248]	@ (80112cc <tcp_pcb_remove+0x10c>)
 80111d2:	f640 0283 	movw	r2, #2179	@ 0x883
 80111d6:	493e      	ldr	r1, [pc, #248]	@ (80112d0 <tcp_pcb_remove+0x110>)
 80111d8:	483e      	ldr	r0, [pc, #248]	@ (80112d4 <tcp_pcb_remove+0x114>)
 80111da:	f007 ffe3 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d106      	bne.n	80111f2 <tcp_pcb_remove+0x32>
 80111e4:	4b39      	ldr	r3, [pc, #228]	@ (80112cc <tcp_pcb_remove+0x10c>)
 80111e6:	f640 0284 	movw	r2, #2180	@ 0x884
 80111ea:	493b      	ldr	r1, [pc, #236]	@ (80112d8 <tcp_pcb_remove+0x118>)
 80111ec:	4839      	ldr	r0, [pc, #228]	@ (80112d4 <tcp_pcb_remove+0x114>)
 80111ee:	f007 ffd9 	bl	80191a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	683a      	ldr	r2, [r7, #0]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d105      	bne.n	8011208 <tcp_pcb_remove+0x48>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	68da      	ldr	r2, [r3, #12]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	601a      	str	r2, [r3, #0]
 8011206:	e013      	b.n	8011230 <tcp_pcb_remove+0x70>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	60fb      	str	r3, [r7, #12]
 801120e:	e00c      	b.n	801122a <tcp_pcb_remove+0x6a>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	683a      	ldr	r2, [r7, #0]
 8011216:	429a      	cmp	r2, r3
 8011218:	d104      	bne.n	8011224 <tcp_pcb_remove+0x64>
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	68da      	ldr	r2, [r3, #12]
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	60da      	str	r2, [r3, #12]
 8011222:	e005      	b.n	8011230 <tcp_pcb_remove+0x70>
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	60fb      	str	r3, [r7, #12]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d1ef      	bne.n	8011210 <tcp_pcb_remove+0x50>
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	2200      	movs	r2, #0
 8011234:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011236:	6838      	ldr	r0, [r7, #0]
 8011238:	f7ff ff72 	bl	8011120 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	7d1b      	ldrb	r3, [r3, #20]
 8011240:	2b0a      	cmp	r3, #10
 8011242:	d013      	beq.n	801126c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011248:	2b01      	cmp	r3, #1
 801124a:	d00f      	beq.n	801126c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	8b5b      	ldrh	r3, [r3, #26]
 8011250:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011254:	2b00      	cmp	r3, #0
 8011256:	d009      	beq.n	801126c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	8b5b      	ldrh	r3, [r3, #26]
 801125c:	f043 0302 	orr.w	r3, r3, #2
 8011260:	b29a      	uxth	r2, r3
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011266:	6838      	ldr	r0, [r7, #0]
 8011268:	f003 fbc0 	bl	80149ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	7d1b      	ldrb	r3, [r3, #20]
 8011270:	2b01      	cmp	r3, #1
 8011272:	d020      	beq.n	80112b6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011278:	2b00      	cmp	r3, #0
 801127a:	d006      	beq.n	801128a <tcp_pcb_remove+0xca>
 801127c:	4b13      	ldr	r3, [pc, #76]	@ (80112cc <tcp_pcb_remove+0x10c>)
 801127e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011282:	4916      	ldr	r1, [pc, #88]	@ (80112dc <tcp_pcb_remove+0x11c>)
 8011284:	4813      	ldr	r0, [pc, #76]	@ (80112d4 <tcp_pcb_remove+0x114>)
 8011286:	f007 ff8d 	bl	80191a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801128e:	2b00      	cmp	r3, #0
 8011290:	d006      	beq.n	80112a0 <tcp_pcb_remove+0xe0>
 8011292:	4b0e      	ldr	r3, [pc, #56]	@ (80112cc <tcp_pcb_remove+0x10c>)
 8011294:	f640 0294 	movw	r2, #2196	@ 0x894
 8011298:	4911      	ldr	r1, [pc, #68]	@ (80112e0 <tcp_pcb_remove+0x120>)
 801129a:	480e      	ldr	r0, [pc, #56]	@ (80112d4 <tcp_pcb_remove+0x114>)
 801129c:	f007 ff82 	bl	80191a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d006      	beq.n	80112b6 <tcp_pcb_remove+0xf6>
 80112a8:	4b08      	ldr	r3, [pc, #32]	@ (80112cc <tcp_pcb_remove+0x10c>)
 80112aa:	f640 0296 	movw	r2, #2198	@ 0x896
 80112ae:	490d      	ldr	r1, [pc, #52]	@ (80112e4 <tcp_pcb_remove+0x124>)
 80112b0:	4808      	ldr	r0, [pc, #32]	@ (80112d4 <tcp_pcb_remove+0x114>)
 80112b2:	f007 ff77 	bl	80191a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	2200      	movs	r2, #0
 80112ba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2200      	movs	r2, #0
 80112c0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80112c2:	bf00      	nop
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	0801b3a8 	.word	0x0801b3a8
 80112d0:	0801ba10 	.word	0x0801ba10
 80112d4:	0801b3ec 	.word	0x0801b3ec
 80112d8:	0801ba2c 	.word	0x0801ba2c
 80112dc:	0801ba4c 	.word	0x0801ba4c
 80112e0:	0801ba64 	.word	0x0801ba64
 80112e4:	0801ba80 	.word	0x0801ba80

080112e8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d106      	bne.n	8011304 <tcp_next_iss+0x1c>
 80112f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011320 <tcp_next_iss+0x38>)
 80112f8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80112fc:	4909      	ldr	r1, [pc, #36]	@ (8011324 <tcp_next_iss+0x3c>)
 80112fe:	480a      	ldr	r0, [pc, #40]	@ (8011328 <tcp_next_iss+0x40>)
 8011300:	f007 ff50 	bl	80191a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011304:	4b09      	ldr	r3, [pc, #36]	@ (801132c <tcp_next_iss+0x44>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	4b09      	ldr	r3, [pc, #36]	@ (8011330 <tcp_next_iss+0x48>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4413      	add	r3, r2
 801130e:	4a07      	ldr	r2, [pc, #28]	@ (801132c <tcp_next_iss+0x44>)
 8011310:	6013      	str	r3, [r2, #0]
  return iss;
 8011312:	4b06      	ldr	r3, [pc, #24]	@ (801132c <tcp_next_iss+0x44>)
 8011314:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011316:	4618      	mov	r0, r3
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	0801b3a8 	.word	0x0801b3a8
 8011324:	0801ba98 	.word	0x0801ba98
 8011328:	0801b3ec 	.word	0x0801b3ec
 801132c:	24000030 	.word	0x24000030
 8011330:	2400c39c 	.word	0x2400c39c

08011334 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b086      	sub	sp, #24
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
 8011340:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d106      	bne.n	8011356 <tcp_eff_send_mss_netif+0x22>
 8011348:	4b14      	ldr	r3, [pc, #80]	@ (801139c <tcp_eff_send_mss_netif+0x68>)
 801134a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801134e:	4914      	ldr	r1, [pc, #80]	@ (80113a0 <tcp_eff_send_mss_netif+0x6c>)
 8011350:	4814      	ldr	r0, [pc, #80]	@ (80113a4 <tcp_eff_send_mss_netif+0x70>)
 8011352:	f007 ff27 	bl	80191a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d101      	bne.n	8011360 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801135c:	89fb      	ldrh	r3, [r7, #14]
 801135e:	e019      	b.n	8011394 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011364:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011366:	8afb      	ldrh	r3, [r7, #22]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d012      	beq.n	8011392 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801136c:	2328      	movs	r3, #40	@ 0x28
 801136e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011370:	8afa      	ldrh	r2, [r7, #22]
 8011372:	8abb      	ldrh	r3, [r7, #20]
 8011374:	429a      	cmp	r2, r3
 8011376:	d904      	bls.n	8011382 <tcp_eff_send_mss_netif+0x4e>
 8011378:	8afa      	ldrh	r2, [r7, #22]
 801137a:	8abb      	ldrh	r3, [r7, #20]
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	b29b      	uxth	r3, r3
 8011380:	e000      	b.n	8011384 <tcp_eff_send_mss_netif+0x50>
 8011382:	2300      	movs	r3, #0
 8011384:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011386:	8a7a      	ldrh	r2, [r7, #18]
 8011388:	89fb      	ldrh	r3, [r7, #14]
 801138a:	4293      	cmp	r3, r2
 801138c:	bf28      	it	cs
 801138e:	4613      	movcs	r3, r2
 8011390:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011392:	89fb      	ldrh	r3, [r7, #14]
}
 8011394:	4618      	mov	r0, r3
 8011396:	3718      	adds	r7, #24
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	0801b3a8 	.word	0x0801b3a8
 80113a0:	0801bab4 	.word	0x0801bab4
 80113a4:	0801b3ec 	.word	0x0801b3ec

080113a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d119      	bne.n	80113f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80113bc:	4b10      	ldr	r3, [pc, #64]	@ (8011400 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80113be:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80113c2:	4910      	ldr	r1, [pc, #64]	@ (8011404 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80113c4:	4810      	ldr	r0, [pc, #64]	@ (8011408 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80113c6:	f007 feed 	bl	80191a4 <iprintf>

  while (pcb != NULL) {
 80113ca:	e011      	b.n	80113f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d108      	bne.n	80113ea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f7fe fd16 	bl	800fe10 <tcp_abort>
      pcb = next;
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	60fb      	str	r3, [r7, #12]
 80113e8:	e002      	b.n	80113f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d1ea      	bne.n	80113cc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80113f6:	bf00      	nop
 80113f8:	bf00      	nop
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	0801b3a8 	.word	0x0801b3a8
 8011404:	0801badc 	.word	0x0801badc
 8011408:	0801b3ec 	.word	0x0801b3ec

0801140c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d02a      	beq.n	8011472 <tcp_netif_ip_addr_changed+0x66>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d026      	beq.n	8011472 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011424:	4b15      	ldr	r3, [pc, #84]	@ (801147c <tcp_netif_ip_addr_changed+0x70>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4619      	mov	r1, r3
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f7ff ffbc 	bl	80113a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011430:	4b13      	ldr	r3, [pc, #76]	@ (8011480 <tcp_netif_ip_addr_changed+0x74>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7ff ffb6 	bl	80113a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d017      	beq.n	8011472 <tcp_netif_ip_addr_changed+0x66>
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d013      	beq.n	8011472 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801144a:	4b0e      	ldr	r3, [pc, #56]	@ (8011484 <tcp_netif_ip_addr_changed+0x78>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	60fb      	str	r3, [r7, #12]
 8011450:	e00c      	b.n	801146c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	429a      	cmp	r2, r3
 801145c:	d103      	bne.n	8011466 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	60fb      	str	r3, [r7, #12]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d1ef      	bne.n	8011452 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011472:	bf00      	nop
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	2400c3a8 	.word	0x2400c3a8
 8011480:	2400c3a0 	.word	0x2400c3a0
 8011484:	2400c3a4 	.word	0x2400c3a4

08011488 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011494:	2b00      	cmp	r3, #0
 8011496:	d007      	beq.n	80114a8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801149c:	4618      	mov	r0, r3
 801149e:	f7ff fb49 	bl	8010b34 <tcp_segs_free>
    pcb->ooseq = NULL;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2200      	movs	r2, #0
 80114a6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80114a8:	bf00      	nop
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80114b0:	b590      	push	{r4, r7, lr}
 80114b2:	b08d      	sub	sp, #52	@ 0x34
 80114b4:	af04      	add	r7, sp, #16
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d105      	bne.n	80114cc <tcp_input+0x1c>
 80114c0:	4b9b      	ldr	r3, [pc, #620]	@ (8011730 <tcp_input+0x280>)
 80114c2:	2283      	movs	r2, #131	@ 0x83
 80114c4:	499b      	ldr	r1, [pc, #620]	@ (8011734 <tcp_input+0x284>)
 80114c6:	489c      	ldr	r0, [pc, #624]	@ (8011738 <tcp_input+0x288>)
 80114c8:	f007 fe6c 	bl	80191a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	4a9a      	ldr	r2, [pc, #616]	@ (801173c <tcp_input+0x28c>)
 80114d2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	895b      	ldrh	r3, [r3, #10]
 80114d8:	2b13      	cmp	r3, #19
 80114da:	f240 83d1 	bls.w	8011c80 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80114de:	4b98      	ldr	r3, [pc, #608]	@ (8011740 <tcp_input+0x290>)
 80114e0:	695b      	ldr	r3, [r3, #20]
 80114e2:	4a97      	ldr	r2, [pc, #604]	@ (8011740 <tcp_input+0x290>)
 80114e4:	6812      	ldr	r2, [r2, #0]
 80114e6:	4611      	mov	r1, r2
 80114e8:	4618      	mov	r0, r3
 80114ea:	f006 fa49 	bl	8017980 <ip4_addr_isbroadcast_u32>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f040 83c7 	bne.w	8011c84 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80114f6:	4b92      	ldr	r3, [pc, #584]	@ (8011740 <tcp_input+0x290>)
 80114f8:	695b      	ldr	r3, [r3, #20]
 80114fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80114fe:	2be0      	cmp	r3, #224	@ 0xe0
 8011500:	f000 83c0 	beq.w	8011c84 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011504:	4b8d      	ldr	r3, [pc, #564]	@ (801173c <tcp_input+0x28c>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	899b      	ldrh	r3, [r3, #12]
 801150a:	b29b      	uxth	r3, r3
 801150c:	4618      	mov	r0, r3
 801150e:	f7fc f8cf 	bl	800d6b0 <lwip_htons>
 8011512:	4603      	mov	r3, r0
 8011514:	0b1b      	lsrs	r3, r3, #12
 8011516:	b29b      	uxth	r3, r3
 8011518:	b2db      	uxtb	r3, r3
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801151e:	7cbb      	ldrb	r3, [r7, #18]
 8011520:	2b13      	cmp	r3, #19
 8011522:	f240 83b1 	bls.w	8011c88 <tcp_input+0x7d8>
 8011526:	7cbb      	ldrb	r3, [r7, #18]
 8011528:	b29a      	uxth	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	891b      	ldrh	r3, [r3, #8]
 801152e:	429a      	cmp	r2, r3
 8011530:	f200 83aa 	bhi.w	8011c88 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011534:	7cbb      	ldrb	r3, [r7, #18]
 8011536:	b29b      	uxth	r3, r3
 8011538:	3b14      	subs	r3, #20
 801153a:	b29a      	uxth	r2, r3
 801153c:	4b81      	ldr	r3, [pc, #516]	@ (8011744 <tcp_input+0x294>)
 801153e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011540:	4b81      	ldr	r3, [pc, #516]	@ (8011748 <tcp_input+0x298>)
 8011542:	2200      	movs	r2, #0
 8011544:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	895a      	ldrh	r2, [r3, #10]
 801154a:	7cbb      	ldrb	r3, [r7, #18]
 801154c:	b29b      	uxth	r3, r3
 801154e:	429a      	cmp	r2, r3
 8011550:	d309      	bcc.n	8011566 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011552:	4b7c      	ldr	r3, [pc, #496]	@ (8011744 <tcp_input+0x294>)
 8011554:	881a      	ldrh	r2, [r3, #0]
 8011556:	4b7d      	ldr	r3, [pc, #500]	@ (801174c <tcp_input+0x29c>)
 8011558:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801155a:	7cbb      	ldrb	r3, [r7, #18]
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7fd fdcc 	bl	800f0fc <pbuf_remove_header>
 8011564:	e04e      	b.n	8011604 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d105      	bne.n	801157a <tcp_input+0xca>
 801156e:	4b70      	ldr	r3, [pc, #448]	@ (8011730 <tcp_input+0x280>)
 8011570:	22c2      	movs	r2, #194	@ 0xc2
 8011572:	4977      	ldr	r1, [pc, #476]	@ (8011750 <tcp_input+0x2a0>)
 8011574:	4870      	ldr	r0, [pc, #448]	@ (8011738 <tcp_input+0x288>)
 8011576:	f007 fe15 	bl	80191a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801157a:	2114      	movs	r1, #20
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7fd fdbd 	bl	800f0fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	895a      	ldrh	r2, [r3, #10]
 8011586:	4b71      	ldr	r3, [pc, #452]	@ (801174c <tcp_input+0x29c>)
 8011588:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801158a:	4b6e      	ldr	r3, [pc, #440]	@ (8011744 <tcp_input+0x294>)
 801158c:	881a      	ldrh	r2, [r3, #0]
 801158e:	4b6f      	ldr	r3, [pc, #444]	@ (801174c <tcp_input+0x29c>)
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011596:	4b6d      	ldr	r3, [pc, #436]	@ (801174c <tcp_input+0x29c>)
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	4619      	mov	r1, r3
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7fd fdad 	bl	800f0fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	895b      	ldrh	r3, [r3, #10]
 80115a8:	8a3a      	ldrh	r2, [r7, #16]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	f200 836e 	bhi.w	8011c8c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	4a64      	ldr	r2, [pc, #400]	@ (8011748 <tcp_input+0x298>)
 80115b8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	8a3a      	ldrh	r2, [r7, #16]
 80115c0:	4611      	mov	r1, r2
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7fd fd9a 	bl	800f0fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	891a      	ldrh	r2, [r3, #8]
 80115cc:	8a3b      	ldrh	r3, [r7, #16]
 80115ce:	1ad3      	subs	r3, r2, r3
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	895b      	ldrh	r3, [r3, #10]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d005      	beq.n	80115ea <tcp_input+0x13a>
 80115de:	4b54      	ldr	r3, [pc, #336]	@ (8011730 <tcp_input+0x280>)
 80115e0:	22df      	movs	r2, #223	@ 0xdf
 80115e2:	495c      	ldr	r1, [pc, #368]	@ (8011754 <tcp_input+0x2a4>)
 80115e4:	4854      	ldr	r0, [pc, #336]	@ (8011738 <tcp_input+0x288>)
 80115e6:	f007 fddd 	bl	80191a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	891a      	ldrh	r2, [r3, #8]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	891b      	ldrh	r3, [r3, #8]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d005      	beq.n	8011604 <tcp_input+0x154>
 80115f8:	4b4d      	ldr	r3, [pc, #308]	@ (8011730 <tcp_input+0x280>)
 80115fa:	22e0      	movs	r2, #224	@ 0xe0
 80115fc:	4956      	ldr	r1, [pc, #344]	@ (8011758 <tcp_input+0x2a8>)
 80115fe:	484e      	ldr	r0, [pc, #312]	@ (8011738 <tcp_input+0x288>)
 8011600:	f007 fdd0 	bl	80191a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011604:	4b4d      	ldr	r3, [pc, #308]	@ (801173c <tcp_input+0x28c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	b29b      	uxth	r3, r3
 801160c:	4a4b      	ldr	r2, [pc, #300]	@ (801173c <tcp_input+0x28c>)
 801160e:	6814      	ldr	r4, [r2, #0]
 8011610:	4618      	mov	r0, r3
 8011612:	f7fc f84d 	bl	800d6b0 <lwip_htons>
 8011616:	4603      	mov	r3, r0
 8011618:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801161a:	4b48      	ldr	r3, [pc, #288]	@ (801173c <tcp_input+0x28c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	885b      	ldrh	r3, [r3, #2]
 8011620:	b29b      	uxth	r3, r3
 8011622:	4a46      	ldr	r2, [pc, #280]	@ (801173c <tcp_input+0x28c>)
 8011624:	6814      	ldr	r4, [r2, #0]
 8011626:	4618      	mov	r0, r3
 8011628:	f7fc f842 	bl	800d6b0 <lwip_htons>
 801162c:	4603      	mov	r3, r0
 801162e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011630:	4b42      	ldr	r3, [pc, #264]	@ (801173c <tcp_input+0x28c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	4a41      	ldr	r2, [pc, #260]	@ (801173c <tcp_input+0x28c>)
 8011638:	6814      	ldr	r4, [r2, #0]
 801163a:	4618      	mov	r0, r3
 801163c:	f7fc f84d 	bl	800d6da <lwip_htonl>
 8011640:	4603      	mov	r3, r0
 8011642:	6063      	str	r3, [r4, #4]
 8011644:	6863      	ldr	r3, [r4, #4]
 8011646:	4a45      	ldr	r2, [pc, #276]	@ (801175c <tcp_input+0x2ac>)
 8011648:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801164a:	4b3c      	ldr	r3, [pc, #240]	@ (801173c <tcp_input+0x28c>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	4a3a      	ldr	r2, [pc, #232]	@ (801173c <tcp_input+0x28c>)
 8011652:	6814      	ldr	r4, [r2, #0]
 8011654:	4618      	mov	r0, r3
 8011656:	f7fc f840 	bl	800d6da <lwip_htonl>
 801165a:	4603      	mov	r3, r0
 801165c:	60a3      	str	r3, [r4, #8]
 801165e:	68a3      	ldr	r3, [r4, #8]
 8011660:	4a3f      	ldr	r2, [pc, #252]	@ (8011760 <tcp_input+0x2b0>)
 8011662:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011664:	4b35      	ldr	r3, [pc, #212]	@ (801173c <tcp_input+0x28c>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	89db      	ldrh	r3, [r3, #14]
 801166a:	b29b      	uxth	r3, r3
 801166c:	4a33      	ldr	r2, [pc, #204]	@ (801173c <tcp_input+0x28c>)
 801166e:	6814      	ldr	r4, [r2, #0]
 8011670:	4618      	mov	r0, r3
 8011672:	f7fc f81d 	bl	800d6b0 <lwip_htons>
 8011676:	4603      	mov	r3, r0
 8011678:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801167a:	4b30      	ldr	r3, [pc, #192]	@ (801173c <tcp_input+0x28c>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	899b      	ldrh	r3, [r3, #12]
 8011680:	b29b      	uxth	r3, r3
 8011682:	4618      	mov	r0, r3
 8011684:	f7fc f814 	bl	800d6b0 <lwip_htons>
 8011688:	4603      	mov	r3, r0
 801168a:	b2db      	uxtb	r3, r3
 801168c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011690:	b2da      	uxtb	r2, r3
 8011692:	4b34      	ldr	r3, [pc, #208]	@ (8011764 <tcp_input+0x2b4>)
 8011694:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	891a      	ldrh	r2, [r3, #8]
 801169a:	4b33      	ldr	r3, [pc, #204]	@ (8011768 <tcp_input+0x2b8>)
 801169c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801169e:	4b31      	ldr	r3, [pc, #196]	@ (8011764 <tcp_input+0x2b4>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	f003 0303 	and.w	r3, r3, #3
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00c      	beq.n	80116c4 <tcp_input+0x214>
    tcplen++;
 80116aa:	4b2f      	ldr	r3, [pc, #188]	@ (8011768 <tcp_input+0x2b8>)
 80116ac:	881b      	ldrh	r3, [r3, #0]
 80116ae:	3301      	adds	r3, #1
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	4b2d      	ldr	r3, [pc, #180]	@ (8011768 <tcp_input+0x2b8>)
 80116b4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	891a      	ldrh	r2, [r3, #8]
 80116ba:	4b2b      	ldr	r3, [pc, #172]	@ (8011768 <tcp_input+0x2b8>)
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	429a      	cmp	r2, r3
 80116c0:	f200 82e6 	bhi.w	8011c90 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80116c4:	2300      	movs	r3, #0
 80116c6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116c8:	4b28      	ldr	r3, [pc, #160]	@ (801176c <tcp_input+0x2bc>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	61fb      	str	r3, [r7, #28]
 80116ce:	e09d      	b.n	801180c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	7d1b      	ldrb	r3, [r3, #20]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d105      	bne.n	80116e4 <tcp_input+0x234>
 80116d8:	4b15      	ldr	r3, [pc, #84]	@ (8011730 <tcp_input+0x280>)
 80116da:	22fb      	movs	r2, #251	@ 0xfb
 80116dc:	4924      	ldr	r1, [pc, #144]	@ (8011770 <tcp_input+0x2c0>)
 80116de:	4816      	ldr	r0, [pc, #88]	@ (8011738 <tcp_input+0x288>)
 80116e0:	f007 fd60 	bl	80191a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	7d1b      	ldrb	r3, [r3, #20]
 80116e8:	2b0a      	cmp	r3, #10
 80116ea:	d105      	bne.n	80116f8 <tcp_input+0x248>
 80116ec:	4b10      	ldr	r3, [pc, #64]	@ (8011730 <tcp_input+0x280>)
 80116ee:	22fc      	movs	r2, #252	@ 0xfc
 80116f0:	4920      	ldr	r1, [pc, #128]	@ (8011774 <tcp_input+0x2c4>)
 80116f2:	4811      	ldr	r0, [pc, #68]	@ (8011738 <tcp_input+0x288>)
 80116f4:	f007 fd56 	bl	80191a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	7d1b      	ldrb	r3, [r3, #20]
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d105      	bne.n	801170c <tcp_input+0x25c>
 8011700:	4b0b      	ldr	r3, [pc, #44]	@ (8011730 <tcp_input+0x280>)
 8011702:	22fd      	movs	r2, #253	@ 0xfd
 8011704:	491c      	ldr	r1, [pc, #112]	@ (8011778 <tcp_input+0x2c8>)
 8011706:	480c      	ldr	r0, [pc, #48]	@ (8011738 <tcp_input+0x288>)
 8011708:	f007 fd4c 	bl	80191a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	7a1b      	ldrb	r3, [r3, #8]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d033      	beq.n	801177c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	7a1a      	ldrb	r2, [r3, #8]
 8011718:	4b09      	ldr	r3, [pc, #36]	@ (8011740 <tcp_input+0x290>)
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011720:	3301      	adds	r3, #1
 8011722:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011724:	429a      	cmp	r2, r3
 8011726:	d029      	beq.n	801177c <tcp_input+0x2cc>
      prev = pcb;
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	61bb      	str	r3, [r7, #24]
      continue;
 801172c:	e06b      	b.n	8011806 <tcp_input+0x356>
 801172e:	bf00      	nop
 8011730:	0801bb10 	.word	0x0801bb10
 8011734:	0801bb44 	.word	0x0801bb44
 8011738:	0801bb5c 	.word	0x0801bb5c
 801173c:	2400c3c4 	.word	0x2400c3c4
 8011740:	2400929c 	.word	0x2400929c
 8011744:	2400c3c8 	.word	0x2400c3c8
 8011748:	2400c3cc 	.word	0x2400c3cc
 801174c:	2400c3ca 	.word	0x2400c3ca
 8011750:	0801bb84 	.word	0x0801bb84
 8011754:	0801bb94 	.word	0x0801bb94
 8011758:	0801bba0 	.word	0x0801bba0
 801175c:	2400c3d4 	.word	0x2400c3d4
 8011760:	2400c3d8 	.word	0x2400c3d8
 8011764:	2400c3e0 	.word	0x2400c3e0
 8011768:	2400c3de 	.word	0x2400c3de
 801176c:	2400c3a8 	.word	0x2400c3a8
 8011770:	0801bbc0 	.word	0x0801bbc0
 8011774:	0801bbe8 	.word	0x0801bbe8
 8011778:	0801bc14 	.word	0x0801bc14
    }

    if (pcb->remote_port == tcphdr->src &&
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	8b1a      	ldrh	r2, [r3, #24]
 8011780:	4b72      	ldr	r3, [pc, #456]	@ (801194c <tcp_input+0x49c>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	b29b      	uxth	r3, r3
 8011788:	429a      	cmp	r2, r3
 801178a:	d13a      	bne.n	8011802 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	8ada      	ldrh	r2, [r3, #22]
 8011790:	4b6e      	ldr	r3, [pc, #440]	@ (801194c <tcp_input+0x49c>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	885b      	ldrh	r3, [r3, #2]
 8011796:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011798:	429a      	cmp	r2, r3
 801179a:	d132      	bne.n	8011802 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	685a      	ldr	r2, [r3, #4]
 80117a0:	4b6b      	ldr	r3, [pc, #428]	@ (8011950 <tcp_input+0x4a0>)
 80117a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d12c      	bne.n	8011802 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	4b68      	ldr	r3, [pc, #416]	@ (8011950 <tcp_input+0x4a0>)
 80117ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d126      	bne.n	8011802 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	69fa      	ldr	r2, [r7, #28]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d106      	bne.n	80117cc <tcp_input+0x31c>
 80117be:	4b65      	ldr	r3, [pc, #404]	@ (8011954 <tcp_input+0x4a4>)
 80117c0:	f240 120d 	movw	r2, #269	@ 0x10d
 80117c4:	4964      	ldr	r1, [pc, #400]	@ (8011958 <tcp_input+0x4a8>)
 80117c6:	4865      	ldr	r0, [pc, #404]	@ (801195c <tcp_input+0x4ac>)
 80117c8:	f007 fcec 	bl	80191a4 <iprintf>
      if (prev != NULL) {
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00a      	beq.n	80117e8 <tcp_input+0x338>
        prev->next = pcb->next;
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	68da      	ldr	r2, [r3, #12]
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80117da:	4b61      	ldr	r3, [pc, #388]	@ (8011960 <tcp_input+0x4b0>)
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	69fb      	ldr	r3, [r7, #28]
 80117e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80117e2:	4a5f      	ldr	r2, [pc, #380]	@ (8011960 <tcp_input+0x4b0>)
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	69fa      	ldr	r2, [r7, #28]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d111      	bne.n	8011816 <tcp_input+0x366>
 80117f2:	4b58      	ldr	r3, [pc, #352]	@ (8011954 <tcp_input+0x4a4>)
 80117f4:	f240 1215 	movw	r2, #277	@ 0x115
 80117f8:	495a      	ldr	r1, [pc, #360]	@ (8011964 <tcp_input+0x4b4>)
 80117fa:	4858      	ldr	r0, [pc, #352]	@ (801195c <tcp_input+0x4ac>)
 80117fc:	f007 fcd2 	bl	80191a4 <iprintf>
      break;
 8011800:	e009      	b.n	8011816 <tcp_input+0x366>
    }
    prev = pcb;
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	61fb      	str	r3, [r7, #28]
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	f47f af5e 	bne.w	80116d0 <tcp_input+0x220>
 8011814:	e000      	b.n	8011818 <tcp_input+0x368>
      break;
 8011816:	bf00      	nop
  }

  if (pcb == NULL) {
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	2b00      	cmp	r3, #0
 801181c:	f040 80aa 	bne.w	8011974 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011820:	4b51      	ldr	r3, [pc, #324]	@ (8011968 <tcp_input+0x4b8>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	61fb      	str	r3, [r7, #28]
 8011826:	e03f      	b.n	80118a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	7d1b      	ldrb	r3, [r3, #20]
 801182c:	2b0a      	cmp	r3, #10
 801182e:	d006      	beq.n	801183e <tcp_input+0x38e>
 8011830:	4b48      	ldr	r3, [pc, #288]	@ (8011954 <tcp_input+0x4a4>)
 8011832:	f240 121f 	movw	r2, #287	@ 0x11f
 8011836:	494d      	ldr	r1, [pc, #308]	@ (801196c <tcp_input+0x4bc>)
 8011838:	4848      	ldr	r0, [pc, #288]	@ (801195c <tcp_input+0x4ac>)
 801183a:	f007 fcb3 	bl	80191a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	7a1b      	ldrb	r3, [r3, #8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d009      	beq.n	801185a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	7a1a      	ldrb	r2, [r3, #8]
 801184a:	4b41      	ldr	r3, [pc, #260]	@ (8011950 <tcp_input+0x4a0>)
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011852:	3301      	adds	r3, #1
 8011854:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011856:	429a      	cmp	r2, r3
 8011858:	d122      	bne.n	80118a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	8b1a      	ldrh	r2, [r3, #24]
 801185e:	4b3b      	ldr	r3, [pc, #236]	@ (801194c <tcp_input+0x49c>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	b29b      	uxth	r3, r3
 8011866:	429a      	cmp	r2, r3
 8011868:	d11b      	bne.n	80118a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	8ada      	ldrh	r2, [r3, #22]
 801186e:	4b37      	ldr	r3, [pc, #220]	@ (801194c <tcp_input+0x49c>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	885b      	ldrh	r3, [r3, #2]
 8011874:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011876:	429a      	cmp	r2, r3
 8011878:	d113      	bne.n	80118a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801187a:	69fb      	ldr	r3, [r7, #28]
 801187c:	685a      	ldr	r2, [r3, #4]
 801187e:	4b34      	ldr	r3, [pc, #208]	@ (8011950 <tcp_input+0x4a0>)
 8011880:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011882:	429a      	cmp	r2, r3
 8011884:	d10d      	bne.n	80118a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	4b31      	ldr	r3, [pc, #196]	@ (8011950 <tcp_input+0x4a0>)
 801188c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801188e:	429a      	cmp	r2, r3
 8011890:	d107      	bne.n	80118a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011892:	69f8      	ldr	r0, [r7, #28]
 8011894:	f000 fb56 	bl	8011f44 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7fd fcb5 	bl	800f208 <pbuf_free>
        return;
 801189e:	e1fd      	b.n	8011c9c <tcp_input+0x7ec>
        continue;
 80118a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	61fb      	str	r3, [r7, #28]
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d1bc      	bne.n	8011828 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80118ae:	2300      	movs	r3, #0
 80118b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80118b2:	4b2f      	ldr	r3, [pc, #188]	@ (8011970 <tcp_input+0x4c0>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	617b      	str	r3, [r7, #20]
 80118b8:	e02a      	b.n	8011910 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	7a1b      	ldrb	r3, [r3, #8]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00c      	beq.n	80118dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	7a1a      	ldrb	r2, [r3, #8]
 80118c6:	4b22      	ldr	r3, [pc, #136]	@ (8011950 <tcp_input+0x4a0>)
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80118ce:	3301      	adds	r3, #1
 80118d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d002      	beq.n	80118dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	61bb      	str	r3, [r7, #24]
        continue;
 80118da:	e016      	b.n	801190a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	8ada      	ldrh	r2, [r3, #22]
 80118e0:	4b1a      	ldr	r3, [pc, #104]	@ (801194c <tcp_input+0x49c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	885b      	ldrh	r3, [r3, #2]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d10c      	bne.n	8011906 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	4b17      	ldr	r3, [pc, #92]	@ (8011950 <tcp_input+0x4a0>)
 80118f2:	695b      	ldr	r3, [r3, #20]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d00f      	beq.n	8011918 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d00d      	beq.n	801191a <tcp_input+0x46a>
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d009      	beq.n	801191a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	68db      	ldr	r3, [r3, #12]
 801190e:	617b      	str	r3, [r7, #20]
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1d1      	bne.n	80118ba <tcp_input+0x40a>
 8011916:	e000      	b.n	801191a <tcp_input+0x46a>
            break;
 8011918:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d029      	beq.n	8011974 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011920:	69bb      	ldr	r3, [r7, #24]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00a      	beq.n	801193c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	68da      	ldr	r2, [r3, #12]
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801192e:	4b10      	ldr	r3, [pc, #64]	@ (8011970 <tcp_input+0x4c0>)
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011936:	4a0e      	ldr	r2, [pc, #56]	@ (8011970 <tcp_input+0x4c0>)
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801193c:	6978      	ldr	r0, [r7, #20]
 801193e:	f000 fa03 	bl	8011d48 <tcp_listen_input>
      }
      pbuf_free(p);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7fd fc60 	bl	800f208 <pbuf_free>
      return;
 8011948:	e1a8      	b.n	8011c9c <tcp_input+0x7ec>
 801194a:	bf00      	nop
 801194c:	2400c3c4 	.word	0x2400c3c4
 8011950:	2400929c 	.word	0x2400929c
 8011954:	0801bb10 	.word	0x0801bb10
 8011958:	0801bc3c 	.word	0x0801bc3c
 801195c:	0801bb5c 	.word	0x0801bb5c
 8011960:	2400c3a8 	.word	0x2400c3a8
 8011964:	0801bc68 	.word	0x0801bc68
 8011968:	2400c3ac 	.word	0x2400c3ac
 801196c:	0801bc94 	.word	0x0801bc94
 8011970:	2400c3a4 	.word	0x2400c3a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 8158 	beq.w	8011c2c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801197c:	4b95      	ldr	r3, [pc, #596]	@ (8011bd4 <tcp_input+0x724>)
 801197e:	2200      	movs	r2, #0
 8011980:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	891a      	ldrh	r2, [r3, #8]
 8011986:	4b93      	ldr	r3, [pc, #588]	@ (8011bd4 <tcp_input+0x724>)
 8011988:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801198a:	4a92      	ldr	r2, [pc, #584]	@ (8011bd4 <tcp_input+0x724>)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011990:	4b91      	ldr	r3, [pc, #580]	@ (8011bd8 <tcp_input+0x728>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a8f      	ldr	r2, [pc, #572]	@ (8011bd4 <tcp_input+0x724>)
 8011996:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011998:	4b90      	ldr	r3, [pc, #576]	@ (8011bdc <tcp_input+0x72c>)
 801199a:	2200      	movs	r2, #0
 801199c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801199e:	4b90      	ldr	r3, [pc, #576]	@ (8011be0 <tcp_input+0x730>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80119a4:	4b8f      	ldr	r3, [pc, #572]	@ (8011be4 <tcp_input+0x734>)
 80119a6:	2200      	movs	r2, #0
 80119a8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80119aa:	4b8f      	ldr	r3, [pc, #572]	@ (8011be8 <tcp_input+0x738>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	f003 0308 	and.w	r3, r3, #8
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d006      	beq.n	80119c4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	7b5b      	ldrb	r3, [r3, #13]
 80119ba:	f043 0301 	orr.w	r3, r3, #1
 80119be:	b2da      	uxtb	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d017      	beq.n	80119fc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80119cc:	69f8      	ldr	r0, [r7, #28]
 80119ce:	f7ff f835 	bl	8010a3c <tcp_process_refused_data>
 80119d2:	4603      	mov	r3, r0
 80119d4:	f113 0f0d 	cmn.w	r3, #13
 80119d8:	d007      	beq.n	80119ea <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80119da:	69fb      	ldr	r3, [r7, #28]
 80119dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00c      	beq.n	80119fc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80119e2:	4b82      	ldr	r3, [pc, #520]	@ (8011bec <tcp_input+0x73c>)
 80119e4:	881b      	ldrh	r3, [r3, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d008      	beq.n	80119fc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f040 80e3 	bne.w	8011bba <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80119f4:	69f8      	ldr	r0, [r7, #28]
 80119f6:	f003 fe21 	bl	801563c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80119fa:	e0de      	b.n	8011bba <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80119fc:	4a7c      	ldr	r2, [pc, #496]	@ (8011bf0 <tcp_input+0x740>)
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011a02:	69f8      	ldr	r0, [r7, #28]
 8011a04:	f000 fb18 	bl	8012038 <tcp_process>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011a0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a10:	f113 0f0d 	cmn.w	r3, #13
 8011a14:	f000 80d3 	beq.w	8011bbe <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011a18:	4b71      	ldr	r3, [pc, #452]	@ (8011be0 <tcp_input+0x730>)
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	f003 0308 	and.w	r3, r3, #8
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d015      	beq.n	8011a50 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d008      	beq.n	8011a40 <tcp_input+0x590>
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a34:	69fa      	ldr	r2, [r7, #28]
 8011a36:	6912      	ldr	r2, [r2, #16]
 8011a38:	f06f 010d 	mvn.w	r1, #13
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011a40:	69f9      	ldr	r1, [r7, #28]
 8011a42:	486c      	ldr	r0, [pc, #432]	@ (8011bf4 <tcp_input+0x744>)
 8011a44:	f7ff fbbc 	bl	80111c0 <tcp_pcb_remove>
        tcp_free(pcb);
 8011a48:	69f8      	ldr	r0, [r7, #28]
 8011a4a:	f7fd fef9 	bl	800f840 <tcp_free>
 8011a4e:	e0da      	b.n	8011c06 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011a50:	2300      	movs	r3, #0
 8011a52:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011a54:	4b63      	ldr	r3, [pc, #396]	@ (8011be4 <tcp_input+0x734>)
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d01d      	beq.n	8011a98 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011a5c:	4b61      	ldr	r3, [pc, #388]	@ (8011be4 <tcp_input+0x734>)
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00a      	beq.n	8011a82 <tcp_input+0x5d2>
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a72:	69fa      	ldr	r2, [r7, #28]
 8011a74:	6910      	ldr	r0, [r2, #16]
 8011a76:	89fa      	ldrh	r2, [r7, #14]
 8011a78:	69f9      	ldr	r1, [r7, #28]
 8011a7a:	4798      	blx	r3
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	74fb      	strb	r3, [r7, #19]
 8011a80:	e001      	b.n	8011a86 <tcp_input+0x5d6>
 8011a82:	2300      	movs	r3, #0
 8011a84:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a8a:	f113 0f0d 	cmn.w	r3, #13
 8011a8e:	f000 8098 	beq.w	8011bc2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011a92:	4b54      	ldr	r3, [pc, #336]	@ (8011be4 <tcp_input+0x734>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011a98:	69f8      	ldr	r0, [r7, #28]
 8011a9a:	f000 f915 	bl	8011cc8 <tcp_input_delayed_close>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f040 8090 	bne.w	8011bc6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8011bdc <tcp_input+0x72c>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d041      	beq.n	8011b32 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d006      	beq.n	8011ac4 <tcp_input+0x614>
 8011ab6:	4b50      	ldr	r3, [pc, #320]	@ (8011bf8 <tcp_input+0x748>)
 8011ab8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011abc:	494f      	ldr	r1, [pc, #316]	@ (8011bfc <tcp_input+0x74c>)
 8011abe:	4850      	ldr	r0, [pc, #320]	@ (8011c00 <tcp_input+0x750>)
 8011ac0:	f007 fb70 	bl	80191a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	8b5b      	ldrh	r3, [r3, #26]
 8011ac8:	f003 0310 	and.w	r3, r3, #16
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d008      	beq.n	8011ae2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011ad0:	4b42      	ldr	r3, [pc, #264]	@ (8011bdc <tcp_input+0x72c>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fd fb97 	bl	800f208 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011ada:	69f8      	ldr	r0, [r7, #28]
 8011adc:	f7fe f998 	bl	800fe10 <tcp_abort>
            goto aborted;
 8011ae0:	e091      	b.n	8011c06 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00c      	beq.n	8011b06 <tcp_input+0x656>
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	6918      	ldr	r0, [r3, #16]
 8011af6:	4b39      	ldr	r3, [pc, #228]	@ (8011bdc <tcp_input+0x72c>)
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	2300      	movs	r3, #0
 8011afc:	69f9      	ldr	r1, [r7, #28]
 8011afe:	47a0      	blx	r4
 8011b00:	4603      	mov	r3, r0
 8011b02:	74fb      	strb	r3, [r7, #19]
 8011b04:	e008      	b.n	8011b18 <tcp_input+0x668>
 8011b06:	4b35      	ldr	r3, [pc, #212]	@ (8011bdc <tcp_input+0x72c>)
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	69f9      	ldr	r1, [r7, #28]
 8011b0e:	2000      	movs	r0, #0
 8011b10:	f7ff f888 	bl	8010c24 <tcp_recv_null>
 8011b14:	4603      	mov	r3, r0
 8011b16:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011b18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b1c:	f113 0f0d 	cmn.w	r3, #13
 8011b20:	d053      	beq.n	8011bca <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011b22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d003      	beq.n	8011b32 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8011bdc <tcp_input+0x72c>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011b32:	4b2b      	ldr	r3, [pc, #172]	@ (8011be0 <tcp_input+0x730>)
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	f003 0320 	and.w	r3, r3, #32
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d030      	beq.n	8011ba0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d009      	beq.n	8011b5a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b4a:	7b5a      	ldrb	r2, [r3, #13]
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b50:	f042 0220 	orr.w	r2, r2, #32
 8011b54:	b2d2      	uxtb	r2, r2
 8011b56:	735a      	strb	r2, [r3, #13]
 8011b58:	e022      	b.n	8011ba0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011b5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011b62:	d005      	beq.n	8011b70 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011b68:	3301      	adds	r3, #1
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00b      	beq.n	8011b92 <tcp_input+0x6e2>
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	6918      	ldr	r0, [r3, #16]
 8011b84:	2300      	movs	r3, #0
 8011b86:	2200      	movs	r2, #0
 8011b88:	69f9      	ldr	r1, [r7, #28]
 8011b8a:	47a0      	blx	r4
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	74fb      	strb	r3, [r7, #19]
 8011b90:	e001      	b.n	8011b96 <tcp_input+0x6e6>
 8011b92:	2300      	movs	r3, #0
 8011b94:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011b96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b9a:	f113 0f0d 	cmn.w	r3, #13
 8011b9e:	d016      	beq.n	8011bce <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011ba0:	4b13      	ldr	r3, [pc, #76]	@ (8011bf0 <tcp_input+0x740>)
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011ba6:	69f8      	ldr	r0, [r7, #28]
 8011ba8:	f000 f88e 	bl	8011cc8 <tcp_input_delayed_close>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d128      	bne.n	8011c04 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011bb2:	69f8      	ldr	r0, [r7, #28]
 8011bb4:	f002 ff1a 	bl	80149ec <tcp_output>
 8011bb8:	e025      	b.n	8011c06 <tcp_input+0x756>
        goto aborted;
 8011bba:	bf00      	nop
 8011bbc:	e023      	b.n	8011c06 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011bbe:	bf00      	nop
 8011bc0:	e021      	b.n	8011c06 <tcp_input+0x756>
              goto aborted;
 8011bc2:	bf00      	nop
 8011bc4:	e01f      	b.n	8011c06 <tcp_input+0x756>
          goto aborted;
 8011bc6:	bf00      	nop
 8011bc8:	e01d      	b.n	8011c06 <tcp_input+0x756>
            goto aborted;
 8011bca:	bf00      	nop
 8011bcc:	e01b      	b.n	8011c06 <tcp_input+0x756>
              goto aborted;
 8011bce:	bf00      	nop
 8011bd0:	e019      	b.n	8011c06 <tcp_input+0x756>
 8011bd2:	bf00      	nop
 8011bd4:	2400c3b4 	.word	0x2400c3b4
 8011bd8:	2400c3c4 	.word	0x2400c3c4
 8011bdc:	2400c3e4 	.word	0x2400c3e4
 8011be0:	2400c3e1 	.word	0x2400c3e1
 8011be4:	2400c3dc 	.word	0x2400c3dc
 8011be8:	2400c3e0 	.word	0x2400c3e0
 8011bec:	2400c3de 	.word	0x2400c3de
 8011bf0:	2400c3e8 	.word	0x2400c3e8
 8011bf4:	2400c3a8 	.word	0x2400c3a8
 8011bf8:	0801bb10 	.word	0x0801bb10
 8011bfc:	0801bcc4 	.word	0x0801bcc4
 8011c00:	0801bb5c 	.word	0x0801bb5c
          goto aborted;
 8011c04:	bf00      	nop
    tcp_input_pcb = NULL;
 8011c06:	4b27      	ldr	r3, [pc, #156]	@ (8011ca4 <tcp_input+0x7f4>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011c0c:	4b26      	ldr	r3, [pc, #152]	@ (8011ca8 <tcp_input+0x7f8>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011c12:	4b26      	ldr	r3, [pc, #152]	@ (8011cac <tcp_input+0x7fc>)
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d03f      	beq.n	8011c9a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011c1a:	4b24      	ldr	r3, [pc, #144]	@ (8011cac <tcp_input+0x7fc>)
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fd faf2 	bl	800f208 <pbuf_free>
      inseg.p = NULL;
 8011c24:	4b21      	ldr	r3, [pc, #132]	@ (8011cac <tcp_input+0x7fc>)
 8011c26:	2200      	movs	r2, #0
 8011c28:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011c2a:	e036      	b.n	8011c9a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011c2c:	4b20      	ldr	r3, [pc, #128]	@ (8011cb0 <tcp_input+0x800>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	899b      	ldrh	r3, [r3, #12]
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7fb fd3b 	bl	800d6b0 <lwip_htons>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	f003 0304 	and.w	r3, r3, #4
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d118      	bne.n	8011c78 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c46:	4b1b      	ldr	r3, [pc, #108]	@ (8011cb4 <tcp_input+0x804>)
 8011c48:	6819      	ldr	r1, [r3, #0]
 8011c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8011cb8 <tcp_input+0x808>)
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	4b1a      	ldr	r3, [pc, #104]	@ (8011cbc <tcp_input+0x80c>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c56:	4b16      	ldr	r3, [pc, #88]	@ (8011cb0 <tcp_input+0x800>)
 8011c58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c5a:	885b      	ldrh	r3, [r3, #2]
 8011c5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c5e:	4a14      	ldr	r2, [pc, #80]	@ (8011cb0 <tcp_input+0x800>)
 8011c60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c62:	8812      	ldrh	r2, [r2, #0]
 8011c64:	b292      	uxth	r2, r2
 8011c66:	9202      	str	r2, [sp, #8]
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	4b15      	ldr	r3, [pc, #84]	@ (8011cc0 <tcp_input+0x810>)
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	4b15      	ldr	r3, [pc, #84]	@ (8011cc4 <tcp_input+0x814>)
 8011c70:	4602      	mov	r2, r0
 8011c72:	2000      	movs	r0, #0
 8011c74:	f003 fc90 	bl	8015598 <tcp_rst>
    pbuf_free(p);
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7fd fac5 	bl	800f208 <pbuf_free>
  return;
 8011c7e:	e00c      	b.n	8011c9a <tcp_input+0x7ea>
    goto dropped;
 8011c80:	bf00      	nop
 8011c82:	e006      	b.n	8011c92 <tcp_input+0x7e2>
    goto dropped;
 8011c84:	bf00      	nop
 8011c86:	e004      	b.n	8011c92 <tcp_input+0x7e2>
    goto dropped;
 8011c88:	bf00      	nop
 8011c8a:	e002      	b.n	8011c92 <tcp_input+0x7e2>
      goto dropped;
 8011c8c:	bf00      	nop
 8011c8e:	e000      	b.n	8011c92 <tcp_input+0x7e2>
      goto dropped;
 8011c90:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f7fd fab8 	bl	800f208 <pbuf_free>
 8011c98:	e000      	b.n	8011c9c <tcp_input+0x7ec>
  return;
 8011c9a:	bf00      	nop
}
 8011c9c:	3724      	adds	r7, #36	@ 0x24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd90      	pop	{r4, r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	2400c3e8 	.word	0x2400c3e8
 8011ca8:	2400c3e4 	.word	0x2400c3e4
 8011cac:	2400c3b4 	.word	0x2400c3b4
 8011cb0:	2400c3c4 	.word	0x2400c3c4
 8011cb4:	2400c3d8 	.word	0x2400c3d8
 8011cb8:	2400c3de 	.word	0x2400c3de
 8011cbc:	2400c3d4 	.word	0x2400c3d4
 8011cc0:	240092ac 	.word	0x240092ac
 8011cc4:	240092b0 	.word	0x240092b0

08011cc8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b082      	sub	sp, #8
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <tcp_input_delayed_close+0x1c>
 8011cd6:	4b17      	ldr	r3, [pc, #92]	@ (8011d34 <tcp_input_delayed_close+0x6c>)
 8011cd8:	f240 225a 	movw	r2, #602	@ 0x25a
 8011cdc:	4916      	ldr	r1, [pc, #88]	@ (8011d38 <tcp_input_delayed_close+0x70>)
 8011cde:	4817      	ldr	r0, [pc, #92]	@ (8011d3c <tcp_input_delayed_close+0x74>)
 8011ce0:	f007 fa60 	bl	80191a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011ce4:	4b16      	ldr	r3, [pc, #88]	@ (8011d40 <tcp_input_delayed_close+0x78>)
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	f003 0310 	and.w	r3, r3, #16
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d01c      	beq.n	8011d2a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	8b5b      	ldrh	r3, [r3, #26]
 8011cf4:	f003 0310 	and.w	r3, r3, #16
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10d      	bne.n	8011d18 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d008      	beq.n	8011d18 <tcp_input_delayed_close+0x50>
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	6912      	ldr	r2, [r2, #16]
 8011d10:	f06f 010e 	mvn.w	r1, #14
 8011d14:	4610      	mov	r0, r2
 8011d16:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011d18:	6879      	ldr	r1, [r7, #4]
 8011d1a:	480a      	ldr	r0, [pc, #40]	@ (8011d44 <tcp_input_delayed_close+0x7c>)
 8011d1c:	f7ff fa50 	bl	80111c0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7fd fd8d 	bl	800f840 <tcp_free>
    return 1;
 8011d26:	2301      	movs	r3, #1
 8011d28:	e000      	b.n	8011d2c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011d2a:	2300      	movs	r3, #0
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	0801bb10 	.word	0x0801bb10
 8011d38:	0801bce0 	.word	0x0801bce0
 8011d3c:	0801bb5c 	.word	0x0801bb5c
 8011d40:	2400c3e1 	.word	0x2400c3e1
 8011d44:	2400c3a8 	.word	0x2400c3a8

08011d48 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011d48:	b590      	push	{r4, r7, lr}
 8011d4a:	b08b      	sub	sp, #44	@ 0x2c
 8011d4c:	af04      	add	r7, sp, #16
 8011d4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011d50:	4b6f      	ldr	r3, [pc, #444]	@ (8011f10 <tcp_listen_input+0x1c8>)
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f003 0304 	and.w	r3, r3, #4
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f040 80d2 	bne.w	8011f02 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d106      	bne.n	8011d72 <tcp_listen_input+0x2a>
 8011d64:	4b6b      	ldr	r3, [pc, #428]	@ (8011f14 <tcp_listen_input+0x1cc>)
 8011d66:	f240 2281 	movw	r2, #641	@ 0x281
 8011d6a:	496b      	ldr	r1, [pc, #428]	@ (8011f18 <tcp_listen_input+0x1d0>)
 8011d6c:	486b      	ldr	r0, [pc, #428]	@ (8011f1c <tcp_listen_input+0x1d4>)
 8011d6e:	f007 fa19 	bl	80191a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011d72:	4b67      	ldr	r3, [pc, #412]	@ (8011f10 <tcp_listen_input+0x1c8>)
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	f003 0310 	and.w	r3, r3, #16
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d019      	beq.n	8011db2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d7e:	4b68      	ldr	r3, [pc, #416]	@ (8011f20 <tcp_listen_input+0x1d8>)
 8011d80:	6819      	ldr	r1, [r3, #0]
 8011d82:	4b68      	ldr	r3, [pc, #416]	@ (8011f24 <tcp_listen_input+0x1dc>)
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	461a      	mov	r2, r3
 8011d88:	4b67      	ldr	r3, [pc, #412]	@ (8011f28 <tcp_listen_input+0x1e0>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d8e:	4b67      	ldr	r3, [pc, #412]	@ (8011f2c <tcp_listen_input+0x1e4>)
 8011d90:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d92:	885b      	ldrh	r3, [r3, #2]
 8011d94:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d96:	4a65      	ldr	r2, [pc, #404]	@ (8011f2c <tcp_listen_input+0x1e4>)
 8011d98:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d9a:	8812      	ldrh	r2, [r2, #0]
 8011d9c:	b292      	uxth	r2, r2
 8011d9e:	9202      	str	r2, [sp, #8]
 8011da0:	9301      	str	r3, [sp, #4]
 8011da2:	4b63      	ldr	r3, [pc, #396]	@ (8011f30 <tcp_listen_input+0x1e8>)
 8011da4:	9300      	str	r3, [sp, #0]
 8011da6:	4b63      	ldr	r3, [pc, #396]	@ (8011f34 <tcp_listen_input+0x1ec>)
 8011da8:	4602      	mov	r2, r0
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f003 fbf4 	bl	8015598 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011db0:	e0a9      	b.n	8011f06 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011db2:	4b57      	ldr	r3, [pc, #348]	@ (8011f10 <tcp_listen_input+0x1c8>)
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	f003 0302 	and.w	r3, r3, #2
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f000 80a3 	beq.w	8011f06 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7d5b      	ldrb	r3, [r3, #21]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff f851 	bl	8010e6c <tcp_alloc>
 8011dca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d111      	bne.n	8011df6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	699b      	ldr	r3, [r3, #24]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00a      	beq.n	8011df0 <tcp_listen_input+0xa8>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	699b      	ldr	r3, [r3, #24]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	6910      	ldr	r0, [r2, #16]
 8011de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011de6:	2100      	movs	r1, #0
 8011de8:	4798      	blx	r3
 8011dea:	4603      	mov	r3, r0
 8011dec:	73bb      	strb	r3, [r7, #14]
      return;
 8011dee:	e08b      	b.n	8011f08 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011df0:	23f0      	movs	r3, #240	@ 0xf0
 8011df2:	73bb      	strb	r3, [r7, #14]
      return;
 8011df4:	e088      	b.n	8011f08 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011df6:	4b50      	ldr	r3, [pc, #320]	@ (8011f38 <tcp_listen_input+0x1f0>)
 8011df8:	695a      	ldr	r2, [r3, #20]
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8011f38 <tcp_listen_input+0x1f0>)
 8011e00:	691a      	ldr	r2, [r3, #16]
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	8ada      	ldrh	r2, [r3, #22]
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011e0e:	4b47      	ldr	r3, [pc, #284]	@ (8011f2c <tcp_listen_input+0x1e4>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	881b      	ldrh	r3, [r3, #0]
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2203      	movs	r2, #3
 8011e1e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011e20:	4b41      	ldr	r3, [pc, #260]	@ (8011f28 <tcp_listen_input+0x1e0>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	1c5a      	adds	r2, r3, #1
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011e32:	6978      	ldr	r0, [r7, #20]
 8011e34:	f7ff fa58 	bl	80112e8 <tcp_next_iss>
 8011e38:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	693a      	ldr	r2, [r7, #16]
 8011e3e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	693a      	ldr	r2, [r7, #16]
 8011e44:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	693a      	ldr	r2, [r7, #16]
 8011e4a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011e52:	4b35      	ldr	r3, [pc, #212]	@ (8011f28 <tcp_listen_input+0x1e0>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	1e5a      	subs	r2, r3, #1
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	691a      	ldr	r2, [r3, #16]
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	7a5b      	ldrb	r3, [r3, #9]
 8011e6e:	f003 030c 	and.w	r3, r3, #12
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	7a1a      	ldrb	r2, [r3, #8]
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011e80:	4b2e      	ldr	r3, [pc, #184]	@ (8011f3c <tcp_listen_input+0x1f4>)
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	60da      	str	r2, [r3, #12]
 8011e88:	4a2c      	ldr	r2, [pc, #176]	@ (8011f3c <tcp_listen_input+0x1f4>)
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	6013      	str	r3, [r2, #0]
 8011e8e:	f003 fd45 	bl	801591c <tcp_timer_needed>
 8011e92:	4b2b      	ldr	r3, [pc, #172]	@ (8011f40 <tcp_listen_input+0x1f8>)
 8011e94:	2201      	movs	r2, #1
 8011e96:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011e98:	6978      	ldr	r0, [r7, #20]
 8011e9a:	f001 fd8b 	bl	80139b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011e9e:	4b23      	ldr	r3, [pc, #140]	@ (8011f2c <tcp_listen_input+0x1e4>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	89db      	ldrh	r3, [r3, #14]
 8011ea4:	b29a      	uxth	r2, r3
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	3304      	adds	r3, #4
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f005 fa61 	bl	8017388 <ip4_route>
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	3304      	adds	r3, #4
 8011ecc:	461a      	mov	r2, r3
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f7ff fa30 	bl	8011334 <tcp_eff_send_mss_netif>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011edc:	2112      	movs	r1, #18
 8011ede:	6978      	ldr	r0, [r7, #20]
 8011ee0:	f002 fc96 	bl	8014810 <tcp_enqueue_flags>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	6978      	ldr	r0, [r7, #20]
 8011ef4:	f7fd fece 	bl	800fc94 <tcp_abandon>
      return;
 8011ef8:	e006      	b.n	8011f08 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011efa:	6978      	ldr	r0, [r7, #20]
 8011efc:	f002 fd76 	bl	80149ec <tcp_output>
  return;
 8011f00:	e001      	b.n	8011f06 <tcp_listen_input+0x1be>
    return;
 8011f02:	bf00      	nop
 8011f04:	e000      	b.n	8011f08 <tcp_listen_input+0x1c0>
  return;
 8011f06:	bf00      	nop
}
 8011f08:	371c      	adds	r7, #28
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd90      	pop	{r4, r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	2400c3e0 	.word	0x2400c3e0
 8011f14:	0801bb10 	.word	0x0801bb10
 8011f18:	0801bd08 	.word	0x0801bd08
 8011f1c:	0801bb5c 	.word	0x0801bb5c
 8011f20:	2400c3d8 	.word	0x2400c3d8
 8011f24:	2400c3de 	.word	0x2400c3de
 8011f28:	2400c3d4 	.word	0x2400c3d4
 8011f2c:	2400c3c4 	.word	0x2400c3c4
 8011f30:	240092ac 	.word	0x240092ac
 8011f34:	240092b0 	.word	0x240092b0
 8011f38:	2400929c 	.word	0x2400929c
 8011f3c:	2400c3a8 	.word	0x2400c3a8
 8011f40:	2400c3b0 	.word	0x2400c3b0

08011f44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af04      	add	r7, sp, #16
 8011f4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011f4c:	4b2f      	ldr	r3, [pc, #188]	@ (801200c <tcp_timewait_input+0xc8>)
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	f003 0304 	and.w	r3, r3, #4
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d153      	bne.n	8012000 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d106      	bne.n	8011f6c <tcp_timewait_input+0x28>
 8011f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8012010 <tcp_timewait_input+0xcc>)
 8011f60:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011f64:	492b      	ldr	r1, [pc, #172]	@ (8012014 <tcp_timewait_input+0xd0>)
 8011f66:	482c      	ldr	r0, [pc, #176]	@ (8012018 <tcp_timewait_input+0xd4>)
 8011f68:	f007 f91c 	bl	80191a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011f6c:	4b27      	ldr	r3, [pc, #156]	@ (801200c <tcp_timewait_input+0xc8>)
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	f003 0302 	and.w	r3, r3, #2
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d02a      	beq.n	8011fce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011f78:	4b28      	ldr	r3, [pc, #160]	@ (801201c <tcp_timewait_input+0xd8>)
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	db2d      	blt.n	8011fe2 <tcp_timewait_input+0x9e>
 8011f86:	4b25      	ldr	r3, [pc, #148]	@ (801201c <tcp_timewait_input+0xd8>)
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f8e:	6879      	ldr	r1, [r7, #4]
 8011f90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011f92:	440b      	add	r3, r1
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	dc23      	bgt.n	8011fe2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f9a:	4b21      	ldr	r3, [pc, #132]	@ (8012020 <tcp_timewait_input+0xdc>)
 8011f9c:	6819      	ldr	r1, [r3, #0]
 8011f9e:	4b21      	ldr	r3, [pc, #132]	@ (8012024 <tcp_timewait_input+0xe0>)
 8011fa0:	881b      	ldrh	r3, [r3, #0]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	4b1d      	ldr	r3, [pc, #116]	@ (801201c <tcp_timewait_input+0xd8>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011faa:	4b1f      	ldr	r3, [pc, #124]	@ (8012028 <tcp_timewait_input+0xe4>)
 8011fac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fae:	885b      	ldrh	r3, [r3, #2]
 8011fb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8012028 <tcp_timewait_input+0xe4>)
 8011fb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fb6:	8812      	ldrh	r2, [r2, #0]
 8011fb8:	b292      	uxth	r2, r2
 8011fba:	9202      	str	r2, [sp, #8]
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801202c <tcp_timewait_input+0xe8>)
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8012030 <tcp_timewait_input+0xec>)
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f003 fae6 	bl	8015598 <tcp_rst>
      return;
 8011fcc:	e01b      	b.n	8012006 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011fce:	4b0f      	ldr	r3, [pc, #60]	@ (801200c <tcp_timewait_input+0xc8>)
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	f003 0301 	and.w	r3, r3, #1
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d003      	beq.n	8011fe2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011fda:	4b16      	ldr	r3, [pc, #88]	@ (8012034 <tcp_timewait_input+0xf0>)
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011fe2:	4b10      	ldr	r3, [pc, #64]	@ (8012024 <tcp_timewait_input+0xe0>)
 8011fe4:	881b      	ldrh	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d00c      	beq.n	8012004 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8b5b      	ldrh	r3, [r3, #26]
 8011fee:	f043 0302 	orr.w	r3, r3, #2
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f002 fcf7 	bl	80149ec <tcp_output>
  }
  return;
 8011ffe:	e001      	b.n	8012004 <tcp_timewait_input+0xc0>
    return;
 8012000:	bf00      	nop
 8012002:	e000      	b.n	8012006 <tcp_timewait_input+0xc2>
  return;
 8012004:	bf00      	nop
}
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	2400c3e0 	.word	0x2400c3e0
 8012010:	0801bb10 	.word	0x0801bb10
 8012014:	0801bd28 	.word	0x0801bd28
 8012018:	0801bb5c 	.word	0x0801bb5c
 801201c:	2400c3d4 	.word	0x2400c3d4
 8012020:	2400c3d8 	.word	0x2400c3d8
 8012024:	2400c3de 	.word	0x2400c3de
 8012028:	2400c3c4 	.word	0x2400c3c4
 801202c:	240092ac 	.word	0x240092ac
 8012030:	240092b0 	.word	0x240092b0
 8012034:	2400c39c 	.word	0x2400c39c

08012038 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012038:	b590      	push	{r4, r7, lr}
 801203a:	b08d      	sub	sp, #52	@ 0x34
 801203c:	af04      	add	r7, sp, #16
 801203e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012040:	2300      	movs	r3, #0
 8012042:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012044:	2300      	movs	r3, #0
 8012046:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_process+0x24>
 801204e:	4b9d      	ldr	r3, [pc, #628]	@ (80122c4 <tcp_process+0x28c>)
 8012050:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012054:	499c      	ldr	r1, [pc, #624]	@ (80122c8 <tcp_process+0x290>)
 8012056:	489d      	ldr	r0, [pc, #628]	@ (80122cc <tcp_process+0x294>)
 8012058:	f007 f8a4 	bl	80191a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801205c:	4b9c      	ldr	r3, [pc, #624]	@ (80122d0 <tcp_process+0x298>)
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	f003 0304 	and.w	r3, r3, #4
 8012064:	2b00      	cmp	r3, #0
 8012066:	d04e      	beq.n	8012106 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	7d1b      	ldrb	r3, [r3, #20]
 801206c:	2b02      	cmp	r3, #2
 801206e:	d108      	bne.n	8012082 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012074:	4b97      	ldr	r3, [pc, #604]	@ (80122d4 <tcp_process+0x29c>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	429a      	cmp	r2, r3
 801207a:	d123      	bne.n	80120c4 <tcp_process+0x8c>
        acceptable = 1;
 801207c:	2301      	movs	r3, #1
 801207e:	76fb      	strb	r3, [r7, #27]
 8012080:	e020      	b.n	80120c4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012086:	4b94      	ldr	r3, [pc, #592]	@ (80122d8 <tcp_process+0x2a0>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	429a      	cmp	r2, r3
 801208c:	d102      	bne.n	8012094 <tcp_process+0x5c>
        acceptable = 1;
 801208e:	2301      	movs	r3, #1
 8012090:	76fb      	strb	r3, [r7, #27]
 8012092:	e017      	b.n	80120c4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012094:	4b90      	ldr	r3, [pc, #576]	@ (80122d8 <tcp_process+0x2a0>)
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	db10      	blt.n	80120c4 <tcp_process+0x8c>
 80120a2:	4b8d      	ldr	r3, [pc, #564]	@ (80122d8 <tcp_process+0x2a0>)
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80120ae:	440b      	add	r3, r1
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	dc06      	bgt.n	80120c4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	8b5b      	ldrh	r3, [r3, #26]
 80120ba:	f043 0302 	orr.w	r3, r3, #2
 80120be:	b29a      	uxth	r2, r3
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80120c4:	7efb      	ldrb	r3, [r7, #27]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d01b      	beq.n	8012102 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	7d1b      	ldrb	r3, [r3, #20]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <tcp_process+0xa8>
 80120d2:	4b7c      	ldr	r3, [pc, #496]	@ (80122c4 <tcp_process+0x28c>)
 80120d4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80120d8:	4980      	ldr	r1, [pc, #512]	@ (80122dc <tcp_process+0x2a4>)
 80120da:	487c      	ldr	r0, [pc, #496]	@ (80122cc <tcp_process+0x294>)
 80120dc:	f007 f862 	bl	80191a4 <iprintf>
      recv_flags |= TF_RESET;
 80120e0:	4b7f      	ldr	r3, [pc, #508]	@ (80122e0 <tcp_process+0x2a8>)
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	f043 0308 	orr.w	r3, r3, #8
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	4b7d      	ldr	r3, [pc, #500]	@ (80122e0 <tcp_process+0x2a8>)
 80120ec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	8b5b      	ldrh	r3, [r3, #26]
 80120f2:	f023 0301 	bic.w	r3, r3, #1
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80120fc:	f06f 030d 	mvn.w	r3, #13
 8012100:	e37a      	b.n	80127f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012102:	2300      	movs	r3, #0
 8012104:	e378      	b.n	80127f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012106:	4b72      	ldr	r3, [pc, #456]	@ (80122d0 <tcp_process+0x298>)
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	f003 0302 	and.w	r3, r3, #2
 801210e:	2b00      	cmp	r3, #0
 8012110:	d010      	beq.n	8012134 <tcp_process+0xfc>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	7d1b      	ldrb	r3, [r3, #20]
 8012116:	2b02      	cmp	r3, #2
 8012118:	d00c      	beq.n	8012134 <tcp_process+0xfc>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	7d1b      	ldrb	r3, [r3, #20]
 801211e:	2b03      	cmp	r3, #3
 8012120:	d008      	beq.n	8012134 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	8b5b      	ldrh	r3, [r3, #26]
 8012126:	f043 0302 	orr.w	r3, r3, #2
 801212a:	b29a      	uxth	r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012130:	2300      	movs	r3, #0
 8012132:	e361      	b.n	80127f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	8b5b      	ldrh	r3, [r3, #26]
 8012138:	f003 0310 	and.w	r3, r3, #16
 801213c:	2b00      	cmp	r3, #0
 801213e:	d103      	bne.n	8012148 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012140:	4b68      	ldr	r3, [pc, #416]	@ (80122e4 <tcp_process+0x2ac>)
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2200      	movs	r2, #0
 8012154:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f001 fc2b 	bl	80139b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	7d1b      	ldrb	r3, [r3, #20]
 8012162:	3b02      	subs	r3, #2
 8012164:	2b07      	cmp	r3, #7
 8012166:	f200 8337 	bhi.w	80127d8 <tcp_process+0x7a0>
 801216a:	a201      	add	r2, pc, #4	@ (adr r2, 8012170 <tcp_process+0x138>)
 801216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012170:	08012191 	.word	0x08012191
 8012174:	080123c1 	.word	0x080123c1
 8012178:	08012539 	.word	0x08012539
 801217c:	08012563 	.word	0x08012563
 8012180:	08012687 	.word	0x08012687
 8012184:	08012539 	.word	0x08012539
 8012188:	08012713 	.word	0x08012713
 801218c:	080127a3 	.word	0x080127a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012190:	4b4f      	ldr	r3, [pc, #316]	@ (80122d0 <tcp_process+0x298>)
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	f003 0310 	and.w	r3, r3, #16
 8012198:	2b00      	cmp	r3, #0
 801219a:	f000 80e4 	beq.w	8012366 <tcp_process+0x32e>
 801219e:	4b4c      	ldr	r3, [pc, #304]	@ (80122d0 <tcp_process+0x298>)
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	f003 0302 	and.w	r3, r3, #2
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f000 80dd 	beq.w	8012366 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121b0:	1c5a      	adds	r2, r3, #1
 80121b2:	4b48      	ldr	r3, [pc, #288]	@ (80122d4 <tcp_process+0x29c>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	f040 80d5 	bne.w	8012366 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80121bc:	4b46      	ldr	r3, [pc, #280]	@ (80122d8 <tcp_process+0x2a0>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	1c5a      	adds	r2, r3, #1
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80121ce:	4b41      	ldr	r3, [pc, #260]	@ (80122d4 <tcp_process+0x29c>)
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80121d6:	4b44      	ldr	r3, [pc, #272]	@ (80122e8 <tcp_process+0x2b0>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	89db      	ldrh	r3, [r3, #14]
 80121dc:	b29a      	uxth	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80121f0:	4b39      	ldr	r3, [pc, #228]	@ (80122d8 <tcp_process+0x2a0>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	1e5a      	subs	r2, r3, #1
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2204      	movs	r2, #4
 80121fe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	3304      	adds	r3, #4
 8012208:	4618      	mov	r0, r3
 801220a:	f005 f8bd 	bl	8017388 <ip4_route>
 801220e:	4601      	mov	r1, r0
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	3304      	adds	r3, #4
 8012214:	461a      	mov	r2, r3
 8012216:	4620      	mov	r0, r4
 8012218:	f7ff f88c 	bl	8011334 <tcp_eff_send_mss_netif>
 801221c:	4603      	mov	r3, r0
 801221e:	461a      	mov	r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012228:	009a      	lsls	r2, r3, #2
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012234:	428b      	cmp	r3, r1
 8012236:	bf38      	it	cc
 8012238:	460b      	movcc	r3, r1
 801223a:	429a      	cmp	r2, r3
 801223c:	d204      	bcs.n	8012248 <tcp_process+0x210>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	b29b      	uxth	r3, r3
 8012246:	e00d      	b.n	8012264 <tcp_process+0x22c>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801224c:	005b      	lsls	r3, r3, #1
 801224e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012252:	4293      	cmp	r3, r2
 8012254:	d904      	bls.n	8012260 <tcp_process+0x228>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801225a:	005b      	lsls	r3, r3, #1
 801225c:	b29b      	uxth	r3, r3
 801225e:	e001      	b.n	8012264 <tcp_process+0x22c>
 8012260:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012270:	2b00      	cmp	r3, #0
 8012272:	d106      	bne.n	8012282 <tcp_process+0x24a>
 8012274:	4b13      	ldr	r3, [pc, #76]	@ (80122c4 <tcp_process+0x28c>)
 8012276:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801227a:	491c      	ldr	r1, [pc, #112]	@ (80122ec <tcp_process+0x2b4>)
 801227c:	4813      	ldr	r0, [pc, #76]	@ (80122cc <tcp_process+0x294>)
 801227e:	f006 ff91 	bl	80191a4 <iprintf>
        --pcb->snd_queuelen;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012288:	3b01      	subs	r3, #1
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012296:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012298:	69fb      	ldr	r3, [r7, #28]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d12a      	bne.n	80122f4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80122a4:	69fb      	ldr	r3, [r7, #28]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d106      	bne.n	80122b8 <tcp_process+0x280>
 80122aa:	4b06      	ldr	r3, [pc, #24]	@ (80122c4 <tcp_process+0x28c>)
 80122ac:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80122b0:	490f      	ldr	r1, [pc, #60]	@ (80122f0 <tcp_process+0x2b8>)
 80122b2:	4806      	ldr	r0, [pc, #24]	@ (80122cc <tcp_process+0x294>)
 80122b4:	f006 ff76 	bl	80191a4 <iprintf>
          pcb->unsent = rseg->next;
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	66da      	str	r2, [r3, #108]	@ 0x6c
 80122c0:	e01c      	b.n	80122fc <tcp_process+0x2c4>
 80122c2:	bf00      	nop
 80122c4:	0801bb10 	.word	0x0801bb10
 80122c8:	0801bd48 	.word	0x0801bd48
 80122cc:	0801bb5c 	.word	0x0801bb5c
 80122d0:	2400c3e0 	.word	0x2400c3e0
 80122d4:	2400c3d8 	.word	0x2400c3d8
 80122d8:	2400c3d4 	.word	0x2400c3d4
 80122dc:	0801bd64 	.word	0x0801bd64
 80122e0:	2400c3e1 	.word	0x2400c3e1
 80122e4:	2400c39c 	.word	0x2400c39c
 80122e8:	2400c3c4 	.word	0x2400c3c4
 80122ec:	0801bd84 	.word	0x0801bd84
 80122f0:	0801bd9c 	.word	0x0801bd9c
        } else {
          pcb->unacked = rseg->next;
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80122fc:	69f8      	ldr	r0, [r7, #28]
 80122fe:	f7fe fc2e 	bl	8010b5e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012306:	2b00      	cmp	r3, #0
 8012308:	d104      	bne.n	8012314 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012310:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012312:	e006      	b.n	8012322 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012328:	2b00      	cmp	r3, #0
 801232a:	d00a      	beq.n	8012342 <tcp_process+0x30a>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	6910      	ldr	r0, [r2, #16]
 8012336:	2200      	movs	r2, #0
 8012338:	6879      	ldr	r1, [r7, #4]
 801233a:	4798      	blx	r3
 801233c:	4603      	mov	r3, r0
 801233e:	76bb      	strb	r3, [r7, #26]
 8012340:	e001      	b.n	8012346 <tcp_process+0x30e>
 8012342:	2300      	movs	r3, #0
 8012344:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012346:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801234a:	f113 0f0d 	cmn.w	r3, #13
 801234e:	d102      	bne.n	8012356 <tcp_process+0x31e>
          return ERR_ABRT;
 8012350:	f06f 030c 	mvn.w	r3, #12
 8012354:	e250      	b.n	80127f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	8b5b      	ldrh	r3, [r3, #26]
 801235a:	f043 0302 	orr.w	r3, r3, #2
 801235e:	b29a      	uxth	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012364:	e23a      	b.n	80127dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012366:	4b98      	ldr	r3, [pc, #608]	@ (80125c8 <tcp_process+0x590>)
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	f003 0310 	and.w	r3, r3, #16
 801236e:	2b00      	cmp	r3, #0
 8012370:	f000 8234 	beq.w	80127dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012374:	4b95      	ldr	r3, [pc, #596]	@ (80125cc <tcp_process+0x594>)
 8012376:	6819      	ldr	r1, [r3, #0]
 8012378:	4b95      	ldr	r3, [pc, #596]	@ (80125d0 <tcp_process+0x598>)
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	4b95      	ldr	r3, [pc, #596]	@ (80125d4 <tcp_process+0x59c>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012384:	4b94      	ldr	r3, [pc, #592]	@ (80125d8 <tcp_process+0x5a0>)
 8012386:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012388:	885b      	ldrh	r3, [r3, #2]
 801238a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801238c:	4a92      	ldr	r2, [pc, #584]	@ (80125d8 <tcp_process+0x5a0>)
 801238e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012390:	8812      	ldrh	r2, [r2, #0]
 8012392:	b292      	uxth	r2, r2
 8012394:	9202      	str	r2, [sp, #8]
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	4b90      	ldr	r3, [pc, #576]	@ (80125dc <tcp_process+0x5a4>)
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	4b90      	ldr	r3, [pc, #576]	@ (80125e0 <tcp_process+0x5a8>)
 801239e:	4602      	mov	r2, r0
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f003 f8f9 	bl	8015598 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80123ac:	2b05      	cmp	r3, #5
 80123ae:	f200 8215 	bhi.w	80127dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2200      	movs	r2, #0
 80123b6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f002 feb5 	bl	8015128 <tcp_rexmit_rto>
      break;
 80123be:	e20d      	b.n	80127dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80123c0:	4b81      	ldr	r3, [pc, #516]	@ (80125c8 <tcp_process+0x590>)
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	f003 0310 	and.w	r3, r3, #16
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 80a1 	beq.w	8012510 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123ce:	4b7f      	ldr	r3, [pc, #508]	@ (80125cc <tcp_process+0x594>)
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	3b01      	subs	r3, #1
 80123da:	2b00      	cmp	r3, #0
 80123dc:	db7e      	blt.n	80124dc <tcp_process+0x4a4>
 80123de:	4b7b      	ldr	r3, [pc, #492]	@ (80125cc <tcp_process+0x594>)
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	dc77      	bgt.n	80124dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2204      	movs	r2, #4
 80123f0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d102      	bne.n	8012400 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80123fa:	23fa      	movs	r3, #250	@ 0xfa
 80123fc:	76bb      	strb	r3, [r7, #26]
 80123fe:	e01d      	b.n	801243c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012404:	699b      	ldr	r3, [r3, #24]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d106      	bne.n	8012418 <tcp_process+0x3e0>
 801240a:	4b76      	ldr	r3, [pc, #472]	@ (80125e4 <tcp_process+0x5ac>)
 801240c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8012410:	4975      	ldr	r1, [pc, #468]	@ (80125e8 <tcp_process+0x5b0>)
 8012412:	4876      	ldr	r0, [pc, #472]	@ (80125ec <tcp_process+0x5b4>)
 8012414:	f006 fec6 	bl	80191a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801241c:	699b      	ldr	r3, [r3, #24]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00a      	beq.n	8012438 <tcp_process+0x400>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012426:	699b      	ldr	r3, [r3, #24]
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	6910      	ldr	r0, [r2, #16]
 801242c:	2200      	movs	r2, #0
 801242e:	6879      	ldr	r1, [r7, #4]
 8012430:	4798      	blx	r3
 8012432:	4603      	mov	r3, r0
 8012434:	76bb      	strb	r3, [r7, #26]
 8012436:	e001      	b.n	801243c <tcp_process+0x404>
 8012438:	23f0      	movs	r3, #240	@ 0xf0
 801243a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801243c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00a      	beq.n	801245a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012444:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012448:	f113 0f0d 	cmn.w	r3, #13
 801244c:	d002      	beq.n	8012454 <tcp_process+0x41c>
              tcp_abort(pcb);
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f7fd fcde 	bl	800fe10 <tcp_abort>
            }
            return ERR_ABRT;
 8012454:	f06f 030c 	mvn.w	r3, #12
 8012458:	e1ce      	b.n	80127f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f000 fae0 	bl	8012a20 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012460:	4b63      	ldr	r3, [pc, #396]	@ (80125f0 <tcp_process+0x5b8>)
 8012462:	881b      	ldrh	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d005      	beq.n	8012474 <tcp_process+0x43c>
            recv_acked--;
 8012468:	4b61      	ldr	r3, [pc, #388]	@ (80125f0 <tcp_process+0x5b8>)
 801246a:	881b      	ldrh	r3, [r3, #0]
 801246c:	3b01      	subs	r3, #1
 801246e:	b29a      	uxth	r2, r3
 8012470:	4b5f      	ldr	r3, [pc, #380]	@ (80125f0 <tcp_process+0x5b8>)
 8012472:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012478:	009a      	lsls	r2, r3, #2
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012484:	428b      	cmp	r3, r1
 8012486:	bf38      	it	cc
 8012488:	460b      	movcc	r3, r1
 801248a:	429a      	cmp	r2, r3
 801248c:	d204      	bcs.n	8012498 <tcp_process+0x460>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	b29b      	uxth	r3, r3
 8012496:	e00d      	b.n	80124b4 <tcp_process+0x47c>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	f241 121c 	movw	r2, #4380	@ 0x111c
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d904      	bls.n	80124b0 <tcp_process+0x478>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124aa:	005b      	lsls	r3, r3, #1
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	e001      	b.n	80124b4 <tcp_process+0x47c>
 80124b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80124ba:	4b4e      	ldr	r3, [pc, #312]	@ (80125f4 <tcp_process+0x5bc>)
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	f003 0320 	and.w	r3, r3, #32
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d037      	beq.n	8012536 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	8b5b      	ldrh	r3, [r3, #26]
 80124ca:	f043 0302 	orr.w	r3, r3, #2
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2207      	movs	r2, #7
 80124d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80124da:	e02c      	b.n	8012536 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80124dc:	4b3b      	ldr	r3, [pc, #236]	@ (80125cc <tcp_process+0x594>)
 80124de:	6819      	ldr	r1, [r3, #0]
 80124e0:	4b3b      	ldr	r3, [pc, #236]	@ (80125d0 <tcp_process+0x598>)
 80124e2:	881b      	ldrh	r3, [r3, #0]
 80124e4:	461a      	mov	r2, r3
 80124e6:	4b3b      	ldr	r3, [pc, #236]	@ (80125d4 <tcp_process+0x59c>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80124ec:	4b3a      	ldr	r3, [pc, #232]	@ (80125d8 <tcp_process+0x5a0>)
 80124ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80124f0:	885b      	ldrh	r3, [r3, #2]
 80124f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80124f4:	4a38      	ldr	r2, [pc, #224]	@ (80125d8 <tcp_process+0x5a0>)
 80124f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80124f8:	8812      	ldrh	r2, [r2, #0]
 80124fa:	b292      	uxth	r2, r2
 80124fc:	9202      	str	r2, [sp, #8]
 80124fe:	9301      	str	r3, [sp, #4]
 8012500:	4b36      	ldr	r3, [pc, #216]	@ (80125dc <tcp_process+0x5a4>)
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	4b36      	ldr	r3, [pc, #216]	@ (80125e0 <tcp_process+0x5a8>)
 8012506:	4602      	mov	r2, r0
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f003 f845 	bl	8015598 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801250e:	e167      	b.n	80127e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012510:	4b2d      	ldr	r3, [pc, #180]	@ (80125c8 <tcp_process+0x590>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	f003 0302 	and.w	r3, r3, #2
 8012518:	2b00      	cmp	r3, #0
 801251a:	f000 8161 	beq.w	80127e0 <tcp_process+0x7a8>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012522:	1e5a      	subs	r2, r3, #1
 8012524:	4b2b      	ldr	r3, [pc, #172]	@ (80125d4 <tcp_process+0x59c>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	429a      	cmp	r2, r3
 801252a:	f040 8159 	bne.w	80127e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f002 fe1c 	bl	801516c <tcp_rexmit>
      break;
 8012534:	e154      	b.n	80127e0 <tcp_process+0x7a8>
 8012536:	e153      	b.n	80127e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 fa71 	bl	8012a20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801253e:	4b2d      	ldr	r3, [pc, #180]	@ (80125f4 <tcp_process+0x5bc>)
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	f003 0320 	and.w	r3, r3, #32
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 814c 	beq.w	80127e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	8b5b      	ldrh	r3, [r3, #26]
 8012550:	f043 0302 	orr.w	r3, r3, #2
 8012554:	b29a      	uxth	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2207      	movs	r2, #7
 801255e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012560:	e140      	b.n	80127e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f000 fa5c 	bl	8012a20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012568:	4b22      	ldr	r3, [pc, #136]	@ (80125f4 <tcp_process+0x5bc>)
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	f003 0320 	and.w	r3, r3, #32
 8012570:	2b00      	cmp	r3, #0
 8012572:	d071      	beq.n	8012658 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012574:	4b14      	ldr	r3, [pc, #80]	@ (80125c8 <tcp_process+0x590>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	f003 0310 	and.w	r3, r3, #16
 801257c:	2b00      	cmp	r3, #0
 801257e:	d060      	beq.n	8012642 <tcp_process+0x60a>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012584:	4b11      	ldr	r3, [pc, #68]	@ (80125cc <tcp_process+0x594>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	429a      	cmp	r2, r3
 801258a:	d15a      	bne.n	8012642 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012590:	2b00      	cmp	r3, #0
 8012592:	d156      	bne.n	8012642 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8b5b      	ldrh	r3, [r3, #26]
 8012598:	f043 0302 	orr.w	r3, r3, #2
 801259c:	b29a      	uxth	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7fe fdbc 	bl	8011120 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80125a8:	4b13      	ldr	r3, [pc, #76]	@ (80125f8 <tcp_process+0x5c0>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d105      	bne.n	80125be <tcp_process+0x586>
 80125b2:	4b11      	ldr	r3, [pc, #68]	@ (80125f8 <tcp_process+0x5c0>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	4a0f      	ldr	r2, [pc, #60]	@ (80125f8 <tcp_process+0x5c0>)
 80125ba:	6013      	str	r3, [r2, #0]
 80125bc:	e02e      	b.n	801261c <tcp_process+0x5e4>
 80125be:	4b0e      	ldr	r3, [pc, #56]	@ (80125f8 <tcp_process+0x5c0>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	617b      	str	r3, [r7, #20]
 80125c4:	e027      	b.n	8012616 <tcp_process+0x5de>
 80125c6:	bf00      	nop
 80125c8:	2400c3e0 	.word	0x2400c3e0
 80125cc:	2400c3d8 	.word	0x2400c3d8
 80125d0:	2400c3de 	.word	0x2400c3de
 80125d4:	2400c3d4 	.word	0x2400c3d4
 80125d8:	2400c3c4 	.word	0x2400c3c4
 80125dc:	240092ac 	.word	0x240092ac
 80125e0:	240092b0 	.word	0x240092b0
 80125e4:	0801bb10 	.word	0x0801bb10
 80125e8:	0801bdb0 	.word	0x0801bdb0
 80125ec:	0801bb5c 	.word	0x0801bb5c
 80125f0:	2400c3dc 	.word	0x2400c3dc
 80125f4:	2400c3e1 	.word	0x2400c3e1
 80125f8:	2400c3a8 	.word	0x2400c3a8
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	429a      	cmp	r2, r3
 8012604:	d104      	bne.n	8012610 <tcp_process+0x5d8>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	68da      	ldr	r2, [r3, #12]
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	60da      	str	r2, [r3, #12]
 801260e:	e005      	b.n	801261c <tcp_process+0x5e4>
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	617b      	str	r3, [r7, #20]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1ef      	bne.n	80125fc <tcp_process+0x5c4>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2200      	movs	r2, #0
 8012620:	60da      	str	r2, [r3, #12]
 8012622:	4b77      	ldr	r3, [pc, #476]	@ (8012800 <tcp_process+0x7c8>)
 8012624:	2201      	movs	r2, #1
 8012626:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	220a      	movs	r2, #10
 801262c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801262e:	4b75      	ldr	r3, [pc, #468]	@ (8012804 <tcp_process+0x7cc>)
 8012630:	681a      	ldr	r2, [r3, #0]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	60da      	str	r2, [r3, #12]
 8012636:	4a73      	ldr	r2, [pc, #460]	@ (8012804 <tcp_process+0x7cc>)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6013      	str	r3, [r2, #0]
 801263c:	f003 f96e 	bl	801591c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012640:	e0d2      	b.n	80127e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8b5b      	ldrh	r3, [r3, #26]
 8012646:	f043 0302 	orr.w	r3, r3, #2
 801264a:	b29a      	uxth	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2208      	movs	r2, #8
 8012654:	751a      	strb	r2, [r3, #20]
      break;
 8012656:	e0c7      	b.n	80127e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012658:	4b6b      	ldr	r3, [pc, #428]	@ (8012808 <tcp_process+0x7d0>)
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	f003 0310 	and.w	r3, r3, #16
 8012660:	2b00      	cmp	r3, #0
 8012662:	f000 80c1 	beq.w	80127e8 <tcp_process+0x7b0>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801266a:	4b68      	ldr	r3, [pc, #416]	@ (801280c <tcp_process+0x7d4>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	429a      	cmp	r2, r3
 8012670:	f040 80ba 	bne.w	80127e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012678:	2b00      	cmp	r3, #0
 801267a:	f040 80b5 	bne.w	80127e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2206      	movs	r2, #6
 8012682:	751a      	strb	r2, [r3, #20]
      break;
 8012684:	e0b0      	b.n	80127e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f000 f9ca 	bl	8012a20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801268c:	4b60      	ldr	r3, [pc, #384]	@ (8012810 <tcp_process+0x7d8>)
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	f003 0320 	and.w	r3, r3, #32
 8012694:	2b00      	cmp	r3, #0
 8012696:	f000 80a9 	beq.w	80127ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	8b5b      	ldrh	r3, [r3, #26]
 801269e:	f043 0302 	orr.w	r3, r3, #2
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f7fe fd39 	bl	8011120 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80126ae:	4b59      	ldr	r3, [pc, #356]	@ (8012814 <tcp_process+0x7dc>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d105      	bne.n	80126c4 <tcp_process+0x68c>
 80126b8:	4b56      	ldr	r3, [pc, #344]	@ (8012814 <tcp_process+0x7dc>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	4a55      	ldr	r2, [pc, #340]	@ (8012814 <tcp_process+0x7dc>)
 80126c0:	6013      	str	r3, [r2, #0]
 80126c2:	e013      	b.n	80126ec <tcp_process+0x6b4>
 80126c4:	4b53      	ldr	r3, [pc, #332]	@ (8012814 <tcp_process+0x7dc>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	613b      	str	r3, [r7, #16]
 80126ca:	e00c      	b.n	80126e6 <tcp_process+0x6ae>
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d104      	bne.n	80126e0 <tcp_process+0x6a8>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68da      	ldr	r2, [r3, #12]
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	60da      	str	r2, [r3, #12]
 80126de:	e005      	b.n	80126ec <tcp_process+0x6b4>
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	613b      	str	r3, [r7, #16]
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1ef      	bne.n	80126cc <tcp_process+0x694>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2200      	movs	r2, #0
 80126f0:	60da      	str	r2, [r3, #12]
 80126f2:	4b43      	ldr	r3, [pc, #268]	@ (8012800 <tcp_process+0x7c8>)
 80126f4:	2201      	movs	r2, #1
 80126f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	220a      	movs	r2, #10
 80126fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80126fe:	4b41      	ldr	r3, [pc, #260]	@ (8012804 <tcp_process+0x7cc>)
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	60da      	str	r2, [r3, #12]
 8012706:	4a3f      	ldr	r2, [pc, #252]	@ (8012804 <tcp_process+0x7cc>)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6013      	str	r3, [r2, #0]
 801270c:	f003 f906 	bl	801591c <tcp_timer_needed>
      }
      break;
 8012710:	e06c      	b.n	80127ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 f984 	bl	8012a20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012718:	4b3b      	ldr	r3, [pc, #236]	@ (8012808 <tcp_process+0x7d0>)
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	f003 0310 	and.w	r3, r3, #16
 8012720:	2b00      	cmp	r3, #0
 8012722:	d065      	beq.n	80127f0 <tcp_process+0x7b8>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012728:	4b38      	ldr	r3, [pc, #224]	@ (801280c <tcp_process+0x7d4>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	429a      	cmp	r2, r3
 801272e:	d15f      	bne.n	80127f0 <tcp_process+0x7b8>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012734:	2b00      	cmp	r3, #0
 8012736:	d15b      	bne.n	80127f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7fe fcf1 	bl	8011120 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801273e:	4b35      	ldr	r3, [pc, #212]	@ (8012814 <tcp_process+0x7dc>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d105      	bne.n	8012754 <tcp_process+0x71c>
 8012748:	4b32      	ldr	r3, [pc, #200]	@ (8012814 <tcp_process+0x7dc>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	4a31      	ldr	r2, [pc, #196]	@ (8012814 <tcp_process+0x7dc>)
 8012750:	6013      	str	r3, [r2, #0]
 8012752:	e013      	b.n	801277c <tcp_process+0x744>
 8012754:	4b2f      	ldr	r3, [pc, #188]	@ (8012814 <tcp_process+0x7dc>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	60fb      	str	r3, [r7, #12]
 801275a:	e00c      	b.n	8012776 <tcp_process+0x73e>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	429a      	cmp	r2, r3
 8012764:	d104      	bne.n	8012770 <tcp_process+0x738>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	68da      	ldr	r2, [r3, #12]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	60da      	str	r2, [r3, #12]
 801276e:	e005      	b.n	801277c <tcp_process+0x744>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	60fb      	str	r3, [r7, #12]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d1ef      	bne.n	801275c <tcp_process+0x724>
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	60da      	str	r2, [r3, #12]
 8012782:	4b1f      	ldr	r3, [pc, #124]	@ (8012800 <tcp_process+0x7c8>)
 8012784:	2201      	movs	r2, #1
 8012786:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	220a      	movs	r2, #10
 801278c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801278e:	4b1d      	ldr	r3, [pc, #116]	@ (8012804 <tcp_process+0x7cc>)
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	60da      	str	r2, [r3, #12]
 8012796:	4a1b      	ldr	r2, [pc, #108]	@ (8012804 <tcp_process+0x7cc>)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	f003 f8be 	bl	801591c <tcp_timer_needed>
      }
      break;
 80127a0:	e026      	b.n	80127f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 f93c 	bl	8012a20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80127a8:	4b17      	ldr	r3, [pc, #92]	@ (8012808 <tcp_process+0x7d0>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	f003 0310 	and.w	r3, r3, #16
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d01f      	beq.n	80127f4 <tcp_process+0x7bc>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80127b8:	4b14      	ldr	r3, [pc, #80]	@ (801280c <tcp_process+0x7d4>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d119      	bne.n	80127f4 <tcp_process+0x7bc>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d115      	bne.n	80127f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80127c8:	4b11      	ldr	r3, [pc, #68]	@ (8012810 <tcp_process+0x7d8>)
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	f043 0310 	orr.w	r3, r3, #16
 80127d0:	b2da      	uxtb	r2, r3
 80127d2:	4b0f      	ldr	r3, [pc, #60]	@ (8012810 <tcp_process+0x7d8>)
 80127d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80127d6:	e00d      	b.n	80127f4 <tcp_process+0x7bc>
    default:
      break;
 80127d8:	bf00      	nop
 80127da:	e00c      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127dc:	bf00      	nop
 80127de:	e00a      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127e0:	bf00      	nop
 80127e2:	e008      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127e4:	bf00      	nop
 80127e6:	e006      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127e8:	bf00      	nop
 80127ea:	e004      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127ec:	bf00      	nop
 80127ee:	e002      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127f0:	bf00      	nop
 80127f2:	e000      	b.n	80127f6 <tcp_process+0x7be>
      break;
 80127f4:	bf00      	nop
  }
  return ERR_OK;
 80127f6:	2300      	movs	r3, #0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3724      	adds	r7, #36	@ 0x24
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd90      	pop	{r4, r7, pc}
 8012800:	2400c3b0 	.word	0x2400c3b0
 8012804:	2400c3ac 	.word	0x2400c3ac
 8012808:	2400c3e0 	.word	0x2400c3e0
 801280c:	2400c3d8 	.word	0x2400c3d8
 8012810:	2400c3e1 	.word	0x2400c3e1
 8012814:	2400c3a8 	.word	0x2400c3a8

08012818 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012818:	b590      	push	{r4, r7, lr}
 801281a:	b085      	sub	sp, #20
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d106      	bne.n	8012836 <tcp_oos_insert_segment+0x1e>
 8012828:	4b3b      	ldr	r3, [pc, #236]	@ (8012918 <tcp_oos_insert_segment+0x100>)
 801282a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801282e:	493b      	ldr	r1, [pc, #236]	@ (801291c <tcp_oos_insert_segment+0x104>)
 8012830:	483b      	ldr	r0, [pc, #236]	@ (8012920 <tcp_oos_insert_segment+0x108>)
 8012832:	f006 fcb7 	bl	80191a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	899b      	ldrh	r3, [r3, #12]
 801283c:	b29b      	uxth	r3, r3
 801283e:	4618      	mov	r0, r3
 8012840:	f7fa ff36 	bl	800d6b0 <lwip_htons>
 8012844:	4603      	mov	r3, r0
 8012846:	b2db      	uxtb	r3, r3
 8012848:	f003 0301 	and.w	r3, r3, #1
 801284c:	2b00      	cmp	r3, #0
 801284e:	d028      	beq.n	80128a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012850:	6838      	ldr	r0, [r7, #0]
 8012852:	f7fe f96f 	bl	8010b34 <tcp_segs_free>
    next = NULL;
 8012856:	2300      	movs	r3, #0
 8012858:	603b      	str	r3, [r7, #0]
 801285a:	e056      	b.n	801290a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	899b      	ldrh	r3, [r3, #12]
 8012862:	b29b      	uxth	r3, r3
 8012864:	4618      	mov	r0, r3
 8012866:	f7fa ff23 	bl	800d6b0 <lwip_htons>
 801286a:	4603      	mov	r3, r0
 801286c:	b2db      	uxtb	r3, r3
 801286e:	f003 0301 	and.w	r3, r3, #1
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00d      	beq.n	8012892 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	899b      	ldrh	r3, [r3, #12]
 801287c:	b29c      	uxth	r4, r3
 801287e:	2001      	movs	r0, #1
 8012880:	f7fa ff16 	bl	800d6b0 <lwip_htons>
 8012884:	4603      	mov	r3, r0
 8012886:	461a      	mov	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	4322      	orrs	r2, r4
 801288e:	b292      	uxth	r2, r2
 8012890:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f7fe f95e 	bl	8010b5e <tcp_seg_free>
    while (next &&
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d00e      	beq.n	80128c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	891b      	ldrh	r3, [r3, #8]
 80128ac:	461a      	mov	r2, r3
 80128ae:	4b1d      	ldr	r3, [pc, #116]	@ (8012924 <tcp_oos_insert_segment+0x10c>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	441a      	add	r2, r3
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	68db      	ldr	r3, [r3, #12]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	6839      	ldr	r1, [r7, #0]
 80128bc:	8909      	ldrh	r1, [r1, #8]
 80128be:	440b      	add	r3, r1
 80128c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	daca      	bge.n	801285c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d01e      	beq.n	801290a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	891b      	ldrh	r3, [r3, #8]
 80128d0:	461a      	mov	r2, r3
 80128d2:	4b14      	ldr	r3, [pc, #80]	@ (8012924 <tcp_oos_insert_segment+0x10c>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	441a      	add	r2, r3
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	dd12      	ble.n	801290a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012924 <tcp_oos_insert_segment+0x10c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	685a      	ldr	r2, [r3, #4]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	891b      	ldrh	r3, [r3, #8]
 8012902:	4619      	mov	r1, r3
 8012904:	4610      	mov	r0, r2
 8012906:	f7fc faf9 	bl	800eefc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	683a      	ldr	r2, [r7, #0]
 801290e:	601a      	str	r2, [r3, #0]
}
 8012910:	bf00      	nop
 8012912:	3714      	adds	r7, #20
 8012914:	46bd      	mov	sp, r7
 8012916:	bd90      	pop	{r4, r7, pc}
 8012918:	0801bb10 	.word	0x0801bb10
 801291c:	0801bdd0 	.word	0x0801bdd0
 8012920:	0801bb5c 	.word	0x0801bb5c
 8012924:	2400c3d4 	.word	0x2400c3d4

08012928 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012928:	b5b0      	push	{r4, r5, r7, lr}
 801292a:	b086      	sub	sp, #24
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
 8012934:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012936:	e03e      	b.n	80129b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	4618      	mov	r0, r3
 8012948:	f7fc fcec 	bl	800f324 <pbuf_clen>
 801294c:	4603      	mov	r3, r0
 801294e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012956:	8a7a      	ldrh	r2, [r7, #18]
 8012958:	429a      	cmp	r2, r3
 801295a:	d906      	bls.n	801296a <tcp_free_acked_segments+0x42>
 801295c:	4b2a      	ldr	r3, [pc, #168]	@ (8012a08 <tcp_free_acked_segments+0xe0>)
 801295e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012962:	492a      	ldr	r1, [pc, #168]	@ (8012a0c <tcp_free_acked_segments+0xe4>)
 8012964:	482a      	ldr	r0, [pc, #168]	@ (8012a10 <tcp_free_acked_segments+0xe8>)
 8012966:	f006 fc1d 	bl	80191a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012970:	8a7b      	ldrh	r3, [r7, #18]
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	b29a      	uxth	r2, r3
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	891a      	ldrh	r2, [r3, #8]
 8012980:	4b24      	ldr	r3, [pc, #144]	@ (8012a14 <tcp_free_acked_segments+0xec>)
 8012982:	881b      	ldrh	r3, [r3, #0]
 8012984:	4413      	add	r3, r2
 8012986:	b29a      	uxth	r2, r3
 8012988:	4b22      	ldr	r3, [pc, #136]	@ (8012a14 <tcp_free_acked_segments+0xec>)
 801298a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801298c:	6978      	ldr	r0, [r7, #20]
 801298e:	f7fe f8e6 	bl	8010b5e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00c      	beq.n	80129b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d109      	bne.n	80129b6 <tcp_free_acked_segments+0x8e>
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d106      	bne.n	80129b6 <tcp_free_acked_segments+0x8e>
 80129a8:	4b17      	ldr	r3, [pc, #92]	@ (8012a08 <tcp_free_acked_segments+0xe0>)
 80129aa:	f240 4261 	movw	r2, #1121	@ 0x461
 80129ae:	491a      	ldr	r1, [pc, #104]	@ (8012a18 <tcp_free_acked_segments+0xf0>)
 80129b0:	4817      	ldr	r0, [pc, #92]	@ (8012a10 <tcp_free_acked_segments+0xe8>)
 80129b2:	f006 fbf7 	bl	80191a4 <iprintf>
  while (seg_list != NULL &&
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d020      	beq.n	80129fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7fa fe89 	bl	800d6da <lwip_htonl>
 80129c8:	4604      	mov	r4, r0
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	461d      	mov	r5, r3
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	899b      	ldrh	r3, [r3, #12]
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fa fe69 	bl	800d6b0 <lwip_htons>
 80129de:	4603      	mov	r3, r0
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	f003 0303 	and.w	r3, r3, #3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <tcp_free_acked_segments+0xc6>
 80129ea:	2301      	movs	r3, #1
 80129ec:	e000      	b.n	80129f0 <tcp_free_acked_segments+0xc8>
 80129ee:	2300      	movs	r3, #0
 80129f0:	442b      	add	r3, r5
 80129f2:	18e2      	adds	r2, r4, r3
 80129f4:	4b09      	ldr	r3, [pc, #36]	@ (8012a1c <tcp_free_acked_segments+0xf4>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	dd9c      	ble.n	8012938 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80129fe:	68bb      	ldr	r3, [r7, #8]
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3718      	adds	r7, #24
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bdb0      	pop	{r4, r5, r7, pc}
 8012a08:	0801bb10 	.word	0x0801bb10
 8012a0c:	0801bdf8 	.word	0x0801bdf8
 8012a10:	0801bb5c 	.word	0x0801bb5c
 8012a14:	2400c3dc 	.word	0x2400c3dc
 8012a18:	0801be20 	.word	0x0801be20
 8012a1c:	2400c3d8 	.word	0x2400c3d8

08012a20 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012a20:	b5b0      	push	{r4, r5, r7, lr}
 8012a22:	b094      	sub	sp, #80	@ 0x50
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <tcp_receive+0x20>
 8012a32:	4b91      	ldr	r3, [pc, #580]	@ (8012c78 <tcp_receive+0x258>)
 8012a34:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012a38:	4990      	ldr	r1, [pc, #576]	@ (8012c7c <tcp_receive+0x25c>)
 8012a3a:	4891      	ldr	r0, [pc, #580]	@ (8012c80 <tcp_receive+0x260>)
 8012a3c:	f006 fbb2 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	7d1b      	ldrb	r3, [r3, #20]
 8012a44:	2b03      	cmp	r3, #3
 8012a46:	d806      	bhi.n	8012a56 <tcp_receive+0x36>
 8012a48:	4b8b      	ldr	r3, [pc, #556]	@ (8012c78 <tcp_receive+0x258>)
 8012a4a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012a4e:	498d      	ldr	r1, [pc, #564]	@ (8012c84 <tcp_receive+0x264>)
 8012a50:	488b      	ldr	r0, [pc, #556]	@ (8012c80 <tcp_receive+0x260>)
 8012a52:	f006 fba7 	bl	80191a4 <iprintf>

  if (flags & TCP_ACK) {
 8012a56:	4b8c      	ldr	r3, [pc, #560]	@ (8012c88 <tcp_receive+0x268>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	f003 0310 	and.w	r3, r3, #16
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 8264 	beq.w	8012f2c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a70:	4413      	add	r3, r2
 8012a72:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012a78:	4b84      	ldr	r3, [pc, #528]	@ (8012c8c <tcp_receive+0x26c>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	1ad3      	subs	r3, r2, r3
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	db1b      	blt.n	8012aba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012a86:	4b81      	ldr	r3, [pc, #516]	@ (8012c8c <tcp_receive+0x26c>)
 8012a88:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d106      	bne.n	8012a9c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012a92:	4b7f      	ldr	r3, [pc, #508]	@ (8012c90 <tcp_receive+0x270>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	1ad3      	subs	r3, r2, r3
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	db0e      	blt.n	8012aba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012aa0:	4b7b      	ldr	r3, [pc, #492]	@ (8012c90 <tcp_receive+0x270>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d125      	bne.n	8012af4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012aa8:	4b7a      	ldr	r3, [pc, #488]	@ (8012c94 <tcp_receive+0x274>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	89db      	ldrh	r3, [r3, #14]
 8012aae:	b29a      	uxth	r2, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d91c      	bls.n	8012af4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012aba:	4b76      	ldr	r3, [pc, #472]	@ (8012c94 <tcp_receive+0x274>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	89db      	ldrh	r3, [r3, #14]
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d205      	bcs.n	8012ae4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012ae4:	4b69      	ldr	r3, [pc, #420]	@ (8012c8c <tcp_receive+0x26c>)
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012aec:	4b68      	ldr	r3, [pc, #416]	@ (8012c90 <tcp_receive+0x270>)
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012af4:	4b66      	ldr	r3, [pc, #408]	@ (8012c90 <tcp_receive+0x270>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	dc58      	bgt.n	8012bb4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012b02:	4b65      	ldr	r3, [pc, #404]	@ (8012c98 <tcp_receive+0x278>)
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d14b      	bne.n	8012ba2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012b14:	4413      	add	r3, r2
 8012b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d142      	bne.n	8012ba2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	db3d      	blt.n	8012ba2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b2a:	4b59      	ldr	r3, [pc, #356]	@ (8012c90 <tcp_receive+0x270>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d137      	bne.n	8012ba2 <tcp_receive+0x182>
              found_dupack = 1;
 8012b32:	2301      	movs	r3, #1
 8012b34:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012b3c:	2bff      	cmp	r3, #255	@ 0xff
 8012b3e:	d007      	beq.n	8012b50 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012b46:	3301      	adds	r3, #1
 8012b48:	b2da      	uxtb	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012b56:	2b03      	cmp	r3, #3
 8012b58:	d91b      	bls.n	8012b92 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b64:	4413      	add	r3, r2
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d30a      	bcc.n	8012b88 <tcp_receive+0x168>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b7c:	4413      	add	r3, r2
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012b86:	e004      	b.n	8012b92 <tcp_receive+0x172>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d902      	bls.n	8012ba2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f002 fb51 	bl	8015244 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f040 8161 	bne.w	8012e6c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012bb2:	e15b      	b.n	8012e6c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bb4:	4b36      	ldr	r3, [pc, #216]	@ (8012c90 <tcp_receive+0x270>)
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bbc:	1ad3      	subs	r3, r2, r3
 8012bbe:	3b01      	subs	r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f2c0 814e 	blt.w	8012e62 <tcp_receive+0x442>
 8012bc6:	4b32      	ldr	r3, [pc, #200]	@ (8012c90 <tcp_receive+0x270>)
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bce:	1ad3      	subs	r3, r2, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f300 8146 	bgt.w	8012e62 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	8b5b      	ldrh	r3, [r3, #26]
 8012bda:	f003 0304 	and.w	r3, r3, #4
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d010      	beq.n	8012c04 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	8b5b      	ldrh	r3, [r3, #26]
 8012be6:	f023 0304 	bic.w	r3, r3, #4
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012c12:	10db      	asrs	r3, r3, #3
 8012c14:	b21b      	sxth	r3, r3
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	4413      	add	r3, r2
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	b21a      	sxth	r2, r3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012c2c:	4b18      	ldr	r3, [pc, #96]	@ (8012c90 <tcp_receive+0x270>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012c44:	4b12      	ldr	r3, [pc, #72]	@ (8012c90 <tcp_receive+0x270>)
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	7d1b      	ldrb	r3, [r3, #20]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	f240 8097 	bls.w	8012d84 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d245      	bcs.n	8012cf2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8b5b      	ldrh	r3, [r3, #26]
 8012c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d014      	beq.n	8012c9c <tcp_receive+0x27c>
 8012c72:	2301      	movs	r3, #1
 8012c74:	e013      	b.n	8012c9e <tcp_receive+0x27e>
 8012c76:	bf00      	nop
 8012c78:	0801bb10 	.word	0x0801bb10
 8012c7c:	0801be40 	.word	0x0801be40
 8012c80:	0801bb5c 	.word	0x0801bb5c
 8012c84:	0801be5c 	.word	0x0801be5c
 8012c88:	2400c3e0 	.word	0x2400c3e0
 8012c8c:	2400c3d4 	.word	0x2400c3d4
 8012c90:	2400c3d8 	.word	0x2400c3d8
 8012c94:	2400c3c4 	.word	0x2400c3c4
 8012c98:	2400c3de 	.word	0x2400c3de
 8012c9c:	2302      	movs	r3, #2
 8012c9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012ca2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012cac:	fb12 f303 	smulbb	r3, r2, r3
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	bf28      	it	cs
 8012cb8:	4613      	movcs	r3, r2
 8012cba:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012cc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012cc4:	4413      	add	r3, r2
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d309      	bcc.n	8012ce6 <tcp_receive+0x2c6>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012cd8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012cda:	4413      	add	r3, r2
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012ce4:	e04e      	b.n	8012d84 <tcp_receive+0x364>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012cec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012cf0:	e048      	b.n	8012d84 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012cf8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012cfa:	4413      	add	r3, r2
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d309      	bcc.n	8012d1c <tcp_receive+0x2fc>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012d0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012d10:	4413      	add	r3, r2
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012d1a:	e004      	b.n	8012d26 <tcp_receive+0x306>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d326      	bcc.n	8012d84 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012d42:	1ad3      	subs	r3, r2, r3
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d56:	4413      	add	r3, r2
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d30a      	bcc.n	8012d7a <tcp_receive+0x35a>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d6e:	4413      	add	r3, r2
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012d78:	e004      	b.n	8012d84 <tcp_receive+0x364>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012d80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d8c:	4a98      	ldr	r2, [pc, #608]	@ (8012ff0 <tcp_receive+0x5d0>)
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff fdca 	bl	8012928 <tcp_free_acked_segments>
 8012d94:	4602      	mov	r2, r0
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012da2:	4a94      	ldr	r2, [pc, #592]	@ (8012ff4 <tcp_receive+0x5d4>)
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7ff fdbf 	bl	8012928 <tcp_free_acked_segments>
 8012daa:	4602      	mov	r2, r0
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d104      	bne.n	8012dc2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012dbe:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012dc0:	e002      	b.n	8012dc8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d103      	bne.n	8012dde <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012de4:	4b84      	ldr	r3, [pc, #528]	@ (8012ff8 <tcp_receive+0x5d8>)
 8012de6:	881b      	ldrh	r3, [r3, #0]
 8012de8:	4413      	add	r3, r2
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	8b5b      	ldrh	r3, [r3, #26]
 8012df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d035      	beq.n	8012e6a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d118      	bne.n	8012e38 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00c      	beq.n	8012e28 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fa fc5d 	bl	800d6da <lwip_htonl>
 8012e20:	4603      	mov	r3, r0
 8012e22:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	dc20      	bgt.n	8012e6a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	8b5b      	ldrh	r3, [r3, #26]
 8012e2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e36:	e018      	b.n	8012e6a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7fa fc48 	bl	800d6da <lwip_htonl>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	1ae3      	subs	r3, r4, r3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	dc0b      	bgt.n	8012e6a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	8b5b      	ldrh	r3, [r3, #26]
 8012e56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012e5a:	b29a      	uxth	r2, r3
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e60:	e003      	b.n	8012e6a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f002 fbea 	bl	801563c <tcp_send_empty_ack>
 8012e68:	e000      	b.n	8012e6c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e6a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d05b      	beq.n	8012f2c <tcp_receive+0x50c>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e78:	4b60      	ldr	r3, [pc, #384]	@ (8012ffc <tcp_receive+0x5dc>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	da54      	bge.n	8012f2c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012e82:	4b5f      	ldr	r3, [pc, #380]	@ (8013000 <tcp_receive+0x5e0>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	1ad3      	subs	r3, r2, r3
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012e96:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012ea0:	10db      	asrs	r3, r3, #3
 8012ea2:	b21b      	sxth	r3, r3
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	1ad3      	subs	r3, r2, r3
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012eba:	4413      	add	r3, r2
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	b21a      	sxth	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012ec4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	da05      	bge.n	8012ed8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012ed0:	425b      	negs	r3, r3
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012ed8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012ee2:	109b      	asrs	r3, r3, #2
 8012ee4:	b21b      	sxth	r3, r3
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012ef6:	b29a      	uxth	r2, r3
 8012ef8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012efc:	4413      	add	r3, r2
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	b21a      	sxth	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012f0c:	10db      	asrs	r3, r3, #3
 8012f0e:	b21b      	sxth	r3, r3
 8012f10:	b29a      	uxth	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	4413      	add	r3, r2
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	b21a      	sxth	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012f2c:	4b35      	ldr	r3, [pc, #212]	@ (8013004 <tcp_receive+0x5e4>)
 8012f2e:	881b      	ldrh	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f000 84df 	beq.w	80138f4 <tcp_receive+0xed4>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	7d1b      	ldrb	r3, [r3, #20]
 8012f3a:	2b06      	cmp	r3, #6
 8012f3c:	f200 84da 	bhi.w	80138f4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f44:	4b30      	ldr	r3, [pc, #192]	@ (8013008 <tcp_receive+0x5e8>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	f2c0 808f 	blt.w	8013070 <tcp_receive+0x650>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f56:	4b2b      	ldr	r3, [pc, #172]	@ (8013004 <tcp_receive+0x5e4>)
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8013008 <tcp_receive+0x5e8>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	440b      	add	r3, r1
 8012f62:	1ad3      	subs	r3, r2, r3
 8012f64:	3301      	adds	r3, #1
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f300 8082 	bgt.w	8013070 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012f6c:	4b27      	ldr	r3, [pc, #156]	@ (801300c <tcp_receive+0x5ec>)
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f76:	4b24      	ldr	r3, [pc, #144]	@ (8013008 <tcp_receive+0x5e8>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012f7e:	4b23      	ldr	r3, [pc, #140]	@ (801300c <tcp_receive+0x5ec>)
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <tcp_receive+0x574>
 8012f86:	4b22      	ldr	r3, [pc, #136]	@ (8013010 <tcp_receive+0x5f0>)
 8012f88:	f240 5294 	movw	r2, #1428	@ 0x594
 8012f8c:	4921      	ldr	r1, [pc, #132]	@ (8013014 <tcp_receive+0x5f4>)
 8012f8e:	4822      	ldr	r0, [pc, #136]	@ (8013018 <tcp_receive+0x5f8>)
 8012f90:	f006 f908 	bl	80191a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f96:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d906      	bls.n	8012fac <tcp_receive+0x58c>
 8012f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8013010 <tcp_receive+0x5f0>)
 8012fa0:	f240 5295 	movw	r2, #1429	@ 0x595
 8012fa4:	491d      	ldr	r1, [pc, #116]	@ (801301c <tcp_receive+0x5fc>)
 8012fa6:	481c      	ldr	r0, [pc, #112]	@ (8013018 <tcp_receive+0x5f8>)
 8012fa8:	f006 f8fc 	bl	80191a4 <iprintf>
      off = (u16_t)off32;
 8012fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012fb2:	4b16      	ldr	r3, [pc, #88]	@ (801300c <tcp_receive+0x5ec>)
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	891b      	ldrh	r3, [r3, #8]
 8012fb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d906      	bls.n	8012fce <tcp_receive+0x5ae>
 8012fc0:	4b13      	ldr	r3, [pc, #76]	@ (8013010 <tcp_receive+0x5f0>)
 8012fc2:	f240 5297 	movw	r2, #1431	@ 0x597
 8012fc6:	4916      	ldr	r1, [pc, #88]	@ (8013020 <tcp_receive+0x600>)
 8012fc8:	4813      	ldr	r0, [pc, #76]	@ (8013018 <tcp_receive+0x5f8>)
 8012fca:	f006 f8eb 	bl	80191a4 <iprintf>
      inseg.len -= off;
 8012fce:	4b0f      	ldr	r3, [pc, #60]	@ (801300c <tcp_receive+0x5ec>)
 8012fd0:	891a      	ldrh	r2, [r3, #8]
 8012fd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012fd6:	1ad3      	subs	r3, r2, r3
 8012fd8:	b29a      	uxth	r2, r3
 8012fda:	4b0c      	ldr	r3, [pc, #48]	@ (801300c <tcp_receive+0x5ec>)
 8012fdc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012fde:	4b0b      	ldr	r3, [pc, #44]	@ (801300c <tcp_receive+0x5ec>)
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	891a      	ldrh	r2, [r3, #8]
 8012fe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012fec:	e02a      	b.n	8013044 <tcp_receive+0x624>
 8012fee:	bf00      	nop
 8012ff0:	0801be78 	.word	0x0801be78
 8012ff4:	0801be80 	.word	0x0801be80
 8012ff8:	2400c3dc 	.word	0x2400c3dc
 8012ffc:	2400c3d8 	.word	0x2400c3d8
 8013000:	2400c39c 	.word	0x2400c39c
 8013004:	2400c3de 	.word	0x2400c3de
 8013008:	2400c3d4 	.word	0x2400c3d4
 801300c:	2400c3b4 	.word	0x2400c3b4
 8013010:	0801bb10 	.word	0x0801bb10
 8013014:	0801be88 	.word	0x0801be88
 8013018:	0801bb5c 	.word	0x0801bb5c
 801301c:	0801be98 	.word	0x0801be98
 8013020:	0801bea8 	.word	0x0801bea8
        off -= p->len;
 8013024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013026:	895b      	ldrh	r3, [r3, #10]
 8013028:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013034:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013036:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801303a:	2200      	movs	r2, #0
 801303c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801303e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013046:	895b      	ldrh	r3, [r3, #10]
 8013048:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801304c:	429a      	cmp	r2, r3
 801304e:	d8e9      	bhi.n	8013024 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013050:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013054:	4619      	mov	r1, r3
 8013056:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013058:	f7fc f850 	bl	800f0fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013060:	4a90      	ldr	r2, [pc, #576]	@ (80132a4 <tcp_receive+0x884>)
 8013062:	6013      	str	r3, [r2, #0]
 8013064:	4b90      	ldr	r3, [pc, #576]	@ (80132a8 <tcp_receive+0x888>)
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	4a8e      	ldr	r2, [pc, #568]	@ (80132a4 <tcp_receive+0x884>)
 801306a:	6812      	ldr	r2, [r2, #0]
 801306c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801306e:	e00d      	b.n	801308c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013070:	4b8c      	ldr	r3, [pc, #560]	@ (80132a4 <tcp_receive+0x884>)
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	2b00      	cmp	r3, #0
 801307c:	da06      	bge.n	801308c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	8b5b      	ldrh	r3, [r3, #26]
 8013082:	f043 0302 	orr.w	r3, r3, #2
 8013086:	b29a      	uxth	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801308c:	4b85      	ldr	r3, [pc, #532]	@ (80132a4 <tcp_receive+0x884>)
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013094:	1ad3      	subs	r3, r2, r3
 8013096:	2b00      	cmp	r3, #0
 8013098:	f2c0 8427 	blt.w	80138ea <tcp_receive+0xeca>
 801309c:	4b81      	ldr	r3, [pc, #516]	@ (80132a4 <tcp_receive+0x884>)
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80130a8:	440b      	add	r3, r1
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	3301      	adds	r3, #1
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f300 841b 	bgt.w	80138ea <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130b8:	4b7a      	ldr	r3, [pc, #488]	@ (80132a4 <tcp_receive+0x884>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	429a      	cmp	r2, r3
 80130be:	f040 8298 	bne.w	80135f2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80130c2:	4b79      	ldr	r3, [pc, #484]	@ (80132a8 <tcp_receive+0x888>)
 80130c4:	891c      	ldrh	r4, [r3, #8]
 80130c6:	4b78      	ldr	r3, [pc, #480]	@ (80132a8 <tcp_receive+0x888>)
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	899b      	ldrh	r3, [r3, #12]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fa faee 	bl	800d6b0 <lwip_htons>
 80130d4:	4603      	mov	r3, r0
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	f003 0303 	and.w	r3, r3, #3
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d001      	beq.n	80130e4 <tcp_receive+0x6c4>
 80130e0:	2301      	movs	r3, #1
 80130e2:	e000      	b.n	80130e6 <tcp_receive+0x6c6>
 80130e4:	2300      	movs	r3, #0
 80130e6:	4423      	add	r3, r4
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	4b70      	ldr	r3, [pc, #448]	@ (80132ac <tcp_receive+0x88c>)
 80130ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80130f2:	4b6e      	ldr	r3, [pc, #440]	@ (80132ac <tcp_receive+0x88c>)
 80130f4:	881b      	ldrh	r3, [r3, #0]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d274      	bcs.n	80131e4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80130fa:	4b6b      	ldr	r3, [pc, #428]	@ (80132a8 <tcp_receive+0x888>)
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	899b      	ldrh	r3, [r3, #12]
 8013100:	b29b      	uxth	r3, r3
 8013102:	4618      	mov	r0, r3
 8013104:	f7fa fad4 	bl	800d6b0 <lwip_htons>
 8013108:	4603      	mov	r3, r0
 801310a:	b2db      	uxtb	r3, r3
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	2b00      	cmp	r3, #0
 8013112:	d01e      	beq.n	8013152 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013114:	4b64      	ldr	r3, [pc, #400]	@ (80132a8 <tcp_receive+0x888>)
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	899b      	ldrh	r3, [r3, #12]
 801311a:	b29b      	uxth	r3, r3
 801311c:	b21b      	sxth	r3, r3
 801311e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013122:	b21c      	sxth	r4, r3
 8013124:	4b60      	ldr	r3, [pc, #384]	@ (80132a8 <tcp_receive+0x888>)
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	899b      	ldrh	r3, [r3, #12]
 801312a:	b29b      	uxth	r3, r3
 801312c:	4618      	mov	r0, r3
 801312e:	f7fa fabf 	bl	800d6b0 <lwip_htons>
 8013132:	4603      	mov	r3, r0
 8013134:	b2db      	uxtb	r3, r3
 8013136:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801313a:	b29b      	uxth	r3, r3
 801313c:	4618      	mov	r0, r3
 801313e:	f7fa fab7 	bl	800d6b0 <lwip_htons>
 8013142:	4603      	mov	r3, r0
 8013144:	b21b      	sxth	r3, r3
 8013146:	4323      	orrs	r3, r4
 8013148:	b21a      	sxth	r2, r3
 801314a:	4b57      	ldr	r3, [pc, #348]	@ (80132a8 <tcp_receive+0x888>)
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	b292      	uxth	r2, r2
 8013150:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013156:	4b54      	ldr	r3, [pc, #336]	@ (80132a8 <tcp_receive+0x888>)
 8013158:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801315a:	4b53      	ldr	r3, [pc, #332]	@ (80132a8 <tcp_receive+0x888>)
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	899b      	ldrh	r3, [r3, #12]
 8013160:	b29b      	uxth	r3, r3
 8013162:	4618      	mov	r0, r3
 8013164:	f7fa faa4 	bl	800d6b0 <lwip_htons>
 8013168:	4603      	mov	r3, r0
 801316a:	b2db      	uxtb	r3, r3
 801316c:	f003 0302 	and.w	r3, r3, #2
 8013170:	2b00      	cmp	r3, #0
 8013172:	d005      	beq.n	8013180 <tcp_receive+0x760>
            inseg.len -= 1;
 8013174:	4b4c      	ldr	r3, [pc, #304]	@ (80132a8 <tcp_receive+0x888>)
 8013176:	891b      	ldrh	r3, [r3, #8]
 8013178:	3b01      	subs	r3, #1
 801317a:	b29a      	uxth	r2, r3
 801317c:	4b4a      	ldr	r3, [pc, #296]	@ (80132a8 <tcp_receive+0x888>)
 801317e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013180:	4b49      	ldr	r3, [pc, #292]	@ (80132a8 <tcp_receive+0x888>)
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	4a48      	ldr	r2, [pc, #288]	@ (80132a8 <tcp_receive+0x888>)
 8013186:	8912      	ldrh	r2, [r2, #8]
 8013188:	4611      	mov	r1, r2
 801318a:	4618      	mov	r0, r3
 801318c:	f7fb feb6 	bl	800eefc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013190:	4b45      	ldr	r3, [pc, #276]	@ (80132a8 <tcp_receive+0x888>)
 8013192:	891c      	ldrh	r4, [r3, #8]
 8013194:	4b44      	ldr	r3, [pc, #272]	@ (80132a8 <tcp_receive+0x888>)
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	899b      	ldrh	r3, [r3, #12]
 801319a:	b29b      	uxth	r3, r3
 801319c:	4618      	mov	r0, r3
 801319e:	f7fa fa87 	bl	800d6b0 <lwip_htons>
 80131a2:	4603      	mov	r3, r0
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	f003 0303 	and.w	r3, r3, #3
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d001      	beq.n	80131b2 <tcp_receive+0x792>
 80131ae:	2301      	movs	r3, #1
 80131b0:	e000      	b.n	80131b4 <tcp_receive+0x794>
 80131b2:	2300      	movs	r3, #0
 80131b4:	4423      	add	r3, r4
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	4b3c      	ldr	r3, [pc, #240]	@ (80132ac <tcp_receive+0x88c>)
 80131ba:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80131bc:	4b3b      	ldr	r3, [pc, #236]	@ (80132ac <tcp_receive+0x88c>)
 80131be:	881b      	ldrh	r3, [r3, #0]
 80131c0:	461a      	mov	r2, r3
 80131c2:	4b38      	ldr	r3, [pc, #224]	@ (80132a4 <tcp_receive+0x884>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	441a      	add	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131cc:	6879      	ldr	r1, [r7, #4]
 80131ce:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80131d0:	440b      	add	r3, r1
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d006      	beq.n	80131e4 <tcp_receive+0x7c4>
 80131d6:	4b36      	ldr	r3, [pc, #216]	@ (80132b0 <tcp_receive+0x890>)
 80131d8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80131dc:	4935      	ldr	r1, [pc, #212]	@ (80132b4 <tcp_receive+0x894>)
 80131de:	4836      	ldr	r0, [pc, #216]	@ (80132b8 <tcp_receive+0x898>)
 80131e0:	f005 ffe0 	bl	80191a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	f000 80e6 	beq.w	80133ba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80131ee:	4b2e      	ldr	r3, [pc, #184]	@ (80132a8 <tcp_receive+0x888>)
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	899b      	ldrh	r3, [r3, #12]
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7fa fa5a 	bl	800d6b0 <lwip_htons>
 80131fc:	4603      	mov	r3, r0
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	2b00      	cmp	r3, #0
 8013206:	d010      	beq.n	801322a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013208:	e00a      	b.n	8013220 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801320e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801321a:	68f8      	ldr	r0, [r7, #12]
 801321c:	f7fd fc9f 	bl	8010b5e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013224:	2b00      	cmp	r3, #0
 8013226:	d1f0      	bne.n	801320a <tcp_receive+0x7ea>
 8013228:	e0c7      	b.n	80133ba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013230:	e051      	b.n	80132d6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	899b      	ldrh	r3, [r3, #12]
 8013238:	b29b      	uxth	r3, r3
 801323a:	4618      	mov	r0, r3
 801323c:	f7fa fa38 	bl	800d6b0 <lwip_htons>
 8013240:	4603      	mov	r3, r0
 8013242:	b2db      	uxtb	r3, r3
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	2b00      	cmp	r3, #0
 801324a:	d03c      	beq.n	80132c6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801324c:	4b16      	ldr	r3, [pc, #88]	@ (80132a8 <tcp_receive+0x888>)
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	899b      	ldrh	r3, [r3, #12]
 8013252:	b29b      	uxth	r3, r3
 8013254:	4618      	mov	r0, r3
 8013256:	f7fa fa2b 	bl	800d6b0 <lwip_htons>
 801325a:	4603      	mov	r3, r0
 801325c:	b2db      	uxtb	r3, r3
 801325e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013262:	2b00      	cmp	r3, #0
 8013264:	d12f      	bne.n	80132c6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013266:	4b10      	ldr	r3, [pc, #64]	@ (80132a8 <tcp_receive+0x888>)
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	899b      	ldrh	r3, [r3, #12]
 801326c:	b29c      	uxth	r4, r3
 801326e:	2001      	movs	r0, #1
 8013270:	f7fa fa1e 	bl	800d6b0 <lwip_htons>
 8013274:	4603      	mov	r3, r0
 8013276:	461a      	mov	r2, r3
 8013278:	4b0b      	ldr	r3, [pc, #44]	@ (80132a8 <tcp_receive+0x888>)
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	4322      	orrs	r2, r4
 801327e:	b292      	uxth	r2, r2
 8013280:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013282:	4b09      	ldr	r3, [pc, #36]	@ (80132a8 <tcp_receive+0x888>)
 8013284:	891c      	ldrh	r4, [r3, #8]
 8013286:	4b08      	ldr	r3, [pc, #32]	@ (80132a8 <tcp_receive+0x888>)
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	899b      	ldrh	r3, [r3, #12]
 801328c:	b29b      	uxth	r3, r3
 801328e:	4618      	mov	r0, r3
 8013290:	f7fa fa0e 	bl	800d6b0 <lwip_htons>
 8013294:	4603      	mov	r3, r0
 8013296:	b2db      	uxtb	r3, r3
 8013298:	f003 0303 	and.w	r3, r3, #3
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00d      	beq.n	80132bc <tcp_receive+0x89c>
 80132a0:	2301      	movs	r3, #1
 80132a2:	e00c      	b.n	80132be <tcp_receive+0x89e>
 80132a4:	2400c3d4 	.word	0x2400c3d4
 80132a8:	2400c3b4 	.word	0x2400c3b4
 80132ac:	2400c3de 	.word	0x2400c3de
 80132b0:	0801bb10 	.word	0x0801bb10
 80132b4:	0801beb8 	.word	0x0801beb8
 80132b8:	0801bb5c 	.word	0x0801bb5c
 80132bc:	2300      	movs	r3, #0
 80132be:	4423      	add	r3, r4
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	4b98      	ldr	r3, [pc, #608]	@ (8013524 <tcp_receive+0xb04>)
 80132c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80132c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80132ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80132d0:	6938      	ldr	r0, [r7, #16]
 80132d2:	f7fd fc44 	bl	8010b5e <tcp_seg_free>
            while (next &&
 80132d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d00e      	beq.n	80132fa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80132dc:	4b91      	ldr	r3, [pc, #580]	@ (8013524 <tcp_receive+0xb04>)
 80132de:	881b      	ldrh	r3, [r3, #0]
 80132e0:	461a      	mov	r2, r3
 80132e2:	4b91      	ldr	r3, [pc, #580]	@ (8013528 <tcp_receive+0xb08>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	441a      	add	r2, r3
 80132e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132ea:	68db      	ldr	r3, [r3, #12]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80132f0:	8909      	ldrh	r1, [r1, #8]
 80132f2:	440b      	add	r3, r1
 80132f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	da9b      	bge.n	8013232 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80132fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d059      	beq.n	80133b4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013300:	4b88      	ldr	r3, [pc, #544]	@ (8013524 <tcp_receive+0xb04>)
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	461a      	mov	r2, r3
 8013306:	4b88      	ldr	r3, [pc, #544]	@ (8013528 <tcp_receive+0xb08>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	441a      	add	r2, r3
 801330c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013314:	2b00      	cmp	r3, #0
 8013316:	dd4d      	ble.n	80133b4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	b29a      	uxth	r2, r3
 8013320:	4b81      	ldr	r3, [pc, #516]	@ (8013528 <tcp_receive+0xb08>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	b29b      	uxth	r3, r3
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	b29a      	uxth	r2, r3
 801332a:	4b80      	ldr	r3, [pc, #512]	@ (801352c <tcp_receive+0xb0c>)
 801332c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801332e:	4b7f      	ldr	r3, [pc, #508]	@ (801352c <tcp_receive+0xb0c>)
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	899b      	ldrh	r3, [r3, #12]
 8013334:	b29b      	uxth	r3, r3
 8013336:	4618      	mov	r0, r3
 8013338:	f7fa f9ba 	bl	800d6b0 <lwip_htons>
 801333c:	4603      	mov	r3, r0
 801333e:	b2db      	uxtb	r3, r3
 8013340:	f003 0302 	and.w	r3, r3, #2
 8013344:	2b00      	cmp	r3, #0
 8013346:	d005      	beq.n	8013354 <tcp_receive+0x934>
                inseg.len -= 1;
 8013348:	4b78      	ldr	r3, [pc, #480]	@ (801352c <tcp_receive+0xb0c>)
 801334a:	891b      	ldrh	r3, [r3, #8]
 801334c:	3b01      	subs	r3, #1
 801334e:	b29a      	uxth	r2, r3
 8013350:	4b76      	ldr	r3, [pc, #472]	@ (801352c <tcp_receive+0xb0c>)
 8013352:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013354:	4b75      	ldr	r3, [pc, #468]	@ (801352c <tcp_receive+0xb0c>)
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	4a74      	ldr	r2, [pc, #464]	@ (801352c <tcp_receive+0xb0c>)
 801335a:	8912      	ldrh	r2, [r2, #8]
 801335c:	4611      	mov	r1, r2
 801335e:	4618      	mov	r0, r3
 8013360:	f7fb fdcc 	bl	800eefc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013364:	4b71      	ldr	r3, [pc, #452]	@ (801352c <tcp_receive+0xb0c>)
 8013366:	891c      	ldrh	r4, [r3, #8]
 8013368:	4b70      	ldr	r3, [pc, #448]	@ (801352c <tcp_receive+0xb0c>)
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	899b      	ldrh	r3, [r3, #12]
 801336e:	b29b      	uxth	r3, r3
 8013370:	4618      	mov	r0, r3
 8013372:	f7fa f99d 	bl	800d6b0 <lwip_htons>
 8013376:	4603      	mov	r3, r0
 8013378:	b2db      	uxtb	r3, r3
 801337a:	f003 0303 	and.w	r3, r3, #3
 801337e:	2b00      	cmp	r3, #0
 8013380:	d001      	beq.n	8013386 <tcp_receive+0x966>
 8013382:	2301      	movs	r3, #1
 8013384:	e000      	b.n	8013388 <tcp_receive+0x968>
 8013386:	2300      	movs	r3, #0
 8013388:	4423      	add	r3, r4
 801338a:	b29a      	uxth	r2, r3
 801338c:	4b65      	ldr	r3, [pc, #404]	@ (8013524 <tcp_receive+0xb04>)
 801338e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013390:	4b64      	ldr	r3, [pc, #400]	@ (8013524 <tcp_receive+0xb04>)
 8013392:	881b      	ldrh	r3, [r3, #0]
 8013394:	461a      	mov	r2, r3
 8013396:	4b64      	ldr	r3, [pc, #400]	@ (8013528 <tcp_receive+0xb08>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	441a      	add	r2, r3
 801339c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d006      	beq.n	80133b4 <tcp_receive+0x994>
 80133a6:	4b62      	ldr	r3, [pc, #392]	@ (8013530 <tcp_receive+0xb10>)
 80133a8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80133ac:	4961      	ldr	r1, [pc, #388]	@ (8013534 <tcp_receive+0xb14>)
 80133ae:	4862      	ldr	r0, [pc, #392]	@ (8013538 <tcp_receive+0xb18>)
 80133b0:	f005 fef8 	bl	80191a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80133b8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80133ba:	4b5a      	ldr	r3, [pc, #360]	@ (8013524 <tcp_receive+0xb04>)
 80133bc:	881b      	ldrh	r3, [r3, #0]
 80133be:	461a      	mov	r2, r3
 80133c0:	4b59      	ldr	r3, [pc, #356]	@ (8013528 <tcp_receive+0xb08>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	441a      	add	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80133ce:	4b55      	ldr	r3, [pc, #340]	@ (8013524 <tcp_receive+0xb04>)
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d206      	bcs.n	80133e4 <tcp_receive+0x9c4>
 80133d6:	4b56      	ldr	r3, [pc, #344]	@ (8013530 <tcp_receive+0xb10>)
 80133d8:	f240 6207 	movw	r2, #1543	@ 0x607
 80133dc:	4957      	ldr	r1, [pc, #348]	@ (801353c <tcp_receive+0xb1c>)
 80133de:	4856      	ldr	r0, [pc, #344]	@ (8013538 <tcp_receive+0xb18>)
 80133e0:	f005 fee0 	bl	80191a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80133e8:	4b4e      	ldr	r3, [pc, #312]	@ (8013524 <tcp_receive+0xb04>)
 80133ea:	881b      	ldrh	r3, [r3, #0]
 80133ec:	1ad3      	subs	r3, r2, r3
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f7fc fe8b 	bl	8010110 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80133fa:	4b4c      	ldr	r3, [pc, #304]	@ (801352c <tcp_receive+0xb0c>)
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	891b      	ldrh	r3, [r3, #8]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d006      	beq.n	8013412 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013404:	4b49      	ldr	r3, [pc, #292]	@ (801352c <tcp_receive+0xb0c>)
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	4a4d      	ldr	r2, [pc, #308]	@ (8013540 <tcp_receive+0xb20>)
 801340a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801340c:	4b47      	ldr	r3, [pc, #284]	@ (801352c <tcp_receive+0xb0c>)
 801340e:	2200      	movs	r2, #0
 8013410:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013412:	4b46      	ldr	r3, [pc, #280]	@ (801352c <tcp_receive+0xb0c>)
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	899b      	ldrh	r3, [r3, #12]
 8013418:	b29b      	uxth	r3, r3
 801341a:	4618      	mov	r0, r3
 801341c:	f7fa f948 	bl	800d6b0 <lwip_htons>
 8013420:	4603      	mov	r3, r0
 8013422:	b2db      	uxtb	r3, r3
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 80b8 	beq.w	801359e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801342e:	4b45      	ldr	r3, [pc, #276]	@ (8013544 <tcp_receive+0xb24>)
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	f043 0320 	orr.w	r3, r3, #32
 8013436:	b2da      	uxtb	r2, r3
 8013438:	4b42      	ldr	r3, [pc, #264]	@ (8013544 <tcp_receive+0xb24>)
 801343a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801343c:	e0af      	b.n	801359e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013442:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	4a36      	ldr	r2, [pc, #216]	@ (8013528 <tcp_receive+0xb08>)
 801344e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	891b      	ldrh	r3, [r3, #8]
 8013454:	461c      	mov	r4, r3
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	899b      	ldrh	r3, [r3, #12]
 801345c:	b29b      	uxth	r3, r3
 801345e:	4618      	mov	r0, r3
 8013460:	f7fa f926 	bl	800d6b0 <lwip_htons>
 8013464:	4603      	mov	r3, r0
 8013466:	b2db      	uxtb	r3, r3
 8013468:	f003 0303 	and.w	r3, r3, #3
 801346c:	2b00      	cmp	r3, #0
 801346e:	d001      	beq.n	8013474 <tcp_receive+0xa54>
 8013470:	2301      	movs	r3, #1
 8013472:	e000      	b.n	8013476 <tcp_receive+0xa56>
 8013474:	2300      	movs	r3, #0
 8013476:	191a      	adds	r2, r3, r4
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801347c:	441a      	add	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013486:	461c      	mov	r4, r3
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	891b      	ldrh	r3, [r3, #8]
 801348c:	461d      	mov	r5, r3
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	899b      	ldrh	r3, [r3, #12]
 8013494:	b29b      	uxth	r3, r3
 8013496:	4618      	mov	r0, r3
 8013498:	f7fa f90a 	bl	800d6b0 <lwip_htons>
 801349c:	4603      	mov	r3, r0
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	f003 0303 	and.w	r3, r3, #3
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d001      	beq.n	80134ac <tcp_receive+0xa8c>
 80134a8:	2301      	movs	r3, #1
 80134aa:	e000      	b.n	80134ae <tcp_receive+0xa8e>
 80134ac:	2300      	movs	r3, #0
 80134ae:	442b      	add	r3, r5
 80134b0:	429c      	cmp	r4, r3
 80134b2:	d206      	bcs.n	80134c2 <tcp_receive+0xaa2>
 80134b4:	4b1e      	ldr	r3, [pc, #120]	@ (8013530 <tcp_receive+0xb10>)
 80134b6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80134ba:	4923      	ldr	r1, [pc, #140]	@ (8013548 <tcp_receive+0xb28>)
 80134bc:	481e      	ldr	r0, [pc, #120]	@ (8013538 <tcp_receive+0xb18>)
 80134be:	f005 fe71 	bl	80191a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	891b      	ldrh	r3, [r3, #8]
 80134c6:	461c      	mov	r4, r3
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	899b      	ldrh	r3, [r3, #12]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fa f8ed 	bl	800d6b0 <lwip_htons>
 80134d6:	4603      	mov	r3, r0
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	f003 0303 	and.w	r3, r3, #3
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d001      	beq.n	80134e6 <tcp_receive+0xac6>
 80134e2:	2301      	movs	r3, #1
 80134e4:	e000      	b.n	80134e8 <tcp_receive+0xac8>
 80134e6:	2300      	movs	r3, #0
 80134e8:	1919      	adds	r1, r3, r4
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134ee:	b28b      	uxth	r3, r1
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7fc fe09 	bl	8010110 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	891b      	ldrh	r3, [r3, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d028      	beq.n	801355a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013508:	4b0d      	ldr	r3, [pc, #52]	@ (8013540 <tcp_receive+0xb20>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d01d      	beq.n	801354c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013510:	4b0b      	ldr	r3, [pc, #44]	@ (8013540 <tcp_receive+0xb20>)
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	4619      	mov	r1, r3
 801351a:	4610      	mov	r0, r2
 801351c:	f7fb ff42 	bl	800f3a4 <pbuf_cat>
 8013520:	e018      	b.n	8013554 <tcp_receive+0xb34>
 8013522:	bf00      	nop
 8013524:	2400c3de 	.word	0x2400c3de
 8013528:	2400c3d4 	.word	0x2400c3d4
 801352c:	2400c3b4 	.word	0x2400c3b4
 8013530:	0801bb10 	.word	0x0801bb10
 8013534:	0801bef0 	.word	0x0801bef0
 8013538:	0801bb5c 	.word	0x0801bb5c
 801353c:	0801bf2c 	.word	0x0801bf2c
 8013540:	2400c3e4 	.word	0x2400c3e4
 8013544:	2400c3e1 	.word	0x2400c3e1
 8013548:	0801bf4c 	.word	0x0801bf4c
            } else {
              recv_data = cseg->p;
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	4a70      	ldr	r2, [pc, #448]	@ (8013714 <tcp_receive+0xcf4>)
 8013552:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	2200      	movs	r2, #0
 8013558:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	b29b      	uxth	r3, r3
 8013562:	4618      	mov	r0, r3
 8013564:	f7fa f8a4 	bl	800d6b0 <lwip_htons>
 8013568:	4603      	mov	r3, r0
 801356a:	b2db      	uxtb	r3, r3
 801356c:	f003 0301 	and.w	r3, r3, #1
 8013570:	2b00      	cmp	r3, #0
 8013572:	d00d      	beq.n	8013590 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013574:	4b68      	ldr	r3, [pc, #416]	@ (8013718 <tcp_receive+0xcf8>)
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	f043 0320 	orr.w	r3, r3, #32
 801357c:	b2da      	uxtb	r2, r3
 801357e:	4b66      	ldr	r3, [pc, #408]	@ (8013718 <tcp_receive+0xcf8>)
 8013580:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	7d1b      	ldrb	r3, [r3, #20]
 8013586:	2b04      	cmp	r3, #4
 8013588:	d102      	bne.n	8013590 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2207      	movs	r2, #7
 801358e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	681a      	ldr	r2, [r3, #0]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013598:	68b8      	ldr	r0, [r7, #8]
 801359a:	f7fd fae0 	bl	8010b5e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d008      	beq.n	80135b8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	685a      	ldr	r2, [r3, #4]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80135b2:	429a      	cmp	r2, r3
 80135b4:	f43f af43 	beq.w	801343e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	8b5b      	ldrh	r3, [r3, #26]
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00e      	beq.n	80135e2 <tcp_receive+0xbc2>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	8b5b      	ldrh	r3, [r3, #26]
 80135c8:	f023 0301 	bic.w	r3, r3, #1
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	835a      	strh	r2, [r3, #26]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	8b5b      	ldrh	r3, [r3, #26]
 80135d6:	f043 0302 	orr.w	r3, r3, #2
 80135da:	b29a      	uxth	r2, r3
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80135e0:	e187      	b.n	80138f2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8b5b      	ldrh	r3, [r3, #26]
 80135e6:	f043 0301 	orr.w	r3, r3, #1
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80135f0:	e17f      	b.n	80138f2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d106      	bne.n	8013608 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80135fa:	4848      	ldr	r0, [pc, #288]	@ (801371c <tcp_receive+0xcfc>)
 80135fc:	f7fd fae6 	bl	8010bcc <tcp_seg_copy>
 8013600:	4602      	mov	r2, r0
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	675a      	str	r2, [r3, #116]	@ 0x74
 8013606:	e16c      	b.n	80138e2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013608:	2300      	movs	r3, #0
 801360a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013612:	e156      	b.n	80138c2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	685a      	ldr	r2, [r3, #4]
 801361a:	4b41      	ldr	r3, [pc, #260]	@ (8013720 <tcp_receive+0xd00>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	429a      	cmp	r2, r3
 8013620:	d11d      	bne.n	801365e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013622:	4b3e      	ldr	r3, [pc, #248]	@ (801371c <tcp_receive+0xcfc>)
 8013624:	891a      	ldrh	r2, [r3, #8]
 8013626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013628:	891b      	ldrh	r3, [r3, #8]
 801362a:	429a      	cmp	r2, r3
 801362c:	f240 814e 	bls.w	80138cc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013630:	483a      	ldr	r0, [pc, #232]	@ (801371c <tcp_receive+0xcfc>)
 8013632:	f7fd facb 	bl	8010bcc <tcp_seg_copy>
 8013636:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	2b00      	cmp	r3, #0
 801363c:	f000 8148 	beq.w	80138d0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013642:	2b00      	cmp	r3, #0
 8013644:	d003      	beq.n	801364e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013648:	697a      	ldr	r2, [r7, #20]
 801364a:	601a      	str	r2, [r3, #0]
 801364c:	e002      	b.n	8013654 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	697a      	ldr	r2, [r7, #20]
 8013652:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013654:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013656:	6978      	ldr	r0, [r7, #20]
 8013658:	f7ff f8de 	bl	8012818 <tcp_oos_insert_segment>
                }
                break;
 801365c:	e138      	b.n	80138d0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013660:	2b00      	cmp	r3, #0
 8013662:	d117      	bne.n	8013694 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013664:	4b2e      	ldr	r3, [pc, #184]	@ (8013720 <tcp_receive+0xd00>)
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	1ad3      	subs	r3, r2, r3
 8013670:	2b00      	cmp	r3, #0
 8013672:	da57      	bge.n	8013724 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013674:	4829      	ldr	r0, [pc, #164]	@ (801371c <tcp_receive+0xcfc>)
 8013676:	f7fd faa9 	bl	8010bcc <tcp_seg_copy>
 801367a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	2b00      	cmp	r3, #0
 8013680:	f000 8128 	beq.w	80138d4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	69ba      	ldr	r2, [r7, #24]
 8013688:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801368a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801368c:	69b8      	ldr	r0, [r7, #24]
 801368e:	f7ff f8c3 	bl	8012818 <tcp_oos_insert_segment>
                  }
                  break;
 8013692:	e11f      	b.n	80138d4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013694:	4b22      	ldr	r3, [pc, #136]	@ (8013720 <tcp_receive+0xd00>)
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	1ad3      	subs	r3, r2, r3
 80136a0:	3b01      	subs	r3, #1
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	db3e      	blt.n	8013724 <tcp_receive+0xd04>
 80136a6:	4b1e      	ldr	r3, [pc, #120]	@ (8013720 <tcp_receive+0xd00>)
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	3301      	adds	r3, #1
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	dc35      	bgt.n	8013724 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80136b8:	4818      	ldr	r0, [pc, #96]	@ (801371c <tcp_receive+0xcfc>)
 80136ba:	f7fd fa87 	bl	8010bcc <tcp_seg_copy>
 80136be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 8108 	beq.w	80138d8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80136c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136d0:	8912      	ldrh	r2, [r2, #8]
 80136d2:	441a      	add	r2, r3
 80136d4:	4b12      	ldr	r3, [pc, #72]	@ (8013720 <tcp_receive+0xd00>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	1ad3      	subs	r3, r2, r3
 80136da:	2b00      	cmp	r3, #0
 80136dc:	dd12      	ble.n	8013704 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80136de:	4b10      	ldr	r3, [pc, #64]	@ (8013720 <tcp_receive+0xd00>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136e6:	68db      	ldr	r3, [r3, #12]
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80136f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136f6:	685a      	ldr	r2, [r3, #4]
 80136f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136fa:	891b      	ldrh	r3, [r3, #8]
 80136fc:	4619      	mov	r1, r3
 80136fe:	4610      	mov	r0, r2
 8013700:	f7fb fbfc 	bl	800eefc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013706:	69fa      	ldr	r2, [r7, #28]
 8013708:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801370a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801370c:	69f8      	ldr	r0, [r7, #28]
 801370e:	f7ff f883 	bl	8012818 <tcp_oos_insert_segment>
                  }
                  break;
 8013712:	e0e1      	b.n	80138d8 <tcp_receive+0xeb8>
 8013714:	2400c3e4 	.word	0x2400c3e4
 8013718:	2400c3e1 	.word	0x2400c3e1
 801371c:	2400c3b4 	.word	0x2400c3b4
 8013720:	2400c3d4 	.word	0x2400c3d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013726:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	f040 80c5 	bne.w	80138bc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013732:	4b7f      	ldr	r3, [pc, #508]	@ (8013930 <tcp_receive+0xf10>)
 8013734:	681a      	ldr	r2, [r3, #0]
 8013736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801373e:	2b00      	cmp	r3, #0
 8013740:	f340 80bc 	ble.w	80138bc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	899b      	ldrh	r3, [r3, #12]
 801374a:	b29b      	uxth	r3, r3
 801374c:	4618      	mov	r0, r3
 801374e:	f7f9 ffaf 	bl	800d6b0 <lwip_htons>
 8013752:	4603      	mov	r3, r0
 8013754:	b2db      	uxtb	r3, r3
 8013756:	f003 0301 	and.w	r3, r3, #1
 801375a:	2b00      	cmp	r3, #0
 801375c:	f040 80be 	bne.w	80138dc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013760:	4874      	ldr	r0, [pc, #464]	@ (8013934 <tcp_receive+0xf14>)
 8013762:	f7fd fa33 	bl	8010bcc <tcp_seg_copy>
 8013766:	4602      	mov	r2, r0
 8013768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 80b5 	beq.w	80138e0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801377e:	8912      	ldrh	r2, [r2, #8]
 8013780:	441a      	add	r2, r3
 8013782:	4b6b      	ldr	r3, [pc, #428]	@ (8013930 <tcp_receive+0xf10>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	1ad3      	subs	r3, r2, r3
 8013788:	2b00      	cmp	r3, #0
 801378a:	dd12      	ble.n	80137b2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801378c:	4b68      	ldr	r3, [pc, #416]	@ (8013930 <tcp_receive+0xf10>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	b29a      	uxth	r2, r3
 8013792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	b29b      	uxth	r3, r3
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	b29a      	uxth	r2, r3
 801379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	685a      	ldr	r2, [r3, #4]
 80137a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a8:	891b      	ldrh	r3, [r3, #8]
 80137aa:	4619      	mov	r1, r3
 80137ac:	4610      	mov	r0, r2
 80137ae:	f7fb fba5 	bl	800eefc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80137b2:	4b61      	ldr	r3, [pc, #388]	@ (8013938 <tcp_receive+0xf18>)
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	461a      	mov	r2, r3
 80137b8:	4b5d      	ldr	r3, [pc, #372]	@ (8013930 <tcp_receive+0xf10>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	441a      	add	r2, r3
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137c2:	6879      	ldr	r1, [r7, #4]
 80137c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80137c6:	440b      	add	r3, r1
 80137c8:	1ad3      	subs	r3, r2, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f340 8088 	ble.w	80138e0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80137d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	899b      	ldrh	r3, [r3, #12]
 80137d8:	b29b      	uxth	r3, r3
 80137da:	4618      	mov	r0, r3
 80137dc:	f7f9 ff68 	bl	800d6b0 <lwip_htons>
 80137e0:	4603      	mov	r3, r0
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	f003 0301 	and.w	r3, r3, #1
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d021      	beq.n	8013830 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80137ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	899b      	ldrh	r3, [r3, #12]
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	b21b      	sxth	r3, r3
 80137f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80137fc:	b21c      	sxth	r4, r3
 80137fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	899b      	ldrh	r3, [r3, #12]
 8013806:	b29b      	uxth	r3, r3
 8013808:	4618      	mov	r0, r3
 801380a:	f7f9 ff51 	bl	800d6b0 <lwip_htons>
 801380e:	4603      	mov	r3, r0
 8013810:	b2db      	uxtb	r3, r3
 8013812:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013816:	b29b      	uxth	r3, r3
 8013818:	4618      	mov	r0, r3
 801381a:	f7f9 ff49 	bl	800d6b0 <lwip_htons>
 801381e:	4603      	mov	r3, r0
 8013820:	b21b      	sxth	r3, r3
 8013822:	4323      	orrs	r3, r4
 8013824:	b21a      	sxth	r2, r3
 8013826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	b292      	uxth	r2, r2
 801382e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013834:	b29a      	uxth	r2, r3
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801383a:	4413      	add	r3, r2
 801383c:	b299      	uxth	r1, r3
 801383e:	4b3c      	ldr	r3, [pc, #240]	@ (8013930 <tcp_receive+0xf10>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	b29a      	uxth	r2, r3
 8013844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	1a8a      	subs	r2, r1, r2
 801384a:	b292      	uxth	r2, r2
 801384c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	685a      	ldr	r2, [r3, #4]
 8013854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	891b      	ldrh	r3, [r3, #8]
 801385a:	4619      	mov	r1, r3
 801385c:	4610      	mov	r0, r2
 801385e:	f7fb fb4d 	bl	800eefc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	891c      	ldrh	r4, [r3, #8]
 8013868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	899b      	ldrh	r3, [r3, #12]
 8013870:	b29b      	uxth	r3, r3
 8013872:	4618      	mov	r0, r3
 8013874:	f7f9 ff1c 	bl	800d6b0 <lwip_htons>
 8013878:	4603      	mov	r3, r0
 801387a:	b2db      	uxtb	r3, r3
 801387c:	f003 0303 	and.w	r3, r3, #3
 8013880:	2b00      	cmp	r3, #0
 8013882:	d001      	beq.n	8013888 <tcp_receive+0xe68>
 8013884:	2301      	movs	r3, #1
 8013886:	e000      	b.n	801388a <tcp_receive+0xe6a>
 8013888:	2300      	movs	r3, #0
 801388a:	4423      	add	r3, r4
 801388c:	b29a      	uxth	r2, r3
 801388e:	4b2a      	ldr	r3, [pc, #168]	@ (8013938 <tcp_receive+0xf18>)
 8013890:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013892:	4b29      	ldr	r3, [pc, #164]	@ (8013938 <tcp_receive+0xf18>)
 8013894:	881b      	ldrh	r3, [r3, #0]
 8013896:	461a      	mov	r2, r3
 8013898:	4b25      	ldr	r3, [pc, #148]	@ (8013930 <tcp_receive+0xf10>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	441a      	add	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138a2:	6879      	ldr	r1, [r7, #4]
 80138a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80138a6:	440b      	add	r3, r1
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d019      	beq.n	80138e0 <tcp_receive+0xec0>
 80138ac:	4b23      	ldr	r3, [pc, #140]	@ (801393c <tcp_receive+0xf1c>)
 80138ae:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80138b2:	4923      	ldr	r1, [pc, #140]	@ (8013940 <tcp_receive+0xf20>)
 80138b4:	4823      	ldr	r0, [pc, #140]	@ (8013944 <tcp_receive+0xf24>)
 80138b6:	f005 fc75 	bl	80191a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80138ba:	e011      	b.n	80138e0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80138bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80138c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f47f aea5 	bne.w	8013614 <tcp_receive+0xbf4>
 80138ca:	e00a      	b.n	80138e2 <tcp_receive+0xec2>
                break;
 80138cc:	bf00      	nop
 80138ce:	e008      	b.n	80138e2 <tcp_receive+0xec2>
                break;
 80138d0:	bf00      	nop
 80138d2:	e006      	b.n	80138e2 <tcp_receive+0xec2>
                  break;
 80138d4:	bf00      	nop
 80138d6:	e004      	b.n	80138e2 <tcp_receive+0xec2>
                  break;
 80138d8:	bf00      	nop
 80138da:	e002      	b.n	80138e2 <tcp_receive+0xec2>
                  break;
 80138dc:	bf00      	nop
 80138de:	e000      	b.n	80138e2 <tcp_receive+0xec2>
                break;
 80138e0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f001 feaa 	bl	801563c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80138e8:	e003      	b.n	80138f2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f001 fea6 	bl	801563c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80138f0:	e01a      	b.n	8013928 <tcp_receive+0xf08>
 80138f2:	e019      	b.n	8013928 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80138f4:	4b0e      	ldr	r3, [pc, #56]	@ (8013930 <tcp_receive+0xf10>)
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138fc:	1ad3      	subs	r3, r2, r3
 80138fe:	2b00      	cmp	r3, #0
 8013900:	db0a      	blt.n	8013918 <tcp_receive+0xef8>
 8013902:	4b0b      	ldr	r3, [pc, #44]	@ (8013930 <tcp_receive+0xf10>)
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801390a:	6879      	ldr	r1, [r7, #4]
 801390c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801390e:	440b      	add	r3, r1
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	3301      	adds	r3, #1
 8013914:	2b00      	cmp	r3, #0
 8013916:	dd07      	ble.n	8013928 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	8b5b      	ldrh	r3, [r3, #26]
 801391c:	f043 0302 	orr.w	r3, r3, #2
 8013920:	b29a      	uxth	r2, r3
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013926:	e7ff      	b.n	8013928 <tcp_receive+0xf08>
 8013928:	bf00      	nop
 801392a:	3750      	adds	r7, #80	@ 0x50
 801392c:	46bd      	mov	sp, r7
 801392e:	bdb0      	pop	{r4, r5, r7, pc}
 8013930:	2400c3d4 	.word	0x2400c3d4
 8013934:	2400c3b4 	.word	0x2400c3b4
 8013938:	2400c3de 	.word	0x2400c3de
 801393c:	0801bb10 	.word	0x0801bb10
 8013940:	0801beb8 	.word	0x0801beb8
 8013944:	0801bb5c 	.word	0x0801bb5c

08013948 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801394e:	4b15      	ldr	r3, [pc, #84]	@ (80139a4 <tcp_get_next_optbyte+0x5c>)
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	1c5a      	adds	r2, r3, #1
 8013954:	b291      	uxth	r1, r2
 8013956:	4a13      	ldr	r2, [pc, #76]	@ (80139a4 <tcp_get_next_optbyte+0x5c>)
 8013958:	8011      	strh	r1, [r2, #0]
 801395a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801395c:	4b12      	ldr	r3, [pc, #72]	@ (80139a8 <tcp_get_next_optbyte+0x60>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d004      	beq.n	801396e <tcp_get_next_optbyte+0x26>
 8013964:	4b11      	ldr	r3, [pc, #68]	@ (80139ac <tcp_get_next_optbyte+0x64>)
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	88fa      	ldrh	r2, [r7, #6]
 801396a:	429a      	cmp	r2, r3
 801396c:	d208      	bcs.n	8013980 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801396e:	4b10      	ldr	r3, [pc, #64]	@ (80139b0 <tcp_get_next_optbyte+0x68>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	3314      	adds	r3, #20
 8013974:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013976:	88fb      	ldrh	r3, [r7, #6]
 8013978:	683a      	ldr	r2, [r7, #0]
 801397a:	4413      	add	r3, r2
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	e00b      	b.n	8013998 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013980:	88fb      	ldrh	r3, [r7, #6]
 8013982:	b2da      	uxtb	r2, r3
 8013984:	4b09      	ldr	r3, [pc, #36]	@ (80139ac <tcp_get_next_optbyte+0x64>)
 8013986:	881b      	ldrh	r3, [r3, #0]
 8013988:	b2db      	uxtb	r3, r3
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801398e:	4b06      	ldr	r3, [pc, #24]	@ (80139a8 <tcp_get_next_optbyte+0x60>)
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	797b      	ldrb	r3, [r7, #5]
 8013994:	4413      	add	r3, r2
 8013996:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013998:	4618      	mov	r0, r3
 801399a:	370c      	adds	r7, #12
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr
 80139a4:	2400c3d0 	.word	0x2400c3d0
 80139a8:	2400c3cc 	.word	0x2400c3cc
 80139ac:	2400c3ca 	.word	0x2400c3ca
 80139b0:	2400c3c4 	.word	0x2400c3c4

080139b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_parseopt+0x1c>
 80139c2:	4b32      	ldr	r3, [pc, #200]	@ (8013a8c <tcp_parseopt+0xd8>)
 80139c4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80139c8:	4931      	ldr	r1, [pc, #196]	@ (8013a90 <tcp_parseopt+0xdc>)
 80139ca:	4832      	ldr	r0, [pc, #200]	@ (8013a94 <tcp_parseopt+0xe0>)
 80139cc:	f005 fbea 	bl	80191a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80139d0:	4b31      	ldr	r3, [pc, #196]	@ (8013a98 <tcp_parseopt+0xe4>)
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d056      	beq.n	8013a86 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80139d8:	4b30      	ldr	r3, [pc, #192]	@ (8013a9c <tcp_parseopt+0xe8>)
 80139da:	2200      	movs	r2, #0
 80139dc:	801a      	strh	r2, [r3, #0]
 80139de:	e046      	b.n	8013a6e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80139e0:	f7ff ffb2 	bl	8013948 <tcp_get_next_optbyte>
 80139e4:	4603      	mov	r3, r0
 80139e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80139e8:	7bfb      	ldrb	r3, [r7, #15]
 80139ea:	2b02      	cmp	r3, #2
 80139ec:	d006      	beq.n	80139fc <tcp_parseopt+0x48>
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	dc2a      	bgt.n	8013a48 <tcp_parseopt+0x94>
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d042      	beq.n	8013a7c <tcp_parseopt+0xc8>
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d038      	beq.n	8013a6c <tcp_parseopt+0xb8>
 80139fa:	e025      	b.n	8013a48 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80139fc:	f7ff ffa4 	bl	8013948 <tcp_get_next_optbyte>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b04      	cmp	r3, #4
 8013a04:	d13c      	bne.n	8013a80 <tcp_parseopt+0xcc>
 8013a06:	4b25      	ldr	r3, [pc, #148]	@ (8013a9c <tcp_parseopt+0xe8>)
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	4a22      	ldr	r2, [pc, #136]	@ (8013a98 <tcp_parseopt+0xe4>)
 8013a0e:	8812      	ldrh	r2, [r2, #0]
 8013a10:	4293      	cmp	r3, r2
 8013a12:	da35      	bge.n	8013a80 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013a14:	f7ff ff98 	bl	8013948 <tcp_get_next_optbyte>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	021b      	lsls	r3, r3, #8
 8013a1c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013a1e:	f7ff ff93 	bl	8013948 <tcp_get_next_optbyte>
 8013a22:	4603      	mov	r3, r0
 8013a24:	461a      	mov	r2, r3
 8013a26:	89bb      	ldrh	r3, [r7, #12]
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013a2c:	89bb      	ldrh	r3, [r7, #12]
 8013a2e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013a32:	d804      	bhi.n	8013a3e <tcp_parseopt+0x8a>
 8013a34:	89bb      	ldrh	r3, [r7, #12]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d001      	beq.n	8013a3e <tcp_parseopt+0x8a>
 8013a3a:	89ba      	ldrh	r2, [r7, #12]
 8013a3c:	e001      	b.n	8013a42 <tcp_parseopt+0x8e>
 8013a3e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013a46:	e012      	b.n	8013a6e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013a48:	f7ff ff7e 	bl	8013948 <tcp_get_next_optbyte>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013a50:	7afb      	ldrb	r3, [r7, #11]
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d916      	bls.n	8013a84 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013a56:	7afb      	ldrb	r3, [r7, #11]
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	4b10      	ldr	r3, [pc, #64]	@ (8013a9c <tcp_parseopt+0xe8>)
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	4413      	add	r3, r2
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	3b02      	subs	r3, #2
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	4b0d      	ldr	r3, [pc, #52]	@ (8013a9c <tcp_parseopt+0xe8>)
 8013a68:	801a      	strh	r2, [r3, #0]
 8013a6a:	e000      	b.n	8013a6e <tcp_parseopt+0xba>
          break;
 8013a6c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8013a9c <tcp_parseopt+0xe8>)
 8013a70:	881a      	ldrh	r2, [r3, #0]
 8013a72:	4b09      	ldr	r3, [pc, #36]	@ (8013a98 <tcp_parseopt+0xe4>)
 8013a74:	881b      	ldrh	r3, [r3, #0]
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d3b2      	bcc.n	80139e0 <tcp_parseopt+0x2c>
 8013a7a:	e004      	b.n	8013a86 <tcp_parseopt+0xd2>
          return;
 8013a7c:	bf00      	nop
 8013a7e:	e002      	b.n	8013a86 <tcp_parseopt+0xd2>
            return;
 8013a80:	bf00      	nop
 8013a82:	e000      	b.n	8013a86 <tcp_parseopt+0xd2>
            return;
 8013a84:	bf00      	nop
      }
    }
  }
}
 8013a86:	3710      	adds	r7, #16
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	0801bb10 	.word	0x0801bb10
 8013a90:	0801bf74 	.word	0x0801bf74
 8013a94:	0801bb5c 	.word	0x0801bb5c
 8013a98:	2400c3c8 	.word	0x2400c3c8
 8013a9c:	2400c3d0 	.word	0x2400c3d0

08013aa0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013aa4:	4b05      	ldr	r3, [pc, #20]	@ (8013abc <tcp_trigger_input_pcb_close+0x1c>)
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	f043 0310 	orr.w	r3, r3, #16
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	4b03      	ldr	r3, [pc, #12]	@ (8013abc <tcp_trigger_input_pcb_close+0x1c>)
 8013ab0:	701a      	strb	r2, [r3, #0]
}
 8013ab2:	bf00      	nop
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr
 8013abc:	2400c3e1 	.word	0x2400c3e1

08013ac0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00a      	beq.n	8013ae8 <tcp_route+0x28>
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	7a1b      	ldrb	r3, [r3, #8]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d006      	beq.n	8013ae8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	7a1b      	ldrb	r3, [r3, #8]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7fb f804 	bl	800eaec <netif_get_by_index>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	e003      	b.n	8013af0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f003 fc4d 	bl	8017388 <ip4_route>
 8013aee:	4603      	mov	r3, r0
  }
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013af8:	b590      	push	{r4, r7, lr}
 8013afa:	b087      	sub	sp, #28
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	603b      	str	r3, [r7, #0]
 8013b04:	4613      	mov	r3, r2
 8013b06:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d105      	bne.n	8013b1a <tcp_create_segment+0x22>
 8013b0e:	4b43      	ldr	r3, [pc, #268]	@ (8013c1c <tcp_create_segment+0x124>)
 8013b10:	22a3      	movs	r2, #163	@ 0xa3
 8013b12:	4943      	ldr	r1, [pc, #268]	@ (8013c20 <tcp_create_segment+0x128>)
 8013b14:	4843      	ldr	r0, [pc, #268]	@ (8013c24 <tcp_create_segment+0x12c>)
 8013b16:	f005 fb45 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d105      	bne.n	8013b2c <tcp_create_segment+0x34>
 8013b20:	4b3e      	ldr	r3, [pc, #248]	@ (8013c1c <tcp_create_segment+0x124>)
 8013b22:	22a4      	movs	r2, #164	@ 0xa4
 8013b24:	4940      	ldr	r1, [pc, #256]	@ (8013c28 <tcp_create_segment+0x130>)
 8013b26:	483f      	ldr	r0, [pc, #252]	@ (8013c24 <tcp_create_segment+0x12c>)
 8013b28:	f005 fb3c 	bl	80191a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013b30:	009b      	lsls	r3, r3, #2
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	f003 0304 	and.w	r3, r3, #4
 8013b38:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013b3a:	2003      	movs	r0, #3
 8013b3c:	f7fa fc4a 	bl	800e3d4 <memp_malloc>
 8013b40:	6138      	str	r0, [r7, #16]
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d104      	bne.n	8013b52 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013b48:	68b8      	ldr	r0, [r7, #8]
 8013b4a:	f7fb fb5d 	bl	800f208 <pbuf_free>
    return NULL;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	e060      	b.n	8013c14 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013b58:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	891a      	ldrh	r2, [r3, #8]
 8013b6a:	7dfb      	ldrb	r3, [r7, #23]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d205      	bcs.n	8013b7e <tcp_create_segment+0x86>
 8013b72:	4b2a      	ldr	r3, [pc, #168]	@ (8013c1c <tcp_create_segment+0x124>)
 8013b74:	22b0      	movs	r2, #176	@ 0xb0
 8013b76:	492d      	ldr	r1, [pc, #180]	@ (8013c2c <tcp_create_segment+0x134>)
 8013b78:	482a      	ldr	r0, [pc, #168]	@ (8013c24 <tcp_create_segment+0x12c>)
 8013b7a:	f005 fb13 	bl	80191a4 <iprintf>
  seg->len = p->tot_len - optlen;
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	891a      	ldrh	r2, [r3, #8]
 8013b82:	7dfb      	ldrb	r3, [r7, #23]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013b8e:	2114      	movs	r1, #20
 8013b90:	68b8      	ldr	r0, [r7, #8]
 8013b92:	f7fb faa3 	bl	800f0dc <pbuf_add_header>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d004      	beq.n	8013ba6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013b9c:	6938      	ldr	r0, [r7, #16]
 8013b9e:	f7fc ffde 	bl	8010b5e <tcp_seg_free>
    return NULL;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	e036      	b.n	8013c14 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	693b      	ldr	r3, [r7, #16]
 8013bae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	8ada      	ldrh	r2, [r3, #22]
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	68dc      	ldr	r4, [r3, #12]
 8013bb8:	4610      	mov	r0, r2
 8013bba:	f7f9 fd79 	bl	800d6b0 <lwip_htons>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	8b1a      	ldrh	r2, [r3, #24]
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	68dc      	ldr	r4, [r3, #12]
 8013bca:	4610      	mov	r0, r2
 8013bcc:	f7f9 fd70 	bl	800d6b0 <lwip_htons>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	68dc      	ldr	r4, [r3, #12]
 8013bd8:	6838      	ldr	r0, [r7, #0]
 8013bda:	f7f9 fd7e 	bl	800d6da <lwip_htonl>
 8013bde:	4603      	mov	r3, r0
 8013be0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013be2:	7dfb      	ldrb	r3, [r7, #23]
 8013be4:	089b      	lsrs	r3, r3, #2
 8013be6:	b2db      	uxtb	r3, r3
 8013be8:	3305      	adds	r3, #5
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	031b      	lsls	r3, r3, #12
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	79fb      	ldrb	r3, [r7, #7]
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	4313      	orrs	r3, r2
 8013bf6:	b29a      	uxth	r2, r3
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	68dc      	ldr	r4, [r3, #12]
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	f7f9 fd57 	bl	800d6b0 <lwip_htons>
 8013c02:	4603      	mov	r3, r0
 8013c04:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	749a      	strb	r2, [r3, #18]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	74da      	strb	r2, [r3, #19]
  return seg;
 8013c12:	693b      	ldr	r3, [r7, #16]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	371c      	adds	r7, #28
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd90      	pop	{r4, r7, pc}
 8013c1c:	0801bf90 	.word	0x0801bf90
 8013c20:	0801bfc4 	.word	0x0801bfc4
 8013c24:	0801bfe4 	.word	0x0801bfe4
 8013c28:	0801c00c 	.word	0x0801c00c
 8013c2c:	0801c030 	.word	0x0801c030

08013c30 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b086      	sub	sp, #24
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	607b      	str	r3, [r7, #4]
 8013c38:	4603      	mov	r3, r0
 8013c3a:	73fb      	strb	r3, [r7, #15]
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	81bb      	strh	r3, [r7, #12]
 8013c40:	4613      	mov	r3, r2
 8013c42:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013c44:	89bb      	ldrh	r3, [r7, #12]
 8013c46:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d105      	bne.n	8013c5a <tcp_pbuf_prealloc+0x2a>
 8013c4e:	4b30      	ldr	r3, [pc, #192]	@ (8013d10 <tcp_pbuf_prealloc+0xe0>)
 8013c50:	22e8      	movs	r2, #232	@ 0xe8
 8013c52:	4930      	ldr	r1, [pc, #192]	@ (8013d14 <tcp_pbuf_prealloc+0xe4>)
 8013c54:	4830      	ldr	r0, [pc, #192]	@ (8013d18 <tcp_pbuf_prealloc+0xe8>)
 8013c56:	f005 faa5 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013c5a:	6a3b      	ldr	r3, [r7, #32]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d105      	bne.n	8013c6c <tcp_pbuf_prealloc+0x3c>
 8013c60:	4b2b      	ldr	r3, [pc, #172]	@ (8013d10 <tcp_pbuf_prealloc+0xe0>)
 8013c62:	22e9      	movs	r2, #233	@ 0xe9
 8013c64:	492d      	ldr	r1, [pc, #180]	@ (8013d1c <tcp_pbuf_prealloc+0xec>)
 8013c66:	482c      	ldr	r0, [pc, #176]	@ (8013d18 <tcp_pbuf_prealloc+0xe8>)
 8013c68:	f005 fa9c 	bl	80191a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013c6c:	89ba      	ldrh	r2, [r7, #12]
 8013c6e:	897b      	ldrh	r3, [r7, #10]
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d221      	bcs.n	8013cb8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013c74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013c78:	f003 0302 	and.w	r3, r3, #2
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d111      	bne.n	8013ca4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013c80:	6a3b      	ldr	r3, [r7, #32]
 8013c82:	8b5b      	ldrh	r3, [r3, #26]
 8013c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d115      	bne.n	8013cb8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013c8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d007      	beq.n	8013ca4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013c94:	6a3b      	ldr	r3, [r7, #32]
 8013c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d103      	bne.n	8013ca4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013c9c:	6a3b      	ldr	r3, [r7, #32]
 8013c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d009      	beq.n	8013cb8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013ca4:	89bb      	ldrh	r3, [r7, #12]
 8013ca6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8013caa:	f023 0203 	bic.w	r2, r3, #3
 8013cae:	897b      	ldrh	r3, [r7, #10]
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	bf28      	it	cs
 8013cb4:	4613      	movcs	r3, r2
 8013cb6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013cb8:	8af9      	ldrh	r1, [r7, #22]
 8013cba:	7bfb      	ldrb	r3, [r7, #15]
 8013cbc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fa ffbd 	bl	800ec40 <pbuf_alloc>
 8013cc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d101      	bne.n	8013cd2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	e019      	b.n	8013d06 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d006      	beq.n	8013ce8 <tcp_pbuf_prealloc+0xb8>
 8013cda:	4b0d      	ldr	r3, [pc, #52]	@ (8013d10 <tcp_pbuf_prealloc+0xe0>)
 8013cdc:	f240 120b 	movw	r2, #267	@ 0x10b
 8013ce0:	490f      	ldr	r1, [pc, #60]	@ (8013d20 <tcp_pbuf_prealloc+0xf0>)
 8013ce2:	480d      	ldr	r0, [pc, #52]	@ (8013d18 <tcp_pbuf_prealloc+0xe8>)
 8013ce4:	f005 fa5e 	bl	80191a4 <iprintf>
  *oversize = p->len - length;
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	895a      	ldrh	r2, [r3, #10]
 8013cec:	89bb      	ldrh	r3, [r7, #12]
 8013cee:	1ad3      	subs	r3, r2, r3
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	89ba      	ldrh	r2, [r7, #12]
 8013cfa:	811a      	strh	r2, [r3, #8]
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	891a      	ldrh	r2, [r3, #8]
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	815a      	strh	r2, [r3, #10]
  return p;
 8013d04:	693b      	ldr	r3, [r7, #16]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3718      	adds	r7, #24
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	0801bf90 	.word	0x0801bf90
 8013d14:	0801c048 	.word	0x0801c048
 8013d18:	0801bfe4 	.word	0x0801bfe4
 8013d1c:	0801c06c 	.word	0x0801c06c
 8013d20:	0801c08c 	.word	0x0801c08c

08013d24 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d106      	bne.n	8013d44 <tcp_write_checks+0x20>
 8013d36:	4b33      	ldr	r3, [pc, #204]	@ (8013e04 <tcp_write_checks+0xe0>)
 8013d38:	f240 1233 	movw	r2, #307	@ 0x133
 8013d3c:	4932      	ldr	r1, [pc, #200]	@ (8013e08 <tcp_write_checks+0xe4>)
 8013d3e:	4833      	ldr	r0, [pc, #204]	@ (8013e0c <tcp_write_checks+0xe8>)
 8013d40:	f005 fa30 	bl	80191a4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	7d1b      	ldrb	r3, [r3, #20]
 8013d48:	2b04      	cmp	r3, #4
 8013d4a:	d00e      	beq.n	8013d6a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013d50:	2b07      	cmp	r3, #7
 8013d52:	d00a      	beq.n	8013d6a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013d58:	2b02      	cmp	r3, #2
 8013d5a:	d006      	beq.n	8013d6a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d002      	beq.n	8013d6a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013d64:	f06f 030a 	mvn.w	r3, #10
 8013d68:	e048      	b.n	8013dfc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013d6a:	887b      	ldrh	r3, [r7, #2]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d101      	bne.n	8013d74 <tcp_write_checks+0x50>
    return ERR_OK;
 8013d70:	2300      	movs	r3, #0
 8013d72:	e043      	b.n	8013dfc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013d7a:	887a      	ldrh	r2, [r7, #2]
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d909      	bls.n	8013d94 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	8b5b      	ldrh	r3, [r3, #26]
 8013d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d88:	b29a      	uxth	r2, r3
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d92:	e033      	b.n	8013dfc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013d9a:	2b08      	cmp	r3, #8
 8013d9c:	d909      	bls.n	8013db2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	8b5b      	ldrh	r3, [r3, #26]
 8013da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013dac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013db0:	e024      	b.n	8013dfc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00f      	beq.n	8013ddc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d11a      	bne.n	8013dfa <tcp_write_checks+0xd6>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d116      	bne.n	8013dfa <tcp_write_checks+0xd6>
 8013dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8013e04 <tcp_write_checks+0xe0>)
 8013dce:	f240 1255 	movw	r2, #341	@ 0x155
 8013dd2:	490f      	ldr	r1, [pc, #60]	@ (8013e10 <tcp_write_checks+0xec>)
 8013dd4:	480d      	ldr	r0, [pc, #52]	@ (8013e0c <tcp_write_checks+0xe8>)
 8013dd6:	f005 f9e5 	bl	80191a4 <iprintf>
 8013dda:	e00e      	b.n	8013dfa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d103      	bne.n	8013dec <tcp_write_checks+0xc8>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d006      	beq.n	8013dfa <tcp_write_checks+0xd6>
 8013dec:	4b05      	ldr	r3, [pc, #20]	@ (8013e04 <tcp_write_checks+0xe0>)
 8013dee:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8013df2:	4908      	ldr	r1, [pc, #32]	@ (8013e14 <tcp_write_checks+0xf0>)
 8013df4:	4805      	ldr	r0, [pc, #20]	@ (8013e0c <tcp_write_checks+0xe8>)
 8013df6:	f005 f9d5 	bl	80191a4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013dfa:	2300      	movs	r3, #0
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	0801bf90 	.word	0x0801bf90
 8013e08:	0801c0a0 	.word	0x0801c0a0
 8013e0c:	0801bfe4 	.word	0x0801bfe4
 8013e10:	0801c0c0 	.word	0x0801c0c0
 8013e14:	0801c0fc 	.word	0x0801c0fc

08013e18 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013e18:	b590      	push	{r4, r7, lr}
 8013e1a:	b09b      	sub	sp, #108	@ 0x6c
 8013e1c:	af04      	add	r7, sp, #16
 8013e1e:	60f8      	str	r0, [r7, #12]
 8013e20:	60b9      	str	r1, [r7, #8]
 8013e22:	4611      	mov	r1, r2
 8013e24:	461a      	mov	r2, r3
 8013e26:	460b      	mov	r3, r1
 8013e28:	80fb      	strh	r3, [r7, #6]
 8013e2a:	4613      	mov	r3, r2
 8013e2c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013e32:	2300      	movs	r3, #0
 8013e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8013e36:	2300      	movs	r3, #0
 8013e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e3e:	2300      	movs	r3, #0
 8013e40:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013e42:	2300      	movs	r3, #0
 8013e44:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013e56:	2300      	movs	r3, #0
 8013e58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d109      	bne.n	8013e74 <tcp_write+0x5c>
 8013e60:	4ba4      	ldr	r3, [pc, #656]	@ (80140f4 <tcp_write+0x2dc>)
 8013e62:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8013e66:	49a4      	ldr	r1, [pc, #656]	@ (80140f8 <tcp_write+0x2e0>)
 8013e68:	48a4      	ldr	r0, [pc, #656]	@ (80140fc <tcp_write+0x2e4>)
 8013e6a:	f005 f99b 	bl	80191a4 <iprintf>
 8013e6e:	f06f 030f 	mvn.w	r3, #15
 8013e72:	e32a      	b.n	80144ca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013e7a:	085b      	lsrs	r3, r3, #1
 8013e7c:	b29a      	uxth	r2, r3
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e82:	4293      	cmp	r3, r2
 8013e84:	bf28      	it	cs
 8013e86:	4613      	movcs	r3, r2
 8013e88:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d102      	bne.n	8013e96 <tcp_write+0x7e>
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e94:	e000      	b.n	8013e98 <tcp_write+0x80>
 8013e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e98:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d109      	bne.n	8013eb4 <tcp_write+0x9c>
 8013ea0:	4b94      	ldr	r3, [pc, #592]	@ (80140f4 <tcp_write+0x2dc>)
 8013ea2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8013ea6:	4996      	ldr	r1, [pc, #600]	@ (8014100 <tcp_write+0x2e8>)
 8013ea8:	4894      	ldr	r0, [pc, #592]	@ (80140fc <tcp_write+0x2e4>)
 8013eaa:	f005 f97b 	bl	80191a4 <iprintf>
 8013eae:	f06f 030f 	mvn.w	r3, #15
 8013eb2:	e30a      	b.n	80144ca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013eb4:	88fb      	ldrh	r3, [r7, #6]
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f7ff ff33 	bl	8013d24 <tcp_write_checks>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8013ec4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d002      	beq.n	8013ed2 <tcp_write+0xba>
    return err;
 8013ecc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013ed0:	e2fb      	b.n	80144ca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ed8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013edc:	2300      	movs	r3, #0
 8013ede:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f000 80f6 	beq.w	80140d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ef0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ef2:	e002      	b.n	8013efa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d1f8      	bne.n	8013ef4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f04:	7a9b      	ldrb	r3, [r3, #10]
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	f003 0304 	and.w	r3, r3, #4
 8013f0e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013f10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f14:	891b      	ldrh	r3, [r3, #8]
 8013f16:	4619      	mov	r1, r3
 8013f18:	8c3b      	ldrh	r3, [r7, #32]
 8013f1a:	440b      	add	r3, r1
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	da06      	bge.n	8013f2e <tcp_write+0x116>
 8013f20:	4b74      	ldr	r3, [pc, #464]	@ (80140f4 <tcp_write+0x2dc>)
 8013f22:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013f26:	4977      	ldr	r1, [pc, #476]	@ (8014104 <tcp_write+0x2ec>)
 8013f28:	4874      	ldr	r0, [pc, #464]	@ (80140fc <tcp_write+0x2e4>)
 8013f2a:	f005 f93b 	bl	80191a4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f30:	891a      	ldrh	r2, [r3, #8]
 8013f32:	8c3b      	ldrh	r3, [r7, #32]
 8013f34:	4413      	add	r3, r2
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013f3a:	1ad3      	subs	r3, r2, r3
 8013f3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013f44:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013f46:	8a7b      	ldrh	r3, [r7, #18]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d026      	beq.n	8013f9a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013f4c:	8a7b      	ldrh	r3, [r7, #18]
 8013f4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d206      	bcs.n	8013f62 <tcp_write+0x14a>
 8013f54:	4b67      	ldr	r3, [pc, #412]	@ (80140f4 <tcp_write+0x2dc>)
 8013f56:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8013f5a:	496b      	ldr	r1, [pc, #428]	@ (8014108 <tcp_write+0x2f0>)
 8013f5c:	4867      	ldr	r0, [pc, #412]	@ (80140fc <tcp_write+0x2e4>)
 8013f5e:	f005 f921 	bl	80191a4 <iprintf>
      seg = last_unsent;
 8013f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013f66:	8a7b      	ldrh	r3, [r7, #18]
 8013f68:	88fa      	ldrh	r2, [r7, #6]
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	bf28      	it	cs
 8013f6e:	4613      	movcs	r3, r2
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013f74:	4293      	cmp	r3, r2
 8013f76:	bf28      	it	cs
 8013f78:	4613      	movcs	r3, r2
 8013f7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8013f7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013f80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f82:	4413      	add	r3, r2
 8013f84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8013f88:	8a7a      	ldrh	r2, [r7, #18]
 8013f8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013f92:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013f94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013f9a:	8a7b      	ldrh	r3, [r7, #18]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00b      	beq.n	8013fb8 <tcp_write+0x1a0>
 8013fa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013fa4:	88fb      	ldrh	r3, [r7, #6]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d006      	beq.n	8013fb8 <tcp_write+0x1a0>
 8013faa:	4b52      	ldr	r3, [pc, #328]	@ (80140f4 <tcp_write+0x2dc>)
 8013fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013fb0:	4956      	ldr	r1, [pc, #344]	@ (801410c <tcp_write+0x2f4>)
 8013fb2:	4852      	ldr	r0, [pc, #328]	@ (80140fc <tcp_write+0x2e4>)
 8013fb4:	f005 f8f6 	bl	80191a4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013fb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013fbc:	88fb      	ldrh	r3, [r7, #6]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	f080 8167 	bcs.w	8014292 <tcp_write+0x47a>
 8013fc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	f000 8163 	beq.w	8014292 <tcp_write+0x47a>
 8013fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fce:	891b      	ldrh	r3, [r3, #8]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	f000 815e 	beq.w	8014292 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013fd6:	88fa      	ldrh	r2, [r7, #6]
 8013fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013fdc:	1ad2      	subs	r2, r2, r3
 8013fde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	bfa8      	it	ge
 8013fe4:	4613      	movge	r3, r2
 8013fe6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fea:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013fec:	797b      	ldrb	r3, [r7, #5]
 8013fee:	f003 0301 	and.w	r3, r3, #1
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d027      	beq.n	8014046 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013ff6:	f107 0012 	add.w	r0, r7, #18
 8013ffa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013ffc:	8bf9      	ldrh	r1, [r7, #30]
 8013ffe:	2301      	movs	r3, #1
 8014000:	9302      	str	r3, [sp, #8]
 8014002:	797b      	ldrb	r3, [r7, #5]
 8014004:	9301      	str	r3, [sp, #4]
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	4603      	mov	r3, r0
 801400c:	2000      	movs	r0, #0
 801400e:	f7ff fe0f 	bl	8013c30 <tcp_pbuf_prealloc>
 8014012:	6578      	str	r0, [r7, #84]	@ 0x54
 8014014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014016:	2b00      	cmp	r3, #0
 8014018:	f000 8225 	beq.w	8014466 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801401c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801401e:	6858      	ldr	r0, [r3, #4]
 8014020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014024:	68ba      	ldr	r2, [r7, #8]
 8014026:	4413      	add	r3, r2
 8014028:	8bfa      	ldrh	r2, [r7, #30]
 801402a:	4619      	mov	r1, r3
 801402c:	f005 fb49 	bl	80196c2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014030:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014032:	f7fb f977 	bl	800f324 <pbuf_clen>
 8014036:	4603      	mov	r3, r0
 8014038:	461a      	mov	r2, r3
 801403a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801403e:	4413      	add	r3, r2
 8014040:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8014044:	e041      	b.n	80140ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	637b      	str	r3, [r7, #52]	@ 0x34
 801404c:	e002      	b.n	8014054 <tcp_write+0x23c>
 801404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	637b      	str	r3, [r7, #52]	@ 0x34
 8014054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d1f8      	bne.n	801404e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801405e:	7b1b      	ldrb	r3, [r3, #12]
 8014060:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d115      	bne.n	8014094 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801406e:	8952      	ldrh	r2, [r2, #10]
 8014070:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014072:	68ba      	ldr	r2, [r7, #8]
 8014074:	429a      	cmp	r2, r3
 8014076:	d10d      	bne.n	8014094 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801407c:	2b00      	cmp	r3, #0
 801407e:	d006      	beq.n	801408e <tcp_write+0x276>
 8014080:	4b1c      	ldr	r3, [pc, #112]	@ (80140f4 <tcp_write+0x2dc>)
 8014082:	f240 2231 	movw	r2, #561	@ 0x231
 8014086:	4922      	ldr	r1, [pc, #136]	@ (8014110 <tcp_write+0x2f8>)
 8014088:	481c      	ldr	r0, [pc, #112]	@ (80140fc <tcp_write+0x2e4>)
 801408a:	f005 f88b 	bl	80191a4 <iprintf>
          extendlen = seglen;
 801408e:	8bfb      	ldrh	r3, [r7, #30]
 8014090:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8014092:	e01a      	b.n	80140ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014094:	8bfb      	ldrh	r3, [r7, #30]
 8014096:	2201      	movs	r2, #1
 8014098:	4619      	mov	r1, r3
 801409a:	2000      	movs	r0, #0
 801409c:	f7fa fdd0 	bl	800ec40 <pbuf_alloc>
 80140a0:	6578      	str	r0, [r7, #84]	@ 0x54
 80140a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	f000 81e0 	beq.w	801446a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80140aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80140ae:	68ba      	ldr	r2, [r7, #8]
 80140b0:	441a      	add	r2, r3
 80140b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80140b6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80140b8:	f7fb f934 	bl	800f324 <pbuf_clen>
 80140bc:	4603      	mov	r3, r0
 80140be:	461a      	mov	r2, r3
 80140c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80140c4:	4413      	add	r3, r2
 80140c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80140ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80140ce:	8bfb      	ldrh	r3, [r7, #30]
 80140d0:	4413      	add	r3, r2
 80140d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80140d6:	e0dc      	b.n	8014292 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f000 80d7 	beq.w	8014292 <tcp_write+0x47a>
 80140e4:	4b03      	ldr	r3, [pc, #12]	@ (80140f4 <tcp_write+0x2dc>)
 80140e6:	f240 224a 	movw	r2, #586	@ 0x24a
 80140ea:	490a      	ldr	r1, [pc, #40]	@ (8014114 <tcp_write+0x2fc>)
 80140ec:	4803      	ldr	r0, [pc, #12]	@ (80140fc <tcp_write+0x2e4>)
 80140ee:	f005 f859 	bl	80191a4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80140f2:	e0ce      	b.n	8014292 <tcp_write+0x47a>
 80140f4:	0801bf90 	.word	0x0801bf90
 80140f8:	0801c130 	.word	0x0801c130
 80140fc:	0801bfe4 	.word	0x0801bfe4
 8014100:	0801c148 	.word	0x0801c148
 8014104:	0801c17c 	.word	0x0801c17c
 8014108:	0801c194 	.word	0x0801c194
 801410c:	0801c1b4 	.word	0x0801c1b4
 8014110:	0801c1d4 	.word	0x0801c1d4
 8014114:	0801c200 	.word	0x0801c200
    struct pbuf *p;
    u16_t left = len - pos;
 8014118:	88fa      	ldrh	r2, [r7, #6]
 801411a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014122:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014126:	b29b      	uxth	r3, r3
 8014128:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801412e:	8b7a      	ldrh	r2, [r7, #26]
 8014130:	8bbb      	ldrh	r3, [r7, #28]
 8014132:	4293      	cmp	r3, r2
 8014134:	bf28      	it	cs
 8014136:	4613      	movcs	r3, r2
 8014138:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801413a:	797b      	ldrb	r3, [r7, #5]
 801413c:	f003 0301 	and.w	r3, r3, #1
 8014140:	2b00      	cmp	r3, #0
 8014142:	d036      	beq.n	80141b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014144:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014148:	b29a      	uxth	r2, r3
 801414a:	8b3b      	ldrh	r3, [r7, #24]
 801414c:	4413      	add	r3, r2
 801414e:	b299      	uxth	r1, r3
 8014150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014152:	2b00      	cmp	r3, #0
 8014154:	bf0c      	ite	eq
 8014156:	2301      	moveq	r3, #1
 8014158:	2300      	movne	r3, #0
 801415a:	b2db      	uxtb	r3, r3
 801415c:	f107 0012 	add.w	r0, r7, #18
 8014160:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014162:	9302      	str	r3, [sp, #8]
 8014164:	797b      	ldrb	r3, [r7, #5]
 8014166:	9301      	str	r3, [sp, #4]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	9300      	str	r3, [sp, #0]
 801416c:	4603      	mov	r3, r0
 801416e:	2036      	movs	r0, #54	@ 0x36
 8014170:	f7ff fd5e 	bl	8013c30 <tcp_pbuf_prealloc>
 8014174:	6338      	str	r0, [r7, #48]	@ 0x30
 8014176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014178:	2b00      	cmp	r3, #0
 801417a:	f000 8178 	beq.w	801446e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014180:	895b      	ldrh	r3, [r3, #10]
 8014182:	8b3a      	ldrh	r2, [r7, #24]
 8014184:	429a      	cmp	r2, r3
 8014186:	d906      	bls.n	8014196 <tcp_write+0x37e>
 8014188:	4b8c      	ldr	r3, [pc, #560]	@ (80143bc <tcp_write+0x5a4>)
 801418a:	f240 2266 	movw	r2, #614	@ 0x266
 801418e:	498c      	ldr	r1, [pc, #560]	@ (80143c0 <tcp_write+0x5a8>)
 8014190:	488c      	ldr	r0, [pc, #560]	@ (80143c4 <tcp_write+0x5ac>)
 8014192:	f005 f807 	bl	80191a4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014198:	685a      	ldr	r2, [r3, #4]
 801419a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801419e:	18d0      	adds	r0, r2, r3
 80141a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80141a4:	68ba      	ldr	r2, [r7, #8]
 80141a6:	4413      	add	r3, r2
 80141a8:	8b3a      	ldrh	r2, [r7, #24]
 80141aa:	4619      	mov	r1, r3
 80141ac:	f005 fa89 	bl	80196c2 <memcpy>
 80141b0:	e02f      	b.n	8014212 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80141b2:	8a7b      	ldrh	r3, [r7, #18]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d006      	beq.n	80141c6 <tcp_write+0x3ae>
 80141b8:	4b80      	ldr	r3, [pc, #512]	@ (80143bc <tcp_write+0x5a4>)
 80141ba:	f240 2271 	movw	r2, #625	@ 0x271
 80141be:	4982      	ldr	r1, [pc, #520]	@ (80143c8 <tcp_write+0x5b0>)
 80141c0:	4880      	ldr	r0, [pc, #512]	@ (80143c4 <tcp_write+0x5ac>)
 80141c2:	f004 ffef 	bl	80191a4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80141c6:	8b3b      	ldrh	r3, [r7, #24]
 80141c8:	2201      	movs	r2, #1
 80141ca:	4619      	mov	r1, r3
 80141cc:	2036      	movs	r0, #54	@ 0x36
 80141ce:	f7fa fd37 	bl	800ec40 <pbuf_alloc>
 80141d2:	6178      	str	r0, [r7, #20]
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f000 814b 	beq.w	8014472 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80141dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80141e0:	68ba      	ldr	r2, [r7, #8]
 80141e2:	441a      	add	r2, r3
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80141e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80141f2:	4619      	mov	r1, r3
 80141f4:	2036      	movs	r0, #54	@ 0x36
 80141f6:	f7fa fd23 	bl	800ec40 <pbuf_alloc>
 80141fa:	6338      	str	r0, [r7, #48]	@ 0x30
 80141fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d103      	bne.n	801420a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014202:	6978      	ldr	r0, [r7, #20]
 8014204:	f7fb f800 	bl	800f208 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014208:	e136      	b.n	8014478 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801420a:	6979      	ldr	r1, [r7, #20]
 801420c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801420e:	f7fb f8c9 	bl	800f3a4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014214:	f7fb f886 	bl	800f324 <pbuf_clen>
 8014218:	4603      	mov	r3, r0
 801421a:	461a      	mov	r2, r3
 801421c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014220:	4413      	add	r3, r2
 8014222:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014226:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801422a:	2b09      	cmp	r3, #9
 801422c:	d903      	bls.n	8014236 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801422e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014230:	f7fa ffea 	bl	800f208 <pbuf_free>
      goto memerr;
 8014234:	e120      	b.n	8014478 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801423a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801423e:	441a      	add	r2, r3
 8014240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	4613      	mov	r3, r2
 8014248:	2200      	movs	r2, #0
 801424a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f7ff fc53 	bl	8013af8 <tcp_create_segment>
 8014252:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014256:	2b00      	cmp	r3, #0
 8014258:	f000 810d 	beq.w	8014476 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801425c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801425e:	2b00      	cmp	r3, #0
 8014260:	d102      	bne.n	8014268 <tcp_write+0x450>
      queue = seg;
 8014262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014264:	647b      	str	r3, [r7, #68]	@ 0x44
 8014266:	e00c      	b.n	8014282 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801426a:	2b00      	cmp	r3, #0
 801426c:	d106      	bne.n	801427c <tcp_write+0x464>
 801426e:	4b53      	ldr	r3, [pc, #332]	@ (80143bc <tcp_write+0x5a4>)
 8014270:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014274:	4955      	ldr	r1, [pc, #340]	@ (80143cc <tcp_write+0x5b4>)
 8014276:	4853      	ldr	r0, [pc, #332]	@ (80143c4 <tcp_write+0x5ac>)
 8014278:	f004 ff94 	bl	80191a4 <iprintf>
      prev_seg->next = seg;
 801427c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801427e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014280:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014284:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014286:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801428a:	8b3b      	ldrh	r3, [r7, #24]
 801428c:	4413      	add	r3, r2
 801428e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014292:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014296:	88fb      	ldrh	r3, [r7, #6]
 8014298:	429a      	cmp	r2, r3
 801429a:	f4ff af3d 	bcc.w	8014118 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801429e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d02c      	beq.n	80142fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80142a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142aa:	e01e      	b.n	80142ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80142ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ae:	891a      	ldrh	r2, [r3, #8]
 80142b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142b2:	4413      	add	r3, r2
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80142ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d110      	bne.n	80142e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80142c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142c8:	8952      	ldrh	r2, [r2, #10]
 80142ca:	4413      	add	r3, r2
 80142cc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80142ce:	68b9      	ldr	r1, [r7, #8]
 80142d0:	4618      	mov	r0, r3
 80142d2:	f005 f9f6 	bl	80196c2 <memcpy>
        p->len += oversize_used;
 80142d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d8:	895a      	ldrh	r2, [r3, #10]
 80142da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142dc:	4413      	add	r3, r2
 80142de:	b29a      	uxth	r2, r3
 80142e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80142e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d1dd      	bne.n	80142ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80142f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142f2:	891a      	ldrh	r2, [r3, #8]
 80142f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142f6:	4413      	add	r3, r2
 80142f8:	b29a      	uxth	r2, r3
 80142fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80142fe:	8a7a      	ldrh	r2, [r7, #18]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014308:	2b00      	cmp	r3, #0
 801430a:	d018      	beq.n	801433e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801430c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801430e:	2b00      	cmp	r3, #0
 8014310:	d106      	bne.n	8014320 <tcp_write+0x508>
 8014312:	4b2a      	ldr	r3, [pc, #168]	@ (80143bc <tcp_write+0x5a4>)
 8014314:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8014318:	492d      	ldr	r1, [pc, #180]	@ (80143d0 <tcp_write+0x5b8>)
 801431a:	482a      	ldr	r0, [pc, #168]	@ (80143c4 <tcp_write+0x5ac>)
 801431c:	f004 ff42 	bl	80191a4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014326:	4618      	mov	r0, r3
 8014328:	f7fb f83c 	bl	800f3a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801432c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801432e:	891a      	ldrh	r2, [r3, #8]
 8014330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014332:	891b      	ldrh	r3, [r3, #8]
 8014334:	4413      	add	r3, r2
 8014336:	b29a      	uxth	r2, r3
 8014338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801433a:	811a      	strh	r2, [r3, #8]
 801433c:	e037      	b.n	80143ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 801433e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014340:	2b00      	cmp	r3, #0
 8014342:	d034      	beq.n	80143ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014346:	2b00      	cmp	r3, #0
 8014348:	d003      	beq.n	8014352 <tcp_write+0x53a>
 801434a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d106      	bne.n	8014360 <tcp_write+0x548>
 8014352:	4b1a      	ldr	r3, [pc, #104]	@ (80143bc <tcp_write+0x5a4>)
 8014354:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014358:	491e      	ldr	r1, [pc, #120]	@ (80143d4 <tcp_write+0x5bc>)
 801435a:	481a      	ldr	r0, [pc, #104]	@ (80143c4 <tcp_write+0x5ac>)
 801435c:	f004 ff22 	bl	80191a4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014366:	e009      	b.n	801437c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801436a:	891a      	ldrh	r2, [r3, #8]
 801436c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801436e:	4413      	add	r3, r2
 8014370:	b29a      	uxth	r2, r3
 8014372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014374:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d1f1      	bne.n	8014368 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014386:	891a      	ldrh	r2, [r3, #8]
 8014388:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801438a:	4413      	add	r3, r2
 801438c:	b29a      	uxth	r2, r3
 801438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014390:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014394:	895a      	ldrh	r2, [r3, #10]
 8014396:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014398:	4413      	add	r3, r2
 801439a:	b29a      	uxth	r2, r3
 801439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801439e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80143a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143a2:	891a      	ldrh	r2, [r3, #8]
 80143a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80143a6:	4413      	add	r3, r2
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80143ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d111      	bne.n	80143d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143b8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80143ba:	e010      	b.n	80143de <tcp_write+0x5c6>
 80143bc:	0801bf90 	.word	0x0801bf90
 80143c0:	0801c230 	.word	0x0801c230
 80143c4:	0801bfe4 	.word	0x0801bfe4
 80143c8:	0801c270 	.word	0x0801c270
 80143cc:	0801c280 	.word	0x0801c280
 80143d0:	0801c294 	.word	0x0801c294
 80143d4:	0801c2cc 	.word	0x0801c2cc
  } else {
    last_unsent->next = queue;
 80143d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80143e2:	88fb      	ldrh	r3, [r7, #6]
 80143e4:	441a      	add	r2, r3
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80143f0:	88fb      	ldrh	r3, [r7, #6]
 80143f2:	1ad3      	subs	r3, r2, r3
 80143f4:	b29a      	uxth	r2, r3
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014402:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801440c:	2b00      	cmp	r3, #0
 801440e:	d00e      	beq.n	801442e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014414:	2b00      	cmp	r3, #0
 8014416:	d10a      	bne.n	801442e <tcp_write+0x616>
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801441c:	2b00      	cmp	r3, #0
 801441e:	d106      	bne.n	801442e <tcp_write+0x616>
 8014420:	4b2c      	ldr	r3, [pc, #176]	@ (80144d4 <tcp_write+0x6bc>)
 8014422:	f240 3212 	movw	r2, #786	@ 0x312
 8014426:	492c      	ldr	r1, [pc, #176]	@ (80144d8 <tcp_write+0x6c0>)
 8014428:	482c      	ldr	r0, [pc, #176]	@ (80144dc <tcp_write+0x6c4>)
 801442a:	f004 febb 	bl	80191a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801442e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014430:	2b00      	cmp	r3, #0
 8014432:	d016      	beq.n	8014462 <tcp_write+0x64a>
 8014434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014436:	68db      	ldr	r3, [r3, #12]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d012      	beq.n	8014462 <tcp_write+0x64a>
 801443c:	797b      	ldrb	r3, [r7, #5]
 801443e:	f003 0302 	and.w	r3, r3, #2
 8014442:	2b00      	cmp	r3, #0
 8014444:	d10d      	bne.n	8014462 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	899b      	ldrh	r3, [r3, #12]
 801444c:	b29c      	uxth	r4, r3
 801444e:	2008      	movs	r0, #8
 8014450:	f7f9 f92e 	bl	800d6b0 <lwip_htons>
 8014454:	4603      	mov	r3, r0
 8014456:	461a      	mov	r2, r3
 8014458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	4322      	orrs	r2, r4
 801445e:	b292      	uxth	r2, r2
 8014460:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014462:	2300      	movs	r3, #0
 8014464:	e031      	b.n	80144ca <tcp_write+0x6b2>
          goto memerr;
 8014466:	bf00      	nop
 8014468:	e006      	b.n	8014478 <tcp_write+0x660>
            goto memerr;
 801446a:	bf00      	nop
 801446c:	e004      	b.n	8014478 <tcp_write+0x660>
        goto memerr;
 801446e:	bf00      	nop
 8014470:	e002      	b.n	8014478 <tcp_write+0x660>
        goto memerr;
 8014472:	bf00      	nop
 8014474:	e000      	b.n	8014478 <tcp_write+0x660>
      goto memerr;
 8014476:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	8b5b      	ldrh	r3, [r3, #26]
 801447c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014480:	b29a      	uxth	r2, r3
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014488:	2b00      	cmp	r3, #0
 801448a:	d002      	beq.n	8014492 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801448c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801448e:	f7fa febb 	bl	800f208 <pbuf_free>
  }
  if (queue != NULL) {
 8014492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014498:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801449a:	f7fc fb4b 	bl	8010b34 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d00e      	beq.n	80144c6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d10a      	bne.n	80144c6 <tcp_write+0x6ae>
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d106      	bne.n	80144c6 <tcp_write+0x6ae>
 80144b8:	4b06      	ldr	r3, [pc, #24]	@ (80144d4 <tcp_write+0x6bc>)
 80144ba:	f240 3227 	movw	r2, #807	@ 0x327
 80144be:	4906      	ldr	r1, [pc, #24]	@ (80144d8 <tcp_write+0x6c0>)
 80144c0:	4806      	ldr	r0, [pc, #24]	@ (80144dc <tcp_write+0x6c4>)
 80144c2:	f004 fe6f 	bl	80191a4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80144c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	375c      	adds	r7, #92	@ 0x5c
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd90      	pop	{r4, r7, pc}
 80144d2:	bf00      	nop
 80144d4:	0801bf90 	.word	0x0801bf90
 80144d8:	0801c304 	.word	0x0801c304
 80144dc:	0801bfe4 	.word	0x0801bfe4

080144e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80144e0:	b590      	push	{r4, r7, lr}
 80144e2:	b08b      	sub	sp, #44	@ 0x2c
 80144e4:	af02      	add	r7, sp, #8
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	460b      	mov	r3, r1
 80144ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80144ec:	2300      	movs	r3, #0
 80144ee:	61fb      	str	r3, [r7, #28]
 80144f0:	2300      	movs	r3, #0
 80144f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80144f4:	2300      	movs	r3, #0
 80144f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <tcp_split_unsent_seg+0x2c>
 80144fe:	4b95      	ldr	r3, [pc, #596]	@ (8014754 <tcp_split_unsent_seg+0x274>)
 8014500:	f240 324b 	movw	r2, #843	@ 0x34b
 8014504:	4994      	ldr	r1, [pc, #592]	@ (8014758 <tcp_split_unsent_seg+0x278>)
 8014506:	4895      	ldr	r0, [pc, #596]	@ (801475c <tcp_split_unsent_seg+0x27c>)
 8014508:	f004 fe4c 	bl	80191a4 <iprintf>

  useg = pcb->unsent;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014510:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d102      	bne.n	801451e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801451c:	e116      	b.n	801474c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801451e:	887b      	ldrh	r3, [r7, #2]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d109      	bne.n	8014538 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014524:	4b8b      	ldr	r3, [pc, #556]	@ (8014754 <tcp_split_unsent_seg+0x274>)
 8014526:	f240 3253 	movw	r2, #851	@ 0x353
 801452a:	498d      	ldr	r1, [pc, #564]	@ (8014760 <tcp_split_unsent_seg+0x280>)
 801452c:	488b      	ldr	r0, [pc, #556]	@ (801475c <tcp_split_unsent_seg+0x27c>)
 801452e:	f004 fe39 	bl	80191a4 <iprintf>
    return ERR_VAL;
 8014532:	f06f 0305 	mvn.w	r3, #5
 8014536:	e109      	b.n	801474c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	891b      	ldrh	r3, [r3, #8]
 801453c:	887a      	ldrh	r2, [r7, #2]
 801453e:	429a      	cmp	r2, r3
 8014540:	d301      	bcc.n	8014546 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014542:	2300      	movs	r3, #0
 8014544:	e102      	b.n	801474c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801454a:	887a      	ldrh	r2, [r7, #2]
 801454c:	429a      	cmp	r2, r3
 801454e:	d906      	bls.n	801455e <tcp_split_unsent_seg+0x7e>
 8014550:	4b80      	ldr	r3, [pc, #512]	@ (8014754 <tcp_split_unsent_seg+0x274>)
 8014552:	f240 325b 	movw	r2, #859	@ 0x35b
 8014556:	4983      	ldr	r1, [pc, #524]	@ (8014764 <tcp_split_unsent_seg+0x284>)
 8014558:	4880      	ldr	r0, [pc, #512]	@ (801475c <tcp_split_unsent_seg+0x27c>)
 801455a:	f004 fe23 	bl	80191a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	891b      	ldrh	r3, [r3, #8]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <tcp_split_unsent_seg+0x94>
 8014566:	4b7b      	ldr	r3, [pc, #492]	@ (8014754 <tcp_split_unsent_seg+0x274>)
 8014568:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801456c:	497e      	ldr	r1, [pc, #504]	@ (8014768 <tcp_split_unsent_seg+0x288>)
 801456e:	487b      	ldr	r0, [pc, #492]	@ (801475c <tcp_split_unsent_seg+0x27c>)
 8014570:	f004 fe18 	bl	80191a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	7a9b      	ldrb	r3, [r3, #10]
 8014578:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801457a:	7bfb      	ldrb	r3, [r7, #15]
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	b2db      	uxtb	r3, r3
 8014580:	f003 0304 	and.w	r3, r3, #4
 8014584:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	891a      	ldrh	r2, [r3, #8]
 801458a:	887b      	ldrh	r3, [r7, #2]
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014590:	7bbb      	ldrb	r3, [r7, #14]
 8014592:	b29a      	uxth	r2, r3
 8014594:	89bb      	ldrh	r3, [r7, #12]
 8014596:	4413      	add	r3, r2
 8014598:	b29b      	uxth	r3, r3
 801459a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801459e:	4619      	mov	r1, r3
 80145a0:	2036      	movs	r0, #54	@ 0x36
 80145a2:	f7fa fb4d 	bl	800ec40 <pbuf_alloc>
 80145a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	f000 80b7 	beq.w	801471e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	891a      	ldrh	r2, [r3, #8]
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	891b      	ldrh	r3, [r3, #8]
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	b29a      	uxth	r2, r3
 80145be:	887b      	ldrh	r3, [r7, #2]
 80145c0:	4413      	add	r3, r2
 80145c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	6858      	ldr	r0, [r3, #4]
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	685a      	ldr	r2, [r3, #4]
 80145cc:	7bbb      	ldrb	r3, [r7, #14]
 80145ce:	18d1      	adds	r1, r2, r3
 80145d0:	897b      	ldrh	r3, [r7, #10]
 80145d2:	89ba      	ldrh	r2, [r7, #12]
 80145d4:	f7fb f81e 	bl	800f614 <pbuf_copy_partial>
 80145d8:	4603      	mov	r3, r0
 80145da:	461a      	mov	r2, r3
 80145dc:	89bb      	ldrh	r3, [r7, #12]
 80145de:	4293      	cmp	r3, r2
 80145e0:	f040 809f 	bne.w	8014722 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	68db      	ldr	r3, [r3, #12]
 80145e8:	899b      	ldrh	r3, [r3, #12]
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7f9 f85f 	bl	800d6b0 <lwip_htons>
 80145f2:	4603      	mov	r3, r0
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80145fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80145fc:	2300      	movs	r3, #0
 80145fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014600:	7efb      	ldrb	r3, [r7, #27]
 8014602:	f003 0308 	and.w	r3, r3, #8
 8014606:	2b00      	cmp	r3, #0
 8014608:	d007      	beq.n	801461a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801460a:	7efb      	ldrb	r3, [r7, #27]
 801460c:	f023 0308 	bic.w	r3, r3, #8
 8014610:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014612:	7ebb      	ldrb	r3, [r7, #26]
 8014614:	f043 0308 	orr.w	r3, r3, #8
 8014618:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801461a:	7efb      	ldrb	r3, [r7, #27]
 801461c:	f003 0301 	and.w	r3, r3, #1
 8014620:	2b00      	cmp	r3, #0
 8014622:	d007      	beq.n	8014634 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014624:	7efb      	ldrb	r3, [r7, #27]
 8014626:	f023 0301 	bic.w	r3, r3, #1
 801462a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801462c:	7ebb      	ldrb	r3, [r7, #26]
 801462e:	f043 0301 	orr.w	r3, r3, #1
 8014632:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	685b      	ldr	r3, [r3, #4]
 801463a:	4618      	mov	r0, r3
 801463c:	f7f9 f84d 	bl	800d6da <lwip_htonl>
 8014640:	4602      	mov	r2, r0
 8014642:	887b      	ldrh	r3, [r7, #2]
 8014644:	18d1      	adds	r1, r2, r3
 8014646:	7eba      	ldrb	r2, [r7, #26]
 8014648:	7bfb      	ldrb	r3, [r7, #15]
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	460b      	mov	r3, r1
 801464e:	6939      	ldr	r1, [r7, #16]
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ff fa51 	bl	8013af8 <tcp_create_segment>
 8014656:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d063      	beq.n	8014726 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	4618      	mov	r0, r3
 8014664:	f7fa fe5e 	bl	800f324 <pbuf_clen>
 8014668:	4603      	mov	r3, r0
 801466a:	461a      	mov	r2, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014672:	1a9b      	subs	r3, r3, r2
 8014674:	b29a      	uxth	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	6858      	ldr	r0, [r3, #4]
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	891a      	ldrh	r2, [r3, #8]
 8014686:	89bb      	ldrh	r3, [r7, #12]
 8014688:	1ad3      	subs	r3, r2, r3
 801468a:	b29b      	uxth	r3, r3
 801468c:	4619      	mov	r1, r3
 801468e:	f7fa fc35 	bl	800eefc <pbuf_realloc>
  useg->len -= remainder;
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	891a      	ldrh	r2, [r3, #8]
 8014696:	89bb      	ldrh	r3, [r7, #12]
 8014698:	1ad3      	subs	r3, r2, r3
 801469a:	b29a      	uxth	r2, r3
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	899b      	ldrh	r3, [r3, #12]
 80146a6:	b29c      	uxth	r4, r3
 80146a8:	7efb      	ldrb	r3, [r7, #27]
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f8 ffff 	bl	800d6b0 <lwip_htons>
 80146b2:	4603      	mov	r3, r0
 80146b4:	461a      	mov	r2, r3
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	68db      	ldr	r3, [r3, #12]
 80146ba:	4322      	orrs	r2, r4
 80146bc:	b292      	uxth	r2, r2
 80146be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fa fe2d 	bl	800f324 <pbuf_clen>
 80146ca:	4603      	mov	r3, r0
 80146cc:	461a      	mov	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80146d4:	4413      	add	r3, r2
 80146d6:	b29a      	uxth	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	685b      	ldr	r3, [r3, #4]
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7fa fe1e 	bl	800f324 <pbuf_clen>
 80146e8:	4603      	mov	r3, r0
 80146ea:	461a      	mov	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80146f2:	4413      	add	r3, r2
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	69fa      	ldr	r2, [r7, #28]
 8014708:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d103      	bne.n	801471a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2200      	movs	r2, #0
 8014716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801471a:	2300      	movs	r3, #0
 801471c:	e016      	b.n	801474c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801471e:	bf00      	nop
 8014720:	e002      	b.n	8014728 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014722:	bf00      	nop
 8014724:	e000      	b.n	8014728 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014726:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014728:	69fb      	ldr	r3, [r7, #28]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d006      	beq.n	801473c <tcp_split_unsent_seg+0x25c>
 801472e:	4b09      	ldr	r3, [pc, #36]	@ (8014754 <tcp_split_unsent_seg+0x274>)
 8014730:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014734:	490d      	ldr	r1, [pc, #52]	@ (801476c <tcp_split_unsent_seg+0x28c>)
 8014736:	4809      	ldr	r0, [pc, #36]	@ (801475c <tcp_split_unsent_seg+0x27c>)
 8014738:	f004 fd34 	bl	80191a4 <iprintf>
  if (p != NULL) {
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d002      	beq.n	8014748 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014742:	6938      	ldr	r0, [r7, #16]
 8014744:	f7fa fd60 	bl	800f208 <pbuf_free>
  }

  return ERR_MEM;
 8014748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801474c:	4618      	mov	r0, r3
 801474e:	3724      	adds	r7, #36	@ 0x24
 8014750:	46bd      	mov	sp, r7
 8014752:	bd90      	pop	{r4, r7, pc}
 8014754:	0801bf90 	.word	0x0801bf90
 8014758:	0801c324 	.word	0x0801c324
 801475c:	0801bfe4 	.word	0x0801bfe4
 8014760:	0801c348 	.word	0x0801c348
 8014764:	0801c36c 	.word	0x0801c36c
 8014768:	0801c37c 	.word	0x0801c37c
 801476c:	0801c38c 	.word	0x0801c38c

08014770 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014770:	b590      	push	{r4, r7, lr}
 8014772:	b085      	sub	sp, #20
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d106      	bne.n	801478c <tcp_send_fin+0x1c>
 801477e:	4b21      	ldr	r3, [pc, #132]	@ (8014804 <tcp_send_fin+0x94>)
 8014780:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014784:	4920      	ldr	r1, [pc, #128]	@ (8014808 <tcp_send_fin+0x98>)
 8014786:	4821      	ldr	r0, [pc, #132]	@ (801480c <tcp_send_fin+0x9c>)
 8014788:	f004 fd0c 	bl	80191a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014790:	2b00      	cmp	r3, #0
 8014792:	d02e      	beq.n	80147f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014798:	60fb      	str	r3, [r7, #12]
 801479a:	e002      	b.n	80147a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d1f8      	bne.n	801479c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	899b      	ldrh	r3, [r3, #12]
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7f8 ff7c 	bl	800d6b0 <lwip_htons>
 80147b8:	4603      	mov	r3, r0
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	f003 0307 	and.w	r3, r3, #7
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d116      	bne.n	80147f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	899b      	ldrh	r3, [r3, #12]
 80147ca:	b29c      	uxth	r4, r3
 80147cc:	2001      	movs	r0, #1
 80147ce:	f7f8 ff6f 	bl	800d6b0 <lwip_htons>
 80147d2:	4603      	mov	r3, r0
 80147d4:	461a      	mov	r2, r3
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	4322      	orrs	r2, r4
 80147dc:	b292      	uxth	r2, r2
 80147de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	8b5b      	ldrh	r3, [r3, #26]
 80147e4:	f043 0320 	orr.w	r3, r3, #32
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	e004      	b.n	80147fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80147f2:	2101      	movs	r1, #1
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 f80b 	bl	8014810 <tcp_enqueue_flags>
 80147fa:	4603      	mov	r3, r0
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	3714      	adds	r7, #20
 8014800:	46bd      	mov	sp, r7
 8014802:	bd90      	pop	{r4, r7, pc}
 8014804:	0801bf90 	.word	0x0801bf90
 8014808:	0801c398 	.word	0x0801c398
 801480c:	0801bfe4 	.word	0x0801bfe4

08014810 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b08a      	sub	sp, #40	@ 0x28
 8014814:	af02      	add	r7, sp, #8
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	460b      	mov	r3, r1
 801481a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801481c:	2300      	movs	r3, #0
 801481e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014820:	2300      	movs	r3, #0
 8014822:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014824:	78fb      	ldrb	r3, [r7, #3]
 8014826:	f003 0303 	and.w	r3, r3, #3
 801482a:	2b00      	cmp	r3, #0
 801482c:	d106      	bne.n	801483c <tcp_enqueue_flags+0x2c>
 801482e:	4b67      	ldr	r3, [pc, #412]	@ (80149cc <tcp_enqueue_flags+0x1bc>)
 8014830:	f240 4211 	movw	r2, #1041	@ 0x411
 8014834:	4966      	ldr	r1, [pc, #408]	@ (80149d0 <tcp_enqueue_flags+0x1c0>)
 8014836:	4867      	ldr	r0, [pc, #412]	@ (80149d4 <tcp_enqueue_flags+0x1c4>)
 8014838:	f004 fcb4 	bl	80191a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d106      	bne.n	8014850 <tcp_enqueue_flags+0x40>
 8014842:	4b62      	ldr	r3, [pc, #392]	@ (80149cc <tcp_enqueue_flags+0x1bc>)
 8014844:	f240 4213 	movw	r2, #1043	@ 0x413
 8014848:	4963      	ldr	r1, [pc, #396]	@ (80149d8 <tcp_enqueue_flags+0x1c8>)
 801484a:	4862      	ldr	r0, [pc, #392]	@ (80149d4 <tcp_enqueue_flags+0x1c4>)
 801484c:	f004 fcaa 	bl	80191a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014850:	78fb      	ldrb	r3, [r7, #3]
 8014852:	f003 0302 	and.w	r3, r3, #2
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801485a:	2301      	movs	r3, #1
 801485c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801485e:	7ffb      	ldrb	r3, [r7, #31]
 8014860:	009b      	lsls	r3, r3, #2
 8014862:	b2db      	uxtb	r3, r3
 8014864:	f003 0304 	and.w	r3, r3, #4
 8014868:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801486a:	7dfb      	ldrb	r3, [r7, #23]
 801486c:	b29b      	uxth	r3, r3
 801486e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014872:	4619      	mov	r1, r3
 8014874:	2036      	movs	r0, #54	@ 0x36
 8014876:	f7fa f9e3 	bl	800ec40 <pbuf_alloc>
 801487a:	6138      	str	r0, [r7, #16]
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d109      	bne.n	8014896 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	8b5b      	ldrh	r3, [r3, #26]
 8014886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801488a:	b29a      	uxth	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014894:	e095      	b.n	80149c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	895a      	ldrh	r2, [r3, #10]
 801489a:	7dfb      	ldrb	r3, [r7, #23]
 801489c:	b29b      	uxth	r3, r3
 801489e:	429a      	cmp	r2, r3
 80148a0:	d206      	bcs.n	80148b0 <tcp_enqueue_flags+0xa0>
 80148a2:	4b4a      	ldr	r3, [pc, #296]	@ (80149cc <tcp_enqueue_flags+0x1bc>)
 80148a4:	f240 4239 	movw	r2, #1081	@ 0x439
 80148a8:	494c      	ldr	r1, [pc, #304]	@ (80149dc <tcp_enqueue_flags+0x1cc>)
 80148aa:	484a      	ldr	r0, [pc, #296]	@ (80149d4 <tcp_enqueue_flags+0x1c4>)
 80148ac:	f004 fc7a 	bl	80191a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80148b4:	78fa      	ldrb	r2, [r7, #3]
 80148b6:	7ffb      	ldrb	r3, [r7, #31]
 80148b8:	9300      	str	r3, [sp, #0]
 80148ba:	460b      	mov	r3, r1
 80148bc:	6939      	ldr	r1, [r7, #16]
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7ff f91a 	bl	8013af8 <tcp_create_segment>
 80148c4:	60f8      	str	r0, [r7, #12]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d109      	bne.n	80148e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	8b5b      	ldrh	r3, [r3, #26]
 80148d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80148da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80148de:	e070      	b.n	80149c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	f003 0303 	and.w	r3, r3, #3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d006      	beq.n	80148fa <tcp_enqueue_flags+0xea>
 80148ec:	4b37      	ldr	r3, [pc, #220]	@ (80149cc <tcp_enqueue_flags+0x1bc>)
 80148ee:	f240 4242 	movw	r2, #1090	@ 0x442
 80148f2:	493b      	ldr	r1, [pc, #236]	@ (80149e0 <tcp_enqueue_flags+0x1d0>)
 80148f4:	4837      	ldr	r0, [pc, #220]	@ (80149d4 <tcp_enqueue_flags+0x1c4>)
 80148f6:	f004 fc55 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	891b      	ldrh	r3, [r3, #8]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d006      	beq.n	8014910 <tcp_enqueue_flags+0x100>
 8014902:	4b32      	ldr	r3, [pc, #200]	@ (80149cc <tcp_enqueue_flags+0x1bc>)
 8014904:	f240 4243 	movw	r2, #1091	@ 0x443
 8014908:	4936      	ldr	r1, [pc, #216]	@ (80149e4 <tcp_enqueue_flags+0x1d4>)
 801490a:	4832      	ldr	r0, [pc, #200]	@ (80149d4 <tcp_enqueue_flags+0x1c4>)
 801490c:	f004 fc4a 	bl	80191a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014914:	2b00      	cmp	r3, #0
 8014916:	d103      	bne.n	8014920 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	68fa      	ldr	r2, [r7, #12]
 801491c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801491e:	e00d      	b.n	801493c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014924:	61bb      	str	r3, [r7, #24]
 8014926:	e002      	b.n	801492e <tcp_enqueue_flags+0x11e>
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	61bb      	str	r3, [r7, #24]
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d1f8      	bne.n	8014928 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	68fa      	ldr	r2, [r7, #12]
 801493a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2200      	movs	r2, #0
 8014940:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014944:	78fb      	ldrb	r3, [r7, #3]
 8014946:	f003 0302 	and.w	r3, r3, #2
 801494a:	2b00      	cmp	r3, #0
 801494c:	d104      	bne.n	8014958 <tcp_enqueue_flags+0x148>
 801494e:	78fb      	ldrb	r3, [r7, #3]
 8014950:	f003 0301 	and.w	r3, r3, #1
 8014954:	2b00      	cmp	r3, #0
 8014956:	d004      	beq.n	8014962 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801495c:	1c5a      	adds	r2, r3, #1
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014962:	78fb      	ldrb	r3, [r7, #3]
 8014964:	f003 0301 	and.w	r3, r3, #1
 8014968:	2b00      	cmp	r3, #0
 801496a:	d006      	beq.n	801497a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	8b5b      	ldrh	r3, [r3, #26]
 8014970:	f043 0320 	orr.w	r3, r3, #32
 8014974:	b29a      	uxth	r2, r3
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	4618      	mov	r0, r3
 8014980:	f7fa fcd0 	bl	800f324 <pbuf_clen>
 8014984:	4603      	mov	r3, r0
 8014986:	461a      	mov	r2, r3
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801498e:	4413      	add	r3, r2
 8014990:	b29a      	uxth	r2, r3
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00e      	beq.n	80149c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10a      	bne.n	80149c0 <tcp_enqueue_flags+0x1b0>
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d106      	bne.n	80149c0 <tcp_enqueue_flags+0x1b0>
 80149b2:	4b06      	ldr	r3, [pc, #24]	@ (80149cc <tcp_enqueue_flags+0x1bc>)
 80149b4:	f240 4265 	movw	r2, #1125	@ 0x465
 80149b8:	490b      	ldr	r1, [pc, #44]	@ (80149e8 <tcp_enqueue_flags+0x1d8>)
 80149ba:	4806      	ldr	r0, [pc, #24]	@ (80149d4 <tcp_enqueue_flags+0x1c4>)
 80149bc:	f004 fbf2 	bl	80191a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80149c0:	2300      	movs	r3, #0
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3720      	adds	r7, #32
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	0801bf90 	.word	0x0801bf90
 80149d0:	0801c3b4 	.word	0x0801c3b4
 80149d4:	0801bfe4 	.word	0x0801bfe4
 80149d8:	0801c40c 	.word	0x0801c40c
 80149dc:	0801c42c 	.word	0x0801c42c
 80149e0:	0801c468 	.word	0x0801c468
 80149e4:	0801c480 	.word	0x0801c480
 80149e8:	0801c4ac 	.word	0x0801c4ac

080149ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80149ec:	b5b0      	push	{r4, r5, r7, lr}
 80149ee:	b08a      	sub	sp, #40	@ 0x28
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d106      	bne.n	8014a08 <tcp_output+0x1c>
 80149fa:	4b8a      	ldr	r3, [pc, #552]	@ (8014c24 <tcp_output+0x238>)
 80149fc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014a00:	4989      	ldr	r1, [pc, #548]	@ (8014c28 <tcp_output+0x23c>)
 8014a02:	488a      	ldr	r0, [pc, #552]	@ (8014c2c <tcp_output+0x240>)
 8014a04:	f004 fbce 	bl	80191a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	7d1b      	ldrb	r3, [r3, #20]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d106      	bne.n	8014a1e <tcp_output+0x32>
 8014a10:	4b84      	ldr	r3, [pc, #528]	@ (8014c24 <tcp_output+0x238>)
 8014a12:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014a16:	4986      	ldr	r1, [pc, #536]	@ (8014c30 <tcp_output+0x244>)
 8014a18:	4884      	ldr	r0, [pc, #528]	@ (8014c2c <tcp_output+0x240>)
 8014a1a:	f004 fbc3 	bl	80191a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014a1e:	4b85      	ldr	r3, [pc, #532]	@ (8014c34 <tcp_output+0x248>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	687a      	ldr	r2, [r7, #4]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d101      	bne.n	8014a2c <tcp_output+0x40>
    return ERR_OK;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	e1ce      	b.n	8014dca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014a38:	4293      	cmp	r3, r2
 8014a3a:	bf28      	it	cs
 8014a3c:	4613      	movcs	r3, r2
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d10b      	bne.n	8014a66 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	8b5b      	ldrh	r3, [r3, #26]
 8014a52:	f003 0302 	and.w	r3, r3, #2
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f000 81aa 	beq.w	8014db0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f000 fded 	bl	801563c <tcp_send_empty_ack>
 8014a62:	4603      	mov	r3, r0
 8014a64:	e1b1      	b.n	8014dca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014a66:	6879      	ldr	r1, [r7, #4]
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	3304      	adds	r3, #4
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff f826 	bl	8013ac0 <tcp_route>
 8014a74:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d102      	bne.n	8014a82 <tcp_output+0x96>
    return ERR_RTE;
 8014a7c:	f06f 0303 	mvn.w	r3, #3
 8014a80:	e1a3      	b.n	8014dca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d003      	beq.n	8014a90 <tcp_output+0xa4>
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d111      	bne.n	8014ab4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d002      	beq.n	8014a9c <tcp_output+0xb0>
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	3304      	adds	r3, #4
 8014a9a:	e000      	b.n	8014a9e <tcp_output+0xb2>
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d102      	bne.n	8014aac <tcp_output+0xc0>
      return ERR_RTE;
 8014aa6:	f06f 0303 	mvn.w	r3, #3
 8014aaa:	e18e      	b.n	8014dca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7f8 fe0d 	bl	800d6da <lwip_htonl>
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014aca:	8912      	ldrh	r2, [r2, #8]
 8014acc:	4413      	add	r3, r2
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d227      	bcs.n	8014b24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014ada:	461a      	mov	r2, r3
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d114      	bne.n	8014b0c <tcp_output+0x120>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d110      	bne.n	8014b0c <tcp_output+0x120>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d10b      	bne.n	8014b0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2200      	movs	r2, #0
 8014af8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2201      	movs	r2, #1
 8014b00:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	8b5b      	ldrh	r3, [r3, #26]
 8014b10:	f003 0302 	and.w	r3, r3, #2
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	f000 814d 	beq.w	8014db4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 fd8e 	bl	801563c <tcp_send_empty_ack>
 8014b20:	4603      	mov	r3, r0
 8014b22:	e152      	b.n	8014dca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2200      	movs	r2, #0
 8014b28:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014b32:	6a3b      	ldr	r3, [r7, #32]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	f000 811c 	beq.w	8014d72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014b3a:	e002      	b.n	8014b42 <tcp_output+0x156>
 8014b3c:	6a3b      	ldr	r3, [r7, #32]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	623b      	str	r3, [r7, #32]
 8014b42:	6a3b      	ldr	r3, [r7, #32]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d1f8      	bne.n	8014b3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014b4a:	e112      	b.n	8014d72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	899b      	ldrh	r3, [r3, #12]
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7f8 fdab 	bl	800d6b0 <lwip_htons>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	f003 0304 	and.w	r3, r3, #4
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d006      	beq.n	8014b74 <tcp_output+0x188>
 8014b66:	4b2f      	ldr	r3, [pc, #188]	@ (8014c24 <tcp_output+0x238>)
 8014b68:	f240 5236 	movw	r2, #1334	@ 0x536
 8014b6c:	4932      	ldr	r1, [pc, #200]	@ (8014c38 <tcp_output+0x24c>)
 8014b6e:	482f      	ldr	r0, [pc, #188]	@ (8014c2c <tcp_output+0x240>)
 8014b70:	f004 fb18 	bl	80191a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d01f      	beq.n	8014bbc <tcp_output+0x1d0>
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	8b5b      	ldrh	r3, [r3, #26]
 8014b80:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d119      	bne.n	8014bbc <tcp_output+0x1d0>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d00b      	beq.n	8014ba8 <tcp_output+0x1bc>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d110      	bne.n	8014bbc <tcp_output+0x1d0>
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b9e:	891a      	ldrh	r2, [r3, #8]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d209      	bcs.n	8014bbc <tcp_output+0x1d0>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d004      	beq.n	8014bbc <tcp_output+0x1d0>
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014bb8:	2b08      	cmp	r3, #8
 8014bba:	d901      	bls.n	8014bc0 <tcp_output+0x1d4>
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	e000      	b.n	8014bc2 <tcp_output+0x1d6>
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d106      	bne.n	8014bd4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	8b5b      	ldrh	r3, [r3, #26]
 8014bca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	f000 80e4 	beq.w	8014d9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	7d1b      	ldrb	r3, [r3, #20]
 8014bd8:	2b02      	cmp	r3, #2
 8014bda:	d00d      	beq.n	8014bf8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	899b      	ldrh	r3, [r3, #12]
 8014be2:	b29c      	uxth	r4, r3
 8014be4:	2010      	movs	r0, #16
 8014be6:	f7f8 fd63 	bl	800d6b0 <lwip_htons>
 8014bea:	4603      	mov	r3, r0
 8014bec:	461a      	mov	r2, r3
 8014bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bf0:	68db      	ldr	r3, [r3, #12]
 8014bf2:	4322      	orrs	r2, r4
 8014bf4:	b292      	uxth	r2, r2
 8014bf6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014bf8:	697a      	ldr	r2, [r7, #20]
 8014bfa:	6879      	ldr	r1, [r7, #4]
 8014bfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014bfe:	f000 f909 	bl	8014e14 <tcp_output_segment>
 8014c02:	4603      	mov	r3, r0
 8014c04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d016      	beq.n	8014c3c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	8b5b      	ldrh	r3, [r3, #26]
 8014c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	835a      	strh	r2, [r3, #26]
      return err;
 8014c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c20:	e0d3      	b.n	8014dca <tcp_output+0x3de>
 8014c22:	bf00      	nop
 8014c24:	0801bf90 	.word	0x0801bf90
 8014c28:	0801c4d4 	.word	0x0801c4d4
 8014c2c:	0801bfe4 	.word	0x0801bfe4
 8014c30:	0801c4ec 	.word	0x0801c4ec
 8014c34:	2400c3e8 	.word	0x2400c3e8
 8014c38:	0801c514 	.word	0x0801c514
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c3e:	681a      	ldr	r2, [r3, #0]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	7d1b      	ldrb	r3, [r3, #20]
 8014c48:	2b02      	cmp	r3, #2
 8014c4a:	d006      	beq.n	8014c5a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	8b5b      	ldrh	r3, [r3, #26]
 8014c50:	f023 0303 	bic.w	r3, r3, #3
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c5c:	68db      	ldr	r3, [r3, #12]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7f8 fd3a 	bl	800d6da <lwip_htonl>
 8014c66:	4604      	mov	r4, r0
 8014c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c6a:	891b      	ldrh	r3, [r3, #8]
 8014c6c:	461d      	mov	r5, r3
 8014c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	899b      	ldrh	r3, [r3, #12]
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f8 fd1a 	bl	800d6b0 <lwip_htons>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	f003 0303 	and.w	r3, r3, #3
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d001      	beq.n	8014c8c <tcp_output+0x2a0>
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e000      	b.n	8014c8e <tcp_output+0x2a2>
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	442b      	add	r3, r5
 8014c90:	4423      	add	r3, r4
 8014c92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	1ad3      	subs	r3, r2, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	da02      	bge.n	8014ca6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	68ba      	ldr	r2, [r7, #8]
 8014ca4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ca8:	891b      	ldrh	r3, [r3, #8]
 8014caa:	461c      	mov	r4, r3
 8014cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	899b      	ldrh	r3, [r3, #12]
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f8 fcfb 	bl	800d6b0 <lwip_htons>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	b2db      	uxtb	r3, r3
 8014cbe:	f003 0303 	and.w	r3, r3, #3
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d001      	beq.n	8014cca <tcp_output+0x2de>
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	e000      	b.n	8014ccc <tcp_output+0x2e0>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	4423      	add	r3, r4
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d049      	beq.n	8014d66 <tcp_output+0x37a>
      seg->next = NULL;
 8014cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d105      	bne.n	8014cec <tcp_output+0x300>
        pcb->unacked = seg;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ce4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce8:	623b      	str	r3, [r7, #32]
 8014cea:	e03f      	b.n	8014d6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cee:	68db      	ldr	r3, [r3, #12]
 8014cf0:	685b      	ldr	r3, [r3, #4]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7f8 fcf1 	bl	800d6da <lwip_htonl>
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	6a3b      	ldr	r3, [r7, #32]
 8014cfc:	68db      	ldr	r3, [r3, #12]
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f8 fcea 	bl	800d6da <lwip_htonl>
 8014d06:	4603      	mov	r3, r0
 8014d08:	1ae3      	subs	r3, r4, r3
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	da24      	bge.n	8014d58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	3370      	adds	r3, #112	@ 0x70
 8014d12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014d14:	e002      	b.n	8014d1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014d16:	69fb      	ldr	r3, [r7, #28]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014d1c:	69fb      	ldr	r3, [r7, #28]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d011      	beq.n	8014d48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	68db      	ldr	r3, [r3, #12]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7f8 fcd4 	bl	800d6da <lwip_htonl>
 8014d32:	4604      	mov	r4, r0
 8014d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7f8 fccd 	bl	800d6da <lwip_htonl>
 8014d40:	4603      	mov	r3, r0
 8014d42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	dbe6      	blt.n	8014d16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d54:	601a      	str	r2, [r3, #0]
 8014d56:	e009      	b.n	8014d6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014d58:	6a3b      	ldr	r3, [r7, #32]
 8014d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014d5e:	6a3b      	ldr	r3, [r7, #32]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	623b      	str	r3, [r7, #32]
 8014d64:	e002      	b.n	8014d6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014d66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014d68:	f7fb fef9 	bl	8010b5e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d70:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8014d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d012      	beq.n	8014d9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7a:	68db      	ldr	r3, [r3, #12]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f8 fcab 	bl	800d6da <lwip_htonl>
 8014d84:	4602      	mov	r2, r0
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d8e:	8912      	ldrh	r2, [r2, #8]
 8014d90:	4413      	add	r3, r2
  while (seg != NULL &&
 8014d92:	69ba      	ldr	r2, [r7, #24]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	f4bf aed9 	bcs.w	8014b4c <tcp_output+0x160>
 8014d9a:	e000      	b.n	8014d9e <tcp_output+0x3b2>
      break;
 8014d9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d108      	bne.n	8014db8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2200      	movs	r2, #0
 8014daa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014dae:	e004      	b.n	8014dba <tcp_output+0x3ce>
    goto output_done;
 8014db0:	bf00      	nop
 8014db2:	e002      	b.n	8014dba <tcp_output+0x3ce>
    goto output_done;
 8014db4:	bf00      	nop
 8014db6:	e000      	b.n	8014dba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014db8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	8b5b      	ldrh	r3, [r3, #26]
 8014dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014dc8:	2300      	movs	r3, #0
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3728      	adds	r7, #40	@ 0x28
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8014dd2:	bf00      	nop

08014dd4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d106      	bne.n	8014df0 <tcp_output_segment_busy+0x1c>
 8014de2:	4b09      	ldr	r3, [pc, #36]	@ (8014e08 <tcp_output_segment_busy+0x34>)
 8014de4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014de8:	4908      	ldr	r1, [pc, #32]	@ (8014e0c <tcp_output_segment_busy+0x38>)
 8014dea:	4809      	ldr	r0, [pc, #36]	@ (8014e10 <tcp_output_segment_busy+0x3c>)
 8014dec:	f004 f9da 	bl	80191a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	7b9b      	ldrb	r3, [r3, #14]
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d001      	beq.n	8014dfe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	e000      	b.n	8014e00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014dfe:	2300      	movs	r3, #0
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3708      	adds	r7, #8
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	0801bf90 	.word	0x0801bf90
 8014e0c:	0801c52c 	.word	0x0801c52c
 8014e10:	0801bfe4 	.word	0x0801bfe4

08014e14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014e14:	b5b0      	push	{r4, r5, r7, lr}
 8014e16:	b08c      	sub	sp, #48	@ 0x30
 8014e18:	af04      	add	r7, sp, #16
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d106      	bne.n	8014e34 <tcp_output_segment+0x20>
 8014e26:	4b6d      	ldr	r3, [pc, #436]	@ (8014fdc <tcp_output_segment+0x1c8>)
 8014e28:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8014e2c:	496c      	ldr	r1, [pc, #432]	@ (8014fe0 <tcp_output_segment+0x1cc>)
 8014e2e:	486d      	ldr	r0, [pc, #436]	@ (8014fe4 <tcp_output_segment+0x1d0>)
 8014e30:	f004 f9b8 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d106      	bne.n	8014e48 <tcp_output_segment+0x34>
 8014e3a:	4b68      	ldr	r3, [pc, #416]	@ (8014fdc <tcp_output_segment+0x1c8>)
 8014e3c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8014e40:	4969      	ldr	r1, [pc, #420]	@ (8014fe8 <tcp_output_segment+0x1d4>)
 8014e42:	4868      	ldr	r0, [pc, #416]	@ (8014fe4 <tcp_output_segment+0x1d0>)
 8014e44:	f004 f9ae 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d106      	bne.n	8014e5c <tcp_output_segment+0x48>
 8014e4e:	4b63      	ldr	r3, [pc, #396]	@ (8014fdc <tcp_output_segment+0x1c8>)
 8014e50:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8014e54:	4965      	ldr	r1, [pc, #404]	@ (8014fec <tcp_output_segment+0x1d8>)
 8014e56:	4863      	ldr	r0, [pc, #396]	@ (8014fe4 <tcp_output_segment+0x1d0>)
 8014e58:	f004 f9a4 	bl	80191a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	f7ff ffb9 	bl	8014dd4 <tcp_output_segment_busy>
 8014e62:	4603      	mov	r3, r0
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d001      	beq.n	8014e6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e0b3      	b.n	8014fd4 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	68dc      	ldr	r4, [r3, #12]
 8014e74:	4610      	mov	r0, r2
 8014e76:	f7f8 fc30 	bl	800d6da <lwip_htonl>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	68dc      	ldr	r4, [r3, #12]
 8014e86:	4610      	mov	r0, r2
 8014e88:	f7f8 fc12 	bl	800d6b0 <lwip_htons>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e94:	68ba      	ldr	r2, [r7, #8]
 8014e96:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014e98:	441a      	add	r2, r3
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	68db      	ldr	r3, [r3, #12]
 8014ea2:	3314      	adds	r3, #20
 8014ea4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	7a9b      	ldrb	r3, [r3, #10]
 8014eaa:	f003 0301 	and.w	r3, r3, #1
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d015      	beq.n	8014ede <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	461a      	mov	r2, r3
 8014eb8:	6879      	ldr	r1, [r7, #4]
 8014eba:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8014ebe:	f7fc fa39 	bl	8011334 <tcp_eff_send_mss_netif>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014ec6:	8b7b      	ldrh	r3, [r7, #26]
 8014ec8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7f8 fc04 	bl	800d6da <lwip_htonl>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	3304      	adds	r3, #4
 8014edc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	da02      	bge.n	8014eee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	2200      	movs	r2, #0
 8014eec:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d10c      	bne.n	8014f10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8014ff0 <tcp_output_segment+0x1dc>)
 8014ef8:	681a      	ldr	r2, [r3, #0]
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	68db      	ldr	r3, [r3, #12]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7f8 fbe8 	bl	800d6da <lwip_htonl>
 8014f0a:	4602      	mov	r2, r0
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	68da      	ldr	r2, [r3, #12]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	1ad3      	subs	r3, r2, r3
 8014f1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	8959      	ldrh	r1, [r3, #10]
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	8b3a      	ldrh	r2, [r7, #24]
 8014f2a:	1a8a      	subs	r2, r1, r2
 8014f2c:	b292      	uxth	r2, r2
 8014f2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	8919      	ldrh	r1, [r3, #8]
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	8b3a      	ldrh	r2, [r7, #24]
 8014f3c:	1a8a      	subs	r2, r1, r2
 8014f3e:	b292      	uxth	r2, r2
 8014f40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	68fa      	ldr	r2, [r7, #12]
 8014f48:	68d2      	ldr	r2, [r2, #12]
 8014f4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	2200      	movs	r2, #0
 8014f52:	741a      	strb	r2, [r3, #16]
 8014f54:	2200      	movs	r2, #0
 8014f56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	68da      	ldr	r2, [r3, #12]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	7a9b      	ldrb	r3, [r3, #10]
 8014f60:	f003 0301 	and.w	r3, r3, #1
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d001      	beq.n	8014f6c <tcp_output_segment+0x158>
 8014f68:	2318      	movs	r3, #24
 8014f6a:	e000      	b.n	8014f6e <tcp_output_segment+0x15a>
 8014f6c:	2314      	movs	r3, #20
 8014f6e:	4413      	add	r3, r2
 8014f70:	69fa      	ldr	r2, [r7, #28]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d006      	beq.n	8014f84 <tcp_output_segment+0x170>
 8014f76:	4b19      	ldr	r3, [pc, #100]	@ (8014fdc <tcp_output_segment+0x1c8>)
 8014f78:	f240 621c 	movw	r2, #1564	@ 0x61c
 8014f7c:	491d      	ldr	r1, [pc, #116]	@ (8014ff4 <tcp_output_segment+0x1e0>)
 8014f7e:	4819      	ldr	r0, [pc, #100]	@ (8014fe4 <tcp_output_segment+0x1d0>)
 8014f80:	f004 f910 	bl	80191a4 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014f8c:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014f8e:	68bd      	ldr	r5, [r7, #8]
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014f94:	68fa      	ldr	r2, [r7, #12]
 8014f96:	68d4      	ldr	r4, [r2, #12]
 8014f98:	9300      	str	r3, [sp, #0]
 8014f9a:	462b      	mov	r3, r5
 8014f9c:	460a      	mov	r2, r1
 8014f9e:	2106      	movs	r1, #6
 8014fa0:	f7f8 fcee 	bl	800d980 <ip_chksum_pseudo>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6858      	ldr	r0, [r3, #4]
 8014fac:	68b9      	ldr	r1, [r7, #8]
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	1d1c      	adds	r4, r3, #4
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	7add      	ldrb	r5, [r3, #11]
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	7a9b      	ldrb	r3, [r3, #10]
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	9202      	str	r2, [sp, #8]
 8014fbe:	2206      	movs	r2, #6
 8014fc0:	9201      	str	r2, [sp, #4]
 8014fc2:	9300      	str	r3, [sp, #0]
 8014fc4:	462b      	mov	r3, r5
 8014fc6:	4622      	mov	r2, r4
 8014fc8:	f002 fb9c 	bl	8017704 <ip4_output_if>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3720      	adds	r7, #32
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bdb0      	pop	{r4, r5, r7, pc}
 8014fdc:	0801bf90 	.word	0x0801bf90
 8014fe0:	0801c554 	.word	0x0801c554
 8014fe4:	0801bfe4 	.word	0x0801bfe4
 8014fe8:	0801c574 	.word	0x0801c574
 8014fec:	0801c594 	.word	0x0801c594
 8014ff0:	2400c39c 	.word	0x2400c39c
 8014ff4:	0801c5b8 	.word	0x0801c5b8

08014ff8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014ff8:	b5b0      	push	{r4, r5, r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d106      	bne.n	8015014 <tcp_rexmit_rto_prepare+0x1c>
 8015006:	4b31      	ldr	r3, [pc, #196]	@ (80150cc <tcp_rexmit_rto_prepare+0xd4>)
 8015008:	f240 6263 	movw	r2, #1635	@ 0x663
 801500c:	4930      	ldr	r1, [pc, #192]	@ (80150d0 <tcp_rexmit_rto_prepare+0xd8>)
 801500e:	4831      	ldr	r0, [pc, #196]	@ (80150d4 <tcp_rexmit_rto_prepare+0xdc>)
 8015010:	f004 f8c8 	bl	80191a4 <iprintf>

  if (pcb->unacked == NULL) {
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015018:	2b00      	cmp	r3, #0
 801501a:	d102      	bne.n	8015022 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801501c:	f06f 0305 	mvn.w	r3, #5
 8015020:	e050      	b.n	80150c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015026:	60fb      	str	r3, [r7, #12]
 8015028:	e00b      	b.n	8015042 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801502a:	68f8      	ldr	r0, [r7, #12]
 801502c:	f7ff fed2 	bl	8014dd4 <tcp_output_segment_busy>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	d002      	beq.n	801503c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015036:	f06f 0305 	mvn.w	r3, #5
 801503a:	e043      	b.n	80150c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	60fb      	str	r3, [r7, #12]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d1ef      	bne.n	801502a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801504a:	68f8      	ldr	r0, [r7, #12]
 801504c:	f7ff fec2 	bl	8014dd4 <tcp_output_segment_busy>
 8015050:	4603      	mov	r3, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	d002      	beq.n	801505c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015056:	f06f 0305 	mvn.w	r3, #5
 801505a:	e033      	b.n	80150c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2200      	movs	r2, #0
 8015070:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8b5b      	ldrh	r3, [r3, #26]
 8015076:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	4618      	mov	r0, r3
 8015088:	f7f8 fb27 	bl	800d6da <lwip_htonl>
 801508c:	4604      	mov	r4, r0
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	891b      	ldrh	r3, [r3, #8]
 8015092:	461d      	mov	r5, r3
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	899b      	ldrh	r3, [r3, #12]
 801509a:	b29b      	uxth	r3, r3
 801509c:	4618      	mov	r0, r3
 801509e:	f7f8 fb07 	bl	800d6b0 <lwip_htons>
 80150a2:	4603      	mov	r3, r0
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	f003 0303 	and.w	r3, r3, #3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d001      	beq.n	80150b2 <tcp_rexmit_rto_prepare+0xba>
 80150ae:	2301      	movs	r3, #1
 80150b0:	e000      	b.n	80150b4 <tcp_rexmit_rto_prepare+0xbc>
 80150b2:	2300      	movs	r3, #0
 80150b4:	442b      	add	r3, r5
 80150b6:	18e2      	adds	r2, r4, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2200      	movs	r2, #0
 80150c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80150c2:	2300      	movs	r3, #0
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3710      	adds	r7, #16
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bdb0      	pop	{r4, r5, r7, pc}
 80150cc:	0801bf90 	.word	0x0801bf90
 80150d0:	0801c5cc 	.word	0x0801c5cc
 80150d4:	0801bfe4 	.word	0x0801bfe4

080150d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d106      	bne.n	80150f4 <tcp_rexmit_rto_commit+0x1c>
 80150e6:	4b0d      	ldr	r3, [pc, #52]	@ (801511c <tcp_rexmit_rto_commit+0x44>)
 80150e8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80150ec:	490c      	ldr	r1, [pc, #48]	@ (8015120 <tcp_rexmit_rto_commit+0x48>)
 80150ee:	480d      	ldr	r0, [pc, #52]	@ (8015124 <tcp_rexmit_rto_commit+0x4c>)
 80150f0:	f004 f858 	bl	80191a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80150fa:	2bff      	cmp	r3, #255	@ 0xff
 80150fc:	d007      	beq.n	801510e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015104:	3301      	adds	r3, #1
 8015106:	b2da      	uxtb	r2, r3
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f7ff fc6c 	bl	80149ec <tcp_output>
}
 8015114:	bf00      	nop
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	0801bf90 	.word	0x0801bf90
 8015120:	0801c5f0 	.word	0x0801c5f0
 8015124:	0801bfe4 	.word	0x0801bfe4

08015128 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d106      	bne.n	8015144 <tcp_rexmit_rto+0x1c>
 8015136:	4b0a      	ldr	r3, [pc, #40]	@ (8015160 <tcp_rexmit_rto+0x38>)
 8015138:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801513c:	4909      	ldr	r1, [pc, #36]	@ (8015164 <tcp_rexmit_rto+0x3c>)
 801513e:	480a      	ldr	r0, [pc, #40]	@ (8015168 <tcp_rexmit_rto+0x40>)
 8015140:	f004 f830 	bl	80191a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7ff ff57 	bl	8014ff8 <tcp_rexmit_rto_prepare>
 801514a:	4603      	mov	r3, r0
 801514c:	2b00      	cmp	r3, #0
 801514e:	d102      	bne.n	8015156 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f7ff ffc1 	bl	80150d8 <tcp_rexmit_rto_commit>
  }
}
 8015156:	bf00      	nop
 8015158:	3708      	adds	r7, #8
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	0801bf90 	.word	0x0801bf90
 8015164:	0801c614 	.word	0x0801c614
 8015168:	0801bfe4 	.word	0x0801bfe4

0801516c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801516c:	b590      	push	{r4, r7, lr}
 801516e:	b085      	sub	sp, #20
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d106      	bne.n	8015188 <tcp_rexmit+0x1c>
 801517a:	4b2f      	ldr	r3, [pc, #188]	@ (8015238 <tcp_rexmit+0xcc>)
 801517c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015180:	492e      	ldr	r1, [pc, #184]	@ (801523c <tcp_rexmit+0xd0>)
 8015182:	482f      	ldr	r0, [pc, #188]	@ (8015240 <tcp_rexmit+0xd4>)
 8015184:	f004 f80e 	bl	80191a4 <iprintf>

  if (pcb->unacked == NULL) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801518c:	2b00      	cmp	r3, #0
 801518e:	d102      	bne.n	8015196 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015190:	f06f 0305 	mvn.w	r3, #5
 8015194:	e04c      	b.n	8015230 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801519a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801519c:	68b8      	ldr	r0, [r7, #8]
 801519e:	f7ff fe19 	bl	8014dd4 <tcp_output_segment_busy>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d002      	beq.n	80151ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80151a8:	f06f 0305 	mvn.w	r3, #5
 80151ac:	e040      	b.n	8015230 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	336c      	adds	r3, #108	@ 0x6c
 80151ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80151bc:	e002      	b.n	80151c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d011      	beq.n	80151f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	68db      	ldr	r3, [r3, #12]
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7f8 fa80 	bl	800d6da <lwip_htonl>
 80151da:	4604      	mov	r4, r0
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7f8 fa79 	bl	800d6da <lwip_htonl>
 80151e8:	4603      	mov	r3, r0
 80151ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	dbe6      	blt.n	80151be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	68ba      	ldr	r2, [r7, #8]
 80151fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d103      	bne.n	801520e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2200      	movs	r2, #0
 801520a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015214:	2bff      	cmp	r3, #255	@ 0xff
 8015216:	d007      	beq.n	8015228 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801521e:	3301      	adds	r3, #1
 8015220:	b2da      	uxtb	r2, r3
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2200      	movs	r2, #0
 801522c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801522e:	2300      	movs	r3, #0
}
 8015230:	4618      	mov	r0, r3
 8015232:	3714      	adds	r7, #20
 8015234:	46bd      	mov	sp, r7
 8015236:	bd90      	pop	{r4, r7, pc}
 8015238:	0801bf90 	.word	0x0801bf90
 801523c:	0801c630 	.word	0x0801c630
 8015240:	0801bfe4 	.word	0x0801bfe4

08015244 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d106      	bne.n	8015260 <tcp_rexmit_fast+0x1c>
 8015252:	4b2a      	ldr	r3, [pc, #168]	@ (80152fc <tcp_rexmit_fast+0xb8>)
 8015254:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015258:	4929      	ldr	r1, [pc, #164]	@ (8015300 <tcp_rexmit_fast+0xbc>)
 801525a:	482a      	ldr	r0, [pc, #168]	@ (8015304 <tcp_rexmit_fast+0xc0>)
 801525c:	f003 ffa2 	bl	80191a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015264:	2b00      	cmp	r3, #0
 8015266:	d045      	beq.n	80152f4 <tcp_rexmit_fast+0xb0>
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	8b5b      	ldrh	r3, [r3, #26]
 801526c:	f003 0304 	and.w	r3, r3, #4
 8015270:	2b00      	cmp	r3, #0
 8015272:	d13f      	bne.n	80152f4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7ff ff79 	bl	801516c <tcp_rexmit>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d139      	bne.n	80152f4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801528c:	4293      	cmp	r3, r2
 801528e:	bf28      	it	cs
 8015290:	4613      	movcs	r3, r2
 8015292:	b29b      	uxth	r3, r3
 8015294:	2b00      	cmp	r3, #0
 8015296:	da00      	bge.n	801529a <tcp_rexmit_fast+0x56>
 8015298:	3301      	adds	r3, #1
 801529a:	105b      	asrs	r3, r3, #1
 801529c:	b29a      	uxth	r2, r3
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80152aa:	461a      	mov	r2, r3
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d206      	bcs.n	80152c4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152ba:	005b      	lsls	r3, r3, #1
 80152bc:	b29a      	uxth	r2, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152ce:	4619      	mov	r1, r3
 80152d0:	0049      	lsls	r1, r1, #1
 80152d2:	440b      	add	r3, r1
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	4413      	add	r3, r2
 80152d8:	b29a      	uxth	r2, r3
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	8b5b      	ldrh	r3, [r3, #26]
 80152e4:	f043 0304 	orr.w	r3, r3, #4
 80152e8:	b29a      	uxth	r2, r3
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	2200      	movs	r2, #0
 80152f2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80152f4:	bf00      	nop
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	0801bf90 	.word	0x0801bf90
 8015300:	0801c648 	.word	0x0801c648
 8015304:	0801bfe4 	.word	0x0801bfe4

08015308 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b086      	sub	sp, #24
 801530c:	af00      	add	r7, sp, #0
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	607b      	str	r3, [r7, #4]
 8015312:	460b      	mov	r3, r1
 8015314:	817b      	strh	r3, [r7, #10]
 8015316:	4613      	mov	r3, r2
 8015318:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801531a:	897a      	ldrh	r2, [r7, #10]
 801531c:	893b      	ldrh	r3, [r7, #8]
 801531e:	4413      	add	r3, r2
 8015320:	b29b      	uxth	r3, r3
 8015322:	3314      	adds	r3, #20
 8015324:	b29b      	uxth	r3, r3
 8015326:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801532a:	4619      	mov	r1, r3
 801532c:	2022      	movs	r0, #34	@ 0x22
 801532e:	f7f9 fc87 	bl	800ec40 <pbuf_alloc>
 8015332:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d04d      	beq.n	80153d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801533a:	897b      	ldrh	r3, [r7, #10]
 801533c:	3313      	adds	r3, #19
 801533e:	697a      	ldr	r2, [r7, #20]
 8015340:	8952      	ldrh	r2, [r2, #10]
 8015342:	4293      	cmp	r3, r2
 8015344:	db06      	blt.n	8015354 <tcp_output_alloc_header_common+0x4c>
 8015346:	4b26      	ldr	r3, [pc, #152]	@ (80153e0 <tcp_output_alloc_header_common+0xd8>)
 8015348:	f240 7223 	movw	r2, #1827	@ 0x723
 801534c:	4925      	ldr	r1, [pc, #148]	@ (80153e4 <tcp_output_alloc_header_common+0xdc>)
 801534e:	4826      	ldr	r0, [pc, #152]	@ (80153e8 <tcp_output_alloc_header_common+0xe0>)
 8015350:	f003 ff28 	bl	80191a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801535a:	8c3b      	ldrh	r3, [r7, #32]
 801535c:	4618      	mov	r0, r3
 801535e:	f7f8 f9a7 	bl	800d6b0 <lwip_htons>
 8015362:	4603      	mov	r3, r0
 8015364:	461a      	mov	r2, r3
 8015366:	693b      	ldr	r3, [r7, #16]
 8015368:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801536a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801536c:	4618      	mov	r0, r3
 801536e:	f7f8 f99f 	bl	800d6b0 <lwip_htons>
 8015372:	4603      	mov	r3, r0
 8015374:	461a      	mov	r2, r3
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	687a      	ldr	r2, [r7, #4]
 801537e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7f8 f9aa 	bl	800d6da <lwip_htonl>
 8015386:	4602      	mov	r2, r0
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801538c:	897b      	ldrh	r3, [r7, #10]
 801538e:	089b      	lsrs	r3, r3, #2
 8015390:	b29b      	uxth	r3, r3
 8015392:	3305      	adds	r3, #5
 8015394:	b29b      	uxth	r3, r3
 8015396:	031b      	lsls	r3, r3, #12
 8015398:	b29a      	uxth	r2, r3
 801539a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801539e:	b29b      	uxth	r3, r3
 80153a0:	4313      	orrs	r3, r2
 80153a2:	b29b      	uxth	r3, r3
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f8 f983 	bl	800d6b0 <lwip_htons>
 80153aa:	4603      	mov	r3, r0
 80153ac:	461a      	mov	r2, r3
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80153b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7f8 f97b 	bl	800d6b0 <lwip_htons>
 80153ba:	4603      	mov	r3, r0
 80153bc:	461a      	mov	r2, r3
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	2200      	movs	r2, #0
 80153c6:	741a      	strb	r2, [r3, #16]
 80153c8:	2200      	movs	r2, #0
 80153ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	2200      	movs	r2, #0
 80153d0:	749a      	strb	r2, [r3, #18]
 80153d2:	2200      	movs	r2, #0
 80153d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80153d6:	697b      	ldr	r3, [r7, #20]
}
 80153d8:	4618      	mov	r0, r3
 80153da:	3718      	adds	r7, #24
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	0801bf90 	.word	0x0801bf90
 80153e4:	0801c668 	.word	0x0801c668
 80153e8:	0801bfe4 	.word	0x0801bfe4

080153ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80153ec:	b5b0      	push	{r4, r5, r7, lr}
 80153ee:	b08a      	sub	sp, #40	@ 0x28
 80153f0:	af04      	add	r7, sp, #16
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	607b      	str	r3, [r7, #4]
 80153f6:	460b      	mov	r3, r1
 80153f8:	817b      	strh	r3, [r7, #10]
 80153fa:	4613      	mov	r3, r2
 80153fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d106      	bne.n	8015412 <tcp_output_alloc_header+0x26>
 8015404:	4b15      	ldr	r3, [pc, #84]	@ (801545c <tcp_output_alloc_header+0x70>)
 8015406:	f240 7242 	movw	r2, #1858	@ 0x742
 801540a:	4915      	ldr	r1, [pc, #84]	@ (8015460 <tcp_output_alloc_header+0x74>)
 801540c:	4815      	ldr	r0, [pc, #84]	@ (8015464 <tcp_output_alloc_header+0x78>)
 801540e:	f003 fec9 	bl	80191a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	8adb      	ldrh	r3, [r3, #22]
 801541a:	68fa      	ldr	r2, [r7, #12]
 801541c:	8b12      	ldrh	r2, [r2, #24]
 801541e:	68f9      	ldr	r1, [r7, #12]
 8015420:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015422:	893d      	ldrh	r5, [r7, #8]
 8015424:	897c      	ldrh	r4, [r7, #10]
 8015426:	9103      	str	r1, [sp, #12]
 8015428:	2110      	movs	r1, #16
 801542a:	9102      	str	r1, [sp, #8]
 801542c:	9201      	str	r2, [sp, #4]
 801542e:	9300      	str	r3, [sp, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	462a      	mov	r2, r5
 8015434:	4621      	mov	r1, r4
 8015436:	f7ff ff67 	bl	8015308 <tcp_output_alloc_header_common>
 801543a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d006      	beq.n	8015450 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015446:	68fa      	ldr	r2, [r7, #12]
 8015448:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801544a:	441a      	add	r2, r3
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015450:	697b      	ldr	r3, [r7, #20]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3718      	adds	r7, #24
 8015456:	46bd      	mov	sp, r7
 8015458:	bdb0      	pop	{r4, r5, r7, pc}
 801545a:	bf00      	nop
 801545c:	0801bf90 	.word	0x0801bf90
 8015460:	0801c698 	.word	0x0801c698
 8015464:	0801bfe4 	.word	0x0801bfe4

08015468 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b088      	sub	sp, #32
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	4611      	mov	r1, r2
 8015474:	461a      	mov	r2, r3
 8015476:	460b      	mov	r3, r1
 8015478:	71fb      	strb	r3, [r7, #7]
 801547a:	4613      	mov	r3, r2
 801547c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801547e:	2300      	movs	r3, #0
 8015480:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d106      	bne.n	8015496 <tcp_output_fill_options+0x2e>
 8015488:	4b12      	ldr	r3, [pc, #72]	@ (80154d4 <tcp_output_fill_options+0x6c>)
 801548a:	f240 7256 	movw	r2, #1878	@ 0x756
 801548e:	4912      	ldr	r1, [pc, #72]	@ (80154d8 <tcp_output_fill_options+0x70>)
 8015490:	4812      	ldr	r0, [pc, #72]	@ (80154dc <tcp_output_fill_options+0x74>)
 8015492:	f003 fe87 	bl	80191a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801549c:	69bb      	ldr	r3, [r7, #24]
 801549e:	3314      	adds	r3, #20
 80154a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80154a2:	8bfb      	ldrh	r3, [r7, #30]
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	461a      	mov	r2, r3
 80154a8:	79fb      	ldrb	r3, [r7, #7]
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	f003 0304 	and.w	r3, r3, #4
 80154b0:	4413      	add	r3, r2
 80154b2:	3314      	adds	r3, #20
 80154b4:	69ba      	ldr	r2, [r7, #24]
 80154b6:	4413      	add	r3, r2
 80154b8:	697a      	ldr	r2, [r7, #20]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d006      	beq.n	80154cc <tcp_output_fill_options+0x64>
 80154be:	4b05      	ldr	r3, [pc, #20]	@ (80154d4 <tcp_output_fill_options+0x6c>)
 80154c0:	f240 7275 	movw	r2, #1909	@ 0x775
 80154c4:	4906      	ldr	r1, [pc, #24]	@ (80154e0 <tcp_output_fill_options+0x78>)
 80154c6:	4805      	ldr	r0, [pc, #20]	@ (80154dc <tcp_output_fill_options+0x74>)
 80154c8:	f003 fe6c 	bl	80191a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80154cc:	bf00      	nop
 80154ce:	3720      	adds	r7, #32
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	0801bf90 	.word	0x0801bf90
 80154d8:	0801c6c0 	.word	0x0801c6c0
 80154dc:	0801bfe4 	.word	0x0801bfe4
 80154e0:	0801c5b8 	.word	0x0801c5b8

080154e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08c      	sub	sp, #48	@ 0x30
 80154e8:	af04      	add	r7, sp, #16
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d106      	bne.n	8015506 <tcp_output_control_segment+0x22>
 80154f8:	4b24      	ldr	r3, [pc, #144]	@ (801558c <tcp_output_control_segment+0xa8>)
 80154fa:	f240 7287 	movw	r2, #1927	@ 0x787
 80154fe:	4924      	ldr	r1, [pc, #144]	@ (8015590 <tcp_output_control_segment+0xac>)
 8015500:	4824      	ldr	r0, [pc, #144]	@ (8015594 <tcp_output_control_segment+0xb0>)
 8015502:	f003 fe4f 	bl	80191a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	6879      	ldr	r1, [r7, #4]
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	f7fe fad8 	bl	8013ac0 <tcp_route>
 8015510:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8015512:	69bb      	ldr	r3, [r7, #24]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d102      	bne.n	801551e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015518:	23fc      	movs	r3, #252	@ 0xfc
 801551a:	77fb      	strb	r3, [r7, #31]
 801551c:	e02c      	b.n	8015578 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	891a      	ldrh	r2, [r3, #8]
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2106      	movs	r1, #6
 8015530:	68b8      	ldr	r0, [r7, #8]
 8015532:	f7f8 fa25 	bl	800d980 <ip_chksum_pseudo>
 8015536:	4603      	mov	r3, r0
 8015538:	461a      	mov	r2, r3
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d006      	beq.n	8015552 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	7adb      	ldrb	r3, [r3, #11]
 8015548:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	7a9b      	ldrb	r3, [r3, #10]
 801554e:	777b      	strb	r3, [r7, #29]
 8015550:	e003      	b.n	801555a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015552:	23ff      	movs	r3, #255	@ 0xff
 8015554:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8015556:	2300      	movs	r3, #0
 8015558:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801555a:	7fba      	ldrb	r2, [r7, #30]
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	9302      	str	r3, [sp, #8]
 8015560:	2306      	movs	r3, #6
 8015562:	9301      	str	r3, [sp, #4]
 8015564:	7f7b      	ldrb	r3, [r7, #29]
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	4613      	mov	r3, r2
 801556a:	683a      	ldr	r2, [r7, #0]
 801556c:	6879      	ldr	r1, [r7, #4]
 801556e:	68b8      	ldr	r0, [r7, #8]
 8015570:	f002 f8c8 	bl	8017704 <ip4_output_if>
 8015574:	4603      	mov	r3, r0
 8015576:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015578:	68b8      	ldr	r0, [r7, #8]
 801557a:	f7f9 fe45 	bl	800f208 <pbuf_free>
  return err;
 801557e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015582:	4618      	mov	r0, r3
 8015584:	3720      	adds	r7, #32
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	0801bf90 	.word	0x0801bf90
 8015590:	0801c6e8 	.word	0x0801c6e8
 8015594:	0801bfe4 	.word	0x0801bfe4

08015598 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015598:	b590      	push	{r4, r7, lr}
 801559a:	b08b      	sub	sp, #44	@ 0x2c
 801559c:	af04      	add	r7, sp, #16
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d106      	bne.n	80155ba <tcp_rst+0x22>
 80155ac:	4b1f      	ldr	r3, [pc, #124]	@ (801562c <tcp_rst+0x94>)
 80155ae:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80155b2:	491f      	ldr	r1, [pc, #124]	@ (8015630 <tcp_rst+0x98>)
 80155b4:	481f      	ldr	r0, [pc, #124]	@ (8015634 <tcp_rst+0x9c>)
 80155b6:	f003 fdf5 	bl	80191a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80155ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d106      	bne.n	80155ce <tcp_rst+0x36>
 80155c0:	4b1a      	ldr	r3, [pc, #104]	@ (801562c <tcp_rst+0x94>)
 80155c2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80155c6:	491c      	ldr	r1, [pc, #112]	@ (8015638 <tcp_rst+0xa0>)
 80155c8:	481a      	ldr	r0, [pc, #104]	@ (8015634 <tcp_rst+0x9c>)
 80155ca:	f003 fdeb 	bl	80191a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80155ce:	2300      	movs	r3, #0
 80155d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80155d2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80155d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80155d8:	7dfb      	ldrb	r3, [r7, #23]
 80155da:	b29c      	uxth	r4, r3
 80155dc:	68b8      	ldr	r0, [r7, #8]
 80155de:	f7f8 f87c 	bl	800d6da <lwip_htonl>
 80155e2:	4602      	mov	r2, r0
 80155e4:	8abb      	ldrh	r3, [r7, #20]
 80155e6:	9303      	str	r3, [sp, #12]
 80155e8:	2314      	movs	r3, #20
 80155ea:	9302      	str	r3, [sp, #8]
 80155ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80155ee:	9301      	str	r3, [sp, #4]
 80155f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80155f2:	9300      	str	r3, [sp, #0]
 80155f4:	4613      	mov	r3, r2
 80155f6:	2200      	movs	r2, #0
 80155f8:	4621      	mov	r1, r4
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f7ff fe84 	bl	8015308 <tcp_output_alloc_header_common>
 8015600:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d00c      	beq.n	8015622 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015608:	7dfb      	ldrb	r3, [r7, #23]
 801560a:	2200      	movs	r2, #0
 801560c:	6939      	ldr	r1, [r7, #16]
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	f7ff ff2a 	bl	8015468 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	6939      	ldr	r1, [r7, #16]
 801561a:	68f8      	ldr	r0, [r7, #12]
 801561c:	f7ff ff62 	bl	80154e4 <tcp_output_control_segment>
 8015620:	e000      	b.n	8015624 <tcp_rst+0x8c>
    return;
 8015622:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015624:	371c      	adds	r7, #28
 8015626:	46bd      	mov	sp, r7
 8015628:	bd90      	pop	{r4, r7, pc}
 801562a:	bf00      	nop
 801562c:	0801bf90 	.word	0x0801bf90
 8015630:	0801c714 	.word	0x0801c714
 8015634:	0801bfe4 	.word	0x0801bfe4
 8015638:	0801c730 	.word	0x0801c730

0801563c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801563c:	b590      	push	{r4, r7, lr}
 801563e:	b087      	sub	sp, #28
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015644:	2300      	movs	r3, #0
 8015646:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015648:	2300      	movs	r3, #0
 801564a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d106      	bne.n	8015660 <tcp_send_empty_ack+0x24>
 8015652:	4b28      	ldr	r3, [pc, #160]	@ (80156f4 <tcp_send_empty_ack+0xb8>)
 8015654:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015658:	4927      	ldr	r1, [pc, #156]	@ (80156f8 <tcp_send_empty_ack+0xbc>)
 801565a:	4828      	ldr	r0, [pc, #160]	@ (80156fc <tcp_send_empty_ack+0xc0>)
 801565c:	f003 fda2 	bl	80191a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015660:	7dfb      	ldrb	r3, [r7, #23]
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	b2db      	uxtb	r3, r3
 8015666:	f003 0304 	and.w	r3, r3, #4
 801566a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801566c:	7d7b      	ldrb	r3, [r7, #21]
 801566e:	b29c      	uxth	r4, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015674:	4618      	mov	r0, r3
 8015676:	f7f8 f830 	bl	800d6da <lwip_htonl>
 801567a:	4603      	mov	r3, r0
 801567c:	2200      	movs	r2, #0
 801567e:	4621      	mov	r1, r4
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7ff feb3 	bl	80153ec <tcp_output_alloc_header>
 8015686:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d109      	bne.n	80156a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	8b5b      	ldrh	r3, [r3, #26]
 8015692:	f043 0303 	orr.w	r3, r3, #3
 8015696:	b29a      	uxth	r2, r3
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801569c:	f06f 0301 	mvn.w	r3, #1
 80156a0:	e023      	b.n	80156ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80156a2:	7dbb      	ldrb	r3, [r7, #22]
 80156a4:	7dfa      	ldrb	r2, [r7, #23]
 80156a6:	6939      	ldr	r1, [r7, #16]
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f7ff fedd 	bl	8015468 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80156ae:	687a      	ldr	r2, [r7, #4]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	3304      	adds	r3, #4
 80156b4:	6939      	ldr	r1, [r7, #16]
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f7ff ff14 	bl	80154e4 <tcp_output_control_segment>
 80156bc:	4603      	mov	r3, r0
 80156be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80156c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d007      	beq.n	80156d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	8b5b      	ldrh	r3, [r3, #26]
 80156cc:	f043 0303 	orr.w	r3, r3, #3
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	835a      	strh	r2, [r3, #26]
 80156d6:	e006      	b.n	80156e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	8b5b      	ldrh	r3, [r3, #26]
 80156dc:	f023 0303 	bic.w	r3, r3, #3
 80156e0:	b29a      	uxth	r2, r3
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80156e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	371c      	adds	r7, #28
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd90      	pop	{r4, r7, pc}
 80156f2:	bf00      	nop
 80156f4:	0801bf90 	.word	0x0801bf90
 80156f8:	0801c74c 	.word	0x0801c74c
 80156fc:	0801bfe4 	.word	0x0801bfe4

08015700 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015700:	b590      	push	{r4, r7, lr}
 8015702:	b087      	sub	sp, #28
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015708:	2300      	movs	r3, #0
 801570a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d106      	bne.n	8015720 <tcp_keepalive+0x20>
 8015712:	4b18      	ldr	r3, [pc, #96]	@ (8015774 <tcp_keepalive+0x74>)
 8015714:	f640 0224 	movw	r2, #2084	@ 0x824
 8015718:	4917      	ldr	r1, [pc, #92]	@ (8015778 <tcp_keepalive+0x78>)
 801571a:	4818      	ldr	r0, [pc, #96]	@ (801577c <tcp_keepalive+0x7c>)
 801571c:	f003 fd42 	bl	80191a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	b29c      	uxth	r4, r3
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015728:	3b01      	subs	r3, #1
 801572a:	4618      	mov	r0, r3
 801572c:	f7f7 ffd5 	bl	800d6da <lwip_htonl>
 8015730:	4603      	mov	r3, r0
 8015732:	2200      	movs	r2, #0
 8015734:	4621      	mov	r1, r4
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f7ff fe58 	bl	80153ec <tcp_output_alloc_header>
 801573c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d102      	bne.n	801574a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015748:	e010      	b.n	801576c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801574a:	7dfb      	ldrb	r3, [r7, #23]
 801574c:	2200      	movs	r2, #0
 801574e:	6939      	ldr	r1, [r7, #16]
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f7ff fe89 	bl	8015468 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	3304      	adds	r3, #4
 801575c:	6939      	ldr	r1, [r7, #16]
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7ff fec0 	bl	80154e4 <tcp_output_control_segment>
 8015764:	4603      	mov	r3, r0
 8015766:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015768:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801576c:	4618      	mov	r0, r3
 801576e:	371c      	adds	r7, #28
 8015770:	46bd      	mov	sp, r7
 8015772:	bd90      	pop	{r4, r7, pc}
 8015774:	0801bf90 	.word	0x0801bf90
 8015778:	0801c76c 	.word	0x0801c76c
 801577c:	0801bfe4 	.word	0x0801bfe4

08015780 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015780:	b590      	push	{r4, r7, lr}
 8015782:	b08b      	sub	sp, #44	@ 0x2c
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015788:	2300      	movs	r3, #0
 801578a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d106      	bne.n	80157a2 <tcp_zero_window_probe+0x22>
 8015794:	4b4c      	ldr	r3, [pc, #304]	@ (80158c8 <tcp_zero_window_probe+0x148>)
 8015796:	f640 024f 	movw	r2, #2127	@ 0x84f
 801579a:	494c      	ldr	r1, [pc, #304]	@ (80158cc <tcp_zero_window_probe+0x14c>)
 801579c:	484c      	ldr	r0, [pc, #304]	@ (80158d0 <tcp_zero_window_probe+0x150>)
 801579e:	f003 fd01 	bl	80191a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80157a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80157a8:	6a3b      	ldr	r3, [r7, #32]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d101      	bne.n	80157b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80157ae:	2300      	movs	r3, #0
 80157b0:	e086      	b.n	80158c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80157b8:	2bff      	cmp	r3, #255	@ 0xff
 80157ba:	d007      	beq.n	80157cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80157c2:	3301      	adds	r3, #1
 80157c4:	b2da      	uxtb	r2, r3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80157cc:	6a3b      	ldr	r3, [r7, #32]
 80157ce:	68db      	ldr	r3, [r3, #12]
 80157d0:	899b      	ldrh	r3, [r3, #12]
 80157d2:	b29b      	uxth	r3, r3
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7f7 ff6b 	bl	800d6b0 <lwip_htons>
 80157da:	4603      	mov	r3, r0
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	f003 0301 	and.w	r3, r3, #1
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d005      	beq.n	80157f2 <tcp_zero_window_probe+0x72>
 80157e6:	6a3b      	ldr	r3, [r7, #32]
 80157e8:	891b      	ldrh	r3, [r3, #8]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d101      	bne.n	80157f2 <tcp_zero_window_probe+0x72>
 80157ee:	2301      	movs	r3, #1
 80157f0:	e000      	b.n	80157f4 <tcp_zero_window_probe+0x74>
 80157f2:	2300      	movs	r3, #0
 80157f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80157f6:	7ffb      	ldrb	r3, [r7, #31]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	bf0c      	ite	eq
 80157fc:	2301      	moveq	r3, #1
 80157fe:	2300      	movne	r3, #0
 8015800:	b2db      	uxtb	r3, r3
 8015802:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015808:	b299      	uxth	r1, r3
 801580a:	6a3b      	ldr	r3, [r7, #32]
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	8bba      	ldrh	r2, [r7, #28]
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f7ff fdea 	bl	80153ec <tcp_output_alloc_header>
 8015818:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801581a:	69bb      	ldr	r3, [r7, #24]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d102      	bne.n	8015826 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015824:	e04c      	b.n	80158c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801582c:	7ffb      	ldrb	r3, [r7, #31]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d011      	beq.n	8015856 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	899b      	ldrh	r3, [r3, #12]
 8015836:	b29b      	uxth	r3, r3
 8015838:	b21b      	sxth	r3, r3
 801583a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801583e:	b21c      	sxth	r4, r3
 8015840:	2011      	movs	r0, #17
 8015842:	f7f7 ff35 	bl	800d6b0 <lwip_htons>
 8015846:	4603      	mov	r3, r0
 8015848:	b21b      	sxth	r3, r3
 801584a:	4323      	orrs	r3, r4
 801584c:	b21b      	sxth	r3, r3
 801584e:	b29a      	uxth	r2, r3
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	819a      	strh	r2, [r3, #12]
 8015854:	e010      	b.n	8015878 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	685b      	ldr	r3, [r3, #4]
 801585a:	3314      	adds	r3, #20
 801585c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801585e:	6a3b      	ldr	r3, [r7, #32]
 8015860:	6858      	ldr	r0, [r3, #4]
 8015862:	6a3b      	ldr	r3, [r7, #32]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	891a      	ldrh	r2, [r3, #8]
 8015868:	6a3b      	ldr	r3, [r7, #32]
 801586a:	891b      	ldrh	r3, [r3, #8]
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	b29b      	uxth	r3, r3
 8015870:	2201      	movs	r2, #1
 8015872:	6939      	ldr	r1, [r7, #16]
 8015874:	f7f9 fece 	bl	800f614 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015878:	6a3b      	ldr	r3, [r7, #32]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	4618      	mov	r0, r3
 8015880:	f7f7 ff2b 	bl	800d6da <lwip_htonl>
 8015884:	4603      	mov	r3, r0
 8015886:	3301      	adds	r3, #1
 8015888:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	1ad3      	subs	r3, r2, r3
 8015892:	2b00      	cmp	r3, #0
 8015894:	da02      	bge.n	801589c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	68fa      	ldr	r2, [r7, #12]
 801589a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801589c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158a0:	2200      	movs	r2, #0
 80158a2:	69b9      	ldr	r1, [r7, #24]
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f7ff fddf 	bl	8015468 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3304      	adds	r3, #4
 80158b0:	69b9      	ldr	r1, [r7, #24]
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f7ff fe16 	bl	80154e4 <tcp_output_control_segment>
 80158b8:	4603      	mov	r3, r0
 80158ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80158bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	372c      	adds	r7, #44	@ 0x2c
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd90      	pop	{r4, r7, pc}
 80158c8:	0801bf90 	.word	0x0801bf90
 80158cc:	0801c788 	.word	0x0801c788
 80158d0:	0801bfe4 	.word	0x0801bfe4

080158d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80158dc:	f7f9 ffe8 	bl	800f8b0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80158e0:	4b0a      	ldr	r3, [pc, #40]	@ (801590c <tcpip_tcp_timer+0x38>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d103      	bne.n	80158f0 <tcpip_tcp_timer+0x1c>
 80158e8:	4b09      	ldr	r3, [pc, #36]	@ (8015910 <tcpip_tcp_timer+0x3c>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d005      	beq.n	80158fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80158f0:	2200      	movs	r2, #0
 80158f2:	4908      	ldr	r1, [pc, #32]	@ (8015914 <tcpip_tcp_timer+0x40>)
 80158f4:	20fa      	movs	r0, #250	@ 0xfa
 80158f6:	f000 f8f3 	bl	8015ae0 <sys_timeout>
 80158fa:	e003      	b.n	8015904 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80158fc:	4b06      	ldr	r3, [pc, #24]	@ (8015918 <tcpip_tcp_timer+0x44>)
 80158fe:	2200      	movs	r2, #0
 8015900:	601a      	str	r2, [r3, #0]
  }
}
 8015902:	bf00      	nop
 8015904:	bf00      	nop
 8015906:	3708      	adds	r7, #8
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}
 801590c:	2400c3a8 	.word	0x2400c3a8
 8015910:	2400c3ac 	.word	0x2400c3ac
 8015914:	080158d5 	.word	0x080158d5
 8015918:	2400c3f4 	.word	0x2400c3f4

0801591c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015920:	4b0a      	ldr	r3, [pc, #40]	@ (801594c <tcp_timer_needed+0x30>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10f      	bne.n	8015948 <tcp_timer_needed+0x2c>
 8015928:	4b09      	ldr	r3, [pc, #36]	@ (8015950 <tcp_timer_needed+0x34>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d103      	bne.n	8015938 <tcp_timer_needed+0x1c>
 8015930:	4b08      	ldr	r3, [pc, #32]	@ (8015954 <tcp_timer_needed+0x38>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d007      	beq.n	8015948 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015938:	4b04      	ldr	r3, [pc, #16]	@ (801594c <tcp_timer_needed+0x30>)
 801593a:	2201      	movs	r2, #1
 801593c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801593e:	2200      	movs	r2, #0
 8015940:	4905      	ldr	r1, [pc, #20]	@ (8015958 <tcp_timer_needed+0x3c>)
 8015942:	20fa      	movs	r0, #250	@ 0xfa
 8015944:	f000 f8cc 	bl	8015ae0 <sys_timeout>
  }
}
 8015948:	bf00      	nop
 801594a:	bd80      	pop	{r7, pc}
 801594c:	2400c3f4 	.word	0x2400c3f4
 8015950:	2400c3a8 	.word	0x2400c3a8
 8015954:	2400c3ac 	.word	0x2400c3ac
 8015958:	080158d5 	.word	0x080158d5

0801595c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b086      	sub	sp, #24
 8015960:	af00      	add	r7, sp, #0
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	60b9      	str	r1, [r7, #8]
 8015966:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015968:	200a      	movs	r0, #10
 801596a:	f7f8 fd33 	bl	800e3d4 <memp_malloc>
 801596e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d109      	bne.n	801598a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d151      	bne.n	8015a20 <sys_timeout_abs+0xc4>
 801597c:	4b2a      	ldr	r3, [pc, #168]	@ (8015a28 <sys_timeout_abs+0xcc>)
 801597e:	22be      	movs	r2, #190	@ 0xbe
 8015980:	492a      	ldr	r1, [pc, #168]	@ (8015a2c <sys_timeout_abs+0xd0>)
 8015982:	482b      	ldr	r0, [pc, #172]	@ (8015a30 <sys_timeout_abs+0xd4>)
 8015984:	f003 fc0e 	bl	80191a4 <iprintf>
    return;
 8015988:	e04a      	b.n	8015a20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	2200      	movs	r2, #0
 801598e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	68ba      	ldr	r2, [r7, #8]
 8015994:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	68fa      	ldr	r2, [r7, #12]
 80159a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80159a2:	4b24      	ldr	r3, [pc, #144]	@ (8015a34 <sys_timeout_abs+0xd8>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d103      	bne.n	80159b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80159aa:	4a22      	ldr	r2, [pc, #136]	@ (8015a34 <sys_timeout_abs+0xd8>)
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	6013      	str	r3, [r2, #0]
    return;
 80159b0:	e037      	b.n	8015a22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	685a      	ldr	r2, [r3, #4]
 80159b6:	4b1f      	ldr	r3, [pc, #124]	@ (8015a34 <sys_timeout_abs+0xd8>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	1ad3      	subs	r3, r2, r3
 80159be:	0fdb      	lsrs	r3, r3, #31
 80159c0:	f003 0301 	and.w	r3, r3, #1
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d007      	beq.n	80159da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80159ca:	4b1a      	ldr	r3, [pc, #104]	@ (8015a34 <sys_timeout_abs+0xd8>)
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80159d2:	4a18      	ldr	r2, [pc, #96]	@ (8015a34 <sys_timeout_abs+0xd8>)
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	6013      	str	r3, [r2, #0]
 80159d8:	e023      	b.n	8015a22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80159da:	4b16      	ldr	r3, [pc, #88]	@ (8015a34 <sys_timeout_abs+0xd8>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	617b      	str	r3, [r7, #20]
 80159e0:	e01a      	b.n	8015a18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00b      	beq.n	8015a02 <sys_timeout_abs+0xa6>
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	685a      	ldr	r2, [r3, #4]
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	1ad3      	subs	r3, r2, r3
 80159f6:	0fdb      	lsrs	r3, r3, #31
 80159f8:	f003 0301 	and.w	r3, r3, #1
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d007      	beq.n	8015a12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015a0a:	697b      	ldr	r3, [r7, #20]
 8015a0c:	693a      	ldr	r2, [r7, #16]
 8015a0e:	601a      	str	r2, [r3, #0]
        break;
 8015a10:	e007      	b.n	8015a22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	617b      	str	r3, [r7, #20]
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1e1      	bne.n	80159e2 <sys_timeout_abs+0x86>
 8015a1e:	e000      	b.n	8015a22 <sys_timeout_abs+0xc6>
    return;
 8015a20:	bf00      	nop
      }
    }
  }
}
 8015a22:	3718      	adds	r7, #24
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	0801c7ac 	.word	0x0801c7ac
 8015a2c:	0801c7e0 	.word	0x0801c7e0
 8015a30:	0801c820 	.word	0x0801c820
 8015a34:	2400c3ec 	.word	0x2400c3ec

08015a38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b086      	sub	sp, #24
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	4798      	blx	r3

  now = sys_now();
 8015a4a:	f7f3 fec3 	bl	80097d4 <sys_now>
 8015a4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	4b0f      	ldr	r3, [pc, #60]	@ (8015a94 <lwip_cyclic_timer+0x5c>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4413      	add	r3, r2
 8015a5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015a5c:	68fa      	ldr	r2, [r7, #12]
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	0fdb      	lsrs	r3, r3, #31
 8015a64:	f003 0301 	and.w	r3, r3, #1
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d009      	beq.n	8015a82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015a6e:	697b      	ldr	r3, [r7, #20]
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	4413      	add	r3, r2
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	4907      	ldr	r1, [pc, #28]	@ (8015a98 <lwip_cyclic_timer+0x60>)
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7ff ff6e 	bl	801595c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015a80:	e004      	b.n	8015a8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	4904      	ldr	r1, [pc, #16]	@ (8015a98 <lwip_cyclic_timer+0x60>)
 8015a86:	68f8      	ldr	r0, [r7, #12]
 8015a88:	f7ff ff68 	bl	801595c <sys_timeout_abs>
}
 8015a8c:	bf00      	nop
 8015a8e:	3718      	adds	r7, #24
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	2400c3f0 	.word	0x2400c3f0
 8015a98:	08015a39 	.word	0x08015a39

08015a9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	607b      	str	r3, [r7, #4]
 8015aa6:	e00e      	b.n	8015ac6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8015ad8 <sys_timeouts_init+0x3c>)
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	00db      	lsls	r3, r3, #3
 8015ab4:	4a08      	ldr	r2, [pc, #32]	@ (8015ad8 <sys_timeouts_init+0x3c>)
 8015ab6:	4413      	add	r3, r2
 8015ab8:	461a      	mov	r2, r3
 8015aba:	4908      	ldr	r1, [pc, #32]	@ (8015adc <sys_timeouts_init+0x40>)
 8015abc:	f000 f810 	bl	8015ae0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	607b      	str	r3, [r7, #4]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2b02      	cmp	r3, #2
 8015aca:	d9ed      	bls.n	8015aa8 <sys_timeouts_init+0xc>
  }
}
 8015acc:	bf00      	nop
 8015ace:	bf00      	nop
 8015ad0:	3708      	adds	r7, #8
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	0801e294 	.word	0x0801e294
 8015adc:	08015a39 	.word	0x08015a39

08015ae0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b086      	sub	sp, #24
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	60f8      	str	r0, [r7, #12]
 8015ae8:	60b9      	str	r1, [r7, #8]
 8015aea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015af2:	d306      	bcc.n	8015b02 <sys_timeout+0x22>
 8015af4:	4b0a      	ldr	r3, [pc, #40]	@ (8015b20 <sys_timeout+0x40>)
 8015af6:	f240 1229 	movw	r2, #297	@ 0x129
 8015afa:	490a      	ldr	r1, [pc, #40]	@ (8015b24 <sys_timeout+0x44>)
 8015afc:	480a      	ldr	r0, [pc, #40]	@ (8015b28 <sys_timeout+0x48>)
 8015afe:	f003 fb51 	bl	80191a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015b02:	f7f3 fe67 	bl	80097d4 <sys_now>
 8015b06:	4602      	mov	r2, r0
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	68b9      	ldr	r1, [r7, #8]
 8015b12:	6978      	ldr	r0, [r7, #20]
 8015b14:	f7ff ff22 	bl	801595c <sys_timeout_abs>
#endif
}
 8015b18:	bf00      	nop
 8015b1a:	3718      	adds	r7, #24
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	0801c7ac 	.word	0x0801c7ac
 8015b24:	0801c848 	.word	0x0801c848
 8015b28:	0801c820 	.word	0x0801c820

08015b2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015b32:	f7f3 fe4f 	bl	80097d4 <sys_now>
 8015b36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015b38:	4b17      	ldr	r3, [pc, #92]	@ (8015b98 <sys_check_timeouts+0x6c>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d022      	beq.n	8015b8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	1ad3      	subs	r3, r2, r3
 8015b4c:	0fdb      	lsrs	r3, r3, #31
 8015b4e:	f003 0301 	and.w	r3, r3, #1
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d11a      	bne.n	8015b8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8015b98 <sys_check_timeouts+0x6c>)
 8015b5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	4a0a      	ldr	r2, [pc, #40]	@ (8015b9c <sys_check_timeouts+0x70>)
 8015b72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015b74:	68b9      	ldr	r1, [r7, #8]
 8015b76:	200a      	movs	r0, #10
 8015b78:	f7f8 fca2 	bl	800e4c0 <memp_free>
    if (handler != NULL) {
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d0da      	beq.n	8015b38 <sys_check_timeouts+0xc>
      handler(arg);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6838      	ldr	r0, [r7, #0]
 8015b86:	4798      	blx	r3
  do {
 8015b88:	e7d6      	b.n	8015b38 <sys_check_timeouts+0xc>
      return;
 8015b8a:	bf00      	nop
 8015b8c:	e000      	b.n	8015b90 <sys_check_timeouts+0x64>
      return;
 8015b8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015b90:	3710      	adds	r7, #16
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	2400c3ec 	.word	0x2400c3ec
 8015b9c:	2400c3f0 	.word	0x2400c3f0

08015ba0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015ba6:	4b16      	ldr	r3, [pc, #88]	@ (8015c00 <sys_timeouts_sleeptime+0x60>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d102      	bne.n	8015bb4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bb2:	e020      	b.n	8015bf6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015bb4:	f7f3 fe0e 	bl	80097d4 <sys_now>
 8015bb8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015bba:	4b11      	ldr	r3, [pc, #68]	@ (8015c00 <sys_timeouts_sleeptime+0x60>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	685a      	ldr	r2, [r3, #4]
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	1ad3      	subs	r3, r2, r3
 8015bc4:	0fdb      	lsrs	r3, r3, #31
 8015bc6:	f003 0301 	and.w	r3, r3, #1
 8015bca:	b2db      	uxtb	r3, r3
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d001      	beq.n	8015bd4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	e010      	b.n	8015bf6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8015c00 <sys_timeouts_sleeptime+0x60>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	685a      	ldr	r2, [r3, #4]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	da06      	bge.n	8015bf4 <sys_timeouts_sleeptime+0x54>
 8015be6:	4b07      	ldr	r3, [pc, #28]	@ (8015c04 <sys_timeouts_sleeptime+0x64>)
 8015be8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015bec:	4906      	ldr	r1, [pc, #24]	@ (8015c08 <sys_timeouts_sleeptime+0x68>)
 8015bee:	4807      	ldr	r0, [pc, #28]	@ (8015c0c <sys_timeouts_sleeptime+0x6c>)
 8015bf0:	f003 fad8 	bl	80191a4 <iprintf>
    return ret;
 8015bf4:	683b      	ldr	r3, [r7, #0]
  }
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3708      	adds	r7, #8
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	bf00      	nop
 8015c00:	2400c3ec 	.word	0x2400c3ec
 8015c04:	0801c7ac 	.word	0x0801c7ac
 8015c08:	0801c880 	.word	0x0801c880
 8015c0c:	0801c820 	.word	0x0801c820

08015c10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015c14:	f003 f9c6 	bl	8018fa4 <rand>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015c26:	b29a      	uxth	r2, r3
 8015c28:	4b01      	ldr	r3, [pc, #4]	@ (8015c30 <udp_init+0x20>)
 8015c2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015c2c:	bf00      	nop
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	24000034 	.word	0x24000034

08015c34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015c3e:	4b17      	ldr	r3, [pc, #92]	@ (8015c9c <udp_new_port+0x68>)
 8015c40:	881b      	ldrh	r3, [r3, #0]
 8015c42:	1c5a      	adds	r2, r3, #1
 8015c44:	b291      	uxth	r1, r2
 8015c46:	4a15      	ldr	r2, [pc, #84]	@ (8015c9c <udp_new_port+0x68>)
 8015c48:	8011      	strh	r1, [r2, #0]
 8015c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d103      	bne.n	8015c5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015c52:	4b12      	ldr	r3, [pc, #72]	@ (8015c9c <udp_new_port+0x68>)
 8015c54:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015c58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c5a:	4b11      	ldr	r3, [pc, #68]	@ (8015ca0 <udp_new_port+0x6c>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	603b      	str	r3, [r7, #0]
 8015c60:	e011      	b.n	8015c86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	8a5a      	ldrh	r2, [r3, #18]
 8015c66:	4b0d      	ldr	r3, [pc, #52]	@ (8015c9c <udp_new_port+0x68>)
 8015c68:	881b      	ldrh	r3, [r3, #0]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d108      	bne.n	8015c80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015c6e:	88fb      	ldrh	r3, [r7, #6]
 8015c70:	3301      	adds	r3, #1
 8015c72:	80fb      	strh	r3, [r7, #6]
 8015c74:	88fb      	ldrh	r3, [r7, #6]
 8015c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015c7a:	d3e0      	bcc.n	8015c3e <udp_new_port+0xa>
        return 0;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	e007      	b.n	8015c90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	603b      	str	r3, [r7, #0]
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d1ea      	bne.n	8015c62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015c8c:	4b03      	ldr	r3, [pc, #12]	@ (8015c9c <udp_new_port+0x68>)
 8015c8e:	881b      	ldrh	r3, [r3, #0]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr
 8015c9c:	24000034 	.word	0x24000034
 8015ca0:	2400c3f8 	.word	0x2400c3f8

08015ca4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	4613      	mov	r3, r2
 8015cb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d105      	bne.n	8015cc4 <udp_input_local_match+0x20>
 8015cb8:	4b27      	ldr	r3, [pc, #156]	@ (8015d58 <udp_input_local_match+0xb4>)
 8015cba:	2287      	movs	r2, #135	@ 0x87
 8015cbc:	4927      	ldr	r1, [pc, #156]	@ (8015d5c <udp_input_local_match+0xb8>)
 8015cbe:	4828      	ldr	r0, [pc, #160]	@ (8015d60 <udp_input_local_match+0xbc>)
 8015cc0:	f003 fa70 	bl	80191a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d105      	bne.n	8015cd6 <udp_input_local_match+0x32>
 8015cca:	4b23      	ldr	r3, [pc, #140]	@ (8015d58 <udp_input_local_match+0xb4>)
 8015ccc:	2288      	movs	r2, #136	@ 0x88
 8015cce:	4925      	ldr	r1, [pc, #148]	@ (8015d64 <udp_input_local_match+0xc0>)
 8015cd0:	4823      	ldr	r0, [pc, #140]	@ (8015d60 <udp_input_local_match+0xbc>)
 8015cd2:	f003 fa67 	bl	80191a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	7a1b      	ldrb	r3, [r3, #8]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d00b      	beq.n	8015cf6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	7a1a      	ldrb	r2, [r3, #8]
 8015ce2:	4b21      	ldr	r3, [pc, #132]	@ (8015d68 <udp_input_local_match+0xc4>)
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015cea:	3301      	adds	r3, #1
 8015cec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d001      	beq.n	8015cf6 <udp_input_local_match+0x52>
    return 0;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	e02b      	b.n	8015d4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015cf6:	79fb      	ldrb	r3, [r7, #7]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d018      	beq.n	8015d2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d013      	beq.n	8015d2a <udp_input_local_match+0x86>
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00f      	beq.n	8015d2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d0a:	4b17      	ldr	r3, [pc, #92]	@ (8015d68 <udp_input_local_match+0xc4>)
 8015d0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015d12:	d00a      	beq.n	8015d2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	4b13      	ldr	r3, [pc, #76]	@ (8015d68 <udp_input_local_match+0xc4>)
 8015d1a:	695b      	ldr	r3, [r3, #20]
 8015d1c:	405a      	eors	r2, r3
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	3308      	adds	r3, #8
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d110      	bne.n	8015d4c <udp_input_local_match+0xa8>
          return 1;
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	e00f      	b.n	8015d4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d009      	beq.n	8015d48 <udp_input_local_match+0xa4>
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d005      	beq.n	8015d48 <udp_input_local_match+0xa4>
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	4b09      	ldr	r3, [pc, #36]	@ (8015d68 <udp_input_local_match+0xc4>)
 8015d42:	695b      	ldr	r3, [r3, #20]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d101      	bne.n	8015d4c <udp_input_local_match+0xa8>
        return 1;
 8015d48:	2301      	movs	r3, #1
 8015d4a:	e000      	b.n	8015d4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015d4c:	2300      	movs	r3, #0
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3710      	adds	r7, #16
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	0801c894 	.word	0x0801c894
 8015d5c:	0801c8c4 	.word	0x0801c8c4
 8015d60:	0801c8e8 	.word	0x0801c8e8
 8015d64:	0801c910 	.word	0x0801c910
 8015d68:	2400929c 	.word	0x2400929c

08015d6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015d6c:	b590      	push	{r4, r7, lr}
 8015d6e:	b08d      	sub	sp, #52	@ 0x34
 8015d70:	af02      	add	r7, sp, #8
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d105      	bne.n	8015d8c <udp_input+0x20>
 8015d80:	4b7c      	ldr	r3, [pc, #496]	@ (8015f74 <udp_input+0x208>)
 8015d82:	22cf      	movs	r2, #207	@ 0xcf
 8015d84:	497c      	ldr	r1, [pc, #496]	@ (8015f78 <udp_input+0x20c>)
 8015d86:	487d      	ldr	r0, [pc, #500]	@ (8015f7c <udp_input+0x210>)
 8015d88:	f003 fa0c 	bl	80191a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d105      	bne.n	8015d9e <udp_input+0x32>
 8015d92:	4b78      	ldr	r3, [pc, #480]	@ (8015f74 <udp_input+0x208>)
 8015d94:	22d0      	movs	r2, #208	@ 0xd0
 8015d96:	497a      	ldr	r1, [pc, #488]	@ (8015f80 <udp_input+0x214>)
 8015d98:	4878      	ldr	r0, [pc, #480]	@ (8015f7c <udp_input+0x210>)
 8015d9a:	f003 fa03 	bl	80191a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	895b      	ldrh	r3, [r3, #10]
 8015da2:	2b07      	cmp	r3, #7
 8015da4:	d803      	bhi.n	8015dae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f7f9 fa2e 	bl	800f208 <pbuf_free>
    goto end;
 8015dac:	e0de      	b.n	8015f6c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015db4:	4b73      	ldr	r3, [pc, #460]	@ (8015f84 <udp_input+0x218>)
 8015db6:	695b      	ldr	r3, [r3, #20]
 8015db8:	4a72      	ldr	r2, [pc, #456]	@ (8015f84 <udp_input+0x218>)
 8015dba:	6812      	ldr	r2, [r2, #0]
 8015dbc:	4611      	mov	r1, r2
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f001 fdde 	bl	8017980 <ip4_addr_isbroadcast_u32>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	881b      	ldrh	r3, [r3, #0]
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7f7 fc6e 	bl	800d6b0 <lwip_htons>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	885b      	ldrh	r3, [r3, #2]
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f7 fc66 	bl	800d6b0 <lwip_htons>
 8015de4:	4603      	mov	r3, r0
 8015de6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015de8:	2300      	movs	r3, #0
 8015dea:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8015dec:	2300      	movs	r3, #0
 8015dee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015df0:	2300      	movs	r3, #0
 8015df2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015df4:	4b64      	ldr	r3, [pc, #400]	@ (8015f88 <udp_input+0x21c>)
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8015dfa:	e054      	b.n	8015ea6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dfe:	8a5b      	ldrh	r3, [r3, #18]
 8015e00:	89fa      	ldrh	r2, [r7, #14]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d14a      	bne.n	8015e9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015e06:	7cfb      	ldrb	r3, [r7, #19]
 8015e08:	461a      	mov	r2, r3
 8015e0a:	6839      	ldr	r1, [r7, #0]
 8015e0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e0e:	f7ff ff49 	bl	8015ca4 <udp_input_local_match>
 8015e12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d041      	beq.n	8015e9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e1a:	7c1b      	ldrb	r3, [r3, #16]
 8015e1c:	f003 0304 	and.w	r3, r3, #4
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d11d      	bne.n	8015e60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d102      	bne.n	8015e30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e2c:	61fb      	str	r3, [r7, #28]
 8015e2e:	e017      	b.n	8015e60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015e30:	7cfb      	ldrb	r3, [r7, #19]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d014      	beq.n	8015e60 <udp_input+0xf4>
 8015e36:	4b53      	ldr	r3, [pc, #332]	@ (8015f84 <udp_input+0x218>)
 8015e38:	695b      	ldr	r3, [r3, #20]
 8015e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015e3e:	d10f      	bne.n	8015e60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015e40:	69fb      	ldr	r3, [r7, #28]
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	3304      	adds	r3, #4
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d008      	beq.n	8015e60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e50:	681a      	ldr	r2, [r3, #0]
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	3304      	adds	r3, #4
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d101      	bne.n	8015e60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e62:	8a9b      	ldrh	r3, [r3, #20]
 8015e64:	8a3a      	ldrh	r2, [r7, #16]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d118      	bne.n	8015e9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d005      	beq.n	8015e7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e74:	685a      	ldr	r2, [r3, #4]
 8015e76:	4b43      	ldr	r3, [pc, #268]	@ (8015f84 <udp_input+0x218>)
 8015e78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d10e      	bne.n	8015e9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015e7e:	6a3b      	ldr	r3, [r7, #32]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d014      	beq.n	8015eae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e86:	68da      	ldr	r2, [r3, #12]
 8015e88:	6a3b      	ldr	r3, [r7, #32]
 8015e8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8015f88 <udp_input+0x21c>)
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015e94:	4a3c      	ldr	r2, [pc, #240]	@ (8015f88 <udp_input+0x21c>)
 8015e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015e9a:	e008      	b.n	8015eae <udp_input+0x142>
      }
    }

    prev = pcb;
 8015e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea2:	68db      	ldr	r3, [r3, #12]
 8015ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d1a7      	bne.n	8015dfc <udp_input+0x90>
 8015eac:	e000      	b.n	8015eb0 <udp_input+0x144>
        break;
 8015eae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d101      	bne.n	8015eba <udp_input+0x14e>
    pcb = uncon_pcb;
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d002      	beq.n	8015ec6 <udp_input+0x15a>
    for_us = 1;
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	76fb      	strb	r3, [r7, #27]
 8015ec4:	e00a      	b.n	8015edc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	3304      	adds	r3, #4
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8015f84 <udp_input+0x218>)
 8015ece:	695b      	ldr	r3, [r3, #20]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	bf0c      	ite	eq
 8015ed4:	2301      	moveq	r3, #1
 8015ed6:	2300      	movne	r3, #0
 8015ed8:	b2db      	uxtb	r3, r3
 8015eda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015edc:	7efb      	ldrb	r3, [r7, #27]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d041      	beq.n	8015f66 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015ee2:	2108      	movs	r1, #8
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7f9 f909 	bl	800f0fc <pbuf_remove_header>
 8015eea:	4603      	mov	r3, r0
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d00a      	beq.n	8015f06 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015ef0:	4b20      	ldr	r3, [pc, #128]	@ (8015f74 <udp_input+0x208>)
 8015ef2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015ef6:	4925      	ldr	r1, [pc, #148]	@ (8015f8c <udp_input+0x220>)
 8015ef8:	4820      	ldr	r0, [pc, #128]	@ (8015f7c <udp_input+0x210>)
 8015efa:	f003 f953 	bl	80191a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f7f9 f982 	bl	800f208 <pbuf_free>
      goto end;
 8015f04:	e032      	b.n	8015f6c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d012      	beq.n	8015f32 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f0e:	699b      	ldr	r3, [r3, #24]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d00a      	beq.n	8015f2a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f16:	699c      	ldr	r4, [r3, #24]
 8015f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f1a:	69d8      	ldr	r0, [r3, #28]
 8015f1c:	8a3b      	ldrh	r3, [r7, #16]
 8015f1e:	9300      	str	r3, [sp, #0]
 8015f20:	4b1b      	ldr	r3, [pc, #108]	@ (8015f90 <udp_input+0x224>)
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015f28:	e021      	b.n	8015f6e <udp_input+0x202>
        pbuf_free(p);
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7f9 f96c 	bl	800f208 <pbuf_free>
        goto end;
 8015f30:	e01c      	b.n	8015f6c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015f32:	7cfb      	ldrb	r3, [r7, #19]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d112      	bne.n	8015f5e <udp_input+0x1f2>
 8015f38:	4b12      	ldr	r3, [pc, #72]	@ (8015f84 <udp_input+0x218>)
 8015f3a:	695b      	ldr	r3, [r3, #20]
 8015f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015f40:	2be0      	cmp	r3, #224	@ 0xe0
 8015f42:	d00c      	beq.n	8015f5e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015f44:	4b0f      	ldr	r3, [pc, #60]	@ (8015f84 <udp_input+0x218>)
 8015f46:	899b      	ldrh	r3, [r3, #12]
 8015f48:	3308      	adds	r3, #8
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	b21b      	sxth	r3, r3
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f7f9 f946 	bl	800f1e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015f56:	2103      	movs	r1, #3
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f001 f981 	bl	8017260 <icmp_dest_unreach>
      pbuf_free(p);
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f7f9 f952 	bl	800f208 <pbuf_free>
  return;
 8015f64:	e003      	b.n	8015f6e <udp_input+0x202>
    pbuf_free(p);
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f7f9 f94e 	bl	800f208 <pbuf_free>
  return;
 8015f6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015f6e:	372c      	adds	r7, #44	@ 0x2c
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd90      	pop	{r4, r7, pc}
 8015f74:	0801c894 	.word	0x0801c894
 8015f78:	0801c938 	.word	0x0801c938
 8015f7c:	0801c8e8 	.word	0x0801c8e8
 8015f80:	0801c950 	.word	0x0801c950
 8015f84:	2400929c 	.word	0x2400929c
 8015f88:	2400c3f8 	.word	0x2400c3f8
 8015f8c:	0801c96c 	.word	0x0801c96c
 8015f90:	240092ac 	.word	0x240092ac

08015f94 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
 8015f9c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d109      	bne.n	8015fb8 <udp_send+0x24>
 8015fa4:	4b11      	ldr	r3, [pc, #68]	@ (8015fec <udp_send+0x58>)
 8015fa6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8015faa:	4911      	ldr	r1, [pc, #68]	@ (8015ff0 <udp_send+0x5c>)
 8015fac:	4811      	ldr	r0, [pc, #68]	@ (8015ff4 <udp_send+0x60>)
 8015fae:	f003 f8f9 	bl	80191a4 <iprintf>
 8015fb2:	f06f 030f 	mvn.w	r3, #15
 8015fb6:	e015      	b.n	8015fe4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d109      	bne.n	8015fd2 <udp_send+0x3e>
 8015fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8015fec <udp_send+0x58>)
 8015fc0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8015fc4:	490c      	ldr	r1, [pc, #48]	@ (8015ff8 <udp_send+0x64>)
 8015fc6:	480b      	ldr	r0, [pc, #44]	@ (8015ff4 <udp_send+0x60>)
 8015fc8:	f003 f8ec 	bl	80191a4 <iprintf>
 8015fcc:	f06f 030f 	mvn.w	r3, #15
 8015fd0:	e008      	b.n	8015fe4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	1d1a      	adds	r2, r3, #4
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	8a9b      	ldrh	r3, [r3, #20]
 8015fda:	6839      	ldr	r1, [r7, #0]
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f000 f80d 	bl	8015ffc <udp_sendto>
 8015fe2:	4603      	mov	r3, r0
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3708      	adds	r7, #8
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	0801c894 	.word	0x0801c894
 8015ff0:	0801c988 	.word	0x0801c988
 8015ff4:	0801c8e8 	.word	0x0801c8e8
 8015ff8:	0801c9a0 	.word	0x0801c9a0

08015ffc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b088      	sub	sp, #32
 8016000:	af02      	add	r7, sp, #8
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
 8016008:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d109      	bne.n	8016024 <udp_sendto+0x28>
 8016010:	4b23      	ldr	r3, [pc, #140]	@ (80160a0 <udp_sendto+0xa4>)
 8016012:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016016:	4923      	ldr	r1, [pc, #140]	@ (80160a4 <udp_sendto+0xa8>)
 8016018:	4823      	ldr	r0, [pc, #140]	@ (80160a8 <udp_sendto+0xac>)
 801601a:	f003 f8c3 	bl	80191a4 <iprintf>
 801601e:	f06f 030f 	mvn.w	r3, #15
 8016022:	e038      	b.n	8016096 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d109      	bne.n	801603e <udp_sendto+0x42>
 801602a:	4b1d      	ldr	r3, [pc, #116]	@ (80160a0 <udp_sendto+0xa4>)
 801602c:	f240 2219 	movw	r2, #537	@ 0x219
 8016030:	491e      	ldr	r1, [pc, #120]	@ (80160ac <udp_sendto+0xb0>)
 8016032:	481d      	ldr	r0, [pc, #116]	@ (80160a8 <udp_sendto+0xac>)
 8016034:	f003 f8b6 	bl	80191a4 <iprintf>
 8016038:	f06f 030f 	mvn.w	r3, #15
 801603c:	e02b      	b.n	8016096 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d109      	bne.n	8016058 <udp_sendto+0x5c>
 8016044:	4b16      	ldr	r3, [pc, #88]	@ (80160a0 <udp_sendto+0xa4>)
 8016046:	f240 221a 	movw	r2, #538	@ 0x21a
 801604a:	4919      	ldr	r1, [pc, #100]	@ (80160b0 <udp_sendto+0xb4>)
 801604c:	4816      	ldr	r0, [pc, #88]	@ (80160a8 <udp_sendto+0xac>)
 801604e:	f003 f8a9 	bl	80191a4 <iprintf>
 8016052:	f06f 030f 	mvn.w	r3, #15
 8016056:	e01e      	b.n	8016096 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	7a1b      	ldrb	r3, [r3, #8]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d006      	beq.n	801606e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	7a1b      	ldrb	r3, [r3, #8]
 8016064:	4618      	mov	r0, r3
 8016066:	f7f8 fd41 	bl	800eaec <netif_get_by_index>
 801606a:	6178      	str	r0, [r7, #20]
 801606c:	e003      	b.n	8016076 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f001 f98a 	bl	8017388 <ip4_route>
 8016074:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d102      	bne.n	8016082 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801607c:	f06f 0303 	mvn.w	r3, #3
 8016080:	e009      	b.n	8016096 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8016082:	887a      	ldrh	r2, [r7, #2]
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	4613      	mov	r3, r2
 801608a:	687a      	ldr	r2, [r7, #4]
 801608c:	68b9      	ldr	r1, [r7, #8]
 801608e:	68f8      	ldr	r0, [r7, #12]
 8016090:	f000 f810 	bl	80160b4 <udp_sendto_if>
 8016094:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016096:	4618      	mov	r0, r3
 8016098:	3718      	adds	r7, #24
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	0801c894 	.word	0x0801c894
 80160a4:	0801c9b8 	.word	0x0801c9b8
 80160a8:	0801c8e8 	.word	0x0801c8e8
 80160ac:	0801c9d0 	.word	0x0801c9d0
 80160b0:	0801c9ec 	.word	0x0801c9ec

080160b4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b088      	sub	sp, #32
 80160b8:	af02      	add	r7, sp, #8
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d109      	bne.n	80160dc <udp_sendto_if+0x28>
 80160c8:	4b2e      	ldr	r3, [pc, #184]	@ (8016184 <udp_sendto_if+0xd0>)
 80160ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80160ce:	492e      	ldr	r1, [pc, #184]	@ (8016188 <udp_sendto_if+0xd4>)
 80160d0:	482e      	ldr	r0, [pc, #184]	@ (801618c <udp_sendto_if+0xd8>)
 80160d2:	f003 f867 	bl	80191a4 <iprintf>
 80160d6:	f06f 030f 	mvn.w	r3, #15
 80160da:	e04f      	b.n	801617c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d109      	bne.n	80160f6 <udp_sendto_if+0x42>
 80160e2:	4b28      	ldr	r3, [pc, #160]	@ (8016184 <udp_sendto_if+0xd0>)
 80160e4:	f240 2281 	movw	r2, #641	@ 0x281
 80160e8:	4929      	ldr	r1, [pc, #164]	@ (8016190 <udp_sendto_if+0xdc>)
 80160ea:	4828      	ldr	r0, [pc, #160]	@ (801618c <udp_sendto_if+0xd8>)
 80160ec:	f003 f85a 	bl	80191a4 <iprintf>
 80160f0:	f06f 030f 	mvn.w	r3, #15
 80160f4:	e042      	b.n	801617c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d109      	bne.n	8016110 <udp_sendto_if+0x5c>
 80160fc:	4b21      	ldr	r3, [pc, #132]	@ (8016184 <udp_sendto_if+0xd0>)
 80160fe:	f240 2282 	movw	r2, #642	@ 0x282
 8016102:	4924      	ldr	r1, [pc, #144]	@ (8016194 <udp_sendto_if+0xe0>)
 8016104:	4821      	ldr	r0, [pc, #132]	@ (801618c <udp_sendto_if+0xd8>)
 8016106:	f003 f84d 	bl	80191a4 <iprintf>
 801610a:	f06f 030f 	mvn.w	r3, #15
 801610e:	e035      	b.n	801617c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016110:	6a3b      	ldr	r3, [r7, #32]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d109      	bne.n	801612a <udp_sendto_if+0x76>
 8016116:	4b1b      	ldr	r3, [pc, #108]	@ (8016184 <udp_sendto_if+0xd0>)
 8016118:	f240 2283 	movw	r2, #643	@ 0x283
 801611c:	491e      	ldr	r1, [pc, #120]	@ (8016198 <udp_sendto_if+0xe4>)
 801611e:	481b      	ldr	r0, [pc, #108]	@ (801618c <udp_sendto_if+0xd8>)
 8016120:	f003 f840 	bl	80191a4 <iprintf>
 8016124:	f06f 030f 	mvn.w	r3, #15
 8016128:	e028      	b.n	801617c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d009      	beq.n	8016144 <udp_sendto_if+0x90>
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d005      	beq.n	8016144 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016140:	2be0      	cmp	r3, #224	@ 0xe0
 8016142:	d103      	bne.n	801614c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016144:	6a3b      	ldr	r3, [r7, #32]
 8016146:	3304      	adds	r3, #4
 8016148:	617b      	str	r3, [r7, #20]
 801614a:	e00b      	b.n	8016164 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	6a3b      	ldr	r3, [r7, #32]
 8016152:	3304      	adds	r3, #4
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	429a      	cmp	r2, r3
 8016158:	d002      	beq.n	8016160 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801615a:	f06f 0303 	mvn.w	r3, #3
 801615e:	e00d      	b.n	801617c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016164:	887a      	ldrh	r2, [r7, #2]
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	9301      	str	r3, [sp, #4]
 801616a:	6a3b      	ldr	r3, [r7, #32]
 801616c:	9300      	str	r3, [sp, #0]
 801616e:	4613      	mov	r3, r2
 8016170:	687a      	ldr	r2, [r7, #4]
 8016172:	68b9      	ldr	r1, [r7, #8]
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f000 f811 	bl	801619c <udp_sendto_if_src>
 801617a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801617c:	4618      	mov	r0, r3
 801617e:	3718      	adds	r7, #24
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	0801c894 	.word	0x0801c894
 8016188:	0801ca08 	.word	0x0801ca08
 801618c:	0801c8e8 	.word	0x0801c8e8
 8016190:	0801ca24 	.word	0x0801ca24
 8016194:	0801ca40 	.word	0x0801ca40
 8016198:	0801ca60 	.word	0x0801ca60

0801619c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b08c      	sub	sp, #48	@ 0x30
 80161a0:	af04      	add	r7, sp, #16
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
 80161a8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d109      	bne.n	80161c4 <udp_sendto_if_src+0x28>
 80161b0:	4b72      	ldr	r3, [pc, #456]	@ (801637c <udp_sendto_if_src+0x1e0>)
 80161b2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80161b6:	4972      	ldr	r1, [pc, #456]	@ (8016380 <udp_sendto_if_src+0x1e4>)
 80161b8:	4872      	ldr	r0, [pc, #456]	@ (8016384 <udp_sendto_if_src+0x1e8>)
 80161ba:	f002 fff3 	bl	80191a4 <iprintf>
 80161be:	f06f 030f 	mvn.w	r3, #15
 80161c2:	e0d6      	b.n	8016372 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d109      	bne.n	80161de <udp_sendto_if_src+0x42>
 80161ca:	4b6c      	ldr	r3, [pc, #432]	@ (801637c <udp_sendto_if_src+0x1e0>)
 80161cc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80161d0:	496d      	ldr	r1, [pc, #436]	@ (8016388 <udp_sendto_if_src+0x1ec>)
 80161d2:	486c      	ldr	r0, [pc, #432]	@ (8016384 <udp_sendto_if_src+0x1e8>)
 80161d4:	f002 ffe6 	bl	80191a4 <iprintf>
 80161d8:	f06f 030f 	mvn.w	r3, #15
 80161dc:	e0c9      	b.n	8016372 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d109      	bne.n	80161f8 <udp_sendto_if_src+0x5c>
 80161e4:	4b65      	ldr	r3, [pc, #404]	@ (801637c <udp_sendto_if_src+0x1e0>)
 80161e6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80161ea:	4968      	ldr	r1, [pc, #416]	@ (801638c <udp_sendto_if_src+0x1f0>)
 80161ec:	4865      	ldr	r0, [pc, #404]	@ (8016384 <udp_sendto_if_src+0x1e8>)
 80161ee:	f002 ffd9 	bl	80191a4 <iprintf>
 80161f2:	f06f 030f 	mvn.w	r3, #15
 80161f6:	e0bc      	b.n	8016372 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80161f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d109      	bne.n	8016212 <udp_sendto_if_src+0x76>
 80161fe:	4b5f      	ldr	r3, [pc, #380]	@ (801637c <udp_sendto_if_src+0x1e0>)
 8016200:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8016204:	4962      	ldr	r1, [pc, #392]	@ (8016390 <udp_sendto_if_src+0x1f4>)
 8016206:	485f      	ldr	r0, [pc, #380]	@ (8016384 <udp_sendto_if_src+0x1e8>)
 8016208:	f002 ffcc 	bl	80191a4 <iprintf>
 801620c:	f06f 030f 	mvn.w	r3, #15
 8016210:	e0af      	b.n	8016372 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016214:	2b00      	cmp	r3, #0
 8016216:	d109      	bne.n	801622c <udp_sendto_if_src+0x90>
 8016218:	4b58      	ldr	r3, [pc, #352]	@ (801637c <udp_sendto_if_src+0x1e0>)
 801621a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801621e:	495d      	ldr	r1, [pc, #372]	@ (8016394 <udp_sendto_if_src+0x1f8>)
 8016220:	4858      	ldr	r0, [pc, #352]	@ (8016384 <udp_sendto_if_src+0x1e8>)
 8016222:	f002 ffbf 	bl	80191a4 <iprintf>
 8016226:	f06f 030f 	mvn.w	r3, #15
 801622a:	e0a2      	b.n	8016372 <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	8a5b      	ldrh	r3, [r3, #18]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d10f      	bne.n	8016254 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016234:	68f9      	ldr	r1, [r7, #12]
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	8a5b      	ldrh	r3, [r3, #18]
 801623a:	461a      	mov	r2, r3
 801623c:	68f8      	ldr	r0, [r7, #12]
 801623e:	f000 f8ad 	bl	801639c <udp_bind>
 8016242:	4603      	mov	r3, r0
 8016244:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 8016246:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d002      	beq.n	8016254 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801624e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8016252:	e08e      	b.n	8016372 <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	891b      	ldrh	r3, [r3, #8]
 8016258:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801625c:	4293      	cmp	r3, r2
 801625e:	d902      	bls.n	8016266 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016264:	e085      	b.n	8016372 <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016266:	2108      	movs	r1, #8
 8016268:	68b8      	ldr	r0, [r7, #8]
 801626a:	f7f8 ff37 	bl	800f0dc <pbuf_add_header>
 801626e:	4603      	mov	r3, r0
 8016270:	2b00      	cmp	r3, #0
 8016272:	d015      	beq.n	80162a0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016274:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016278:	2108      	movs	r1, #8
 801627a:	2022      	movs	r0, #34	@ 0x22
 801627c:	f7f8 fce0 	bl	800ec40 <pbuf_alloc>
 8016280:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d102      	bne.n	801628e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801628c:	e071      	b.n	8016372 <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	891b      	ldrh	r3, [r3, #8]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d006      	beq.n	80162a4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016296:	68b9      	ldr	r1, [r7, #8]
 8016298:	69f8      	ldr	r0, [r7, #28]
 801629a:	f7f9 f8d9 	bl	800f450 <pbuf_chain>
 801629e:	e001      	b.n	80162a4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	895b      	ldrh	r3, [r3, #10]
 80162a8:	2b07      	cmp	r3, #7
 80162aa:	d806      	bhi.n	80162ba <udp_sendto_if_src+0x11e>
 80162ac:	4b33      	ldr	r3, [pc, #204]	@ (801637c <udp_sendto_if_src+0x1e0>)
 80162ae:	f240 320d 	movw	r2, #781	@ 0x30d
 80162b2:	4939      	ldr	r1, [pc, #228]	@ (8016398 <udp_sendto_if_src+0x1fc>)
 80162b4:	4833      	ldr	r0, [pc, #204]	@ (8016384 <udp_sendto_if_src+0x1e8>)
 80162b6:	f002 ff75 	bl	80191a4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	8a5b      	ldrh	r3, [r3, #18]
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f7 f9f3 	bl	800d6b0 <lwip_htons>
 80162ca:	4603      	mov	r3, r0
 80162cc:	461a      	mov	r2, r3
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80162d2:	887b      	ldrh	r3, [r7, #2]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f7 f9eb 	bl	800d6b0 <lwip_htons>
 80162da:	4603      	mov	r3, r0
 80162dc:	461a      	mov	r2, r3
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	2200      	movs	r2, #0
 80162e6:	719a      	strb	r2, [r3, #6]
 80162e8:	2200      	movs	r2, #0
 80162ea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80162ec:	69fb      	ldr	r3, [r7, #28]
 80162ee:	891b      	ldrh	r3, [r3, #8]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7f7 f9dd 	bl	800d6b0 <lwip_htons>
 80162f6:	4603      	mov	r3, r0
 80162f8:	461a      	mov	r2, r3
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	7c1b      	ldrb	r3, [r3, #16]
 8016302:	f003 0301 	and.w	r3, r3, #1
 8016306:	2b00      	cmp	r3, #0
 8016308:	d113      	bne.n	8016332 <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	891a      	ldrh	r2, [r3, #8]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016314:	2111      	movs	r1, #17
 8016316:	69f8      	ldr	r0, [r7, #28]
 8016318:	f7f7 fb32 	bl	800d980 <ip_chksum_pseudo>
 801631c:	4603      	mov	r3, r0
 801631e:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 8016320:	8b7b      	ldrh	r3, [r7, #26]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d102      	bne.n	801632c <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 8016326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801632a:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	8b7a      	ldrh	r2, [r7, #26]
 8016330:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016332:	2311      	movs	r3, #17
 8016334:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	7adb      	ldrb	r3, [r3, #11]
 801633a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	7a9b      	ldrb	r3, [r3, #10]
 8016340:	7cb9      	ldrb	r1, [r7, #18]
 8016342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016344:	9202      	str	r2, [sp, #8]
 8016346:	7cfa      	ldrb	r2, [r7, #19]
 8016348:	9201      	str	r2, [sp, #4]
 801634a:	9300      	str	r3, [sp, #0]
 801634c:	460b      	mov	r3, r1
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016352:	69f8      	ldr	r0, [r7, #28]
 8016354:	f001 fa00 	bl	8017758 <ip4_output_if_src>
 8016358:	4603      	mov	r3, r0
 801635a:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801635c:	69fa      	ldr	r2, [r7, #28]
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	429a      	cmp	r2, r3
 8016362:	d004      	beq.n	801636e <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 8016364:	69f8      	ldr	r0, [r7, #28]
 8016366:	f7f8 ff4f 	bl	800f208 <pbuf_free>
    q = NULL;
 801636a:	2300      	movs	r3, #0
 801636c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801636e:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8016372:	4618      	mov	r0, r3
 8016374:	3720      	adds	r7, #32
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}
 801637a:	bf00      	nop
 801637c:	0801c894 	.word	0x0801c894
 8016380:	0801ca80 	.word	0x0801ca80
 8016384:	0801c8e8 	.word	0x0801c8e8
 8016388:	0801caa0 	.word	0x0801caa0
 801638c:	0801cac0 	.word	0x0801cac0
 8016390:	0801cae4 	.word	0x0801cae4
 8016394:	0801cb08 	.word	0x0801cb08
 8016398:	0801cb2c 	.word	0x0801cb2c

0801639c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b086      	sub	sp, #24
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	60f8      	str	r0, [r7, #12]
 80163a4:	60b9      	str	r1, [r7, #8]
 80163a6:	4613      	mov	r3, r2
 80163a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d101      	bne.n	80163b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80163b0:	4b39      	ldr	r3, [pc, #228]	@ (8016498 <udp_bind+0xfc>)
 80163b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d109      	bne.n	80163ce <udp_bind+0x32>
 80163ba:	4b38      	ldr	r3, [pc, #224]	@ (801649c <udp_bind+0x100>)
 80163bc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80163c0:	4937      	ldr	r1, [pc, #220]	@ (80164a0 <udp_bind+0x104>)
 80163c2:	4838      	ldr	r0, [pc, #224]	@ (80164a4 <udp_bind+0x108>)
 80163c4:	f002 feee 	bl	80191a4 <iprintf>
 80163c8:	f06f 030f 	mvn.w	r3, #15
 80163cc:	e060      	b.n	8016490 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163d2:	4b35      	ldr	r3, [pc, #212]	@ (80164a8 <udp_bind+0x10c>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	617b      	str	r3, [r7, #20]
 80163d8:	e009      	b.n	80163ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80163da:	68fa      	ldr	r2, [r7, #12]
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	429a      	cmp	r2, r3
 80163e0:	d102      	bne.n	80163e8 <udp_bind+0x4c>
      rebind = 1;
 80163e2:	2301      	movs	r3, #1
 80163e4:	74fb      	strb	r3, [r7, #19]
      break;
 80163e6:	e005      	b.n	80163f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	68db      	ldr	r3, [r3, #12]
 80163ec:	617b      	str	r3, [r7, #20]
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d1f2      	bne.n	80163da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80163f4:	88fb      	ldrh	r3, [r7, #6]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d109      	bne.n	801640e <udp_bind+0x72>
    port = udp_new_port();
 80163fa:	f7ff fc1b 	bl	8015c34 <udp_new_port>
 80163fe:	4603      	mov	r3, r0
 8016400:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016402:	88fb      	ldrh	r3, [r7, #6]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d12c      	bne.n	8016462 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016408:	f06f 0307 	mvn.w	r3, #7
 801640c:	e040      	b.n	8016490 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801640e:	4b26      	ldr	r3, [pc, #152]	@ (80164a8 <udp_bind+0x10c>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	617b      	str	r3, [r7, #20]
 8016414:	e022      	b.n	801645c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016416:	68fa      	ldr	r2, [r7, #12]
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	429a      	cmp	r2, r3
 801641c:	d01b      	beq.n	8016456 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	8a5b      	ldrh	r3, [r3, #18]
 8016422:	88fa      	ldrh	r2, [r7, #6]
 8016424:	429a      	cmp	r2, r3
 8016426:	d116      	bne.n	8016456 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016430:	429a      	cmp	r2, r3
 8016432:	d00d      	beq.n	8016450 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d00a      	beq.n	8016450 <udp_bind+0xb4>
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d006      	beq.n	8016450 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016442:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016444:	2b00      	cmp	r3, #0
 8016446:	d003      	beq.n	8016450 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016448:	697b      	ldr	r3, [r7, #20]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d102      	bne.n	8016456 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016450:	f06f 0307 	mvn.w	r3, #7
 8016454:	e01c      	b.n	8016490 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016456:	697b      	ldr	r3, [r7, #20]
 8016458:	68db      	ldr	r3, [r3, #12]
 801645a:	617b      	str	r3, [r7, #20]
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1d9      	bne.n	8016416 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d002      	beq.n	801646e <udp_bind+0xd2>
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	e000      	b.n	8016470 <udp_bind+0xd4>
 801646e:	2300      	movs	r3, #0
 8016470:	68fa      	ldr	r2, [r7, #12]
 8016472:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	88fa      	ldrh	r2, [r7, #6]
 8016478:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801647a:	7cfb      	ldrb	r3, [r7, #19]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d106      	bne.n	801648e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016480:	4b09      	ldr	r3, [pc, #36]	@ (80164a8 <udp_bind+0x10c>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016488:	4a07      	ldr	r2, [pc, #28]	@ (80164a8 <udp_bind+0x10c>)
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801648e:	2300      	movs	r3, #0
}
 8016490:	4618      	mov	r0, r3
 8016492:	3718      	adds	r7, #24
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}
 8016498:	0801e2ac 	.word	0x0801e2ac
 801649c:	0801c894 	.word	0x0801c894
 80164a0:	0801cb5c 	.word	0x0801cb5c
 80164a4:	0801c8e8 	.word	0x0801c8e8
 80164a8:	2400c3f8 	.word	0x2400c3f8

080164ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b086      	sub	sp, #24
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	4613      	mov	r3, r2
 80164b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d109      	bne.n	80164d4 <udp_connect+0x28>
 80164c0:	4b2c      	ldr	r3, [pc, #176]	@ (8016574 <udp_connect+0xc8>)
 80164c2:	f240 4235 	movw	r2, #1077	@ 0x435
 80164c6:	492c      	ldr	r1, [pc, #176]	@ (8016578 <udp_connect+0xcc>)
 80164c8:	482c      	ldr	r0, [pc, #176]	@ (801657c <udp_connect+0xd0>)
 80164ca:	f002 fe6b 	bl	80191a4 <iprintf>
 80164ce:	f06f 030f 	mvn.w	r3, #15
 80164d2:	e04b      	b.n	801656c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d109      	bne.n	80164ee <udp_connect+0x42>
 80164da:	4b26      	ldr	r3, [pc, #152]	@ (8016574 <udp_connect+0xc8>)
 80164dc:	f240 4236 	movw	r2, #1078	@ 0x436
 80164e0:	4927      	ldr	r1, [pc, #156]	@ (8016580 <udp_connect+0xd4>)
 80164e2:	4826      	ldr	r0, [pc, #152]	@ (801657c <udp_connect+0xd0>)
 80164e4:	f002 fe5e 	bl	80191a4 <iprintf>
 80164e8:	f06f 030f 	mvn.w	r3, #15
 80164ec:	e03e      	b.n	801656c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	8a5b      	ldrh	r3, [r3, #18]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d10f      	bne.n	8016516 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80164f6:	68f9      	ldr	r1, [r7, #12]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	8a5b      	ldrh	r3, [r3, #18]
 80164fc:	461a      	mov	r2, r3
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f7ff ff4c 	bl	801639c <udp_bind>
 8016504:	4603      	mov	r3, r0
 8016506:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016508:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d002      	beq.n	8016516 <udp_connect+0x6a>
      return err;
 8016510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016514:	e02a      	b.n	801656c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d002      	beq.n	8016522 <udp_connect+0x76>
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	e000      	b.n	8016524 <udp_connect+0x78>
 8016522:	2300      	movs	r3, #0
 8016524:	68fa      	ldr	r2, [r7, #12]
 8016526:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	88fa      	ldrh	r2, [r7, #6]
 801652c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	7c1b      	ldrb	r3, [r3, #16]
 8016532:	f043 0304 	orr.w	r3, r3, #4
 8016536:	b2da      	uxtb	r2, r3
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801653c:	4b11      	ldr	r3, [pc, #68]	@ (8016584 <udp_connect+0xd8>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	617b      	str	r3, [r7, #20]
 8016542:	e008      	b.n	8016556 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016544:	68fa      	ldr	r2, [r7, #12]
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	429a      	cmp	r2, r3
 801654a:	d101      	bne.n	8016550 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801654c:	2300      	movs	r3, #0
 801654e:	e00d      	b.n	801656c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016550:	697b      	ldr	r3, [r7, #20]
 8016552:	68db      	ldr	r3, [r3, #12]
 8016554:	617b      	str	r3, [r7, #20]
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d1f3      	bne.n	8016544 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801655c:	4b09      	ldr	r3, [pc, #36]	@ (8016584 <udp_connect+0xd8>)
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016564:	4a07      	ldr	r2, [pc, #28]	@ (8016584 <udp_connect+0xd8>)
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801656a:	2300      	movs	r3, #0
}
 801656c:	4618      	mov	r0, r3
 801656e:	3718      	adds	r7, #24
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	0801c894 	.word	0x0801c894
 8016578:	0801cb74 	.word	0x0801cb74
 801657c:	0801c8e8 	.word	0x0801c8e8
 8016580:	0801cb90 	.word	0x0801cb90
 8016584:	2400c3f8 	.word	0x2400c3f8

08016588 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b082      	sub	sp, #8
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d107      	bne.n	80165a6 <udp_disconnect+0x1e>
 8016596:	4b0d      	ldr	r3, [pc, #52]	@ (80165cc <udp_disconnect+0x44>)
 8016598:	f240 426a 	movw	r2, #1130	@ 0x46a
 801659c:	490c      	ldr	r1, [pc, #48]	@ (80165d0 <udp_disconnect+0x48>)
 801659e:	480d      	ldr	r0, [pc, #52]	@ (80165d4 <udp_disconnect+0x4c>)
 80165a0:	f002 fe00 	bl	80191a4 <iprintf>
 80165a4:	e00f      	b.n	80165c6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2200      	movs	r2, #0
 80165aa:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2200      	movs	r2, #0
 80165b0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	7c1b      	ldrb	r3, [r3, #16]
 80165bc:	f023 0304 	bic.w	r3, r3, #4
 80165c0:	b2da      	uxtb	r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	741a      	strb	r2, [r3, #16]
}
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	0801c894 	.word	0x0801c894
 80165d0:	0801cbac 	.word	0x0801cbac
 80165d4:	0801c8e8 	.word	0x0801c8e8

080165d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	60f8      	str	r0, [r7, #12]
 80165e0:	60b9      	str	r1, [r7, #8]
 80165e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d107      	bne.n	80165fa <udp_recv+0x22>
 80165ea:	4b08      	ldr	r3, [pc, #32]	@ (801660c <udp_recv+0x34>)
 80165ec:	f240 428a 	movw	r2, #1162	@ 0x48a
 80165f0:	4907      	ldr	r1, [pc, #28]	@ (8016610 <udp_recv+0x38>)
 80165f2:	4808      	ldr	r0, [pc, #32]	@ (8016614 <udp_recv+0x3c>)
 80165f4:	f002 fdd6 	bl	80191a4 <iprintf>
 80165f8:	e005      	b.n	8016606 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	68ba      	ldr	r2, [r7, #8]
 80165fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	687a      	ldr	r2, [r7, #4]
 8016604:	61da      	str	r2, [r3, #28]
}
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}
 801660c:	0801c894 	.word	0x0801c894
 8016610:	0801cbc8 	.word	0x0801cbc8
 8016614:	0801c8e8 	.word	0x0801c8e8

08016618 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d107      	bne.n	8016636 <udp_remove+0x1e>
 8016626:	4b19      	ldr	r3, [pc, #100]	@ (801668c <udp_remove+0x74>)
 8016628:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801662c:	4918      	ldr	r1, [pc, #96]	@ (8016690 <udp_remove+0x78>)
 801662e:	4819      	ldr	r0, [pc, #100]	@ (8016694 <udp_remove+0x7c>)
 8016630:	f002 fdb8 	bl	80191a4 <iprintf>
 8016634:	e026      	b.n	8016684 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016636:	4b18      	ldr	r3, [pc, #96]	@ (8016698 <udp_remove+0x80>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	429a      	cmp	r2, r3
 801663e:	d105      	bne.n	801664c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016640:	4b15      	ldr	r3, [pc, #84]	@ (8016698 <udp_remove+0x80>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	4a14      	ldr	r2, [pc, #80]	@ (8016698 <udp_remove+0x80>)
 8016648:	6013      	str	r3, [r2, #0]
 801664a:	e017      	b.n	801667c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801664c:	4b12      	ldr	r3, [pc, #72]	@ (8016698 <udp_remove+0x80>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	60fb      	str	r3, [r7, #12]
 8016652:	e010      	b.n	8016676 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	68db      	ldr	r3, [r3, #12]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d009      	beq.n	8016670 <udp_remove+0x58>
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	687a      	ldr	r2, [r7, #4]
 8016662:	429a      	cmp	r2, r3
 8016664:	d104      	bne.n	8016670 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	68da      	ldr	r2, [r3, #12]
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	60da      	str	r2, [r3, #12]
        break;
 801666e:	e005      	b.n	801667c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	60fb      	str	r3, [r7, #12]
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d1eb      	bne.n	8016654 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801667c:	6879      	ldr	r1, [r7, #4]
 801667e:	2000      	movs	r0, #0
 8016680:	f7f7 ff1e 	bl	800e4c0 <memp_free>
}
 8016684:	3710      	adds	r7, #16
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
 801668a:	bf00      	nop
 801668c:	0801c894 	.word	0x0801c894
 8016690:	0801cbe0 	.word	0x0801cbe0
 8016694:	0801c8e8 	.word	0x0801c8e8
 8016698:	2400c3f8 	.word	0x2400c3f8

0801669c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80166a2:	2000      	movs	r0, #0
 80166a4:	f7f7 fe96 	bl	800e3d4 <memp_malloc>
 80166a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d007      	beq.n	80166c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80166b0:	2220      	movs	r2, #32
 80166b2:	2100      	movs	r1, #0
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f002 ff07 	bl	80194c8 <memset>
    pcb->ttl = UDP_TTL;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	22ff      	movs	r2, #255	@ 0xff
 80166be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80166c0:	687b      	ldr	r3, [r7, #4]
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3708      	adds	r7, #8
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
	...

080166cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80166cc:	b480      	push	{r7}
 80166ce:	b085      	sub	sp, #20
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d01e      	beq.n	801671a <udp_netif_ip_addr_changed+0x4e>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d01a      	beq.n	801671a <udp_netif_ip_addr_changed+0x4e>
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d017      	beq.n	801671a <udp_netif_ip_addr_changed+0x4e>
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d013      	beq.n	801671a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80166f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016728 <udp_netif_ip_addr_changed+0x5c>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	60fb      	str	r3, [r7, #12]
 80166f8:	e00c      	b.n	8016714 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681a      	ldr	r2, [r3, #0]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	429a      	cmp	r2, r3
 8016704:	d103      	bne.n	801670e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	681a      	ldr	r2, [r3, #0]
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	68db      	ldr	r3, [r3, #12]
 8016712:	60fb      	str	r3, [r7, #12]
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d1ef      	bne.n	80166fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801671a:	bf00      	nop
 801671c:	3714      	adds	r7, #20
 801671e:	46bd      	mov	sp, r7
 8016720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016724:	4770      	bx	lr
 8016726:	bf00      	nop
 8016728:	2400c3f8 	.word	0x2400c3f8

0801672c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016734:	4915      	ldr	r1, [pc, #84]	@ (801678c <etharp_free_entry+0x60>)
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	4613      	mov	r3, r2
 801673a:	005b      	lsls	r3, r3, #1
 801673c:	4413      	add	r3, r2
 801673e:	00db      	lsls	r3, r3, #3
 8016740:	440b      	add	r3, r1
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d013      	beq.n	8016770 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016748:	4910      	ldr	r1, [pc, #64]	@ (801678c <etharp_free_entry+0x60>)
 801674a:	687a      	ldr	r2, [r7, #4]
 801674c:	4613      	mov	r3, r2
 801674e:	005b      	lsls	r3, r3, #1
 8016750:	4413      	add	r3, r2
 8016752:	00db      	lsls	r3, r3, #3
 8016754:	440b      	add	r3, r1
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4618      	mov	r0, r3
 801675a:	f7f8 fd55 	bl	800f208 <pbuf_free>
    arp_table[i].q = NULL;
 801675e:	490b      	ldr	r1, [pc, #44]	@ (801678c <etharp_free_entry+0x60>)
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	4613      	mov	r3, r2
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	4413      	add	r3, r2
 8016768:	00db      	lsls	r3, r3, #3
 801676a:	440b      	add	r3, r1
 801676c:	2200      	movs	r2, #0
 801676e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016770:	4906      	ldr	r1, [pc, #24]	@ (801678c <etharp_free_entry+0x60>)
 8016772:	687a      	ldr	r2, [r7, #4]
 8016774:	4613      	mov	r3, r2
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	4413      	add	r3, r2
 801677a:	00db      	lsls	r3, r3, #3
 801677c:	440b      	add	r3, r1
 801677e:	3314      	adds	r3, #20
 8016780:	2200      	movs	r2, #0
 8016782:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016784:	bf00      	nop
 8016786:	3708      	adds	r7, #8
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	2400c3fc 	.word	0x2400c3fc

08016790 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016796:	2300      	movs	r3, #0
 8016798:	607b      	str	r3, [r7, #4]
 801679a:	e096      	b.n	80168ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801679c:	494f      	ldr	r1, [pc, #316]	@ (80168dc <etharp_tmr+0x14c>)
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	4613      	mov	r3, r2
 80167a2:	005b      	lsls	r3, r3, #1
 80167a4:	4413      	add	r3, r2
 80167a6:	00db      	lsls	r3, r3, #3
 80167a8:	440b      	add	r3, r1
 80167aa:	3314      	adds	r3, #20
 80167ac:	781b      	ldrb	r3, [r3, #0]
 80167ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80167b0:	78fb      	ldrb	r3, [r7, #3]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	f000 8086 	beq.w	80168c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80167b8:	4948      	ldr	r1, [pc, #288]	@ (80168dc <etharp_tmr+0x14c>)
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	4613      	mov	r3, r2
 80167be:	005b      	lsls	r3, r3, #1
 80167c0:	4413      	add	r3, r2
 80167c2:	00db      	lsls	r3, r3, #3
 80167c4:	440b      	add	r3, r1
 80167c6:	3312      	adds	r3, #18
 80167c8:	881b      	ldrh	r3, [r3, #0]
 80167ca:	3301      	adds	r3, #1
 80167cc:	b298      	uxth	r0, r3
 80167ce:	4943      	ldr	r1, [pc, #268]	@ (80168dc <etharp_tmr+0x14c>)
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	4613      	mov	r3, r2
 80167d4:	005b      	lsls	r3, r3, #1
 80167d6:	4413      	add	r3, r2
 80167d8:	00db      	lsls	r3, r3, #3
 80167da:	440b      	add	r3, r1
 80167dc:	3312      	adds	r3, #18
 80167de:	4602      	mov	r2, r0
 80167e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167e2:	493e      	ldr	r1, [pc, #248]	@ (80168dc <etharp_tmr+0x14c>)
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	4613      	mov	r3, r2
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	4413      	add	r3, r2
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	440b      	add	r3, r1
 80167f0:	3312      	adds	r3, #18
 80167f2:	881b      	ldrh	r3, [r3, #0]
 80167f4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80167f8:	d215      	bcs.n	8016826 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80167fa:	4938      	ldr	r1, [pc, #224]	@ (80168dc <etharp_tmr+0x14c>)
 80167fc:	687a      	ldr	r2, [r7, #4]
 80167fe:	4613      	mov	r3, r2
 8016800:	005b      	lsls	r3, r3, #1
 8016802:	4413      	add	r3, r2
 8016804:	00db      	lsls	r3, r3, #3
 8016806:	440b      	add	r3, r1
 8016808:	3314      	adds	r3, #20
 801680a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801680c:	2b01      	cmp	r3, #1
 801680e:	d10e      	bne.n	801682e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016810:	4932      	ldr	r1, [pc, #200]	@ (80168dc <etharp_tmr+0x14c>)
 8016812:	687a      	ldr	r2, [r7, #4]
 8016814:	4613      	mov	r3, r2
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	4413      	add	r3, r2
 801681a:	00db      	lsls	r3, r3, #3
 801681c:	440b      	add	r3, r1
 801681e:	3312      	adds	r3, #18
 8016820:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016822:	2b04      	cmp	r3, #4
 8016824:	d903      	bls.n	801682e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f7ff ff80 	bl	801672c <etharp_free_entry>
 801682c:	e04a      	b.n	80168c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801682e:	492b      	ldr	r1, [pc, #172]	@ (80168dc <etharp_tmr+0x14c>)
 8016830:	687a      	ldr	r2, [r7, #4]
 8016832:	4613      	mov	r3, r2
 8016834:	005b      	lsls	r3, r3, #1
 8016836:	4413      	add	r3, r2
 8016838:	00db      	lsls	r3, r3, #3
 801683a:	440b      	add	r3, r1
 801683c:	3314      	adds	r3, #20
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	2b03      	cmp	r3, #3
 8016842:	d10a      	bne.n	801685a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016844:	4925      	ldr	r1, [pc, #148]	@ (80168dc <etharp_tmr+0x14c>)
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	4613      	mov	r3, r2
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	4413      	add	r3, r2
 801684e:	00db      	lsls	r3, r3, #3
 8016850:	440b      	add	r3, r1
 8016852:	3314      	adds	r3, #20
 8016854:	2204      	movs	r2, #4
 8016856:	701a      	strb	r2, [r3, #0]
 8016858:	e034      	b.n	80168c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801685a:	4920      	ldr	r1, [pc, #128]	@ (80168dc <etharp_tmr+0x14c>)
 801685c:	687a      	ldr	r2, [r7, #4]
 801685e:	4613      	mov	r3, r2
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	4413      	add	r3, r2
 8016864:	00db      	lsls	r3, r3, #3
 8016866:	440b      	add	r3, r1
 8016868:	3314      	adds	r3, #20
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	2b04      	cmp	r3, #4
 801686e:	d10a      	bne.n	8016886 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016870:	491a      	ldr	r1, [pc, #104]	@ (80168dc <etharp_tmr+0x14c>)
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	4613      	mov	r3, r2
 8016876:	005b      	lsls	r3, r3, #1
 8016878:	4413      	add	r3, r2
 801687a:	00db      	lsls	r3, r3, #3
 801687c:	440b      	add	r3, r1
 801687e:	3314      	adds	r3, #20
 8016880:	2202      	movs	r2, #2
 8016882:	701a      	strb	r2, [r3, #0]
 8016884:	e01e      	b.n	80168c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016886:	4915      	ldr	r1, [pc, #84]	@ (80168dc <etharp_tmr+0x14c>)
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	4613      	mov	r3, r2
 801688c:	005b      	lsls	r3, r3, #1
 801688e:	4413      	add	r3, r2
 8016890:	00db      	lsls	r3, r3, #3
 8016892:	440b      	add	r3, r1
 8016894:	3314      	adds	r3, #20
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	2b01      	cmp	r3, #1
 801689a:	d113      	bne.n	80168c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801689c:	490f      	ldr	r1, [pc, #60]	@ (80168dc <etharp_tmr+0x14c>)
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	4613      	mov	r3, r2
 80168a2:	005b      	lsls	r3, r3, #1
 80168a4:	4413      	add	r3, r2
 80168a6:	00db      	lsls	r3, r3, #3
 80168a8:	440b      	add	r3, r1
 80168aa:	3308      	adds	r3, #8
 80168ac:	6818      	ldr	r0, [r3, #0]
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	4613      	mov	r3, r2
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	4413      	add	r3, r2
 80168b6:	00db      	lsls	r3, r3, #3
 80168b8:	4a08      	ldr	r2, [pc, #32]	@ (80168dc <etharp_tmr+0x14c>)
 80168ba:	4413      	add	r3, r2
 80168bc:	3304      	adds	r3, #4
 80168be:	4619      	mov	r1, r3
 80168c0:	f000 fb94 	bl	8016fec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	3301      	adds	r3, #1
 80168c8:	607b      	str	r3, [r7, #4]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2b09      	cmp	r3, #9
 80168ce:	f77f af65 	ble.w	801679c <etharp_tmr+0xc>
      }
    }
  }
}
 80168d2:	bf00      	nop
 80168d4:	bf00      	nop
 80168d6:	3708      	adds	r7, #8
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	2400c3fc 	.word	0x2400c3fc

080168e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b08a      	sub	sp, #40	@ 0x28
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	60f8      	str	r0, [r7, #12]
 80168e8:	460b      	mov	r3, r1
 80168ea:	607a      	str	r2, [r7, #4]
 80168ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80168ee:	230a      	movs	r3, #10
 80168f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80168f2:	230a      	movs	r3, #10
 80168f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80168f6:	230a      	movs	r3, #10
 80168f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80168fa:	2300      	movs	r3, #0
 80168fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80168fe:	230a      	movs	r3, #10
 8016900:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016902:	2300      	movs	r3, #0
 8016904:	83bb      	strh	r3, [r7, #28]
 8016906:	2300      	movs	r3, #0
 8016908:	837b      	strh	r3, [r7, #26]
 801690a:	2300      	movs	r3, #0
 801690c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801690e:	2300      	movs	r3, #0
 8016910:	843b      	strh	r3, [r7, #32]
 8016912:	e0ae      	b.n	8016a72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016918:	49a6      	ldr	r1, [pc, #664]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 801691a:	4613      	mov	r3, r2
 801691c:	005b      	lsls	r3, r3, #1
 801691e:	4413      	add	r3, r2
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	440b      	add	r3, r1
 8016924:	3314      	adds	r3, #20
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801692a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801692e:	2b0a      	cmp	r3, #10
 8016930:	d105      	bne.n	801693e <etharp_find_entry+0x5e>
 8016932:	7dfb      	ldrb	r3, [r7, #23]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d102      	bne.n	801693e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016938:	8c3b      	ldrh	r3, [r7, #32]
 801693a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801693c:	e095      	b.n	8016a6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801693e:	7dfb      	ldrb	r3, [r7, #23]
 8016940:	2b00      	cmp	r3, #0
 8016942:	f000 8092 	beq.w	8016a6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016946:	7dfb      	ldrb	r3, [r7, #23]
 8016948:	2b01      	cmp	r3, #1
 801694a:	d009      	beq.n	8016960 <etharp_find_entry+0x80>
 801694c:	7dfb      	ldrb	r3, [r7, #23]
 801694e:	2b01      	cmp	r3, #1
 8016950:	d806      	bhi.n	8016960 <etharp_find_entry+0x80>
 8016952:	4b99      	ldr	r3, [pc, #612]	@ (8016bb8 <etharp_find_entry+0x2d8>)
 8016954:	f240 1223 	movw	r2, #291	@ 0x123
 8016958:	4998      	ldr	r1, [pc, #608]	@ (8016bbc <etharp_find_entry+0x2dc>)
 801695a:	4899      	ldr	r0, [pc, #612]	@ (8016bc0 <etharp_find_entry+0x2e0>)
 801695c:	f002 fc22 	bl	80191a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d020      	beq.n	80169a8 <etharp_find_entry+0xc8>
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	6819      	ldr	r1, [r3, #0]
 801696a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801696e:	4891      	ldr	r0, [pc, #580]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016970:	4613      	mov	r3, r2
 8016972:	005b      	lsls	r3, r3, #1
 8016974:	4413      	add	r3, r2
 8016976:	00db      	lsls	r3, r3, #3
 8016978:	4403      	add	r3, r0
 801697a:	3304      	adds	r3, #4
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	4299      	cmp	r1, r3
 8016980:	d112      	bne.n	80169a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d00c      	beq.n	80169a2 <etharp_find_entry+0xc2>
 8016988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801698c:	4989      	ldr	r1, [pc, #548]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 801698e:	4613      	mov	r3, r2
 8016990:	005b      	lsls	r3, r3, #1
 8016992:	4413      	add	r3, r2
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	440b      	add	r3, r1
 8016998:	3308      	adds	r3, #8
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	687a      	ldr	r2, [r7, #4]
 801699e:	429a      	cmp	r2, r3
 80169a0:	d102      	bne.n	80169a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80169a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80169a6:	e100      	b.n	8016baa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80169a8:	7dfb      	ldrb	r3, [r7, #23]
 80169aa:	2b01      	cmp	r3, #1
 80169ac:	d140      	bne.n	8016a30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80169ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169b2:	4980      	ldr	r1, [pc, #512]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 80169b4:	4613      	mov	r3, r2
 80169b6:	005b      	lsls	r3, r3, #1
 80169b8:	4413      	add	r3, r2
 80169ba:	00db      	lsls	r3, r3, #3
 80169bc:	440b      	add	r3, r1
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d01a      	beq.n	80169fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80169c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169c8:	497a      	ldr	r1, [pc, #488]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 80169ca:	4613      	mov	r3, r2
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	4413      	add	r3, r2
 80169d0:	00db      	lsls	r3, r3, #3
 80169d2:	440b      	add	r3, r1
 80169d4:	3312      	adds	r3, #18
 80169d6:	881b      	ldrh	r3, [r3, #0]
 80169d8:	8bba      	ldrh	r2, [r7, #28]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d845      	bhi.n	8016a6a <etharp_find_entry+0x18a>
            old_queue = i;
 80169de:	8c3b      	ldrh	r3, [r7, #32]
 80169e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80169e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169e6:	4973      	ldr	r1, [pc, #460]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 80169e8:	4613      	mov	r3, r2
 80169ea:	005b      	lsls	r3, r3, #1
 80169ec:	4413      	add	r3, r2
 80169ee:	00db      	lsls	r3, r3, #3
 80169f0:	440b      	add	r3, r1
 80169f2:	3312      	adds	r3, #18
 80169f4:	881b      	ldrh	r3, [r3, #0]
 80169f6:	83bb      	strh	r3, [r7, #28]
 80169f8:	e037      	b.n	8016a6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80169fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169fe:	496d      	ldr	r1, [pc, #436]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016a00:	4613      	mov	r3, r2
 8016a02:	005b      	lsls	r3, r3, #1
 8016a04:	4413      	add	r3, r2
 8016a06:	00db      	lsls	r3, r3, #3
 8016a08:	440b      	add	r3, r1
 8016a0a:	3312      	adds	r3, #18
 8016a0c:	881b      	ldrh	r3, [r3, #0]
 8016a0e:	8b7a      	ldrh	r2, [r7, #26]
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d82a      	bhi.n	8016a6a <etharp_find_entry+0x18a>
            old_pending = i;
 8016a14:	8c3b      	ldrh	r3, [r7, #32]
 8016a16:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016a18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a1c:	4965      	ldr	r1, [pc, #404]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016a1e:	4613      	mov	r3, r2
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	4413      	add	r3, r2
 8016a24:	00db      	lsls	r3, r3, #3
 8016a26:	440b      	add	r3, r1
 8016a28:	3312      	adds	r3, #18
 8016a2a:	881b      	ldrh	r3, [r3, #0]
 8016a2c:	837b      	strh	r3, [r7, #26]
 8016a2e:	e01c      	b.n	8016a6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016a30:	7dfb      	ldrb	r3, [r7, #23]
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d919      	bls.n	8016a6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a3a:	495e      	ldr	r1, [pc, #376]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	005b      	lsls	r3, r3, #1
 8016a40:	4413      	add	r3, r2
 8016a42:	00db      	lsls	r3, r3, #3
 8016a44:	440b      	add	r3, r1
 8016a46:	3312      	adds	r3, #18
 8016a48:	881b      	ldrh	r3, [r3, #0]
 8016a4a:	8b3a      	ldrh	r2, [r7, #24]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d80c      	bhi.n	8016a6a <etharp_find_entry+0x18a>
            old_stable = i;
 8016a50:	8c3b      	ldrh	r3, [r7, #32]
 8016a52:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016a54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a58:	4956      	ldr	r1, [pc, #344]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016a5a:	4613      	mov	r3, r2
 8016a5c:	005b      	lsls	r3, r3, #1
 8016a5e:	4413      	add	r3, r2
 8016a60:	00db      	lsls	r3, r3, #3
 8016a62:	440b      	add	r3, r1
 8016a64:	3312      	adds	r3, #18
 8016a66:	881b      	ldrh	r3, [r3, #0]
 8016a68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a6a:	8c3b      	ldrh	r3, [r7, #32]
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	843b      	strh	r3, [r7, #32]
 8016a72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a76:	2b09      	cmp	r3, #9
 8016a78:	f77f af4c 	ble.w	8016914 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016a7c:	7afb      	ldrb	r3, [r7, #11]
 8016a7e:	f003 0302 	and.w	r3, r3, #2
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d108      	bne.n	8016a98 <etharp_find_entry+0x1b8>
 8016a86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016a8a:	2b0a      	cmp	r3, #10
 8016a8c:	d107      	bne.n	8016a9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016a8e:	7afb      	ldrb	r3, [r7, #11]
 8016a90:	f003 0301 	and.w	r3, r3, #1
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d102      	bne.n	8016a9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016a98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a9c:	e085      	b.n	8016baa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016a9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016aa2:	2b09      	cmp	r3, #9
 8016aa4:	dc02      	bgt.n	8016aac <etharp_find_entry+0x1cc>
    i = empty;
 8016aa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016aa8:	843b      	strh	r3, [r7, #32]
 8016aaa:	e039      	b.n	8016b20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016aac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016ab0:	2b09      	cmp	r3, #9
 8016ab2:	dc14      	bgt.n	8016ade <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016ab4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016ab6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016ab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016abc:	493d      	ldr	r1, [pc, #244]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016abe:	4613      	mov	r3, r2
 8016ac0:	005b      	lsls	r3, r3, #1
 8016ac2:	4413      	add	r3, r2
 8016ac4:	00db      	lsls	r3, r3, #3
 8016ac6:	440b      	add	r3, r1
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d018      	beq.n	8016b00 <etharp_find_entry+0x220>
 8016ace:	4b3a      	ldr	r3, [pc, #232]	@ (8016bb8 <etharp_find_entry+0x2d8>)
 8016ad0:	f240 126d 	movw	r2, #365	@ 0x16d
 8016ad4:	493b      	ldr	r1, [pc, #236]	@ (8016bc4 <etharp_find_entry+0x2e4>)
 8016ad6:	483a      	ldr	r0, [pc, #232]	@ (8016bc0 <etharp_find_entry+0x2e0>)
 8016ad8:	f002 fb64 	bl	80191a4 <iprintf>
 8016adc:	e010      	b.n	8016b00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016ade:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016ae2:	2b09      	cmp	r3, #9
 8016ae4:	dc02      	bgt.n	8016aec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016ae6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016ae8:	843b      	strh	r3, [r7, #32]
 8016aea:	e009      	b.n	8016b00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016aec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016af0:	2b09      	cmp	r3, #9
 8016af2:	dc02      	bgt.n	8016afa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016af4:	8bfb      	ldrh	r3, [r7, #30]
 8016af6:	843b      	strh	r3, [r7, #32]
 8016af8:	e002      	b.n	8016b00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016afe:	e054      	b.n	8016baa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b04:	2b09      	cmp	r3, #9
 8016b06:	dd06      	ble.n	8016b16 <etharp_find_entry+0x236>
 8016b08:	4b2b      	ldr	r3, [pc, #172]	@ (8016bb8 <etharp_find_entry+0x2d8>)
 8016b0a:	f240 127f 	movw	r2, #383	@ 0x17f
 8016b0e:	492e      	ldr	r1, [pc, #184]	@ (8016bc8 <etharp_find_entry+0x2e8>)
 8016b10:	482b      	ldr	r0, [pc, #172]	@ (8016bc0 <etharp_find_entry+0x2e0>)
 8016b12:	f002 fb47 	bl	80191a4 <iprintf>
    etharp_free_entry(i);
 8016b16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff fe06 	bl	801672c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b24:	2b09      	cmp	r3, #9
 8016b26:	dd06      	ble.n	8016b36 <etharp_find_entry+0x256>
 8016b28:	4b23      	ldr	r3, [pc, #140]	@ (8016bb8 <etharp_find_entry+0x2d8>)
 8016b2a:	f240 1283 	movw	r2, #387	@ 0x183
 8016b2e:	4926      	ldr	r1, [pc, #152]	@ (8016bc8 <etharp_find_entry+0x2e8>)
 8016b30:	4823      	ldr	r0, [pc, #140]	@ (8016bc0 <etharp_find_entry+0x2e0>)
 8016b32:	f002 fb37 	bl	80191a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016b36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b3a:	491e      	ldr	r1, [pc, #120]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	4413      	add	r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	440b      	add	r3, r1
 8016b46:	3314      	adds	r3, #20
 8016b48:	781b      	ldrb	r3, [r3, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d006      	beq.n	8016b5c <etharp_find_entry+0x27c>
 8016b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8016bb8 <etharp_find_entry+0x2d8>)
 8016b50:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016b54:	491d      	ldr	r1, [pc, #116]	@ (8016bcc <etharp_find_entry+0x2ec>)
 8016b56:	481a      	ldr	r0, [pc, #104]	@ (8016bc0 <etharp_find_entry+0x2e0>)
 8016b58:	f002 fb24 	bl	80191a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d00b      	beq.n	8016b7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016b62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	6819      	ldr	r1, [r3, #0]
 8016b6a:	4812      	ldr	r0, [pc, #72]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016b6c:	4613      	mov	r3, r2
 8016b6e:	005b      	lsls	r3, r3, #1
 8016b70:	4413      	add	r3, r2
 8016b72:	00db      	lsls	r3, r3, #3
 8016b74:	4403      	add	r3, r0
 8016b76:	3304      	adds	r3, #4
 8016b78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016b7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b7e:	490d      	ldr	r1, [pc, #52]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016b80:	4613      	mov	r3, r2
 8016b82:	005b      	lsls	r3, r3, #1
 8016b84:	4413      	add	r3, r2
 8016b86:	00db      	lsls	r3, r3, #3
 8016b88:	440b      	add	r3, r1
 8016b8a:	3312      	adds	r3, #18
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016b90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b94:	4907      	ldr	r1, [pc, #28]	@ (8016bb4 <etharp_find_entry+0x2d4>)
 8016b96:	4613      	mov	r3, r2
 8016b98:	005b      	lsls	r3, r3, #1
 8016b9a:	4413      	add	r3, r2
 8016b9c:	00db      	lsls	r3, r3, #3
 8016b9e:	440b      	add	r3, r1
 8016ba0:	3308      	adds	r3, #8
 8016ba2:	687a      	ldr	r2, [r7, #4]
 8016ba4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016ba6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3728      	adds	r7, #40	@ 0x28
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}
 8016bb2:	bf00      	nop
 8016bb4:	2400c3fc 	.word	0x2400c3fc
 8016bb8:	0801cbf8 	.word	0x0801cbf8
 8016bbc:	0801cc30 	.word	0x0801cc30
 8016bc0:	0801cc70 	.word	0x0801cc70
 8016bc4:	0801cc98 	.word	0x0801cc98
 8016bc8:	0801ccb0 	.word	0x0801ccb0
 8016bcc:	0801ccc4 	.word	0x0801ccc4

08016bd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b088      	sub	sp, #32
 8016bd4:	af02      	add	r7, sp, #8
 8016bd6:	60f8      	str	r0, [r7, #12]
 8016bd8:	60b9      	str	r1, [r7, #8]
 8016bda:	607a      	str	r2, [r7, #4]
 8016bdc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016be4:	2b06      	cmp	r3, #6
 8016be6:	d006      	beq.n	8016bf6 <etharp_update_arp_entry+0x26>
 8016be8:	4b48      	ldr	r3, [pc, #288]	@ (8016d0c <etharp_update_arp_entry+0x13c>)
 8016bea:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016bee:	4948      	ldr	r1, [pc, #288]	@ (8016d10 <etharp_update_arp_entry+0x140>)
 8016bf0:	4848      	ldr	r0, [pc, #288]	@ (8016d14 <etharp_update_arp_entry+0x144>)
 8016bf2:	f002 fad7 	bl	80191a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d012      	beq.n	8016c22 <etharp_update_arp_entry+0x52>
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d00e      	beq.n	8016c22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c04:	68bb      	ldr	r3, [r7, #8]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	68f9      	ldr	r1, [r7, #12]
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f000 feb8 	bl	8017980 <ip4_addr_isbroadcast_u32>
 8016c10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d105      	bne.n	8016c22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016c16:	68bb      	ldr	r3, [r7, #8]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c1e:	2be0      	cmp	r3, #224	@ 0xe0
 8016c20:	d102      	bne.n	8016c28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c22:	f06f 030f 	mvn.w	r3, #15
 8016c26:	e06c      	b.n	8016d02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016c28:	78fb      	ldrb	r3, [r7, #3]
 8016c2a:	68fa      	ldr	r2, [r7, #12]
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	68b8      	ldr	r0, [r7, #8]
 8016c30:	f7ff fe56 	bl	80168e0 <etharp_find_entry>
 8016c34:	4603      	mov	r3, r0
 8016c36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	da02      	bge.n	8016c46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016c40:	8afb      	ldrh	r3, [r7, #22]
 8016c42:	b25b      	sxtb	r3, r3
 8016c44:	e05d      	b.n	8016d02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016c46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c4a:	4933      	ldr	r1, [pc, #204]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	4413      	add	r3, r2
 8016c52:	00db      	lsls	r3, r3, #3
 8016c54:	440b      	add	r3, r1
 8016c56:	3314      	adds	r3, #20
 8016c58:	2202      	movs	r2, #2
 8016c5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016c5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c60:	492d      	ldr	r1, [pc, #180]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016c62:	4613      	mov	r3, r2
 8016c64:	005b      	lsls	r3, r3, #1
 8016c66:	4413      	add	r3, r2
 8016c68:	00db      	lsls	r3, r3, #3
 8016c6a:	440b      	add	r3, r1
 8016c6c:	3308      	adds	r3, #8
 8016c6e:	68fa      	ldr	r2, [r7, #12]
 8016c70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016c72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c76:	4613      	mov	r3, r2
 8016c78:	005b      	lsls	r3, r3, #1
 8016c7a:	4413      	add	r3, r2
 8016c7c:	00db      	lsls	r3, r3, #3
 8016c7e:	3308      	adds	r3, #8
 8016c80:	4a25      	ldr	r2, [pc, #148]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016c82:	4413      	add	r3, r2
 8016c84:	3304      	adds	r3, #4
 8016c86:	2206      	movs	r2, #6
 8016c88:	6879      	ldr	r1, [r7, #4]
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f002 fd19 	bl	80196c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016c90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c94:	4920      	ldr	r1, [pc, #128]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016c96:	4613      	mov	r3, r2
 8016c98:	005b      	lsls	r3, r3, #1
 8016c9a:	4413      	add	r3, r2
 8016c9c:	00db      	lsls	r3, r3, #3
 8016c9e:	440b      	add	r3, r1
 8016ca0:	3312      	adds	r3, #18
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016ca6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016caa:	491b      	ldr	r1, [pc, #108]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016cac:	4613      	mov	r3, r2
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	4413      	add	r3, r2
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	440b      	add	r3, r1
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d021      	beq.n	8016d00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016cbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cc0:	4915      	ldr	r1, [pc, #84]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016cc2:	4613      	mov	r3, r2
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	4413      	add	r3, r2
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	440b      	add	r3, r1
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016cd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cd4:	4910      	ldr	r1, [pc, #64]	@ (8016d18 <etharp_update_arp_entry+0x148>)
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	005b      	lsls	r3, r3, #1
 8016cda:	4413      	add	r3, r2
 8016cdc:	00db      	lsls	r3, r3, #3
 8016cde:	440b      	add	r3, r1
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016cea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016cee:	9300      	str	r3, [sp, #0]
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6939      	ldr	r1, [r7, #16]
 8016cf4:	68f8      	ldr	r0, [r7, #12]
 8016cf6:	f001 fdf1 	bl	80188dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016cfa:	6938      	ldr	r0, [r7, #16]
 8016cfc:	f7f8 fa84 	bl	800f208 <pbuf_free>
  }
  return ERR_OK;
 8016d00:	2300      	movs	r3, #0
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	3718      	adds	r7, #24
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
 8016d0a:	bf00      	nop
 8016d0c:	0801cbf8 	.word	0x0801cbf8
 8016d10:	0801ccf0 	.word	0x0801ccf0
 8016d14:	0801cc70 	.word	0x0801cc70
 8016d18:	2400c3fc 	.word	0x2400c3fc

08016d1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d24:	2300      	movs	r3, #0
 8016d26:	60fb      	str	r3, [r7, #12]
 8016d28:	e01e      	b.n	8016d68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016d2a:	4913      	ldr	r1, [pc, #76]	@ (8016d78 <etharp_cleanup_netif+0x5c>)
 8016d2c:	68fa      	ldr	r2, [r7, #12]
 8016d2e:	4613      	mov	r3, r2
 8016d30:	005b      	lsls	r3, r3, #1
 8016d32:	4413      	add	r3, r2
 8016d34:	00db      	lsls	r3, r3, #3
 8016d36:	440b      	add	r3, r1
 8016d38:	3314      	adds	r3, #20
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016d3e:	7afb      	ldrb	r3, [r7, #11]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d00e      	beq.n	8016d62 <etharp_cleanup_netif+0x46>
 8016d44:	490c      	ldr	r1, [pc, #48]	@ (8016d78 <etharp_cleanup_netif+0x5c>)
 8016d46:	68fa      	ldr	r2, [r7, #12]
 8016d48:	4613      	mov	r3, r2
 8016d4a:	005b      	lsls	r3, r3, #1
 8016d4c:	4413      	add	r3, r2
 8016d4e:	00db      	lsls	r3, r3, #3
 8016d50:	440b      	add	r3, r1
 8016d52:	3308      	adds	r3, #8
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	687a      	ldr	r2, [r7, #4]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d102      	bne.n	8016d62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016d5c:	68f8      	ldr	r0, [r7, #12]
 8016d5e:	f7ff fce5 	bl	801672c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	3301      	adds	r3, #1
 8016d66:	60fb      	str	r3, [r7, #12]
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2b09      	cmp	r3, #9
 8016d6c:	dddd      	ble.n	8016d2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016d6e:	bf00      	nop
 8016d70:	bf00      	nop
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	2400c3fc 	.word	0x2400c3fc

08016d7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016d7c:	b5b0      	push	{r4, r5, r7, lr}
 8016d7e:	b08a      	sub	sp, #40	@ 0x28
 8016d80:	af04      	add	r7, sp, #16
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d107      	bne.n	8016d9c <etharp_input+0x20>
 8016d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8016e84 <etharp_input+0x108>)
 8016d8e:	f240 228a 	movw	r2, #650	@ 0x28a
 8016d92:	493d      	ldr	r1, [pc, #244]	@ (8016e88 <etharp_input+0x10c>)
 8016d94:	483d      	ldr	r0, [pc, #244]	@ (8016e8c <etharp_input+0x110>)
 8016d96:	f002 fa05 	bl	80191a4 <iprintf>
 8016d9a:	e06f      	b.n	8016e7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	685b      	ldr	r3, [r3, #4]
 8016da0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016da2:	693b      	ldr	r3, [r7, #16]
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016dac:	d10c      	bne.n	8016dc8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016db2:	2b06      	cmp	r3, #6
 8016db4:	d108      	bne.n	8016dc8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016dba:	2b04      	cmp	r3, #4
 8016dbc:	d104      	bne.n	8016dc8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	885b      	ldrh	r3, [r3, #2]
 8016dc2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016dc4:	2b08      	cmp	r3, #8
 8016dc6:	d003      	beq.n	8016dd0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f7f8 fa1d 	bl	800f208 <pbuf_free>
    return;
 8016dce:	e055      	b.n	8016e7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	330e      	adds	r3, #14
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	3318      	adds	r3, #24
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	3304      	adds	r3, #4
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d102      	bne.n	8016df0 <etharp_input+0x74>
    for_us = 0;
 8016dea:	2300      	movs	r3, #0
 8016dec:	75fb      	strb	r3, [r7, #23]
 8016dee:	e009      	b.n	8016e04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	3304      	adds	r3, #4
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	bf0c      	ite	eq
 8016dfc:	2301      	moveq	r3, #1
 8016dfe:	2300      	movne	r3, #0
 8016e00:	b2db      	uxtb	r3, r3
 8016e02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016e04:	693b      	ldr	r3, [r7, #16]
 8016e06:	f103 0208 	add.w	r2, r3, #8
 8016e0a:	7dfb      	ldrb	r3, [r7, #23]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d001      	beq.n	8016e14 <etharp_input+0x98>
 8016e10:	2301      	movs	r3, #1
 8016e12:	e000      	b.n	8016e16 <etharp_input+0x9a>
 8016e14:	2302      	movs	r3, #2
 8016e16:	f107 010c 	add.w	r1, r7, #12
 8016e1a:	6838      	ldr	r0, [r7, #0]
 8016e1c:	f7ff fed8 	bl	8016bd0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	88db      	ldrh	r3, [r3, #6]
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016e2a:	d003      	beq.n	8016e34 <etharp_input+0xb8>
 8016e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e30:	d01e      	beq.n	8016e70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016e32:	e020      	b.n	8016e76 <etharp_input+0xfa>
      if (for_us) {
 8016e34:	7dfb      	ldrb	r3, [r7, #23]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d01c      	beq.n	8016e74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016e50:	693a      	ldr	r2, [r7, #16]
 8016e52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016e54:	2102      	movs	r1, #2
 8016e56:	9103      	str	r1, [sp, #12]
 8016e58:	f107 010c 	add.w	r1, r7, #12
 8016e5c:	9102      	str	r1, [sp, #8]
 8016e5e:	9201      	str	r2, [sp, #4]
 8016e60:	9300      	str	r3, [sp, #0]
 8016e62:	462b      	mov	r3, r5
 8016e64:	4622      	mov	r2, r4
 8016e66:	4601      	mov	r1, r0
 8016e68:	6838      	ldr	r0, [r7, #0]
 8016e6a:	f000 f811 	bl	8016e90 <etharp_raw>
      break;
 8016e6e:	e001      	b.n	8016e74 <etharp_input+0xf8>
      break;
 8016e70:	bf00      	nop
 8016e72:	e000      	b.n	8016e76 <etharp_input+0xfa>
      break;
 8016e74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f7f8 f9c6 	bl	800f208 <pbuf_free>
}
 8016e7c:	3718      	adds	r7, #24
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bdb0      	pop	{r4, r5, r7, pc}
 8016e82:	bf00      	nop
 8016e84:	0801cbf8 	.word	0x0801cbf8
 8016e88:	0801cd48 	.word	0x0801cd48
 8016e8c:	0801cc70 	.word	0x0801cc70

08016e90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b08a      	sub	sp, #40	@ 0x28
 8016e94:	af02      	add	r7, sp, #8
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
 8016e9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d106      	bne.n	8016eb6 <etharp_raw+0x26>
 8016ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8016f94 <etharp_raw+0x104>)
 8016eaa:	f240 4257 	movw	r2, #1111	@ 0x457
 8016eae:	493a      	ldr	r1, [pc, #232]	@ (8016f98 <etharp_raw+0x108>)
 8016eb0:	483a      	ldr	r0, [pc, #232]	@ (8016f9c <etharp_raw+0x10c>)
 8016eb2:	f002 f977 	bl	80191a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016eb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016eba:	211c      	movs	r1, #28
 8016ebc:	200e      	movs	r0, #14
 8016ebe:	f7f7 febf 	bl	800ec40 <pbuf_alloc>
 8016ec2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016ec4:	69bb      	ldr	r3, [r7, #24]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d102      	bne.n	8016ed0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016ece:	e05d      	b.n	8016f8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016ed0:	69bb      	ldr	r3, [r7, #24]
 8016ed2:	895b      	ldrh	r3, [r3, #10]
 8016ed4:	2b1b      	cmp	r3, #27
 8016ed6:	d806      	bhi.n	8016ee6 <etharp_raw+0x56>
 8016ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8016f94 <etharp_raw+0x104>)
 8016eda:	f240 4262 	movw	r2, #1122	@ 0x462
 8016ede:	4930      	ldr	r1, [pc, #192]	@ (8016fa0 <etharp_raw+0x110>)
 8016ee0:	482e      	ldr	r0, [pc, #184]	@ (8016f9c <etharp_raw+0x10c>)
 8016ee2:	f002 f95f 	bl	80191a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016ee6:	69bb      	ldr	r3, [r7, #24]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016eec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7f6 fbde 	bl	800d6b0 <lwip_htons>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016f02:	2b06      	cmp	r3, #6
 8016f04:	d006      	beq.n	8016f14 <etharp_raw+0x84>
 8016f06:	4b23      	ldr	r3, [pc, #140]	@ (8016f94 <etharp_raw+0x104>)
 8016f08:	f240 4269 	movw	r2, #1129	@ 0x469
 8016f0c:	4925      	ldr	r1, [pc, #148]	@ (8016fa4 <etharp_raw+0x114>)
 8016f0e:	4823      	ldr	r0, [pc, #140]	@ (8016f9c <etharp_raw+0x10c>)
 8016f10:	f002 f948 	bl	80191a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	3308      	adds	r3, #8
 8016f18:	2206      	movs	r2, #6
 8016f1a:	6839      	ldr	r1, [r7, #0]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f002 fbd0 	bl	80196c2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016f22:	697b      	ldr	r3, [r7, #20]
 8016f24:	3312      	adds	r3, #18
 8016f26:	2206      	movs	r2, #6
 8016f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f002 fbc9 	bl	80196c2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	330e      	adds	r3, #14
 8016f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f36:	6812      	ldr	r2, [r2, #0]
 8016f38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	3318      	adds	r3, #24
 8016f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f40:	6812      	ldr	r2, [r2, #0]
 8016f42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	2200      	movs	r2, #0
 8016f48:	701a      	strb	r2, [r3, #0]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	f042 0201 	orr.w	r2, r2, #1
 8016f50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016f52:	697b      	ldr	r3, [r7, #20]
 8016f54:	2200      	movs	r2, #0
 8016f56:	f042 0208 	orr.w	r2, r2, #8
 8016f5a:	709a      	strb	r2, [r3, #2]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	2206      	movs	r2, #6
 8016f64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	2204      	movs	r2, #4
 8016f6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016f6c:	f640 0306 	movw	r3, #2054	@ 0x806
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	68ba      	ldr	r2, [r7, #8]
 8016f76:	69b9      	ldr	r1, [r7, #24]
 8016f78:	68f8      	ldr	r0, [r7, #12]
 8016f7a:	f001 fcaf 	bl	80188dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016f7e:	69b8      	ldr	r0, [r7, #24]
 8016f80:	f7f8 f942 	bl	800f208 <pbuf_free>
  p = NULL;
 8016f84:	2300      	movs	r3, #0
 8016f86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016f88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3720      	adds	r7, #32
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}
 8016f94:	0801cbf8 	.word	0x0801cbf8
 8016f98:	0801cd48 	.word	0x0801cd48
 8016f9c:	0801cc70 	.word	0x0801cc70
 8016fa0:	0801cdf8 	.word	0x0801cdf8
 8016fa4:	0801ce2c 	.word	0x0801ce2c

08016fa8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b088      	sub	sp, #32
 8016fac:	af04      	add	r7, sp, #16
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	60b9      	str	r1, [r7, #8]
 8016fb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016fc4:	2201      	movs	r2, #1
 8016fc6:	9203      	str	r2, [sp, #12]
 8016fc8:	68ba      	ldr	r2, [r7, #8]
 8016fca:	9202      	str	r2, [sp, #8]
 8016fcc:	4a06      	ldr	r2, [pc, #24]	@ (8016fe8 <etharp_request_dst+0x40>)
 8016fce:	9201      	str	r2, [sp, #4]
 8016fd0:	9300      	str	r3, [sp, #0]
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	687a      	ldr	r2, [r7, #4]
 8016fd6:	68f8      	ldr	r0, [r7, #12]
 8016fd8:	f7ff ff5a 	bl	8016e90 <etharp_raw>
 8016fdc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016fde:	4618      	mov	r0, r3
 8016fe0:	3710      	adds	r7, #16
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	0801e2b8 	.word	0x0801e2b8

08016fec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016ff6:	4a05      	ldr	r2, [pc, #20]	@ (801700c <etharp_request+0x20>)
 8016ff8:	6839      	ldr	r1, [r7, #0]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f7ff ffd4 	bl	8016fa8 <etharp_request_dst>
 8017000:	4603      	mov	r3, r0
}
 8017002:	4618      	mov	r0, r3
 8017004:	3708      	adds	r7, #8
 8017006:	46bd      	mov	sp, r7
 8017008:	bd80      	pop	{r7, pc}
 801700a:	bf00      	nop
 801700c:	0801e2b0 	.word	0x0801e2b0

08017010 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b08e      	sub	sp, #56	@ 0x38
 8017014:	af04      	add	r7, sp, #16
 8017016:	6078      	str	r0, [r7, #4]
 8017018:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801701a:	4b8b      	ldr	r3, [pc, #556]	@ (8017248 <icmp_input+0x238>)
 801701c:	689b      	ldr	r3, [r3, #8]
 801701e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	f003 030f 	and.w	r3, r3, #15
 8017028:	b2db      	uxtb	r3, r3
 801702a:	009b      	lsls	r3, r3, #2
 801702c:	b2db      	uxtb	r3, r3
 801702e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8017030:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017032:	2b13      	cmp	r3, #19
 8017034:	f240 80f1 	bls.w	801721a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	895b      	ldrh	r3, [r3, #10]
 801703c:	2b03      	cmp	r3, #3
 801703e:	f240 80ee 	bls.w	801721e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	781b      	ldrb	r3, [r3, #0]
 8017048:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801704c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017050:	2b00      	cmp	r3, #0
 8017052:	f000 80db 	beq.w	801720c <icmp_input+0x1fc>
 8017056:	2b08      	cmp	r3, #8
 8017058:	f040 80db 	bne.w	8017212 <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801705c:	4b7b      	ldr	r3, [pc, #492]	@ (801724c <icmp_input+0x23c>)
 801705e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017060:	4b79      	ldr	r3, [pc, #484]	@ (8017248 <icmp_input+0x238>)
 8017062:	695b      	ldr	r3, [r3, #20]
 8017064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017068:	2be0      	cmp	r3, #224	@ 0xe0
 801706a:	f000 80df 	beq.w	801722c <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801706e:	4b76      	ldr	r3, [pc, #472]	@ (8017248 <icmp_input+0x238>)
 8017070:	695b      	ldr	r3, [r3, #20]
 8017072:	4a75      	ldr	r2, [pc, #468]	@ (8017248 <icmp_input+0x238>)
 8017074:	6812      	ldr	r2, [r2, #0]
 8017076:	4611      	mov	r1, r2
 8017078:	4618      	mov	r0, r3
 801707a:	f000 fc81 	bl	8017980 <ip4_addr_isbroadcast_u32>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	f040 80d5 	bne.w	8017230 <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	891b      	ldrh	r3, [r3, #8]
 801708a:	2b07      	cmp	r3, #7
 801708c:	f240 80c9 	bls.w	8017222 <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f7f6 fc9d 	bl	800d9d0 <inet_chksum_pbuf>
 8017096:	4603      	mov	r3, r0
 8017098:	2b00      	cmp	r3, #0
 801709a:	d003      	beq.n	80170a4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7f8 f8b3 	bl	800f208 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80170a2:	e0ce      	b.n	8017242 <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80170a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170a6:	330e      	adds	r3, #14
 80170a8:	4619      	mov	r1, r3
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f7f8 f816 	bl	800f0dc <pbuf_add_header>
 80170b0:	4603      	mov	r3, r0
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d04b      	beq.n	801714e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	891a      	ldrh	r2, [r3, #8]
 80170ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170bc:	4413      	add	r3, r2
 80170be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	891b      	ldrh	r3, [r3, #8]
 80170c4:	8b7a      	ldrh	r2, [r7, #26]
 80170c6:	429a      	cmp	r2, r3
 80170c8:	f0c0 80b4 	bcc.w	8017234 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80170cc:	8b7b      	ldrh	r3, [r7, #26]
 80170ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170d2:	4619      	mov	r1, r3
 80170d4:	200e      	movs	r0, #14
 80170d6:	f7f7 fdb3 	bl	800ec40 <pbuf_alloc>
 80170da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	f000 80aa 	beq.w	8017238 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	895b      	ldrh	r3, [r3, #10]
 80170e8:	461a      	mov	r2, r3
 80170ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170ec:	3308      	adds	r3, #8
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d203      	bcs.n	80170fa <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80170f2:	6978      	ldr	r0, [r7, #20]
 80170f4:	f7f8 f888 	bl	800f208 <pbuf_free>
          goto icmperr;
 80170f8:	e09f      	b.n	801723a <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	685b      	ldr	r3, [r3, #4]
 80170fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017102:	4618      	mov	r0, r3
 8017104:	f002 fadd 	bl	80196c2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017108:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801710a:	4619      	mov	r1, r3
 801710c:	6978      	ldr	r0, [r7, #20]
 801710e:	f7f7 fff5 	bl	800f0fc <pbuf_remove_header>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	d009      	beq.n	801712c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017118:	4b4d      	ldr	r3, [pc, #308]	@ (8017250 <icmp_input+0x240>)
 801711a:	22b6      	movs	r2, #182	@ 0xb6
 801711c:	494d      	ldr	r1, [pc, #308]	@ (8017254 <icmp_input+0x244>)
 801711e:	484e      	ldr	r0, [pc, #312]	@ (8017258 <icmp_input+0x248>)
 8017120:	f002 f840 	bl	80191a4 <iprintf>
          pbuf_free(r);
 8017124:	6978      	ldr	r0, [r7, #20]
 8017126:	f7f8 f86f 	bl	800f208 <pbuf_free>
          goto icmperr;
 801712a:	e086      	b.n	801723a <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801712c:	6879      	ldr	r1, [r7, #4]
 801712e:	6978      	ldr	r0, [r7, #20]
 8017130:	f7f8 f99e 	bl	800f470 <pbuf_copy>
 8017134:	4603      	mov	r3, r0
 8017136:	2b00      	cmp	r3, #0
 8017138:	d003      	beq.n	8017142 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801713a:	6978      	ldr	r0, [r7, #20]
 801713c:	f7f8 f864 	bl	800f208 <pbuf_free>
          goto icmperr;
 8017140:	e07b      	b.n	801723a <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f7f8 f860 	bl	800f208 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	607b      	str	r3, [r7, #4]
 801714c:	e00f      	b.n	801716e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801714e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017150:	330e      	adds	r3, #14
 8017152:	4619      	mov	r1, r3
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	f7f7 ffd1 	bl	800f0fc <pbuf_remove_header>
 801715a:	4603      	mov	r3, r0
 801715c:	2b00      	cmp	r3, #0
 801715e:	d006      	beq.n	801716e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017160:	4b3b      	ldr	r3, [pc, #236]	@ (8017250 <icmp_input+0x240>)
 8017162:	22c7      	movs	r2, #199	@ 0xc7
 8017164:	493d      	ldr	r1, [pc, #244]	@ (801725c <icmp_input+0x24c>)
 8017166:	483c      	ldr	r0, [pc, #240]	@ (8017258 <icmp_input+0x248>)
 8017168:	f002 f81c 	bl	80191a4 <iprintf>
          goto icmperr;
 801716c:	e065      	b.n	801723a <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	685b      	ldr	r3, [r3, #4]
 8017172:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017176:	4619      	mov	r1, r3
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f7f7 ffaf 	bl	800f0dc <pbuf_add_header>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	d145      	bne.n	8017210 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017192:	4b2d      	ldr	r3, [pc, #180]	@ (8017248 <icmp_input+0x238>)
 8017194:	691a      	ldr	r2, [r3, #16]
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	2200      	movs	r2, #0
 801719e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	885b      	ldrh	r3, [r3, #2]
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d907      	bls.n	80171be <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80171ae:	693b      	ldr	r3, [r7, #16]
 80171b0:	885b      	ldrh	r3, [r3, #2]
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	3309      	adds	r3, #9
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	805a      	strh	r2, [r3, #2]
 80171bc:	e006      	b.n	80171cc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	885b      	ldrh	r3, [r3, #2]
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	3308      	adds	r3, #8
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	693b      	ldr	r3, [r7, #16]
 80171ca:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	22ff      	movs	r2, #255	@ 0xff
 80171d0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	2200      	movs	r2, #0
 80171d6:	729a      	strb	r2, [r3, #10]
 80171d8:	2200      	movs	r2, #0
 80171da:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80171dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80171de:	4619      	mov	r1, r3
 80171e0:	68f8      	ldr	r0, [r7, #12]
 80171e2:	f7f6 fbe3 	bl	800d9ac <inet_chksum>
 80171e6:	4603      	mov	r3, r0
 80171e8:	461a      	mov	r2, r3
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	9302      	str	r3, [sp, #8]
 80171f2:	2301      	movs	r3, #1
 80171f4:	9301      	str	r3, [sp, #4]
 80171f6:	2300      	movs	r3, #0
 80171f8:	9300      	str	r3, [sp, #0]
 80171fa:	23ff      	movs	r3, #255	@ 0xff
 80171fc:	2200      	movs	r2, #0
 80171fe:	69f9      	ldr	r1, [r7, #28]
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f000 fa7f 	bl	8017704 <ip4_output_if>
 8017206:	4603      	mov	r3, r0
 8017208:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801720a:	e001      	b.n	8017210 <icmp_input+0x200>
      break;
 801720c:	bf00      	nop
 801720e:	e000      	b.n	8017212 <icmp_input+0x202>
      break;
 8017210:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f7f7 fff8 	bl	800f208 <pbuf_free>
  return;
 8017218:	e013      	b.n	8017242 <icmp_input+0x232>
    goto lenerr;
 801721a:	bf00      	nop
 801721c:	e002      	b.n	8017224 <icmp_input+0x214>
    goto lenerr;
 801721e:	bf00      	nop
 8017220:	e000      	b.n	8017224 <icmp_input+0x214>
        goto lenerr;
 8017222:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f7f7 ffef 	bl	800f208 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801722a:	e00a      	b.n	8017242 <icmp_input+0x232>
        goto icmperr;
 801722c:	bf00      	nop
 801722e:	e004      	b.n	801723a <icmp_input+0x22a>
        goto icmperr;
 8017230:	bf00      	nop
 8017232:	e002      	b.n	801723a <icmp_input+0x22a>
          goto icmperr;
 8017234:	bf00      	nop
 8017236:	e000      	b.n	801723a <icmp_input+0x22a>
          goto icmperr;
 8017238:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f7f7 ffe4 	bl	800f208 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017240:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017242:	3728      	adds	r7, #40	@ 0x28
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}
 8017248:	2400929c 	.word	0x2400929c
 801724c:	240092b0 	.word	0x240092b0
 8017250:	0801ce70 	.word	0x0801ce70
 8017254:	0801cea8 	.word	0x0801cea8
 8017258:	0801cee0 	.word	0x0801cee0
 801725c:	0801cf08 	.word	0x0801cf08

08017260 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
 8017268:	460b      	mov	r3, r1
 801726a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801726c:	78fb      	ldrb	r3, [r7, #3]
 801726e:	461a      	mov	r2, r3
 8017270:	2103      	movs	r1, #3
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 f814 	bl	80172a0 <icmp_send_response>
}
 8017278:	bf00      	nop
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}

08017280 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	460b      	mov	r3, r1
 801728a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801728c:	78fb      	ldrb	r3, [r7, #3]
 801728e:	461a      	mov	r2, r3
 8017290:	210b      	movs	r1, #11
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f000 f804 	bl	80172a0 <icmp_send_response>
}
 8017298:	bf00      	nop
 801729a:	3708      	adds	r7, #8
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}

080172a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b08c      	sub	sp, #48	@ 0x30
 80172a4:	af04      	add	r7, sp, #16
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	460b      	mov	r3, r1
 80172aa:	70fb      	strb	r3, [r7, #3]
 80172ac:	4613      	mov	r3, r2
 80172ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80172b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80172b4:	2124      	movs	r1, #36	@ 0x24
 80172b6:	2022      	movs	r0, #34	@ 0x22
 80172b8:	f7f7 fcc2 	bl	800ec40 <pbuf_alloc>
 80172bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80172be:	69fb      	ldr	r3, [r7, #28]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d056      	beq.n	8017372 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80172c4:	69fb      	ldr	r3, [r7, #28]
 80172c6:	895b      	ldrh	r3, [r3, #10]
 80172c8:	2b23      	cmp	r3, #35	@ 0x23
 80172ca:	d806      	bhi.n	80172da <icmp_send_response+0x3a>
 80172cc:	4b2b      	ldr	r3, [pc, #172]	@ (801737c <icmp_send_response+0xdc>)
 80172ce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80172d2:	492b      	ldr	r1, [pc, #172]	@ (8017380 <icmp_send_response+0xe0>)
 80172d4:	482b      	ldr	r0, [pc, #172]	@ (8017384 <icmp_send_response+0xe4>)
 80172d6:	f001 ff65 	bl	80191a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	685b      	ldr	r3, [r3, #4]
 80172de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	685b      	ldr	r3, [r3, #4]
 80172e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	78fa      	ldrb	r2, [r7, #3]
 80172ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	78ba      	ldrb	r2, [r7, #2]
 80172f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	2200      	movs	r2, #0
 80172f6:	711a      	strb	r2, [r3, #4]
 80172f8:	2200      	movs	r2, #0
 80172fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	2200      	movs	r2, #0
 8017300:	719a      	strb	r2, [r3, #6]
 8017302:	2200      	movs	r2, #0
 8017304:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	f103 0008 	add.w	r0, r3, #8
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	221c      	movs	r2, #28
 8017314:	4619      	mov	r1, r3
 8017316:	f002 f9d4 	bl	80196c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017320:	f107 030c 	add.w	r3, r7, #12
 8017324:	4618      	mov	r0, r3
 8017326:	f000 f82f 	bl	8017388 <ip4_route>
 801732a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d01b      	beq.n	801736a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017332:	697b      	ldr	r3, [r7, #20]
 8017334:	2200      	movs	r2, #0
 8017336:	709a      	strb	r2, [r3, #2]
 8017338:	2200      	movs	r2, #0
 801733a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801733c:	69fb      	ldr	r3, [r7, #28]
 801733e:	895b      	ldrh	r3, [r3, #10]
 8017340:	4619      	mov	r1, r3
 8017342:	6978      	ldr	r0, [r7, #20]
 8017344:	f7f6 fb32 	bl	800d9ac <inet_chksum>
 8017348:	4603      	mov	r3, r0
 801734a:	461a      	mov	r2, r3
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017350:	f107 020c 	add.w	r2, r7, #12
 8017354:	693b      	ldr	r3, [r7, #16]
 8017356:	9302      	str	r3, [sp, #8]
 8017358:	2301      	movs	r3, #1
 801735a:	9301      	str	r3, [sp, #4]
 801735c:	2300      	movs	r3, #0
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	23ff      	movs	r3, #255	@ 0xff
 8017362:	2100      	movs	r1, #0
 8017364:	69f8      	ldr	r0, [r7, #28]
 8017366:	f000 f9cd 	bl	8017704 <ip4_output_if>
  }
  pbuf_free(q);
 801736a:	69f8      	ldr	r0, [r7, #28]
 801736c:	f7f7 ff4c 	bl	800f208 <pbuf_free>
 8017370:	e000      	b.n	8017374 <icmp_send_response+0xd4>
    return;
 8017372:	bf00      	nop
}
 8017374:	3720      	adds	r7, #32
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
 801737a:	bf00      	nop
 801737c:	0801ce70 	.word	0x0801ce70
 8017380:	0801cf3c 	.word	0x0801cf3c
 8017384:	0801cee0 	.word	0x0801cee0

08017388 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017388:	b480      	push	{r7}
 801738a:	b085      	sub	sp, #20
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017390:	4b33      	ldr	r3, [pc, #204]	@ (8017460 <ip4_route+0xd8>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	60fb      	str	r3, [r7, #12]
 8017396:	e036      	b.n	8017406 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801739e:	f003 0301 	and.w	r3, r3, #1
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d02b      	beq.n	8017400 <ip4_route+0x78>
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80173ae:	089b      	lsrs	r3, r3, #2
 80173b0:	f003 0301 	and.w	r3, r3, #1
 80173b4:	b2db      	uxtb	r3, r3
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d022      	beq.n	8017400 <ip4_route+0x78>
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	3304      	adds	r3, #4
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d01d      	beq.n	8017400 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	3304      	adds	r3, #4
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	405a      	eors	r2, r3
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	3308      	adds	r3, #8
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	4013      	ands	r3, r2
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d101      	bne.n	80173e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	e038      	b.n	8017452 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80173e6:	f003 0302 	and.w	r3, r3, #2
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d108      	bne.n	8017400 <ip4_route+0x78>
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	330c      	adds	r3, #12
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d101      	bne.n	8017400 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	e028      	b.n	8017452 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	60fb      	str	r3, [r7, #12]
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d1c5      	bne.n	8017398 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801740c:	4b15      	ldr	r3, [pc, #84]	@ (8017464 <ip4_route+0xdc>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d01a      	beq.n	801744a <ip4_route+0xc2>
 8017414:	4b13      	ldr	r3, [pc, #76]	@ (8017464 <ip4_route+0xdc>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801741c:	f003 0301 	and.w	r3, r3, #1
 8017420:	2b00      	cmp	r3, #0
 8017422:	d012      	beq.n	801744a <ip4_route+0xc2>
 8017424:	4b0f      	ldr	r3, [pc, #60]	@ (8017464 <ip4_route+0xdc>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801742c:	f003 0304 	and.w	r3, r3, #4
 8017430:	2b00      	cmp	r3, #0
 8017432:	d00a      	beq.n	801744a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017434:	4b0b      	ldr	r3, [pc, #44]	@ (8017464 <ip4_route+0xdc>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	3304      	adds	r3, #4
 801743a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801743c:	2b00      	cmp	r3, #0
 801743e:	d004      	beq.n	801744a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	b2db      	uxtb	r3, r3
 8017446:	2b7f      	cmp	r3, #127	@ 0x7f
 8017448:	d101      	bne.n	801744e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801744a:	2300      	movs	r3, #0
 801744c:	e001      	b.n	8017452 <ip4_route+0xca>
  }

  return netif_default;
 801744e:	4b05      	ldr	r3, [pc, #20]	@ (8017464 <ip4_route+0xdc>)
 8017450:	681b      	ldr	r3, [r3, #0]
}
 8017452:	4618      	mov	r0, r3
 8017454:	3714      	adds	r7, #20
 8017456:	46bd      	mov	sp, r7
 8017458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745c:	4770      	bx	lr
 801745e:	bf00      	nop
 8017460:	2400c390 	.word	0x2400c390
 8017464:	2400c394 	.word	0x2400c394

08017468 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b082      	sub	sp, #8
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017476:	f003 0301 	and.w	r3, r3, #1
 801747a:	b2db      	uxtb	r3, r3
 801747c:	2b00      	cmp	r3, #0
 801747e:	d016      	beq.n	80174ae <ip4_input_accept+0x46>
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	3304      	adds	r3, #4
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d011      	beq.n	80174ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801748a:	4b0b      	ldr	r3, [pc, #44]	@ (80174b8 <ip4_input_accept+0x50>)
 801748c:	695a      	ldr	r2, [r3, #20]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	3304      	adds	r3, #4
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	429a      	cmp	r2, r3
 8017496:	d008      	beq.n	80174aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017498:	4b07      	ldr	r3, [pc, #28]	@ (80174b8 <ip4_input_accept+0x50>)
 801749a:	695b      	ldr	r3, [r3, #20]
 801749c:	6879      	ldr	r1, [r7, #4]
 801749e:	4618      	mov	r0, r3
 80174a0:	f000 fa6e 	bl	8017980 <ip4_addr_isbroadcast_u32>
 80174a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d001      	beq.n	80174ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80174aa:	2301      	movs	r3, #1
 80174ac:	e000      	b.n	80174b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3708      	adds	r7, #8
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}
 80174b8:	2400929c 	.word	0x2400929c

080174bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	781b      	ldrb	r3, [r3, #0]
 80174d0:	091b      	lsrs	r3, r3, #4
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	2b04      	cmp	r3, #4
 80174d6:	d004      	beq.n	80174e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	f7f7 fe95 	bl	800f208 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80174de:	2300      	movs	r3, #0
 80174e0:	e107      	b.n	80176f2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	f003 030f 	and.w	r3, r3, #15
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	009b      	lsls	r3, r3, #2
 80174ee:	b2db      	uxtb	r3, r3
 80174f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	885b      	ldrh	r3, [r3, #2]
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f6 f8d9 	bl	800d6b0 <lwip_htons>
 80174fe:	4603      	mov	r3, r0
 8017500:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	891b      	ldrh	r3, [r3, #8]
 8017506:	89ba      	ldrh	r2, [r7, #12]
 8017508:	429a      	cmp	r2, r3
 801750a:	d204      	bcs.n	8017516 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801750c:	89bb      	ldrh	r3, [r7, #12]
 801750e:	4619      	mov	r1, r3
 8017510:	6878      	ldr	r0, [r7, #4]
 8017512:	f7f7 fcf3 	bl	800eefc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	895b      	ldrh	r3, [r3, #10]
 801751a:	89fa      	ldrh	r2, [r7, #14]
 801751c:	429a      	cmp	r2, r3
 801751e:	d807      	bhi.n	8017530 <ip4_input+0x74>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	891b      	ldrh	r3, [r3, #8]
 8017524:	89ba      	ldrh	r2, [r7, #12]
 8017526:	429a      	cmp	r2, r3
 8017528:	d802      	bhi.n	8017530 <ip4_input+0x74>
 801752a:	89fb      	ldrh	r3, [r7, #14]
 801752c:	2b13      	cmp	r3, #19
 801752e:	d804      	bhi.n	801753a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f7f7 fe69 	bl	800f208 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017536:	2300      	movs	r3, #0
 8017538:	e0db      	b.n	80176f2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	691b      	ldr	r3, [r3, #16]
 801753e:	4a6f      	ldr	r2, [pc, #444]	@ (80176fc <ip4_input+0x240>)
 8017540:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017542:	697b      	ldr	r3, [r7, #20]
 8017544:	68db      	ldr	r3, [r3, #12]
 8017546:	4a6d      	ldr	r2, [pc, #436]	@ (80176fc <ip4_input+0x240>)
 8017548:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801754a:	4b6c      	ldr	r3, [pc, #432]	@ (80176fc <ip4_input+0x240>)
 801754c:	695b      	ldr	r3, [r3, #20]
 801754e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017552:	2be0      	cmp	r3, #224	@ 0xe0
 8017554:	d112      	bne.n	801757c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801755c:	f003 0301 	and.w	r3, r3, #1
 8017560:	b2db      	uxtb	r3, r3
 8017562:	2b00      	cmp	r3, #0
 8017564:	d007      	beq.n	8017576 <ip4_input+0xba>
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	3304      	adds	r3, #4
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d002      	beq.n	8017576 <ip4_input+0xba>
      netif = inp;
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	613b      	str	r3, [r7, #16]
 8017574:	e02a      	b.n	80175cc <ip4_input+0x110>
    } else {
      netif = NULL;
 8017576:	2300      	movs	r3, #0
 8017578:	613b      	str	r3, [r7, #16]
 801757a:	e027      	b.n	80175cc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801757c:	6838      	ldr	r0, [r7, #0]
 801757e:	f7ff ff73 	bl	8017468 <ip4_input_accept>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	d002      	beq.n	801758e <ip4_input+0xd2>
      netif = inp;
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	613b      	str	r3, [r7, #16]
 801758c:	e01e      	b.n	80175cc <ip4_input+0x110>
    } else {
      netif = NULL;
 801758e:	2300      	movs	r3, #0
 8017590:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017592:	4b5a      	ldr	r3, [pc, #360]	@ (80176fc <ip4_input+0x240>)
 8017594:	695b      	ldr	r3, [r3, #20]
 8017596:	b2db      	uxtb	r3, r3
 8017598:	2b7f      	cmp	r3, #127	@ 0x7f
 801759a:	d017      	beq.n	80175cc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801759c:	4b58      	ldr	r3, [pc, #352]	@ (8017700 <ip4_input+0x244>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	613b      	str	r3, [r7, #16]
 80175a2:	e00e      	b.n	80175c2 <ip4_input+0x106>
          if (netif == inp) {
 80175a4:	693a      	ldr	r2, [r7, #16]
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d006      	beq.n	80175ba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80175ac:	6938      	ldr	r0, [r7, #16]
 80175ae:	f7ff ff5b 	bl	8017468 <ip4_input_accept>
 80175b2:	4603      	mov	r3, r0
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d108      	bne.n	80175ca <ip4_input+0x10e>
 80175b8:	e000      	b.n	80175bc <ip4_input+0x100>
            continue;
 80175ba:	bf00      	nop
        NETIF_FOREACH(netif) {
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	613b      	str	r3, [r7, #16]
 80175c2:	693b      	ldr	r3, [r7, #16]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d1ed      	bne.n	80175a4 <ip4_input+0xe8>
 80175c8:	e000      	b.n	80175cc <ip4_input+0x110>
            break;
 80175ca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175cc:	4b4b      	ldr	r3, [pc, #300]	@ (80176fc <ip4_input+0x240>)
 80175ce:	691b      	ldr	r3, [r3, #16]
 80175d0:	6839      	ldr	r1, [r7, #0]
 80175d2:	4618      	mov	r0, r3
 80175d4:	f000 f9d4 	bl	8017980 <ip4_addr_isbroadcast_u32>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d105      	bne.n	80175ea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80175de:	4b47      	ldr	r3, [pc, #284]	@ (80176fc <ip4_input+0x240>)
 80175e0:	691b      	ldr	r3, [r3, #16]
 80175e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175e6:	2be0      	cmp	r3, #224	@ 0xe0
 80175e8:	d104      	bne.n	80175f4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f7f7 fe0c 	bl	800f208 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80175f0:	2300      	movs	r3, #0
 80175f2:	e07e      	b.n	80176f2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d104      	bne.n	8017604 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f7f7 fe04 	bl	800f208 <pbuf_free>
    return ERR_OK;
 8017600:	2300      	movs	r3, #0
 8017602:	e076      	b.n	80176f2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	88db      	ldrh	r3, [r3, #6]
 8017608:	b29b      	uxth	r3, r3
 801760a:	461a      	mov	r2, r3
 801760c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017610:	4013      	ands	r3, r2
 8017612:	2b00      	cmp	r3, #0
 8017614:	d00b      	beq.n	801762e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f000 fd88 	bl	801812c <ip4_reass>
 801761c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d101      	bne.n	8017628 <ip4_input+0x16c>
      return ERR_OK;
 8017624:	2300      	movs	r3, #0
 8017626:	e064      	b.n	80176f2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801762e:	4a33      	ldr	r2, [pc, #204]	@ (80176fc <ip4_input+0x240>)
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017634:	4a31      	ldr	r2, [pc, #196]	@ (80176fc <ip4_input+0x240>)
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801763a:	4a30      	ldr	r2, [pc, #192]	@ (80176fc <ip4_input+0x240>)
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	f003 030f 	and.w	r3, r3, #15
 8017648:	b2db      	uxtb	r3, r3
 801764a:	009b      	lsls	r3, r3, #2
 801764c:	b2db      	uxtb	r3, r3
 801764e:	461a      	mov	r2, r3
 8017650:	4b2a      	ldr	r3, [pc, #168]	@ (80176fc <ip4_input+0x240>)
 8017652:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017654:	89fb      	ldrh	r3, [r7, #14]
 8017656:	4619      	mov	r1, r3
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f7f7 fd4f 	bl	800f0fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	7a5b      	ldrb	r3, [r3, #9]
 8017662:	2b11      	cmp	r3, #17
 8017664:	d006      	beq.n	8017674 <ip4_input+0x1b8>
 8017666:	2b11      	cmp	r3, #17
 8017668:	dc13      	bgt.n	8017692 <ip4_input+0x1d6>
 801766a:	2b01      	cmp	r3, #1
 801766c:	d00c      	beq.n	8017688 <ip4_input+0x1cc>
 801766e:	2b06      	cmp	r3, #6
 8017670:	d005      	beq.n	801767e <ip4_input+0x1c2>
 8017672:	e00e      	b.n	8017692 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017674:	6839      	ldr	r1, [r7, #0]
 8017676:	6878      	ldr	r0, [r7, #4]
 8017678:	f7fe fb78 	bl	8015d6c <udp_input>
        break;
 801767c:	e026      	b.n	80176cc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801767e:	6839      	ldr	r1, [r7, #0]
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f7f9 ff15 	bl	80114b0 <tcp_input>
        break;
 8017686:	e021      	b.n	80176cc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017688:	6839      	ldr	r1, [r7, #0]
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f7ff fcc0 	bl	8017010 <icmp_input>
        break;
 8017690:	e01c      	b.n	80176cc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017692:	4b1a      	ldr	r3, [pc, #104]	@ (80176fc <ip4_input+0x240>)
 8017694:	695b      	ldr	r3, [r3, #20]
 8017696:	6939      	ldr	r1, [r7, #16]
 8017698:	4618      	mov	r0, r3
 801769a:	f000 f971 	bl	8017980 <ip4_addr_isbroadcast_u32>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d10f      	bne.n	80176c4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176a4:	4b15      	ldr	r3, [pc, #84]	@ (80176fc <ip4_input+0x240>)
 80176a6:	695b      	ldr	r3, [r3, #20]
 80176a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176ac:	2be0      	cmp	r3, #224	@ 0xe0
 80176ae:	d009      	beq.n	80176c4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80176b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80176b4:	4619      	mov	r1, r3
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f7f7 fd93 	bl	800f1e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80176bc:	2102      	movs	r1, #2
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7ff fdce 	bl	8017260 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f7f7 fd9f 	bl	800f208 <pbuf_free>
        break;
 80176ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80176cc:	4b0b      	ldr	r3, [pc, #44]	@ (80176fc <ip4_input+0x240>)
 80176ce:	2200      	movs	r2, #0
 80176d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80176d2:	4b0a      	ldr	r3, [pc, #40]	@ (80176fc <ip4_input+0x240>)
 80176d4:	2200      	movs	r2, #0
 80176d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80176d8:	4b08      	ldr	r3, [pc, #32]	@ (80176fc <ip4_input+0x240>)
 80176da:	2200      	movs	r2, #0
 80176dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80176de:	4b07      	ldr	r3, [pc, #28]	@ (80176fc <ip4_input+0x240>)
 80176e0:	2200      	movs	r2, #0
 80176e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80176e4:	4b05      	ldr	r3, [pc, #20]	@ (80176fc <ip4_input+0x240>)
 80176e6:	2200      	movs	r2, #0
 80176e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80176ea:	4b04      	ldr	r3, [pc, #16]	@ (80176fc <ip4_input+0x240>)
 80176ec:	2200      	movs	r2, #0
 80176ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80176f0:	2300      	movs	r3, #0
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3718      	adds	r7, #24
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	2400929c 	.word	0x2400929c
 8017700:	2400c390 	.word	0x2400c390

08017704 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b08a      	sub	sp, #40	@ 0x28
 8017708:	af04      	add	r7, sp, #16
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
 8017710:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d009      	beq.n	8017730 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801771c:	68bb      	ldr	r3, [r7, #8]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d003      	beq.n	801772a <ip4_output_if+0x26>
 8017722:	68bb      	ldr	r3, [r7, #8]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d102      	bne.n	8017730 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801772c:	3304      	adds	r3, #4
 801772e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017730:	78fa      	ldrb	r2, [r7, #3]
 8017732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017734:	9302      	str	r3, [sp, #8]
 8017736:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801773a:	9301      	str	r3, [sp, #4]
 801773c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017740:	9300      	str	r3, [sp, #0]
 8017742:	4613      	mov	r3, r2
 8017744:	687a      	ldr	r2, [r7, #4]
 8017746:	6979      	ldr	r1, [r7, #20]
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f000 f805 	bl	8017758 <ip4_output_if_src>
 801774e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017750:	4618      	mov	r0, r3
 8017752:	3718      	adds	r7, #24
 8017754:	46bd      	mov	sp, r7
 8017756:	bd80      	pop	{r7, pc}

08017758 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b088      	sub	sp, #32
 801775c:	af00      	add	r7, sp, #0
 801775e:	60f8      	str	r0, [r7, #12]
 8017760:	60b9      	str	r1, [r7, #8]
 8017762:	607a      	str	r2, [r7, #4]
 8017764:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8017766:	2300      	movs	r3, #0
 8017768:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	7b9b      	ldrb	r3, [r3, #14]
 801776e:	2b01      	cmp	r3, #1
 8017770:	d006      	beq.n	8017780 <ip4_output_if_src+0x28>
 8017772:	4b7d      	ldr	r3, [pc, #500]	@ (8017968 <ip4_output_if_src+0x210>)
 8017774:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017778:	497c      	ldr	r1, [pc, #496]	@ (801796c <ip4_output_if_src+0x214>)
 801777a:	487d      	ldr	r0, [pc, #500]	@ (8017970 <ip4_output_if_src+0x218>)
 801777c:	f001 fd12 	bl	80191a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	f000 80c4 	beq.w	8017910 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8017788:	2314      	movs	r3, #20
 801778a:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801778c:	2114      	movs	r1, #20
 801778e:	68f8      	ldr	r0, [r7, #12]
 8017790:	f7f7 fca4 	bl	800f0dc <pbuf_add_header>
 8017794:	4603      	mov	r3, r0
 8017796:	2b00      	cmp	r3, #0
 8017798:	d002      	beq.n	80177a0 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801779a:	f06f 0301 	mvn.w	r3, #1
 801779e:	e0df      	b.n	8017960 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	895b      	ldrh	r3, [r3, #10]
 80177aa:	2b13      	cmp	r3, #19
 80177ac:	d806      	bhi.n	80177bc <ip4_output_if_src+0x64>
 80177ae:	4b6e      	ldr	r3, [pc, #440]	@ (8017968 <ip4_output_if_src+0x210>)
 80177b0:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80177b4:	496f      	ldr	r1, [pc, #444]	@ (8017974 <ip4_output_if_src+0x21c>)
 80177b6:	486e      	ldr	r0, [pc, #440]	@ (8017970 <ip4_output_if_src+0x218>)
 80177b8:	f001 fcf4 	bl	80191a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80177bc:	69bb      	ldr	r3, [r7, #24]
 80177be:	78fa      	ldrb	r2, [r7, #3]
 80177c0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80177c2:	69bb      	ldr	r3, [r7, #24]
 80177c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80177c8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80177ca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80177ce:	78fb      	ldrb	r3, [r7, #3]
 80177d0:	021b      	lsls	r3, r3, #8
 80177d2:	4313      	orrs	r3, r2
 80177d4:	021b      	lsls	r3, r3, #8
 80177d6:	b21a      	sxth	r2, r3
 80177d8:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80177dc:	78fb      	ldrb	r3, [r7, #3]
 80177de:	021b      	lsls	r3, r3, #8
 80177e0:	430b      	orrs	r3, r1
 80177e2:	121b      	asrs	r3, r3, #8
 80177e4:	b21b      	sxth	r3, r3
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	b21b      	sxth	r3, r3
 80177ea:	4313      	orrs	r3, r2
 80177ec:	b21b      	sxth	r3, r3
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	461a      	mov	r2, r3
 80177f2:	69fb      	ldr	r3, [r7, #28]
 80177f4:	4413      	add	r3, r2
 80177f6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8017800:	69bb      	ldr	r3, [r7, #24]
 8017802:	691b      	ldr	r3, [r3, #16]
 8017804:	b29b      	uxth	r3, r3
 8017806:	69fa      	ldr	r2, [r7, #28]
 8017808:	4413      	add	r3, r2
 801780a:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801780c:	69bb      	ldr	r3, [r7, #24]
 801780e:	691b      	ldr	r3, [r3, #16]
 8017810:	0c1b      	lsrs	r3, r3, #16
 8017812:	69fa      	ldr	r2, [r7, #28]
 8017814:	4413      	add	r3, r2
 8017816:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017818:	8afb      	ldrh	r3, [r7, #22]
 801781a:	089b      	lsrs	r3, r3, #2
 801781c:	b29b      	uxth	r3, r3
 801781e:	b2db      	uxtb	r3, r3
 8017820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017824:	b2da      	uxtb	r2, r3
 8017826:	69bb      	ldr	r3, [r7, #24]
 8017828:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017830:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8017832:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017836:	69bb      	ldr	r3, [r7, #24]
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	021b      	lsls	r3, r3, #8
 801783c:	4313      	orrs	r3, r2
 801783e:	021b      	lsls	r3, r3, #8
 8017840:	b21a      	sxth	r2, r3
 8017842:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8017846:	69bb      	ldr	r3, [r7, #24]
 8017848:	781b      	ldrb	r3, [r3, #0]
 801784a:	021b      	lsls	r3, r3, #8
 801784c:	430b      	orrs	r3, r1
 801784e:	121b      	asrs	r3, r3, #8
 8017850:	b21b      	sxth	r3, r3
 8017852:	b2db      	uxtb	r3, r3
 8017854:	b21b      	sxth	r3, r3
 8017856:	4313      	orrs	r3, r2
 8017858:	b21b      	sxth	r3, r3
 801785a:	b29b      	uxth	r3, r3
 801785c:	461a      	mov	r2, r3
 801785e:	69fb      	ldr	r3, [r7, #28]
 8017860:	4413      	add	r3, r2
 8017862:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	891b      	ldrh	r3, [r3, #8]
 8017868:	4618      	mov	r0, r3
 801786a:	f7f5 ff21 	bl	800d6b0 <lwip_htons>
 801786e:	4603      	mov	r3, r0
 8017870:	461a      	mov	r2, r3
 8017872:	69bb      	ldr	r3, [r7, #24]
 8017874:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8017876:	69bb      	ldr	r3, [r7, #24]
 8017878:	885b      	ldrh	r3, [r3, #2]
 801787a:	b29b      	uxth	r3, r3
 801787c:	461a      	mov	r2, r3
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	4413      	add	r3, r2
 8017882:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	2200      	movs	r2, #0
 8017888:	719a      	strb	r2, [r3, #6]
 801788a:	2200      	movs	r2, #0
 801788c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801788e:	4b3a      	ldr	r3, [pc, #232]	@ (8017978 <ip4_output_if_src+0x220>)
 8017890:	881b      	ldrh	r3, [r3, #0]
 8017892:	4618      	mov	r0, r3
 8017894:	f7f5 ff0c 	bl	800d6b0 <lwip_htons>
 8017898:	4603      	mov	r3, r0
 801789a:	461a      	mov	r2, r3
 801789c:	69bb      	ldr	r3, [r7, #24]
 801789e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80178a0:	69bb      	ldr	r3, [r7, #24]
 80178a2:	889b      	ldrh	r3, [r3, #4]
 80178a4:	b29b      	uxth	r3, r3
 80178a6:	461a      	mov	r2, r3
 80178a8:	69fb      	ldr	r3, [r7, #28]
 80178aa:	4413      	add	r3, r2
 80178ac:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80178ae:	4b32      	ldr	r3, [pc, #200]	@ (8017978 <ip4_output_if_src+0x220>)
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	3301      	adds	r3, #1
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	4b30      	ldr	r3, [pc, #192]	@ (8017978 <ip4_output_if_src+0x220>)
 80178b8:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d104      	bne.n	80178ca <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80178c0:	4b2e      	ldr	r3, [pc, #184]	@ (801797c <ip4_output_if_src+0x224>)
 80178c2:	681a      	ldr	r2, [r3, #0]
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	60da      	str	r2, [r3, #12]
 80178c8:	e003      	b.n	80178d2 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	681a      	ldr	r2, [r3, #0]
 80178ce:	69bb      	ldr	r3, [r7, #24]
 80178d0:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80178d2:	69bb      	ldr	r3, [r7, #24]
 80178d4:	68db      	ldr	r3, [r3, #12]
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	69fa      	ldr	r2, [r7, #28]
 80178da:	4413      	add	r3, r2
 80178dc:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80178de:	69bb      	ldr	r3, [r7, #24]
 80178e0:	68db      	ldr	r3, [r3, #12]
 80178e2:	0c1b      	lsrs	r3, r3, #16
 80178e4:	69fa      	ldr	r2, [r7, #28]
 80178e6:	4413      	add	r3, r2
 80178e8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	0c1a      	lsrs	r2, r3, #16
 80178ee:	69fb      	ldr	r3, [r7, #28]
 80178f0:	b29b      	uxth	r3, r3
 80178f2:	4413      	add	r3, r2
 80178f4:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80178f6:	69fb      	ldr	r3, [r7, #28]
 80178f8:	0c1b      	lsrs	r3, r3, #16
 80178fa:	69fa      	ldr	r2, [r7, #28]
 80178fc:	4413      	add	r3, r2
 80178fe:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8017900:	69fb      	ldr	r3, [r7, #28]
 8017902:	43db      	mvns	r3, r3
 8017904:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8017906:	69fb      	ldr	r3, [r7, #28]
 8017908:	b29a      	uxth	r2, r3
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	815a      	strh	r2, [r3, #10]
 801790e:	e00f      	b.n	8017930 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	895b      	ldrh	r3, [r3, #10]
 8017914:	2b13      	cmp	r3, #19
 8017916:	d802      	bhi.n	801791e <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017918:	f06f 0301 	mvn.w	r3, #1
 801791c:	e020      	b.n	8017960 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017924:	69bb      	ldr	r3, [r7, #24]
 8017926:	691b      	ldr	r3, [r3, #16]
 8017928:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801792a:	f107 0310 	add.w	r3, r7, #16
 801792e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017932:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017934:	2b00      	cmp	r3, #0
 8017936:	d00c      	beq.n	8017952 <ip4_output_if_src+0x1fa>
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	891a      	ldrh	r2, [r3, #8]
 801793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801793e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017940:	429a      	cmp	r2, r3
 8017942:	d906      	bls.n	8017952 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8017944:	687a      	ldr	r2, [r7, #4]
 8017946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017948:	68f8      	ldr	r0, [r7, #12]
 801794a:	f000 fdeb 	bl	8018524 <ip4_frag>
 801794e:	4603      	mov	r3, r0
 8017950:	e006      	b.n	8017960 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017954:	695b      	ldr	r3, [r3, #20]
 8017956:	687a      	ldr	r2, [r7, #4]
 8017958:	68f9      	ldr	r1, [r7, #12]
 801795a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801795c:	4798      	blx	r3
 801795e:	4603      	mov	r3, r0
}
 8017960:	4618      	mov	r0, r3
 8017962:	3720      	adds	r7, #32
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	0801cf68 	.word	0x0801cf68
 801796c:	0801cf9c 	.word	0x0801cf9c
 8017970:	0801cfa8 	.word	0x0801cfa8
 8017974:	0801cfd0 	.word	0x0801cfd0
 8017978:	2400c4ec 	.word	0x2400c4ec
 801797c:	0801e2ac 	.word	0x0801e2ac

08017980 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017980:	b480      	push	{r7}
 8017982:	b085      	sub	sp, #20
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017994:	d002      	beq.n	801799c <ip4_addr_isbroadcast_u32+0x1c>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d101      	bne.n	80179a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801799c:	2301      	movs	r3, #1
 801799e:	e02a      	b.n	80179f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80179a6:	f003 0302 	and.w	r3, r3, #2
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d101      	bne.n	80179b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80179ae:	2300      	movs	r3, #0
 80179b0:	e021      	b.n	80179f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80179b2:	683b      	ldr	r3, [r7, #0]
 80179b4:	3304      	adds	r3, #4
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d101      	bne.n	80179c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80179be:	2300      	movs	r3, #0
 80179c0:	e019      	b.n	80179f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80179c2:	68fa      	ldr	r2, [r7, #12]
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	3304      	adds	r3, #4
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	405a      	eors	r2, r3
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	3308      	adds	r3, #8
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	4013      	ands	r3, r2
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d10d      	bne.n	80179f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	3308      	adds	r3, #8
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	43da      	mvns	r2, r3
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	3308      	adds	r3, #8
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d101      	bne.n	80179f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80179f0:	2301      	movs	r3, #1
 80179f2:	e000      	b.n	80179f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80179f4:	2300      	movs	r3, #0
  }
}
 80179f6:	4618      	mov	r0, r3
 80179f8:	3714      	adds	r7, #20
 80179fa:	46bd      	mov	sp, r7
 80179fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a00:	4770      	bx	lr
	...

08017a04 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b082      	sub	sp, #8
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017a0c:	2210      	movs	r2, #16
 8017a0e:	4904      	ldr	r1, [pc, #16]	@ (8017a20 <ip4addr_ntoa+0x1c>)
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f000 f807 	bl	8017a24 <ip4addr_ntoa_r>
 8017a16:	4603      	mov	r3, r0
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3708      	adds	r7, #8
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	2400c4f0 	.word	0x2400c4f0

08017a24 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b08d      	sub	sp, #52	@ 0x34
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	60f8      	str	r0, [r7, #12]
 8017a2c:	60b9      	str	r1, [r7, #8]
 8017a2e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017a30:	2300      	movs	r3, #0
 8017a32:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8017a3e:	f107 0318 	add.w	r3, r7, #24
 8017a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8017a44:	2300      	movs	r3, #0
 8017a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017a4a:	e058      	b.n	8017afe <ip4addr_ntoa_r+0xda>
    i = 0;
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8017a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a54:	781a      	ldrb	r2, [r3, #0]
 8017a56:	4b32      	ldr	r3, [pc, #200]	@ (8017b20 <ip4addr_ntoa_r+0xfc>)
 8017a58:	fba3 1302 	umull	r1, r3, r3, r2
 8017a5c:	08d9      	lsrs	r1, r3, #3
 8017a5e:	460b      	mov	r3, r1
 8017a60:	009b      	lsls	r3, r3, #2
 8017a62:	440b      	add	r3, r1
 8017a64:	005b      	lsls	r3, r3, #1
 8017a66:	1ad3      	subs	r3, r2, r3
 8017a68:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a6c:	781b      	ldrb	r3, [r3, #0]
 8017a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8017b20 <ip4addr_ntoa_r+0xfc>)
 8017a70:	fba2 2303 	umull	r2, r3, r2, r3
 8017a74:	08db      	lsrs	r3, r3, #3
 8017a76:	b2da      	uxtb	r2, r3
 8017a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017a80:	1c5a      	adds	r2, r3, #1
 8017a82:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8017a86:	4619      	mov	r1, r3
 8017a88:	7ffb      	ldrb	r3, [r7, #31]
 8017a8a:	3330      	adds	r3, #48	@ 0x30
 8017a8c:	b2da      	uxtb	r2, r3
 8017a8e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8017a92:	443b      	add	r3, r7
 8017a94:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8017a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d1d8      	bne.n	8017a52 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017aa0:	e011      	b.n	8017ac6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8017aa2:	6a3b      	ldr	r3, [r7, #32]
 8017aa4:	1c5a      	adds	r2, r3, #1
 8017aa6:	623a      	str	r2, [r7, #32]
 8017aa8:	687a      	ldr	r2, [r7, #4]
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	dc01      	bgt.n	8017ab2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	e030      	b.n	8017b14 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8017ab2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ab8:	1c59      	adds	r1, r3, #1
 8017aba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8017abc:	3230      	adds	r2, #48	@ 0x30
 8017abe:	443a      	add	r2, r7
 8017ac0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8017ac4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8017ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017aca:	1e5a      	subs	r2, r3, #1
 8017acc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d1e6      	bne.n	8017aa2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	1c5a      	adds	r2, r3, #1
 8017ad8:	623a      	str	r2, [r7, #32]
 8017ada:	687a      	ldr	r2, [r7, #4]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	dc01      	bgt.n	8017ae4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	e017      	b.n	8017b14 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8017ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ae6:	1c5a      	adds	r2, r3, #1
 8017ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017aea:	222e      	movs	r2, #46	@ 0x2e
 8017aec:	701a      	strb	r2, [r3, #0]
    ap++;
 8017aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017af0:	3301      	adds	r3, #1
 8017af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8017af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017af8:	3301      	adds	r3, #1
 8017afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017afe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b02:	2b03      	cmp	r3, #3
 8017b04:	d9a2      	bls.n	8017a4c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b08:	3b01      	subs	r3, #1
 8017b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b0e:	2200      	movs	r2, #0
 8017b10:	701a      	strb	r2, [r3, #0]
  return buf;
 8017b12:	68bb      	ldr	r3, [r7, #8]
}
 8017b14:	4618      	mov	r0, r3
 8017b16:	3734      	adds	r7, #52	@ 0x34
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1e:	4770      	bx	lr
 8017b20:	cccccccd 	.word	0xcccccccd

08017b24 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b084      	sub	sp, #16
 8017b28:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017b2e:	4b12      	ldr	r3, [pc, #72]	@ (8017b78 <ip_reass_tmr+0x54>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017b34:	e018      	b.n	8017b68 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	7fdb      	ldrb	r3, [r3, #31]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d00b      	beq.n	8017b56 <ip_reass_tmr+0x32>
      r->timer--;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	7fdb      	ldrb	r3, [r3, #31]
 8017b42:	3b01      	subs	r3, #1
 8017b44:	b2da      	uxtb	r2, r3
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	60fb      	str	r3, [r7, #12]
 8017b54:	e008      	b.n	8017b68 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017b60:	68b9      	ldr	r1, [r7, #8]
 8017b62:	6878      	ldr	r0, [r7, #4]
 8017b64:	f000 f80a 	bl	8017b7c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d1e3      	bne.n	8017b36 <ip_reass_tmr+0x12>
    }
  }
}
 8017b6e:	bf00      	nop
 8017b70:	bf00      	nop
 8017b72:	3710      	adds	r7, #16
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	2400c500 	.word	0x2400c500

08017b7c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b088      	sub	sp, #32
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
 8017b84:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017b86:	2300      	movs	r3, #0
 8017b88:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017b8a:	683a      	ldr	r2, [r7, #0]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d105      	bne.n	8017b9e <ip_reass_free_complete_datagram+0x22>
 8017b92:	4b45      	ldr	r3, [pc, #276]	@ (8017ca8 <ip_reass_free_complete_datagram+0x12c>)
 8017b94:	22ab      	movs	r2, #171	@ 0xab
 8017b96:	4945      	ldr	r1, [pc, #276]	@ (8017cac <ip_reass_free_complete_datagram+0x130>)
 8017b98:	4845      	ldr	r0, [pc, #276]	@ (8017cb0 <ip_reass_free_complete_datagram+0x134>)
 8017b9a:	f001 fb03 	bl	80191a4 <iprintf>
  if (prev != NULL) {
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d00a      	beq.n	8017bba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	687a      	ldr	r2, [r7, #4]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d005      	beq.n	8017bba <ip_reass_free_complete_datagram+0x3e>
 8017bae:	4b3e      	ldr	r3, [pc, #248]	@ (8017ca8 <ip_reass_free_complete_datagram+0x12c>)
 8017bb0:	22ad      	movs	r2, #173	@ 0xad
 8017bb2:	4940      	ldr	r1, [pc, #256]	@ (8017cb4 <ip_reass_free_complete_datagram+0x138>)
 8017bb4:	483e      	ldr	r0, [pc, #248]	@ (8017cb0 <ip_reass_free_complete_datagram+0x134>)
 8017bb6:	f001 faf5 	bl	80191a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	685b      	ldr	r3, [r3, #4]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	889b      	ldrh	r3, [r3, #4]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d12a      	bne.n	8017c22 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	685b      	ldr	r3, [r3, #4]
 8017bd0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017bd2:	697b      	ldr	r3, [r7, #20]
 8017bd4:	681a      	ldr	r2, [r3, #0]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017bda:	69bb      	ldr	r3, [r7, #24]
 8017bdc:	6858      	ldr	r0, [r3, #4]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	3308      	adds	r3, #8
 8017be2:	2214      	movs	r2, #20
 8017be4:	4619      	mov	r1, r3
 8017be6:	f001 fd6c 	bl	80196c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017bea:	2101      	movs	r1, #1
 8017bec:	69b8      	ldr	r0, [r7, #24]
 8017bee:	f7ff fb47 	bl	8017280 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017bf2:	69b8      	ldr	r0, [r7, #24]
 8017bf4:	f7f7 fb96 	bl	800f324 <pbuf_clen>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017bfc:	8bfa      	ldrh	r2, [r7, #30]
 8017bfe:	8a7b      	ldrh	r3, [r7, #18]
 8017c00:	4413      	add	r3, r2
 8017c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017c06:	db05      	blt.n	8017c14 <ip_reass_free_complete_datagram+0x98>
 8017c08:	4b27      	ldr	r3, [pc, #156]	@ (8017ca8 <ip_reass_free_complete_datagram+0x12c>)
 8017c0a:	22bc      	movs	r2, #188	@ 0xbc
 8017c0c:	492a      	ldr	r1, [pc, #168]	@ (8017cb8 <ip_reass_free_complete_datagram+0x13c>)
 8017c0e:	4828      	ldr	r0, [pc, #160]	@ (8017cb0 <ip_reass_free_complete_datagram+0x134>)
 8017c10:	f001 fac8 	bl	80191a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017c14:	8bfa      	ldrh	r2, [r7, #30]
 8017c16:	8a7b      	ldrh	r3, [r7, #18]
 8017c18:	4413      	add	r3, r2
 8017c1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017c1c:	69b8      	ldr	r0, [r7, #24]
 8017c1e:	f7f7 faf3 	bl	800f208 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017c28:	e01f      	b.n	8017c6a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017c2a:	69bb      	ldr	r3, [r7, #24]
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017c34:	697b      	ldr	r3, [r7, #20]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017c3a:	68f8      	ldr	r0, [r7, #12]
 8017c3c:	f7f7 fb72 	bl	800f324 <pbuf_clen>
 8017c40:	4603      	mov	r3, r0
 8017c42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017c44:	8bfa      	ldrh	r2, [r7, #30]
 8017c46:	8a7b      	ldrh	r3, [r7, #18]
 8017c48:	4413      	add	r3, r2
 8017c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017c4e:	db05      	blt.n	8017c5c <ip_reass_free_complete_datagram+0xe0>
 8017c50:	4b15      	ldr	r3, [pc, #84]	@ (8017ca8 <ip_reass_free_complete_datagram+0x12c>)
 8017c52:	22cc      	movs	r2, #204	@ 0xcc
 8017c54:	4918      	ldr	r1, [pc, #96]	@ (8017cb8 <ip_reass_free_complete_datagram+0x13c>)
 8017c56:	4816      	ldr	r0, [pc, #88]	@ (8017cb0 <ip_reass_free_complete_datagram+0x134>)
 8017c58:	f001 faa4 	bl	80191a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017c5c:	8bfa      	ldrh	r2, [r7, #30]
 8017c5e:	8a7b      	ldrh	r3, [r7, #18]
 8017c60:	4413      	add	r3, r2
 8017c62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017c64:	68f8      	ldr	r0, [r7, #12]
 8017c66:	f7f7 facf 	bl	800f208 <pbuf_free>
  while (p != NULL) {
 8017c6a:	69bb      	ldr	r3, [r7, #24]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d1dc      	bne.n	8017c2a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017c70:	6839      	ldr	r1, [r7, #0]
 8017c72:	6878      	ldr	r0, [r7, #4]
 8017c74:	f000 f8c2 	bl	8017dfc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017c78:	4b10      	ldr	r3, [pc, #64]	@ (8017cbc <ip_reass_free_complete_datagram+0x140>)
 8017c7a:	881b      	ldrh	r3, [r3, #0]
 8017c7c:	8bfa      	ldrh	r2, [r7, #30]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d905      	bls.n	8017c8e <ip_reass_free_complete_datagram+0x112>
 8017c82:	4b09      	ldr	r3, [pc, #36]	@ (8017ca8 <ip_reass_free_complete_datagram+0x12c>)
 8017c84:	22d2      	movs	r2, #210	@ 0xd2
 8017c86:	490e      	ldr	r1, [pc, #56]	@ (8017cc0 <ip_reass_free_complete_datagram+0x144>)
 8017c88:	4809      	ldr	r0, [pc, #36]	@ (8017cb0 <ip_reass_free_complete_datagram+0x134>)
 8017c8a:	f001 fa8b 	bl	80191a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8017cbc <ip_reass_free_complete_datagram+0x140>)
 8017c90:	881a      	ldrh	r2, [r3, #0]
 8017c92:	8bfb      	ldrh	r3, [r7, #30]
 8017c94:	1ad3      	subs	r3, r2, r3
 8017c96:	b29a      	uxth	r2, r3
 8017c98:	4b08      	ldr	r3, [pc, #32]	@ (8017cbc <ip_reass_free_complete_datagram+0x140>)
 8017c9a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017c9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3720      	adds	r7, #32
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	0801d000 	.word	0x0801d000
 8017cac:	0801d03c 	.word	0x0801d03c
 8017cb0:	0801d048 	.word	0x0801d048
 8017cb4:	0801d070 	.word	0x0801d070
 8017cb8:	0801d084 	.word	0x0801d084
 8017cbc:	2400c504 	.word	0x2400c504
 8017cc0:	0801d0a4 	.word	0x0801d0a4

08017cc4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b08a      	sub	sp, #40	@ 0x28
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017ce2:	4b28      	ldr	r3, [pc, #160]	@ (8017d84 <ip_reass_remove_oldest_datagram+0xc0>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017ce8:	e030      	b.n	8017d4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cec:	695a      	ldr	r2, [r3, #20]
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	68db      	ldr	r3, [r3, #12]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d10c      	bne.n	8017d10 <ip_reass_remove_oldest_datagram+0x4c>
 8017cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cf8:	699a      	ldr	r2, [r3, #24]
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	691b      	ldr	r3, [r3, #16]
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	d106      	bne.n	8017d10 <ip_reass_remove_oldest_datagram+0x4c>
 8017d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d04:	899a      	ldrh	r2, [r3, #12]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	889b      	ldrh	r3, [r3, #4]
 8017d0a:	b29b      	uxth	r3, r3
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d014      	beq.n	8017d3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017d10:	693b      	ldr	r3, [r7, #16]
 8017d12:	3301      	adds	r3, #1
 8017d14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017d16:	6a3b      	ldr	r3, [r7, #32]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d104      	bne.n	8017d26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017d20:	69fb      	ldr	r3, [r7, #28]
 8017d22:	61bb      	str	r3, [r7, #24]
 8017d24:	e009      	b.n	8017d3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d28:	7fda      	ldrb	r2, [r3, #31]
 8017d2a:	6a3b      	ldr	r3, [r7, #32]
 8017d2c:	7fdb      	ldrb	r3, [r3, #31]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d803      	bhi.n	8017d3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017d36:	69fb      	ldr	r3, [r7, #28]
 8017d38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d001      	beq.n	8017d46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d1cb      	bne.n	8017cea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017d52:	6a3b      	ldr	r3, [r7, #32]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d008      	beq.n	8017d6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017d58:	69b9      	ldr	r1, [r7, #24]
 8017d5a:	6a38      	ldr	r0, [r7, #32]
 8017d5c:	f7ff ff0e 	bl	8017b7c <ip_reass_free_complete_datagram>
 8017d60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017d62:	697a      	ldr	r2, [r7, #20]
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	4413      	add	r3, r2
 8017d68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017d6a:	697a      	ldr	r2, [r7, #20]
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	da02      	bge.n	8017d78 <ip_reass_remove_oldest_datagram+0xb4>
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	2b01      	cmp	r3, #1
 8017d76:	dcac      	bgt.n	8017cd2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017d78:	697b      	ldr	r3, [r7, #20]
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3728      	adds	r7, #40	@ 0x28
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	2400c500 	.word	0x2400c500

08017d88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b084      	sub	sp, #16
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d92:	2004      	movs	r0, #4
 8017d94:	f7f6 fb1e 	bl	800e3d4 <memp_malloc>
 8017d98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d110      	bne.n	8017dc2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017da0:	6839      	ldr	r1, [r7, #0]
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f7ff ff8e 	bl	8017cc4 <ip_reass_remove_oldest_datagram>
 8017da8:	4602      	mov	r2, r0
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	4293      	cmp	r3, r2
 8017dae:	dc03      	bgt.n	8017db8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017db0:	2004      	movs	r0, #4
 8017db2:	f7f6 fb0f 	bl	800e3d4 <memp_malloc>
 8017db6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d101      	bne.n	8017dc2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	e016      	b.n	8017df0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017dc2:	2220      	movs	r2, #32
 8017dc4:	2100      	movs	r1, #0
 8017dc6:	68f8      	ldr	r0, [r7, #12]
 8017dc8:	f001 fb7e 	bl	80194c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	220f      	movs	r2, #15
 8017dd0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017dd2:	4b09      	ldr	r3, [pc, #36]	@ (8017df8 <ip_reass_enqueue_new_datagram+0x70>)
 8017dd4:	681a      	ldr	r2, [r3, #0]
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017dda:	4a07      	ldr	r2, [pc, #28]	@ (8017df8 <ip_reass_enqueue_new_datagram+0x70>)
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	3308      	adds	r3, #8
 8017de4:	2214      	movs	r2, #20
 8017de6:	6879      	ldr	r1, [r7, #4]
 8017de8:	4618      	mov	r0, r3
 8017dea:	f001 fc6a 	bl	80196c2 <memcpy>
  return ipr;
 8017dee:	68fb      	ldr	r3, [r7, #12]
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3710      	adds	r7, #16
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	2400c500 	.word	0x2400c500

08017dfc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b082      	sub	sp, #8
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017e06:	4b10      	ldr	r3, [pc, #64]	@ (8017e48 <ip_reass_dequeue_datagram+0x4c>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	687a      	ldr	r2, [r7, #4]
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	d104      	bne.n	8017e1a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	4a0c      	ldr	r2, [pc, #48]	@ (8017e48 <ip_reass_dequeue_datagram+0x4c>)
 8017e16:	6013      	str	r3, [r2, #0]
 8017e18:	e00d      	b.n	8017e36 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017e1a:	683b      	ldr	r3, [r7, #0]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d106      	bne.n	8017e2e <ip_reass_dequeue_datagram+0x32>
 8017e20:	4b0a      	ldr	r3, [pc, #40]	@ (8017e4c <ip_reass_dequeue_datagram+0x50>)
 8017e22:	f240 1245 	movw	r2, #325	@ 0x145
 8017e26:	490a      	ldr	r1, [pc, #40]	@ (8017e50 <ip_reass_dequeue_datagram+0x54>)
 8017e28:	480a      	ldr	r0, [pc, #40]	@ (8017e54 <ip_reass_dequeue_datagram+0x58>)
 8017e2a:	f001 f9bb 	bl	80191a4 <iprintf>
    prev->next = ipr->next;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681a      	ldr	r2, [r3, #0]
 8017e32:	683b      	ldr	r3, [r7, #0]
 8017e34:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017e36:	6879      	ldr	r1, [r7, #4]
 8017e38:	2004      	movs	r0, #4
 8017e3a:	f7f6 fb41 	bl	800e4c0 <memp_free>
}
 8017e3e:	bf00      	nop
 8017e40:	3708      	adds	r7, #8
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
 8017e46:	bf00      	nop
 8017e48:	2400c500 	.word	0x2400c500
 8017e4c:	0801d000 	.word	0x0801d000
 8017e50:	0801d0c8 	.word	0x0801d0c8
 8017e54:	0801d048 	.word	0x0801d048

08017e58 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b08c      	sub	sp, #48	@ 0x30
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	60f8      	str	r0, [r7, #12]
 8017e60:	60b9      	str	r1, [r7, #8]
 8017e62:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017e64:	2300      	movs	r3, #0
 8017e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017e68:	2301      	movs	r3, #1
 8017e6a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e72:	69fb      	ldr	r3, [r7, #28]
 8017e74:	885b      	ldrh	r3, [r3, #2]
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7f5 fc19 	bl	800d6b0 <lwip_htons>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017e82:	69fb      	ldr	r3, [r7, #28]
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	f003 030f 	and.w	r3, r3, #15
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	009b      	lsls	r3, r3, #2
 8017e8e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017e90:	7e7b      	ldrb	r3, [r7, #25]
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	8b7a      	ldrh	r2, [r7, #26]
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d202      	bcs.n	8017ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017e9e:	e135      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017ea0:	7e7b      	ldrb	r3, [r7, #25]
 8017ea2:	b29b      	uxth	r3, r3
 8017ea4:	8b7a      	ldrh	r2, [r7, #26]
 8017ea6:	1ad3      	subs	r3, r2, r3
 8017ea8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017eaa:	69fb      	ldr	r3, [r7, #28]
 8017eac:	88db      	ldrh	r3, [r3, #6]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7f5 fbfd 	bl	800d6b0 <lwip_htons>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	00db      	lsls	r3, r3, #3
 8017ec0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017ec2:	68bb      	ldr	r3, [r7, #8]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eca:	2200      	movs	r2, #0
 8017ecc:	701a      	strb	r2, [r3, #0]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	705a      	strb	r2, [r3, #1]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	709a      	strb	r2, [r3, #2]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017edc:	8afa      	ldrh	r2, [r7, #22]
 8017ede:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017ee0:	8afa      	ldrh	r2, [r7, #22]
 8017ee2:	8b7b      	ldrh	r3, [r7, #26]
 8017ee4:	4413      	add	r3, r2
 8017ee6:	b29a      	uxth	r2, r3
 8017ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eee:	88db      	ldrh	r3, [r3, #6]
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	8afa      	ldrh	r2, [r7, #22]
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d902      	bls.n	8017efe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017efc:	e106      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f04:	e068      	b.n	8017fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f0e:	889b      	ldrh	r3, [r3, #4]
 8017f10:	b29a      	uxth	r2, r3
 8017f12:	693b      	ldr	r3, [r7, #16]
 8017f14:	889b      	ldrh	r3, [r3, #4]
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d235      	bcs.n	8017f88 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f20:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d020      	beq.n	8017f6a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f2a:	889b      	ldrh	r3, [r3, #4]
 8017f2c:	b29a      	uxth	r2, r3
 8017f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f30:	88db      	ldrh	r3, [r3, #6]
 8017f32:	b29b      	uxth	r3, r3
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d307      	bcc.n	8017f48 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f3a:	88db      	ldrh	r3, [r3, #6]
 8017f3c:	b29a      	uxth	r2, r3
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	889b      	ldrh	r3, [r3, #4]
 8017f42:	b29b      	uxth	r3, r3
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d902      	bls.n	8017f4e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017f4c:	e0de      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f50:	68ba      	ldr	r2, [r7, #8]
 8017f52:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f56:	88db      	ldrh	r3, [r3, #6]
 8017f58:	b29a      	uxth	r2, r3
 8017f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f5c:	889b      	ldrh	r3, [r3, #4]
 8017f5e:	b29b      	uxth	r3, r3
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d03d      	beq.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f64:	2300      	movs	r3, #0
 8017f66:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017f68:	e03a      	b.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f6c:	88db      	ldrh	r3, [r3, #6]
 8017f6e:	b29a      	uxth	r2, r3
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	889b      	ldrh	r3, [r3, #4]
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d902      	bls.n	8017f80 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017f7e:	e0c5      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	68ba      	ldr	r2, [r7, #8]
 8017f84:	605a      	str	r2, [r3, #4]
      break;
 8017f86:	e02b      	b.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8a:	889b      	ldrh	r3, [r3, #4]
 8017f8c:	b29a      	uxth	r2, r3
 8017f8e:	693b      	ldr	r3, [r7, #16]
 8017f90:	889b      	ldrh	r3, [r3, #4]
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d102      	bne.n	8017f9e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017f9c:	e0b6      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fa0:	889b      	ldrh	r3, [r3, #4]
 8017fa2:	b29a      	uxth	r2, r3
 8017fa4:	693b      	ldr	r3, [r7, #16]
 8017fa6:	88db      	ldrh	r3, [r3, #6]
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d202      	bcs.n	8017fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017fb2:	e0ab      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d009      	beq.n	8017fce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fbc:	88db      	ldrh	r3, [r3, #6]
 8017fbe:	b29a      	uxth	r2, r3
 8017fc0:	693b      	ldr	r3, [r7, #16]
 8017fc2:	889b      	ldrh	r3, [r3, #4]
 8017fc4:	b29b      	uxth	r3, r3
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d001      	beq.n	8017fce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017fce:	693b      	ldr	r3, [r7, #16]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017fd4:	693b      	ldr	r3, [r7, #16]
 8017fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d193      	bne.n	8017f06 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017fde:	e000      	b.n	8017fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017fe0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d12d      	bne.n	8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d01c      	beq.n	8018028 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ff0:	88db      	ldrh	r3, [r3, #6]
 8017ff2:	b29a      	uxth	r2, r3
 8017ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ff6:	889b      	ldrh	r3, [r3, #4]
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d906      	bls.n	801800c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017ffe:	4b45      	ldr	r3, [pc, #276]	@ (8018114 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018000:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018004:	4944      	ldr	r1, [pc, #272]	@ (8018118 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018006:	4845      	ldr	r0, [pc, #276]	@ (801811c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018008:	f001 f8cc 	bl	80191a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801800e:	68ba      	ldr	r2, [r7, #8]
 8018010:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018014:	88db      	ldrh	r3, [r3, #6]
 8018016:	b29a      	uxth	r2, r3
 8018018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801801a:	889b      	ldrh	r3, [r3, #4]
 801801c:	b29b      	uxth	r3, r3
 801801e:	429a      	cmp	r2, r3
 8018020:	d010      	beq.n	8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018022:	2300      	movs	r3, #0
 8018024:	623b      	str	r3, [r7, #32]
 8018026:	e00d      	b.n	8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d006      	beq.n	801803e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018030:	4b38      	ldr	r3, [pc, #224]	@ (8018114 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018032:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018036:	493a      	ldr	r1, [pc, #232]	@ (8018120 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018038:	4838      	ldr	r0, [pc, #224]	@ (801811c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801803a:	f001 f8b3 	bl	80191a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	68ba      	ldr	r2, [r7, #8]
 8018042:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d105      	bne.n	8018056 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	7f9b      	ldrb	r3, [r3, #30]
 801804e:	f003 0301 	and.w	r3, r3, #1
 8018052:	2b00      	cmp	r3, #0
 8018054:	d059      	beq.n	801810a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018056:	6a3b      	ldr	r3, [r7, #32]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d04f      	beq.n	80180fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	685b      	ldr	r3, [r3, #4]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d006      	beq.n	8018072 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	889b      	ldrh	r3, [r3, #4]
 801806c:	b29b      	uxth	r3, r3
 801806e:	2b00      	cmp	r3, #0
 8018070:	d002      	beq.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018072:	2300      	movs	r3, #0
 8018074:	623b      	str	r3, [r7, #32]
 8018076:	e041      	b.n	80180fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801807a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018082:	e012      	b.n	80180aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018086:	685b      	ldr	r3, [r3, #4]
 8018088:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801808c:	88db      	ldrh	r3, [r3, #6]
 801808e:	b29a      	uxth	r2, r3
 8018090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018092:	889b      	ldrh	r3, [r3, #4]
 8018094:	b29b      	uxth	r3, r3
 8018096:	429a      	cmp	r2, r3
 8018098:	d002      	beq.n	80180a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801809a:	2300      	movs	r3, #0
 801809c:	623b      	str	r3, [r7, #32]
            break;
 801809e:	e007      	b.n	80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80180a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80180a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80180aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d1e9      	bne.n	8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80180b0:	6a3b      	ldr	r3, [r7, #32]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d022      	beq.n	80180fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	685b      	ldr	r3, [r3, #4]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d106      	bne.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80180be:	4b15      	ldr	r3, [pc, #84]	@ (8018114 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80180c0:	f240 12df 	movw	r2, #479	@ 0x1df
 80180c4:	4917      	ldr	r1, [pc, #92]	@ (8018124 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80180c6:	4815      	ldr	r0, [pc, #84]	@ (801811c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180c8:	f001 f86c 	bl	80191a4 <iprintf>
          LWIP_ASSERT("sanity check",
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	685b      	ldr	r3, [r3, #4]
 80180d0:	685b      	ldr	r3, [r3, #4]
 80180d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d106      	bne.n	80180e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80180d8:	4b0e      	ldr	r3, [pc, #56]	@ (8018114 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80180da:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80180de:	4911      	ldr	r1, [pc, #68]	@ (8018124 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80180e0:	480e      	ldr	r0, [pc, #56]	@ (801811c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180e2:	f001 f85f 	bl	80191a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80180e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d006      	beq.n	80180fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80180ee:	4b09      	ldr	r3, [pc, #36]	@ (8018114 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80180f0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80180f4:	490c      	ldr	r1, [pc, #48]	@ (8018128 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80180f6:	4809      	ldr	r0, [pc, #36]	@ (801811c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180f8:	f001 f854 	bl	80191a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80180fc:	6a3b      	ldr	r3, [r7, #32]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	bf14      	ite	ne
 8018102:	2301      	movne	r3, #1
 8018104:	2300      	moveq	r3, #0
 8018106:	b2db      	uxtb	r3, r3
 8018108:	e000      	b.n	801810c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801810a:	2300      	movs	r3, #0
}
 801810c:	4618      	mov	r0, r3
 801810e:	3730      	adds	r7, #48	@ 0x30
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}
 8018114:	0801d000 	.word	0x0801d000
 8018118:	0801d0e4 	.word	0x0801d0e4
 801811c:	0801d048 	.word	0x0801d048
 8018120:	0801d104 	.word	0x0801d104
 8018124:	0801d13c 	.word	0x0801d13c
 8018128:	0801d14c 	.word	0x0801d14c

0801812c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b08e      	sub	sp, #56	@ 0x38
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	685b      	ldr	r3, [r3, #4]
 8018138:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	f003 030f 	and.w	r3, r3, #15
 8018142:	b2db      	uxtb	r3, r3
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	b2db      	uxtb	r3, r3
 8018148:	2b14      	cmp	r3, #20
 801814a:	f040 8179 	bne.w	8018440 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018150:	88db      	ldrh	r3, [r3, #6]
 8018152:	b29b      	uxth	r3, r3
 8018154:	4618      	mov	r0, r3
 8018156:	f7f5 faab 	bl	800d6b0 <lwip_htons>
 801815a:	4603      	mov	r3, r0
 801815c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018160:	b29b      	uxth	r3, r3
 8018162:	00db      	lsls	r3, r3, #3
 8018164:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018168:	885b      	ldrh	r3, [r3, #2]
 801816a:	b29b      	uxth	r3, r3
 801816c:	4618      	mov	r0, r3
 801816e:	f7f5 fa9f 	bl	800d6b0 <lwip_htons>
 8018172:	4603      	mov	r3, r0
 8018174:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018178:	781b      	ldrb	r3, [r3, #0]
 801817a:	f003 030f 	and.w	r3, r3, #15
 801817e:	b2db      	uxtb	r3, r3
 8018180:	009b      	lsls	r3, r3, #2
 8018182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018186:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801818a:	b29b      	uxth	r3, r3
 801818c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801818e:	429a      	cmp	r2, r3
 8018190:	f0c0 8158 	bcc.w	8018444 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018198:	b29b      	uxth	r3, r3
 801819a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801819c:	1ad3      	subs	r3, r2, r3
 801819e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f7f7 f8bf 	bl	800f324 <pbuf_clen>
 80181a6:	4603      	mov	r3, r0
 80181a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80181aa:	4b90      	ldr	r3, [pc, #576]	@ (80183ec <ip4_reass+0x2c0>)
 80181ac:	881b      	ldrh	r3, [r3, #0]
 80181ae:	461a      	mov	r2, r3
 80181b0:	8c3b      	ldrh	r3, [r7, #32]
 80181b2:	4413      	add	r3, r2
 80181b4:	2b0a      	cmp	r3, #10
 80181b6:	dd10      	ble.n	80181da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80181b8:	8c3b      	ldrh	r3, [r7, #32]
 80181ba:	4619      	mov	r1, r3
 80181bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80181be:	f7ff fd81 	bl	8017cc4 <ip_reass_remove_oldest_datagram>
 80181c2:	4603      	mov	r3, r0
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	f000 813f 	beq.w	8018448 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80181ca:	4b88      	ldr	r3, [pc, #544]	@ (80183ec <ip4_reass+0x2c0>)
 80181cc:	881b      	ldrh	r3, [r3, #0]
 80181ce:	461a      	mov	r2, r3
 80181d0:	8c3b      	ldrh	r3, [r7, #32]
 80181d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80181d4:	2b0a      	cmp	r3, #10
 80181d6:	f300 8137 	bgt.w	8018448 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80181da:	4b85      	ldr	r3, [pc, #532]	@ (80183f0 <ip4_reass+0x2c4>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	633b      	str	r3, [r7, #48]	@ 0x30
 80181e0:	e015      	b.n	801820e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80181e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181e4:	695a      	ldr	r2, [r3, #20]
 80181e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181e8:	68db      	ldr	r3, [r3, #12]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d10c      	bne.n	8018208 <ip4_reass+0xdc>
 80181ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181f0:	699a      	ldr	r2, [r3, #24]
 80181f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181f4:	691b      	ldr	r3, [r3, #16]
 80181f6:	429a      	cmp	r2, r3
 80181f8:	d106      	bne.n	8018208 <ip4_reass+0xdc>
 80181fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181fc:	899a      	ldrh	r2, [r3, #12]
 80181fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018200:	889b      	ldrh	r3, [r3, #4]
 8018202:	b29b      	uxth	r3, r3
 8018204:	429a      	cmp	r2, r3
 8018206:	d006      	beq.n	8018216 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	633b      	str	r3, [r7, #48]	@ 0x30
 801820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018210:	2b00      	cmp	r3, #0
 8018212:	d1e6      	bne.n	80181e2 <ip4_reass+0xb6>
 8018214:	e000      	b.n	8018218 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018216:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801821a:	2b00      	cmp	r3, #0
 801821c:	d109      	bne.n	8018232 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801821e:	8c3b      	ldrh	r3, [r7, #32]
 8018220:	4619      	mov	r1, r3
 8018222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018224:	f7ff fdb0 	bl	8017d88 <ip_reass_enqueue_new_datagram>
 8018228:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801822c:	2b00      	cmp	r3, #0
 801822e:	d11c      	bne.n	801826a <ip4_reass+0x13e>
      goto nullreturn;
 8018230:	e10d      	b.n	801844e <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018234:	88db      	ldrh	r3, [r3, #6]
 8018236:	b29b      	uxth	r3, r3
 8018238:	4618      	mov	r0, r3
 801823a:	f7f5 fa39 	bl	800d6b0 <lwip_htons>
 801823e:	4603      	mov	r3, r0
 8018240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018244:	2b00      	cmp	r3, #0
 8018246:	d110      	bne.n	801826a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801824a:	89db      	ldrh	r3, [r3, #14]
 801824c:	4618      	mov	r0, r3
 801824e:	f7f5 fa2f 	bl	800d6b0 <lwip_htons>
 8018252:	4603      	mov	r3, r0
 8018254:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018258:	2b00      	cmp	r3, #0
 801825a:	d006      	beq.n	801826a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801825e:	3308      	adds	r3, #8
 8018260:	2214      	movs	r2, #20
 8018262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018264:	4618      	mov	r0, r3
 8018266:	f001 fa2c 	bl	80196c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801826c:	88db      	ldrh	r3, [r3, #6]
 801826e:	b29b      	uxth	r3, r3
 8018270:	f003 0320 	and.w	r3, r3, #32
 8018274:	2b00      	cmp	r3, #0
 8018276:	bf0c      	ite	eq
 8018278:	2301      	moveq	r3, #1
 801827a:	2300      	movne	r3, #0
 801827c:	b2db      	uxtb	r3, r3
 801827e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d00e      	beq.n	80182a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018286:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018288:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801828a:	4413      	add	r3, r2
 801828c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801828e:	8b7a      	ldrh	r2, [r7, #26]
 8018290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018292:	429a      	cmp	r2, r3
 8018294:	f0c0 80a8 	bcc.w	80183e8 <ip4_reass+0x2bc>
 8018298:	8b7b      	ldrh	r3, [r7, #26]
 801829a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801829e:	4293      	cmp	r3, r2
 80182a0:	f200 80a2 	bhi.w	80183e8 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80182a4:	69fa      	ldr	r2, [r7, #28]
 80182a6:	6879      	ldr	r1, [r7, #4]
 80182a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80182aa:	f7ff fdd5 	bl	8017e58 <ip_reass_chain_frag_into_datagram_and_validate>
 80182ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80182b6:	f000 80a3 	beq.w	8018400 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80182ba:	4b4c      	ldr	r3, [pc, #304]	@ (80183ec <ip4_reass+0x2c0>)
 80182bc:	881a      	ldrh	r2, [r3, #0]
 80182be:	8c3b      	ldrh	r3, [r7, #32]
 80182c0:	4413      	add	r3, r2
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	4b49      	ldr	r3, [pc, #292]	@ (80183ec <ip4_reass+0x2c0>)
 80182c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80182c8:	69fb      	ldr	r3, [r7, #28]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d00d      	beq.n	80182ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80182ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80182d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80182d2:	4413      	add	r3, r2
 80182d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80182d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182d8:	8a7a      	ldrh	r2, [r7, #18]
 80182da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80182dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182de:	7f9b      	ldrb	r3, [r3, #30]
 80182e0:	f043 0301 	orr.w	r3, r3, #1
 80182e4:	b2da      	uxtb	r2, r3
 80182e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	2b01      	cmp	r3, #1
 80182ee:	d179      	bne.n	80183e4 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80182f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182f2:	8b9b      	ldrh	r3, [r3, #28]
 80182f4:	3314      	adds	r3, #20
 80182f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80182f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	685b      	ldr	r3, [r3, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	685b      	ldr	r3, [r3, #4]
 8018308:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801830c:	3308      	adds	r3, #8
 801830e:	2214      	movs	r2, #20
 8018310:	4619      	mov	r1, r3
 8018312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018314:	f001 f9d5 	bl	80196c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018318:	8a3b      	ldrh	r3, [r7, #16]
 801831a:	4618      	mov	r0, r3
 801831c:	f7f5 f9c8 	bl	800d6b0 <lwip_htons>
 8018320:	4603      	mov	r3, r0
 8018322:	461a      	mov	r2, r3
 8018324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018326:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801832a:	2200      	movs	r2, #0
 801832c:	719a      	strb	r2, [r3, #6]
 801832e:	2200      	movs	r2, #0
 8018330:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018334:	2200      	movs	r2, #0
 8018336:	729a      	strb	r2, [r3, #10]
 8018338:	2200      	movs	r2, #0
 801833a:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801833c:	2114      	movs	r1, #20
 801833e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018340:	f7f5 fb34 	bl	800d9ac <inet_chksum>
 8018344:	4603      	mov	r3, r0
 8018346:	461a      	mov	r2, r3
 8018348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801834a:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018352:	e00d      	b.n	8018370 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8018354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018356:	685b      	ldr	r3, [r3, #4]
 8018358:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801835a:	2114      	movs	r1, #20
 801835c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801835e:	f7f6 fecd 	bl	800f0fc <pbuf_remove_header>
      pbuf_cat(p, r);
 8018362:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018364:	6878      	ldr	r0, [r7, #4]
 8018366:	f7f7 f81d 	bl	800f3a4 <pbuf_cat>
      r = iprh->next_pbuf;
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018372:	2b00      	cmp	r3, #0
 8018374:	d1ee      	bne.n	8018354 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018376:	4b1e      	ldr	r3, [pc, #120]	@ (80183f0 <ip4_reass+0x2c4>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801837c:	429a      	cmp	r2, r3
 801837e:	d102      	bne.n	8018386 <ip4_reass+0x25a>
      ipr_prev = NULL;
 8018380:	2300      	movs	r3, #0
 8018382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018384:	e010      	b.n	80183a8 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018386:	4b1a      	ldr	r3, [pc, #104]	@ (80183f0 <ip4_reass+0x2c4>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801838c:	e007      	b.n	801839e <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801838e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018394:	429a      	cmp	r2, r3
 8018396:	d006      	beq.n	80183a6 <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1f4      	bne.n	801838e <ip4_reass+0x262>
 80183a4:	e000      	b.n	80183a8 <ip4_reass+0x27c>
          break;
 80183a6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80183a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80183aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80183ac:	f7ff fd26 	bl	8017dfc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80183b0:	6878      	ldr	r0, [r7, #4]
 80183b2:	f7f6 ffb7 	bl	800f324 <pbuf_clen>
 80183b6:	4603      	mov	r3, r0
 80183b8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80183ba:	4b0c      	ldr	r3, [pc, #48]	@ (80183ec <ip4_reass+0x2c0>)
 80183bc:	881b      	ldrh	r3, [r3, #0]
 80183be:	8c3a      	ldrh	r2, [r7, #32]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d906      	bls.n	80183d2 <ip4_reass+0x2a6>
 80183c4:	4b0b      	ldr	r3, [pc, #44]	@ (80183f4 <ip4_reass+0x2c8>)
 80183c6:	f240 229b 	movw	r2, #667	@ 0x29b
 80183ca:	490b      	ldr	r1, [pc, #44]	@ (80183f8 <ip4_reass+0x2cc>)
 80183cc:	480b      	ldr	r0, [pc, #44]	@ (80183fc <ip4_reass+0x2d0>)
 80183ce:	f000 fee9 	bl	80191a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80183d2:	4b06      	ldr	r3, [pc, #24]	@ (80183ec <ip4_reass+0x2c0>)
 80183d4:	881a      	ldrh	r2, [r3, #0]
 80183d6:	8c3b      	ldrh	r3, [r7, #32]
 80183d8:	1ad3      	subs	r3, r2, r3
 80183da:	b29a      	uxth	r2, r3
 80183dc:	4b03      	ldr	r3, [pc, #12]	@ (80183ec <ip4_reass+0x2c0>)
 80183de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	e038      	b.n	8018456 <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80183e4:	2300      	movs	r3, #0
 80183e6:	e036      	b.n	8018456 <ip4_reass+0x32a>
      goto nullreturn_ipr;
 80183e8:	bf00      	nop
 80183ea:	e00a      	b.n	8018402 <ip4_reass+0x2d6>
 80183ec:	2400c504 	.word	0x2400c504
 80183f0:	2400c500 	.word	0x2400c500
 80183f4:	0801d000 	.word	0x0801d000
 80183f8:	0801d170 	.word	0x0801d170
 80183fc:	0801d048 	.word	0x0801d048
    goto nullreturn_ipr;
 8018400:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018404:	2b00      	cmp	r3, #0
 8018406:	d106      	bne.n	8018416 <ip4_reass+0x2ea>
 8018408:	4b15      	ldr	r3, [pc, #84]	@ (8018460 <ip4_reass+0x334>)
 801840a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801840e:	4915      	ldr	r1, [pc, #84]	@ (8018464 <ip4_reass+0x338>)
 8018410:	4815      	ldr	r0, [pc, #84]	@ (8018468 <ip4_reass+0x33c>)
 8018412:	f000 fec7 	bl	80191a4 <iprintf>
  if (ipr->p == NULL) {
 8018416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018418:	685b      	ldr	r3, [r3, #4]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d116      	bne.n	801844c <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801841e:	4b13      	ldr	r3, [pc, #76]	@ (801846c <ip4_reass+0x340>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018424:	429a      	cmp	r2, r3
 8018426:	d006      	beq.n	8018436 <ip4_reass+0x30a>
 8018428:	4b0d      	ldr	r3, [pc, #52]	@ (8018460 <ip4_reass+0x334>)
 801842a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801842e:	4910      	ldr	r1, [pc, #64]	@ (8018470 <ip4_reass+0x344>)
 8018430:	480d      	ldr	r0, [pc, #52]	@ (8018468 <ip4_reass+0x33c>)
 8018432:	f000 feb7 	bl	80191a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018436:	2100      	movs	r1, #0
 8018438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801843a:	f7ff fcdf 	bl	8017dfc <ip_reass_dequeue_datagram>
 801843e:	e006      	b.n	801844e <ip4_reass+0x322>
    goto nullreturn;
 8018440:	bf00      	nop
 8018442:	e004      	b.n	801844e <ip4_reass+0x322>
    goto nullreturn;
 8018444:	bf00      	nop
 8018446:	e002      	b.n	801844e <ip4_reass+0x322>
      goto nullreturn;
 8018448:	bf00      	nop
 801844a:	e000      	b.n	801844e <ip4_reass+0x322>
  }

nullreturn:
 801844c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7f6 feda 	bl	800f208 <pbuf_free>
  return NULL;
 8018454:	2300      	movs	r3, #0
}
 8018456:	4618      	mov	r0, r3
 8018458:	3738      	adds	r7, #56	@ 0x38
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}
 801845e:	bf00      	nop
 8018460:	0801d000 	.word	0x0801d000
 8018464:	0801d18c 	.word	0x0801d18c
 8018468:	0801d048 	.word	0x0801d048
 801846c:	2400c500 	.word	0x2400c500
 8018470:	0801d198 	.word	0x0801d198

08018474 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018478:	2005      	movs	r0, #5
 801847a:	f7f5 ffab 	bl	800e3d4 <memp_malloc>
 801847e:	4603      	mov	r3, r0
}
 8018480:	4618      	mov	r0, r3
 8018482:	bd80      	pop	{r7, pc}

08018484 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b082      	sub	sp, #8
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d106      	bne.n	80184a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018492:	4b07      	ldr	r3, [pc, #28]	@ (80184b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018494:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018498:	4906      	ldr	r1, [pc, #24]	@ (80184b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801849a:	4807      	ldr	r0, [pc, #28]	@ (80184b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801849c:	f000 fe82 	bl	80191a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80184a0:	6879      	ldr	r1, [r7, #4]
 80184a2:	2005      	movs	r0, #5
 80184a4:	f7f6 f80c 	bl	800e4c0 <memp_free>
}
 80184a8:	bf00      	nop
 80184aa:	3708      	adds	r7, #8
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	0801d000 	.word	0x0801d000
 80184b4:	0801d1b8 	.word	0x0801d1b8
 80184b8:	0801d048 	.word	0x0801d048

080184bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b084      	sub	sp, #16
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d106      	bne.n	80184dc <ipfrag_free_pbuf_custom+0x20>
 80184ce:	4b11      	ldr	r3, [pc, #68]	@ (8018514 <ipfrag_free_pbuf_custom+0x58>)
 80184d0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80184d4:	4910      	ldr	r1, [pc, #64]	@ (8018518 <ipfrag_free_pbuf_custom+0x5c>)
 80184d6:	4811      	ldr	r0, [pc, #68]	@ (801851c <ipfrag_free_pbuf_custom+0x60>)
 80184d8:	f000 fe64 	bl	80191a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80184dc:	68fa      	ldr	r2, [r7, #12]
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d006      	beq.n	80184f2 <ipfrag_free_pbuf_custom+0x36>
 80184e4:	4b0b      	ldr	r3, [pc, #44]	@ (8018514 <ipfrag_free_pbuf_custom+0x58>)
 80184e6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80184ea:	490d      	ldr	r1, [pc, #52]	@ (8018520 <ipfrag_free_pbuf_custom+0x64>)
 80184ec:	480b      	ldr	r0, [pc, #44]	@ (801851c <ipfrag_free_pbuf_custom+0x60>)
 80184ee:	f000 fe59 	bl	80191a4 <iprintf>
  if (pcr->original != NULL) {
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	695b      	ldr	r3, [r3, #20]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d004      	beq.n	8018504 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	695b      	ldr	r3, [r3, #20]
 80184fe:	4618      	mov	r0, r3
 8018500:	f7f6 fe82 	bl	800f208 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018504:	68f8      	ldr	r0, [r7, #12]
 8018506:	f7ff ffbd 	bl	8018484 <ip_frag_free_pbuf_custom_ref>
}
 801850a:	bf00      	nop
 801850c:	3710      	adds	r7, #16
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	0801d000 	.word	0x0801d000
 8018518:	0801d1c4 	.word	0x0801d1c4
 801851c:	0801d048 	.word	0x0801d048
 8018520:	0801d1d0 	.word	0x0801d1d0

08018524 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b094      	sub	sp, #80	@ 0x50
 8018528:	af02      	add	r7, sp, #8
 801852a:	60f8      	str	r0, [r7, #12]
 801852c:	60b9      	str	r1, [r7, #8]
 801852e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018530:	2300      	movs	r3, #0
 8018532:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801853a:	3b14      	subs	r3, #20
 801853c:	2b00      	cmp	r3, #0
 801853e:	da00      	bge.n	8018542 <ip4_frag+0x1e>
 8018540:	3307      	adds	r3, #7
 8018542:	10db      	asrs	r3, r3, #3
 8018544:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018546:	2314      	movs	r3, #20
 8018548:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018552:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	f003 030f 	and.w	r3, r3, #15
 801855c:	b2db      	uxtb	r3, r3
 801855e:	009b      	lsls	r3, r3, #2
 8018560:	b2db      	uxtb	r3, r3
 8018562:	2b14      	cmp	r3, #20
 8018564:	d002      	beq.n	801856c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018566:	f06f 0305 	mvn.w	r3, #5
 801856a:	e118      	b.n	801879e <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	895b      	ldrh	r3, [r3, #10]
 8018570:	2b13      	cmp	r3, #19
 8018572:	d809      	bhi.n	8018588 <ip4_frag+0x64>
 8018574:	4b8c      	ldr	r3, [pc, #560]	@ (80187a8 <ip4_frag+0x284>)
 8018576:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801857a:	498c      	ldr	r1, [pc, #560]	@ (80187ac <ip4_frag+0x288>)
 801857c:	488c      	ldr	r0, [pc, #560]	@ (80187b0 <ip4_frag+0x28c>)
 801857e:	f000 fe11 	bl	80191a4 <iprintf>
 8018582:	f06f 0305 	mvn.w	r3, #5
 8018586:	e10a      	b.n	801879e <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801858a:	88db      	ldrh	r3, [r3, #6]
 801858c:	b29b      	uxth	r3, r3
 801858e:	4618      	mov	r0, r3
 8018590:	f7f5 f88e 	bl	800d6b0 <lwip_htons>
 8018594:	4603      	mov	r3, r0
 8018596:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018598:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801859a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801859e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80185a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80185a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80185a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	891b      	ldrh	r3, [r3, #8]
 80185ae:	3b14      	subs	r3, #20
 80185b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80185b4:	e0e9      	b.n	801878a <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80185b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80185b8:	00db      	lsls	r3, r3, #3
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80185c0:	4293      	cmp	r3, r2
 80185c2:	bf28      	it	cs
 80185c4:	4613      	movcs	r3, r2
 80185c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80185c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80185cc:	2114      	movs	r1, #20
 80185ce:	200e      	movs	r0, #14
 80185d0:	f7f6 fb36 	bl	800ec40 <pbuf_alloc>
 80185d4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80185d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185d8:	2b00      	cmp	r3, #0
 80185da:	f000 80dd 	beq.w	8018798 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80185de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e0:	895b      	ldrh	r3, [r3, #10]
 80185e2:	2b13      	cmp	r3, #19
 80185e4:	d806      	bhi.n	80185f4 <ip4_frag+0xd0>
 80185e6:	4b70      	ldr	r3, [pc, #448]	@ (80187a8 <ip4_frag+0x284>)
 80185e8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80185ec:	4971      	ldr	r1, [pc, #452]	@ (80187b4 <ip4_frag+0x290>)
 80185ee:	4870      	ldr	r0, [pc, #448]	@ (80187b0 <ip4_frag+0x28c>)
 80185f0:	f000 fdd8 	bl	80191a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80185f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	2214      	movs	r2, #20
 80185fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80185fc:	4618      	mov	r0, r3
 80185fe:	f001 f860 	bl	80196c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018604:	685b      	ldr	r3, [r3, #4]
 8018606:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018608:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801860a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801860e:	e064      	b.n	80186da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	895a      	ldrh	r2, [r3, #10]
 8018614:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018616:	1ad3      	subs	r3, r2, r3
 8018618:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	895b      	ldrh	r3, [r3, #10]
 801861e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018620:	429a      	cmp	r2, r3
 8018622:	d906      	bls.n	8018632 <ip4_frag+0x10e>
 8018624:	4b60      	ldr	r3, [pc, #384]	@ (80187a8 <ip4_frag+0x284>)
 8018626:	f240 322d 	movw	r2, #813	@ 0x32d
 801862a:	4963      	ldr	r1, [pc, #396]	@ (80187b8 <ip4_frag+0x294>)
 801862c:	4860      	ldr	r0, [pc, #384]	@ (80187b0 <ip4_frag+0x28c>)
 801862e:	f000 fdb9 	bl	80191a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018632:	8bfa      	ldrh	r2, [r7, #30]
 8018634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018638:	4293      	cmp	r3, r2
 801863a:	bf28      	it	cs
 801863c:	4613      	movcs	r3, r2
 801863e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018642:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018646:	2b00      	cmp	r3, #0
 8018648:	d105      	bne.n	8018656 <ip4_frag+0x132>
        poff = 0;
 801864a:	2300      	movs	r3, #0
 801864c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	60fb      	str	r3, [r7, #12]
        continue;
 8018654:	e041      	b.n	80186da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018656:	f7ff ff0d 	bl	8018474 <ip_frag_alloc_pbuf_custom_ref>
 801865a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801865c:	69bb      	ldr	r3, [r7, #24]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d103      	bne.n	801866a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018664:	f7f6 fdd0 	bl	800f208 <pbuf_free>
        goto memerr;
 8018668:	e097      	b.n	801879a <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801866a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018670:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018672:	4413      	add	r3, r2
 8018674:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018678:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801867c:	9201      	str	r2, [sp, #4]
 801867e:	9300      	str	r3, [sp, #0]
 8018680:	4603      	mov	r3, r0
 8018682:	2241      	movs	r2, #65	@ 0x41
 8018684:	2000      	movs	r0, #0
 8018686:	f7f6 fc05 	bl	800ee94 <pbuf_alloced_custom>
 801868a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d106      	bne.n	80186a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018692:	69b8      	ldr	r0, [r7, #24]
 8018694:	f7ff fef6 	bl	8018484 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018698:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801869a:	f7f6 fdb5 	bl	800f208 <pbuf_free>
        goto memerr;
 801869e:	e07c      	b.n	801879a <ip4_frag+0x276>
      }
      pbuf_ref(p);
 80186a0:	68f8      	ldr	r0, [r7, #12]
 80186a2:	f7f6 fe57 	bl	800f354 <pbuf_ref>
      pcr->original = p;
 80186a6:	69bb      	ldr	r3, [r7, #24]
 80186a8:	68fa      	ldr	r2, [r7, #12]
 80186aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80186ac:	69bb      	ldr	r3, [r7, #24]
 80186ae:	4a43      	ldr	r2, [pc, #268]	@ (80187bc <ip4_frag+0x298>)
 80186b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80186b2:	6979      	ldr	r1, [r7, #20]
 80186b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80186b6:	f7f6 fe75 	bl	800f3a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80186ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80186be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80186c2:	1ad3      	subs	r3, r2, r3
 80186c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80186c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d004      	beq.n	80186da <ip4_frag+0x1b6>
        poff = 0;
 80186d0:	2300      	movs	r3, #0
 80186d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80186da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d196      	bne.n	8018610 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80186e2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80186e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80186e8:	4413      	add	r3, r2
 80186ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80186f0:	f1a3 0213 	sub.w	r2, r3, #19
 80186f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80186f8:	429a      	cmp	r2, r3
 80186fa:	bfcc      	ite	gt
 80186fc:	2301      	movgt	r3, #1
 80186fe:	2300      	movle	r3, #0
 8018700:	b2db      	uxtb	r3, r3
 8018702:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018704:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801870c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801870e:	6a3b      	ldr	r3, [r7, #32]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d002      	beq.n	801871a <ip4_frag+0x1f6>
 8018714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018716:	2b00      	cmp	r3, #0
 8018718:	d003      	beq.n	8018722 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801871a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801871c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018720:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018722:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018724:	4618      	mov	r0, r3
 8018726:	f7f4 ffc3 	bl	800d6b0 <lwip_htons>
 801872a:	4603      	mov	r3, r0
 801872c:	461a      	mov	r2, r3
 801872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018730:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018732:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018734:	3314      	adds	r3, #20
 8018736:	b29b      	uxth	r3, r3
 8018738:	4618      	mov	r0, r3
 801873a:	f7f4 ffb9 	bl	800d6b0 <lwip_htons>
 801873e:	4603      	mov	r3, r0
 8018740:	461a      	mov	r2, r3
 8018742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018744:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018748:	2200      	movs	r2, #0
 801874a:	729a      	strb	r2, [r3, #10]
 801874c:	2200      	movs	r2, #0
 801874e:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8018750:	2114      	movs	r1, #20
 8018752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018754:	f7f5 f92a 	bl	800d9ac <inet_chksum>
 8018758:	4603      	mov	r3, r0
 801875a:	461a      	mov	r2, r3
 801875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801875e:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018760:	68bb      	ldr	r3, [r7, #8]
 8018762:	695b      	ldr	r3, [r3, #20]
 8018764:	687a      	ldr	r2, [r7, #4]
 8018766:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018768:	68b8      	ldr	r0, [r7, #8]
 801876a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801876c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801876e:	f7f6 fd4b 	bl	800f208 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018776:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018778:	1ad3      	subs	r3, r2, r3
 801877a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801877e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018782:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018784:	4413      	add	r3, r2
 8018786:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801878a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801878e:	2b00      	cmp	r3, #0
 8018790:	f47f af11 	bne.w	80185b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018794:	2300      	movs	r3, #0
 8018796:	e002      	b.n	801879e <ip4_frag+0x27a>
      goto memerr;
 8018798:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801879a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801879e:	4618      	mov	r0, r3
 80187a0:	3748      	adds	r7, #72	@ 0x48
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}
 80187a6:	bf00      	nop
 80187a8:	0801d000 	.word	0x0801d000
 80187ac:	0801d1dc 	.word	0x0801d1dc
 80187b0:	0801d048 	.word	0x0801d048
 80187b4:	0801d1f8 	.word	0x0801d1f8
 80187b8:	0801d218 	.word	0x0801d218
 80187bc:	080184bd 	.word	0x080184bd

080187c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b086      	sub	sp, #24
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
 80187c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80187ca:	230e      	movs	r3, #14
 80187cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	895b      	ldrh	r3, [r3, #10]
 80187d2:	2b0e      	cmp	r3, #14
 80187d4:	d96e      	bls.n	80188b4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	7bdb      	ldrb	r3, [r3, #15]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d106      	bne.n	80187ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80187de:	683b      	ldr	r3, [r7, #0]
 80187e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80187e4:	3301      	adds	r3, #1
 80187e6:	b2da      	uxtb	r2, r3
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	7b1a      	ldrb	r2, [r3, #12]
 80187f6:	7b5b      	ldrb	r3, [r3, #13]
 80187f8:	021b      	lsls	r3, r3, #8
 80187fa:	4313      	orrs	r3, r2
 80187fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	f003 0301 	and.w	r3, r3, #1
 8018806:	2b00      	cmp	r3, #0
 8018808:	d023      	beq.n	8018852 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801880a:	693b      	ldr	r3, [r7, #16]
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	2b01      	cmp	r3, #1
 8018810:	d10f      	bne.n	8018832 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	785b      	ldrb	r3, [r3, #1]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d11b      	bne.n	8018852 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801881a:	693b      	ldr	r3, [r7, #16]
 801881c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801881e:	2b5e      	cmp	r3, #94	@ 0x5e
 8018820:	d117      	bne.n	8018852 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	7b5b      	ldrb	r3, [r3, #13]
 8018826:	f043 0310 	orr.w	r3, r3, #16
 801882a:	b2da      	uxtb	r2, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	735a      	strb	r2, [r3, #13]
 8018830:	e00f      	b.n	8018852 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018832:	693b      	ldr	r3, [r7, #16]
 8018834:	2206      	movs	r2, #6
 8018836:	4928      	ldr	r1, [pc, #160]	@ (80188d8 <ethernet_input+0x118>)
 8018838:	4618      	mov	r0, r3
 801883a:	f000 fe1b 	bl	8019474 <memcmp>
 801883e:	4603      	mov	r3, r0
 8018840:	2b00      	cmp	r3, #0
 8018842:	d106      	bne.n	8018852 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	7b5b      	ldrb	r3, [r3, #13]
 8018848:	f043 0308 	orr.w	r3, r3, #8
 801884c:	b2da      	uxtb	r2, r3
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018852:	89fb      	ldrh	r3, [r7, #14]
 8018854:	2b08      	cmp	r3, #8
 8018856:	d003      	beq.n	8018860 <ethernet_input+0xa0>
 8018858:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801885c:	d014      	beq.n	8018888 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801885e:	e032      	b.n	80188c6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018866:	f003 0308 	and.w	r3, r3, #8
 801886a:	2b00      	cmp	r3, #0
 801886c:	d024      	beq.n	80188b8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801886e:	8afb      	ldrh	r3, [r7, #22]
 8018870:	4619      	mov	r1, r3
 8018872:	6878      	ldr	r0, [r7, #4]
 8018874:	f7f6 fc42 	bl	800f0fc <pbuf_remove_header>
 8018878:	4603      	mov	r3, r0
 801887a:	2b00      	cmp	r3, #0
 801887c:	d11e      	bne.n	80188bc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801887e:	6839      	ldr	r1, [r7, #0]
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f7fe fe1b 	bl	80174bc <ip4_input>
      break;
 8018886:	e013      	b.n	80188b0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801888e:	f003 0308 	and.w	r3, r3, #8
 8018892:	2b00      	cmp	r3, #0
 8018894:	d014      	beq.n	80188c0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018896:	8afb      	ldrh	r3, [r7, #22]
 8018898:	4619      	mov	r1, r3
 801889a:	6878      	ldr	r0, [r7, #4]
 801889c:	f7f6 fc2e 	bl	800f0fc <pbuf_remove_header>
 80188a0:	4603      	mov	r3, r0
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d10e      	bne.n	80188c4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80188a6:	6839      	ldr	r1, [r7, #0]
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	f7fe fa67 	bl	8016d7c <etharp_input>
      break;
 80188ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80188b0:	2300      	movs	r3, #0
 80188b2:	e00c      	b.n	80188ce <ethernet_input+0x10e>
    goto free_and_return;
 80188b4:	bf00      	nop
 80188b6:	e006      	b.n	80188c6 <ethernet_input+0x106>
        goto free_and_return;
 80188b8:	bf00      	nop
 80188ba:	e004      	b.n	80188c6 <ethernet_input+0x106>
        goto free_and_return;
 80188bc:	bf00      	nop
 80188be:	e002      	b.n	80188c6 <ethernet_input+0x106>
        goto free_and_return;
 80188c0:	bf00      	nop
 80188c2:	e000      	b.n	80188c6 <ethernet_input+0x106>
        goto free_and_return;
 80188c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80188c6:	6878      	ldr	r0, [r7, #4]
 80188c8:	f7f6 fc9e 	bl	800f208 <pbuf_free>
  return ERR_OK;
 80188cc:	2300      	movs	r3, #0
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3718      	adds	r7, #24
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}
 80188d6:	bf00      	nop
 80188d8:	0801e2b0 	.word	0x0801e2b0

080188dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80188dc:	b580      	push	{r7, lr}
 80188de:	b086      	sub	sp, #24
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	60f8      	str	r0, [r7, #12]
 80188e4:	60b9      	str	r1, [r7, #8]
 80188e6:	607a      	str	r2, [r7, #4]
 80188e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80188ea:	8c3b      	ldrh	r3, [r7, #32]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7f4 fedf 	bl	800d6b0 <lwip_htons>
 80188f2:	4603      	mov	r3, r0
 80188f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80188f6:	210e      	movs	r1, #14
 80188f8:	68b8      	ldr	r0, [r7, #8]
 80188fa:	f7f6 fbef 	bl	800f0dc <pbuf_add_header>
 80188fe:	4603      	mov	r3, r0
 8018900:	2b00      	cmp	r3, #0
 8018902:	d125      	bne.n	8018950 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801890a:	693b      	ldr	r3, [r7, #16]
 801890c:	8afa      	ldrh	r2, [r7, #22]
 801890e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	2206      	movs	r2, #6
 8018914:	6839      	ldr	r1, [r7, #0]
 8018916:	4618      	mov	r0, r3
 8018918:	f000 fed3 	bl	80196c2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801891c:	693b      	ldr	r3, [r7, #16]
 801891e:	3306      	adds	r3, #6
 8018920:	2206      	movs	r2, #6
 8018922:	6879      	ldr	r1, [r7, #4]
 8018924:	4618      	mov	r0, r3
 8018926:	f000 fecc 	bl	80196c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018930:	2b06      	cmp	r3, #6
 8018932:	d006      	beq.n	8018942 <ethernet_output+0x66>
 8018934:	4b0a      	ldr	r3, [pc, #40]	@ (8018960 <ethernet_output+0x84>)
 8018936:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801893a:	490a      	ldr	r1, [pc, #40]	@ (8018964 <ethernet_output+0x88>)
 801893c:	480a      	ldr	r0, [pc, #40]	@ (8018968 <ethernet_output+0x8c>)
 801893e:	f000 fc31 	bl	80191a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	699b      	ldr	r3, [r3, #24]
 8018946:	68b9      	ldr	r1, [r7, #8]
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	4798      	blx	r3
 801894c:	4603      	mov	r3, r0
 801894e:	e002      	b.n	8018956 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018950:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018952:	f06f 0301 	mvn.w	r3, #1
}
 8018956:	4618      	mov	r0, r3
 8018958:	3718      	adds	r7, #24
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}
 801895e:	bf00      	nop
 8018960:	0801d228 	.word	0x0801d228
 8018964:	0801d260 	.word	0x0801d260
 8018968:	0801d294 	.word	0x0801d294

0801896c <slipif_output>:
 * @param p the pbuf chain packet to send
 * @return always returns ERR_OK since the serial layer does not provide return values
 */
static err_t
slipif_output(struct netif *netif, struct pbuf *p)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b086      	sub	sp, #24
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	6039      	str	r1, [r7, #0]
  struct slipif_priv *priv;
  struct pbuf *q;
  u16_t i;
  u8_t c;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d105      	bne.n	8018988 <slipif_output+0x1c>
 801897c:	4b37      	ldr	r3, [pc, #220]	@ (8018a5c <slipif_output+0xf0>)
 801897e:	227b      	movs	r2, #123	@ 0x7b
 8018980:	4937      	ldr	r1, [pc, #220]	@ (8018a60 <slipif_output+0xf4>)
 8018982:	4838      	ldr	r0, [pc, #224]	@ (8018a64 <slipif_output+0xf8>)
 8018984:	f000 fc0e 	bl	80191a4 <iprintf>
  LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a1b      	ldr	r3, [r3, #32]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d105      	bne.n	801899c <slipif_output+0x30>
 8018990:	4b32      	ldr	r3, [pc, #200]	@ (8018a5c <slipif_output+0xf0>)
 8018992:	227c      	movs	r2, #124	@ 0x7c
 8018994:	4934      	ldr	r1, [pc, #208]	@ (8018a68 <slipif_output+0xfc>)
 8018996:	4833      	ldr	r0, [pc, #204]	@ (8018a64 <slipif_output+0xf8>)
 8018998:	f000 fc04 	bl	80191a4 <iprintf>
  LWIP_ASSERT("p != NULL", (p != NULL));
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d105      	bne.n	80189ae <slipif_output+0x42>
 80189a2:	4b2e      	ldr	r3, [pc, #184]	@ (8018a5c <slipif_output+0xf0>)
 80189a4:	227d      	movs	r2, #125	@ 0x7d
 80189a6:	4931      	ldr	r1, [pc, #196]	@ (8018a6c <slipif_output+0x100>)
 80189a8:	482e      	ldr	r0, [pc, #184]	@ (8018a64 <slipif_output+0xf8>)
 80189aa:	f000 fbfb 	bl	80191a4 <iprintf>

  LWIP_DEBUGF(SLIP_DEBUG, ("slipif_output: sending %"U16_F" bytes\n", p->tot_len));
  priv = (struct slipif_priv *)netif->state;
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	6a1b      	ldr	r3, [r3, #32]
 80189b2:	60fb      	str	r3, [r7, #12]

  /* Send pbuf out on the serial I/O device. */
  /* Start with packet delimiter. */
  sio_send(SLIP_END, priv->sd);
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	4619      	mov	r1, r3
 80189ba:	20c0      	movs	r0, #192	@ 0xc0
 80189bc:	f7e8 f8c6 	bl	8000b4c <sio_send>

  for (q = p; q != NULL; q = q->next) {
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	617b      	str	r3, [r7, #20]
 80189c4:	e03b      	b.n	8018a3e <slipif_output+0xd2>
    for (i = 0; i < q->len; i++) {
 80189c6:	2300      	movs	r3, #0
 80189c8:	827b      	strh	r3, [r7, #18]
 80189ca:	e030      	b.n	8018a2e <slipif_output+0xc2>
      c = ((u8_t *)q->payload)[i];
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	685a      	ldr	r2, [r3, #4]
 80189d0:	8a7b      	ldrh	r3, [r7, #18]
 80189d2:	4413      	add	r3, r2
 80189d4:	781b      	ldrb	r3, [r3, #0]
 80189d6:	72fb      	strb	r3, [r7, #11]
      switch (c) {
 80189d8:	7afb      	ldrb	r3, [r7, #11]
 80189da:	2bc0      	cmp	r3, #192	@ 0xc0
 80189dc:	d002      	beq.n	80189e4 <slipif_output+0x78>
 80189de:	2bdb      	cmp	r3, #219	@ 0xdb
 80189e0:	d00d      	beq.n	80189fe <slipif_output+0x92>
 80189e2:	e019      	b.n	8018a18 <slipif_output+0xac>
        case SLIP_END:
          /* need to escape this byte (0xC0 -> 0xDB, 0xDC) */
          sio_send(SLIP_ESC, priv->sd);
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	4619      	mov	r1, r3
 80189ea:	20db      	movs	r0, #219	@ 0xdb
 80189ec:	f7e8 f8ae 	bl	8000b4c <sio_send>
          sio_send(SLIP_ESC_END, priv->sd);
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	4619      	mov	r1, r3
 80189f6:	20dc      	movs	r0, #220	@ 0xdc
 80189f8:	f7e8 f8a8 	bl	8000b4c <sio_send>
          break;
 80189fc:	e014      	b.n	8018a28 <slipif_output+0xbc>
        case SLIP_ESC:
          /* need to escape this byte (0xDB -> 0xDB, 0xDD) */
          sio_send(SLIP_ESC, priv->sd);
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	4619      	mov	r1, r3
 8018a04:	20db      	movs	r0, #219	@ 0xdb
 8018a06:	f7e8 f8a1 	bl	8000b4c <sio_send>
          sio_send(SLIP_ESC_ESC, priv->sd);
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	4619      	mov	r1, r3
 8018a10:	20dd      	movs	r0, #221	@ 0xdd
 8018a12:	f7e8 f89b 	bl	8000b4c <sio_send>
          break;
 8018a16:	e007      	b.n	8018a28 <slipif_output+0xbc>
        default:
          /* normal byte - no need for escaping */
          sio_send(c, priv->sd);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	681a      	ldr	r2, [r3, #0]
 8018a1c:	7afb      	ldrb	r3, [r7, #11]
 8018a1e:	4611      	mov	r1, r2
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7e8 f893 	bl	8000b4c <sio_send>
          break;
 8018a26:	bf00      	nop
    for (i = 0; i < q->len; i++) {
 8018a28:	8a7b      	ldrh	r3, [r7, #18]
 8018a2a:	3301      	adds	r3, #1
 8018a2c:	827b      	strh	r3, [r7, #18]
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	895b      	ldrh	r3, [r3, #10]
 8018a32:	8a7a      	ldrh	r2, [r7, #18]
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d3c9      	bcc.n	80189cc <slipif_output+0x60>
  for (q = p; q != NULL; q = q->next) {
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	617b      	str	r3, [r7, #20]
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d1c0      	bne.n	80189c6 <slipif_output+0x5a>
      }
    }
  }
  /* End with packet delimiter. */
  sio_send(SLIP_END, priv->sd);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	4619      	mov	r1, r3
 8018a4a:	20c0      	movs	r0, #192	@ 0xc0
 8018a4c:	f7e8 f87e 	bl	8000b4c <sio_send>
  return ERR_OK;
 8018a50:	2300      	movs	r3, #0
}
 8018a52:	4618      	mov	r0, r3
 8018a54:	3718      	adds	r7, #24
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	bf00      	nop
 8018a5c:	0801d2bc 	.word	0x0801d2bc
 8018a60:	0801d2f0 	.word	0x0801d2f0
 8018a64:	0801d300 	.word	0x0801d300
 8018a68:	0801d328 	.word	0x0801d328
 8018a6c:	0801d340 	.word	0x0801d340

08018a70 <slipif_output_v4>:
 * @param ipaddr the ip address to send the packet to (not used for slipif)
 * @return always returns ERR_OK since the serial layer does not provide return values
 */
static err_t
slipif_output_v4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b084      	sub	sp, #16
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	60f8      	str	r0, [r7, #12]
 8018a78:	60b9      	str	r1, [r7, #8]
 8018a7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return slipif_output(netif, p);
 8018a7c:	68b9      	ldr	r1, [r7, #8]
 8018a7e:	68f8      	ldr	r0, [r7, #12]
 8018a80:	f7ff ff74 	bl	801896c <slipif_output>
 8018a84:	4603      	mov	r3, r0
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3710      	adds	r7, #16
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
	...

08018a90 <slipif_rxbyte>:
 *        return a complete packet, NULL is returned before - used for polling)
 * @return The IP packet when SLIP_END is received
 */
static struct pbuf *
slipif_rxbyte(struct netif *netif, u8_t c)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b084      	sub	sp, #16
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
 8018a98:	460b      	mov	r3, r1
 8018a9a:	70fb      	strb	r3, [r7, #3]
  struct slipif_priv *priv;
  struct pbuf *t;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d105      	bne.n	8018aae <slipif_rxbyte+0x1e>
 8018aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8018c1c <slipif_rxbyte+0x18c>)
 8018aa4:	22d4      	movs	r2, #212	@ 0xd4
 8018aa6:	495e      	ldr	r1, [pc, #376]	@ (8018c20 <slipif_rxbyte+0x190>)
 8018aa8:	485e      	ldr	r0, [pc, #376]	@ (8018c24 <slipif_rxbyte+0x194>)
 8018aaa:	f000 fb7b 	bl	80191a4 <iprintf>
  LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6a1b      	ldr	r3, [r3, #32]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d105      	bne.n	8018ac2 <slipif_rxbyte+0x32>
 8018ab6:	4b59      	ldr	r3, [pc, #356]	@ (8018c1c <slipif_rxbyte+0x18c>)
 8018ab8:	22d5      	movs	r2, #213	@ 0xd5
 8018aba:	495b      	ldr	r1, [pc, #364]	@ (8018c28 <slipif_rxbyte+0x198>)
 8018abc:	4859      	ldr	r0, [pc, #356]	@ (8018c24 <slipif_rxbyte+0x194>)
 8018abe:	f000 fb71 	bl	80191a4 <iprintf>

  priv = (struct slipif_priv *)netif->state;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6a1b      	ldr	r3, [r3, #32]
 8018ac6:	60fb      	str	r3, [r7, #12]

  switch (priv->state) {
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	7b1b      	ldrb	r3, [r3, #12]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d002      	beq.n	8018ad6 <slipif_rxbyte+0x46>
 8018ad0:	2b01      	cmp	r3, #1
 8018ad2:	d02d      	beq.n	8018b30 <slipif_rxbyte+0xa0>
          break;
      }
      priv->state = SLIP_RECV_NORMAL;
      break;
    default:
      break;
 8018ad4:	e03c      	b.n	8018b50 <slipif_rxbyte+0xc0>
      switch (c) {
 8018ad6:	78fb      	ldrb	r3, [r7, #3]
 8018ad8:	2bc0      	cmp	r3, #192	@ 0xc0
 8018ada:	d002      	beq.n	8018ae2 <slipif_rxbyte+0x52>
 8018adc:	2bdb      	cmp	r3, #219	@ 0xdb
 8018ade:	d021      	beq.n	8018b24 <slipif_rxbyte+0x94>
          break;
 8018ae0:	e025      	b.n	8018b2e <slipif_rxbyte+0x9e>
          if (priv->recved > 0) {
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	8a1b      	ldrh	r3, [r3, #16]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d01a      	beq.n	8018b20 <slipif_rxbyte+0x90>
            pbuf_realloc(priv->q, priv->recved);
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	689a      	ldr	r2, [r3, #8]
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	8a1b      	ldrh	r3, [r3, #16]
 8018af2:	4619      	mov	r1, r3
 8018af4:	4610      	mov	r0, r2
 8018af6:	f7f6 fa01 	bl	800eefc <pbuf_realloc>
            t = priv->q;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	689b      	ldr	r3, [r3, #8]
 8018afe:	60bb      	str	r3, [r7, #8]
            priv->p = priv->q = NULL;
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	2200      	movs	r2, #0
 8018b04:	609a      	str	r2, [r3, #8]
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	689a      	ldr	r2, [r3, #8]
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	605a      	str	r2, [r3, #4]
            priv->i = priv->recved = 0;
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	2200      	movs	r2, #0
 8018b12:	821a      	strh	r2, [r3, #16]
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	8a1a      	ldrh	r2, [r3, #16]
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	81da      	strh	r2, [r3, #14]
            return t;
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	e079      	b.n	8018c14 <slipif_rxbyte+0x184>
          return NULL;
 8018b20:	2300      	movs	r3, #0
 8018b22:	e077      	b.n	8018c14 <slipif_rxbyte+0x184>
          priv->state = SLIP_RECV_ESCAPE;
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	2201      	movs	r2, #1
 8018b28:	731a      	strb	r2, [r3, #12]
          return NULL;
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	e072      	b.n	8018c14 <slipif_rxbyte+0x184>
      break;
 8018b2e:	e00f      	b.n	8018b50 <slipif_rxbyte+0xc0>
      switch (c) {
 8018b30:	78fb      	ldrb	r3, [r7, #3]
 8018b32:	2bdc      	cmp	r3, #220	@ 0xdc
 8018b34:	d002      	beq.n	8018b3c <slipif_rxbyte+0xac>
 8018b36:	2bdd      	cmp	r3, #221	@ 0xdd
 8018b38:	d003      	beq.n	8018b42 <slipif_rxbyte+0xb2>
          break;
 8018b3a:	e005      	b.n	8018b48 <slipif_rxbyte+0xb8>
          c = SLIP_END;
 8018b3c:	23c0      	movs	r3, #192	@ 0xc0
 8018b3e:	70fb      	strb	r3, [r7, #3]
          break;
 8018b40:	e002      	b.n	8018b48 <slipif_rxbyte+0xb8>
          c = SLIP_ESC;
 8018b42:	23db      	movs	r3, #219	@ 0xdb
 8018b44:	70fb      	strb	r3, [r7, #3]
          break;
 8018b46:	bf00      	nop
      priv->state = SLIP_RECV_NORMAL;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	731a      	strb	r2, [r3, #12]
      break;
 8018b4e:	bf00      	nop
  } /* end switch (priv->state) */

  /* byte received, packet not yet completely received */
  if (priv->p == NULL) {
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	685b      	ldr	r3, [r3, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d120      	bne.n	8018b9a <slipif_rxbyte+0x10a>
    /* allocate a new pbuf */
    LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: alloc\n"));
    priv->p = pbuf_alloc(PBUF_LINK, (PBUF_POOL_BUFSIZE - PBUF_LINK_HLEN - PBUF_LINK_ENCAPSULATION_HLEN), PBUF_POOL);
 8018b58:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8018b5c:	f240 2142 	movw	r1, #578	@ 0x242
 8018b60:	200e      	movs	r0, #14
 8018b62:	f7f6 f86d 	bl	800ec40 <pbuf_alloc>
 8018b66:	4602      	mov	r2, r0
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	605a      	str	r2, [r3, #4]

    if (priv->p == NULL) {
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	685b      	ldr	r3, [r3, #4]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d101      	bne.n	8018b78 <slipif_rxbyte+0xe8>
      LINK_STATS_INC(link.drop);
      LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: no new pbuf! (DROP)\n"));
      /* don't process any further since we got no pbuf to receive to */
      return NULL;
 8018b74:	2300      	movs	r3, #0
 8018b76:	e04d      	b.n	8018c14 <slipif_rxbyte+0x184>
    }

    if (priv->q != NULL) {
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	689b      	ldr	r3, [r3, #8]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d008      	beq.n	8018b92 <slipif_rxbyte+0x102>
      /* 'chain' the pbuf to the existing chain */
      pbuf_cat(priv->q, priv->p);
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	689a      	ldr	r2, [r3, #8]
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	685b      	ldr	r3, [r3, #4]
 8018b88:	4619      	mov	r1, r3
 8018b8a:	4610      	mov	r0, r2
 8018b8c:	f7f6 fc0a 	bl	800f3a4 <pbuf_cat>
 8018b90:	e003      	b.n	8018b9a <slipif_rxbyte+0x10a>
    } else {
      /* p is the first pbuf in the chain */
      priv->q = priv->p;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	685a      	ldr	r2, [r3, #4]
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	609a      	str	r2, [r3, #8]
    }
  }

  /* this automatically drops bytes if > SLIP_MAX_SIZE */
  if ((priv->p != NULL) && (priv->recved <= SLIP_MAX_SIZE)) {
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	685b      	ldr	r3, [r3, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d037      	beq.n	8018c12 <slipif_rxbyte+0x182>
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	8a1b      	ldrh	r3, [r3, #16]
 8018ba6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d831      	bhi.n	8018c12 <slipif_rxbyte+0x182>
    ((u8_t *)priv->p->payload)[priv->i] = c;
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	685b      	ldr	r3, [r3, #4]
 8018bb4:	68fa      	ldr	r2, [r7, #12]
 8018bb6:	89d2      	ldrh	r2, [r2, #14]
 8018bb8:	4413      	add	r3, r2
 8018bba:	78fa      	ldrb	r2, [r7, #3]
 8018bbc:	701a      	strb	r2, [r3, #0]
    priv->recved++;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	8a1b      	ldrh	r3, [r3, #16]
 8018bc2:	3301      	adds	r3, #1
 8018bc4:	b29a      	uxth	r2, r3
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	821a      	strh	r2, [r3, #16]
    priv->i++;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	89db      	ldrh	r3, [r3, #14]
 8018bce:	3301      	adds	r3, #1
 8018bd0:	b29a      	uxth	r2, r3
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	81da      	strh	r2, [r3, #14]
    if (priv->i >= priv->p->len) {
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	89da      	ldrh	r2, [r3, #14]
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	685b      	ldr	r3, [r3, #4]
 8018bde:	895b      	ldrh	r3, [r3, #10]
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d316      	bcc.n	8018c12 <slipif_rxbyte+0x182>
      /* on to the next pbuf */
      priv->i = 0;
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2200      	movs	r2, #0
 8018be8:	81da      	strh	r2, [r3, #14]
      if (priv->p->next != NULL && priv->p->next->len > 0) {
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	685b      	ldr	r3, [r3, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d00b      	beq.n	8018c0c <slipif_rxbyte+0x17c>
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	895b      	ldrh	r3, [r3, #10]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d005      	beq.n	8018c0c <slipif_rxbyte+0x17c>
        /* p is a chain, on to the next in the chain */
        priv->p = priv->p->next;
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	685b      	ldr	r3, [r3, #4]
 8018c04:	681a      	ldr	r2, [r3, #0]
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	605a      	str	r2, [r3, #4]
 8018c0a:	e002      	b.n	8018c12 <slipif_rxbyte+0x182>
      } else {
        /* p is a single pbuf, set it to NULL so next time a new
         * pbuf is allocated */
        priv->p = NULL;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2200      	movs	r2, #0
 8018c10:	605a      	str	r2, [r3, #4]
      }
    }
  }
  return NULL;
 8018c12:	2300      	movs	r3, #0
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	3710      	adds	r7, #16
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	0801d2bc 	.word	0x0801d2bc
 8018c20:	0801d2f0 	.word	0x0801d2f0
 8018c24:	0801d300 	.word	0x0801d300
 8018c28:	0801d328 	.word	0x0801d328

08018c2c <slipif_rxbyte_input>:
 * @param netif The lwip network interface structure for this slipif
 * @param c received character
 */
static void
slipif_rxbyte_input(struct netif *netif, u8_t c)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	460b      	mov	r3, r1
 8018c36:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  p = slipif_rxbyte(netif, c);
 8018c38:	78fb      	ldrb	r3, [r7, #3]
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7ff ff27 	bl	8018a90 <slipif_rxbyte>
 8018c42:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d00a      	beq.n	8018c60 <slipif_rxbyte_input+0x34>
    if (netif->input(p, netif) != ERR_OK) {
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	691b      	ldr	r3, [r3, #16]
 8018c4e:	6879      	ldr	r1, [r7, #4]
 8018c50:	68f8      	ldr	r0, [r7, #12]
 8018c52:	4798      	blx	r3
 8018c54:	4603      	mov	r3, r0
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d002      	beq.n	8018c60 <slipif_rxbyte_input+0x34>
      pbuf_free(p);
 8018c5a:	68f8      	ldr	r0, [r7, #12]
 8018c5c:	f7f6 fad4 	bl	800f208 <pbuf_free>
    }
  }
}
 8018c60:	bf00      	nop
 8018c62:	3710      	adds	r7, #16
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}

08018c68 <slipif_loop_thread>:
 *
 * @param nf the lwip network interface structure for this slipif
 */
static void
slipif_loop_thread(void *nf)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b086      	sub	sp, #24
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
  u8_t c;
  struct netif *netif = (struct netif *)nf;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	617b      	str	r3, [r7, #20]
  struct slipif_priv *priv = (struct slipif_priv *)netif->state;
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	6a1b      	ldr	r3, [r3, #32]
 8018c78:	613b      	str	r3, [r7, #16]

  while (1) {
    if (sio_read(priv->sd, &c, 1) > 0) {
 8018c7a:	693b      	ldr	r3, [r7, #16]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	f107 010f 	add.w	r1, r7, #15
 8018c82:	2201      	movs	r2, #1
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7e7 ffc9 	bl	8000c1c <sio_read>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d0f4      	beq.n	8018c7a <slipif_loop_thread+0x12>
      slipif_rxbyte_input(netif, c);
 8018c90:	7bfb      	ldrb	r3, [r7, #15]
 8018c92:	4619      	mov	r1, r3
 8018c94:	6978      	ldr	r0, [r7, #20]
 8018c96:	f7ff ffc9 	bl	8018c2c <slipif_rxbyte_input>
    if (sio_read(priv->sd, &c, 1) > 0) {
 8018c9a:	e7ee      	b.n	8018c7a <slipif_loop_thread+0x12>

08018c9c <slipif_init>:
 * @note If netif->state is interpreted as an u8_t serial port number.
 *
 */
err_t
slipif_init(struct netif *netif)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b086      	sub	sp, #24
 8018ca0:	af02      	add	r7, sp, #8
 8018ca2:	6078      	str	r0, [r7, #4]
  struct slipif_priv *priv;
  u8_t sio_num;

  LWIP_ASSERT("slipif needs an input callback", netif->input != NULL);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	691b      	ldr	r3, [r3, #16]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d106      	bne.n	8018cba <slipif_init+0x1e>
 8018cac:	4b2c      	ldr	r3, [pc, #176]	@ (8018d60 <slipif_init+0xc4>)
 8018cae:	f240 126d 	movw	r2, #365	@ 0x16d
 8018cb2:	492c      	ldr	r1, [pc, #176]	@ (8018d64 <slipif_init+0xc8>)
 8018cb4:	482c      	ldr	r0, [pc, #176]	@ (8018d68 <slipif_init+0xcc>)
 8018cb6:	f000 fa75 	bl	80191a4 <iprintf>

  /* netif->state contains serial port number */
  sio_num = LWIP_PTR_NUMERIC_CAST(u8_t, netif->state);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6a1b      	ldr	r3, [r3, #32]
 8018cbe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(SLIP_DEBUG, ("slipif_init: netif->num=%"U16_F"\n", (u16_t)sio_num));

  /* Allocate private data */
  priv = (struct slipif_priv *)mem_malloc(sizeof(struct slipif_priv));
 8018cc0:	2014      	movs	r0, #20
 8018cc2:	f7f5 f9df 	bl	800e084 <mem_malloc>
 8018cc6:	60b8      	str	r0, [r7, #8]
  if (!priv) {
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d102      	bne.n	8018cd4 <slipif_init+0x38>
    return ERR_MEM;
 8018cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018cd2:	e041      	b.n	8018d58 <slipif_init+0xbc>
  }

  netif->name[0] = 's';
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2273      	movs	r2, #115	@ 0x73
 8018cd8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = 'l';
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	226c      	movs	r2, #108	@ 0x6c
 8018ce0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV4
  netif->output = slipif_output_v4;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	4a21      	ldr	r2, [pc, #132]	@ (8018d6c <slipif_init+0xd0>)
 8018ce8:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
  netif->output_ip6 = slipif_output_v6;
#endif /* LWIP_IPV6 */
  netif->mtu = SLIP_MAX_SIZE;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8018cf0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Try to open the serial port. */
  priv->sd = sio_open(sio_num);
 8018cf2:	7bfb      	ldrb	r3, [r7, #15]
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f7e7 ff19 	bl	8000b2c <sio_open>
 8018cfa:	4602      	mov	r2, r0
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	601a      	str	r2, [r3, #0]
  if (!priv->sd) {
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d105      	bne.n	8018d14 <slipif_init+0x78>
    /* Opening the serial port failed. */
    mem_free(priv);
 8018d08:	68b8      	ldr	r0, [r7, #8]
 8018d0a:	f7f5 f81b 	bl	800dd44 <mem_free>
    return ERR_IF;
 8018d0e:	f06f 030b 	mvn.w	r3, #11
 8018d12:	e021      	b.n	8018d58 <slipif_init+0xbc>
  }

  /* Initialize private data */
  priv->p = NULL;
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	2200      	movs	r2, #0
 8018d18:	605a      	str	r2, [r3, #4]
  priv->q = NULL;
 8018d1a:	68bb      	ldr	r3, [r7, #8]
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	609a      	str	r2, [r3, #8]
  priv->state = SLIP_RECV_NORMAL;
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	2200      	movs	r2, #0
 8018d24:	731a      	strb	r2, [r3, #12]
  priv->i = 0;
 8018d26:	68bb      	ldr	r3, [r7, #8]
 8018d28:	2200      	movs	r2, #0
 8018d2a:	81da      	strh	r2, [r3, #14]
  priv->recved = 0;
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	2200      	movs	r2, #0
 8018d30:	821a      	strh	r2, [r3, #16]
#if SLIP_RX_FROM_ISR
  priv->rxpackets = NULL;
#endif

  netif->state = priv;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	68ba      	ldr	r2, [r7, #8]
 8018d36:	621a      	str	r2, [r3, #32]

  netif_set_up(netif);
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7f5 fdb5 	bl	800e8a8 <netif_set_up>
  netif_set_link_up(netif);
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f7f5 fe50 	bl	800e9e4 <netif_set_link_up>
  /* initialize the snmp variables and counters inside the struct netif */
  MIB2_INIT_NETIF(netif, snmp_ifType_slip, SLIP_SIO_SPEED(priv->sd));

#if SLIP_USE_RX_THREAD
  /* Create a thread to poll the serial line. */
  sys_thread_new(SLIPIF_THREAD_NAME, slipif_loop_thread, netif,
 8018d44:	2300      	movs	r3, #0
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d4c:	687a      	ldr	r2, [r7, #4]
 8018d4e:	4908      	ldr	r1, [pc, #32]	@ (8018d70 <slipif_init+0xd4>)
 8018d50:	4808      	ldr	r0, [pc, #32]	@ (8018d74 <slipif_init+0xd8>)
 8018d52:	f000 f8e3 	bl	8018f1c <sys_thread_new>
                 SLIPIF_THREAD_STACKSIZE, SLIPIF_THREAD_PRIO);
#endif /* SLIP_USE_RX_THREAD */
  return ERR_OK;
 8018d56:	2300      	movs	r3, #0
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	0801d2bc 	.word	0x0801d2bc
 8018d64:	0801d34c 	.word	0x0801d34c
 8018d68:	0801d300 	.word	0x0801d300
 8018d6c:	08018a71 	.word	0x08018a71
 8018d70:	08018c69 	.word	0x08018c69
 8018d74:	0801d36c 	.word	0x0801d36c

08018d78 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b086      	sub	sp, #24
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018d82:	683b      	ldr	r3, [r7, #0]
 8018d84:	60bb      	str	r3, [r7, #8]
 8018d86:	2304      	movs	r3, #4
 8018d88:	60fb      	str	r3, [r7, #12]
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	613b      	str	r3, [r7, #16]
 8018d8e:	2300      	movs	r3, #0
 8018d90:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018d92:	f107 0308 	add.w	r3, r7, #8
 8018d96:	2100      	movs	r1, #0
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f7f0 ff55 	bl	8009c48 <osMessageCreate>
 8018d9e:	4602      	mov	r2, r0
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d102      	bne.n	8018db2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018dac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018db0:	e000      	b.n	8018db4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018db2:	2300      	movs	r3, #0
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	3718      	adds	r7, #24
 8018db8:	46bd      	mov	sp, r7
 8018dba:	bd80      	pop	{r7, pc}

08018dbc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b084      	sub	sp, #16
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
 8018dc4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	6839      	ldr	r1, [r7, #0]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	4618      	mov	r0, r3
 8018dd0:	f7f0 ff62 	bl	8009c98 <osMessagePut>
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d102      	bne.n	8018de0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	73fb      	strb	r3, [r7, #15]
 8018dde:	e001      	b.n	8018de4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018de0:	23ff      	movs	r3, #255	@ 0xff
 8018de2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	3710      	adds	r7, #16
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b08c      	sub	sp, #48	@ 0x30
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	61f8      	str	r0, [r7, #28]
 8018df8:	61b9      	str	r1, [r7, #24]
 8018dfa:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018dfc:	f7f0 fde1 	bl	80099c2 <osKernelSysTick>
 8018e00:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018e02:	697b      	ldr	r3, [r7, #20]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d017      	beq.n	8018e38 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018e08:	69fb      	ldr	r3, [r7, #28]
 8018e0a:	6819      	ldr	r1, [r3, #0]
 8018e0c:	f107 0320 	add.w	r3, r7, #32
 8018e10:	697a      	ldr	r2, [r7, #20]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7f0 ff80 	bl	8009d18 <osMessageGet>

    if(event.status == osEventMessage)
 8018e18:	6a3b      	ldr	r3, [r7, #32]
 8018e1a:	2b10      	cmp	r3, #16
 8018e1c:	d109      	bne.n	8018e32 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e20:	461a      	mov	r2, r3
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018e26:	f7f0 fdcc 	bl	80099c2 <osKernelSysTick>
 8018e2a:	4602      	mov	r2, r0
 8018e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e2e:	1ad3      	subs	r3, r2, r3
 8018e30:	e019      	b.n	8018e66 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e36:	e016      	b.n	8018e66 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018e38:	69fb      	ldr	r3, [r7, #28]
 8018e3a:	6819      	ldr	r1, [r3, #0]
 8018e3c:	463b      	mov	r3, r7
 8018e3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7f0 ff68 	bl	8009d18 <osMessageGet>
 8018e48:	f107 0320 	add.w	r3, r7, #32
 8018e4c:	463a      	mov	r2, r7
 8018e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e56:	461a      	mov	r2, r3
 8018e58:	69bb      	ldr	r3, [r7, #24]
 8018e5a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018e5c:	f7f0 fdb1 	bl	80099c2 <osKernelSysTick>
 8018e60:	4602      	mov	r2, r0
 8018e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e64:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	3730      	adds	r7, #48	@ 0x30
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}

08018e6e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018e6e:	b480      	push	{r7}
 8018e70:	b083      	sub	sp, #12
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d101      	bne.n	8018e82 <sys_mbox_valid+0x14>
    return 0;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	e000      	b.n	8018e84 <sys_mbox_valid+0x16>
  else
    return 1;
 8018e82:	2301      	movs	r3, #1
}
 8018e84:	4618      	mov	r0, r3
 8018e86:	370c      	adds	r7, #12
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018e94:	4803      	ldr	r0, [pc, #12]	@ (8018ea4 <sys_init+0x14>)
 8018e96:	f7f0 fe04 	bl	8009aa2 <osMutexCreate>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	4a02      	ldr	r2, [pc, #8]	@ (8018ea8 <sys_init+0x18>)
 8018e9e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018ea0:	bf00      	nop
 8018ea2:	bd80      	pop	{r7, pc}
 8018ea4:	0801e2c0 	.word	0x0801e2c0
 8018ea8:	2400c508 	.word	0x2400c508

08018eac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	60bb      	str	r3, [r7, #8]
 8018eb8:	2300      	movs	r3, #0
 8018eba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018ebc:	f107 0308 	add.w	r3, r7, #8
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7f0 fdee 	bl	8009aa2 <osMutexCreate>
 8018ec6:	4602      	mov	r2, r0
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d102      	bne.n	8018eda <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018ed8:	e000      	b.n	8018edc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018eda:	2300      	movs	r3, #0
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	3710      	adds	r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}

08018ee4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7f0 fded 	bl	8009ad4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018efa:	bf00      	nop
 8018efc:	3708      	adds	r7, #8
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}

08018f02 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018f02:	b580      	push	{r7, lr}
 8018f04:	b082      	sub	sp, #8
 8018f06:	af00      	add	r7, sp, #0
 8018f08:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7f0 fe2e 	bl	8009b70 <osMutexRelease>
}
 8018f14:	bf00      	nop
 8018f16:	3708      	adds	r7, #8
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	bd80      	pop	{r7, pc}

08018f1c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b08c      	sub	sp, #48	@ 0x30
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	60f8      	str	r0, [r7, #12]
 8018f24:	60b9      	str	r1, [r7, #8]
 8018f26:	607a      	str	r2, [r7, #4]
 8018f28:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018f2a:	f107 0314 	add.w	r3, r7, #20
 8018f2e:	2200      	movs	r2, #0
 8018f30:	601a      	str	r2, [r3, #0]
 8018f32:	605a      	str	r2, [r3, #4]
 8018f34:	609a      	str	r2, [r3, #8]
 8018f36:	60da      	str	r2, [r3, #12]
 8018f38:	611a      	str	r2, [r3, #16]
 8018f3a:	615a      	str	r2, [r3, #20]
 8018f3c:	619a      	str	r2, [r3, #24]
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	617b      	str	r3, [r7, #20]
 8018f42:	68bb      	ldr	r3, [r7, #8]
 8018f44:	61bb      	str	r3, [r7, #24]
 8018f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f48:	b21b      	sxth	r3, r3
 8018f4a:	83bb      	strh	r3, [r7, #28]
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018f50:	f107 0314 	add.w	r3, r7, #20
 8018f54:	6879      	ldr	r1, [r7, #4]
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7f0 fd43 	bl	80099e2 <osThreadCreate>
 8018f5c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3730      	adds	r7, #48	@ 0x30
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
	...

08018f68 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018f6c:	4b04      	ldr	r3, [pc, #16]	@ (8018f80 <sys_arch_protect+0x18>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7f0 fdad 	bl	8009ad4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018f7a:	2301      	movs	r3, #1
}
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	bd80      	pop	{r7, pc}
 8018f80:	2400c508 	.word	0x2400c508

08018f84 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018f84:	b580      	push	{r7, lr}
 8018f86:	b082      	sub	sp, #8
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018f8c:	4b04      	ldr	r3, [pc, #16]	@ (8018fa0 <sys_arch_unprotect+0x1c>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	4618      	mov	r0, r3
 8018f92:	f7f0 fded 	bl	8009b70 <osMutexRelease>
}
 8018f96:	bf00      	nop
 8018f98:	3708      	adds	r7, #8
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}
 8018f9e:	bf00      	nop
 8018fa0:	2400c508 	.word	0x2400c508

08018fa4 <rand>:
 8018fa4:	4b16      	ldr	r3, [pc, #88]	@ (8019000 <rand+0x5c>)
 8018fa6:	b510      	push	{r4, lr}
 8018fa8:	681c      	ldr	r4, [r3, #0]
 8018faa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018fac:	b9b3      	cbnz	r3, 8018fdc <rand+0x38>
 8018fae:	2018      	movs	r0, #24
 8018fb0:	f000 fbfe 	bl	80197b0 <malloc>
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	6320      	str	r0, [r4, #48]	@ 0x30
 8018fb8:	b920      	cbnz	r0, 8018fc4 <rand+0x20>
 8018fba:	4b12      	ldr	r3, [pc, #72]	@ (8019004 <rand+0x60>)
 8018fbc:	4812      	ldr	r0, [pc, #72]	@ (8019008 <rand+0x64>)
 8018fbe:	2152      	movs	r1, #82	@ 0x52
 8018fc0:	f000 fb8e 	bl	80196e0 <__assert_func>
 8018fc4:	4911      	ldr	r1, [pc, #68]	@ (801900c <rand+0x68>)
 8018fc6:	4b12      	ldr	r3, [pc, #72]	@ (8019010 <rand+0x6c>)
 8018fc8:	e9c0 1300 	strd	r1, r3, [r0]
 8018fcc:	4b11      	ldr	r3, [pc, #68]	@ (8019014 <rand+0x70>)
 8018fce:	6083      	str	r3, [r0, #8]
 8018fd0:	230b      	movs	r3, #11
 8018fd2:	8183      	strh	r3, [r0, #12]
 8018fd4:	2100      	movs	r1, #0
 8018fd6:	2001      	movs	r0, #1
 8018fd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018fdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018fde:	480e      	ldr	r0, [pc, #56]	@ (8019018 <rand+0x74>)
 8018fe0:	690b      	ldr	r3, [r1, #16]
 8018fe2:	694c      	ldr	r4, [r1, #20]
 8018fe4:	4a0d      	ldr	r2, [pc, #52]	@ (801901c <rand+0x78>)
 8018fe6:	4358      	muls	r0, r3
 8018fe8:	fb02 0004 	mla	r0, r2, r4, r0
 8018fec:	fba3 3202 	umull	r3, r2, r3, r2
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	eb40 0002 	adc.w	r0, r0, r2
 8018ff6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018ffa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018ffe:	bd10      	pop	{r4, pc}
 8019000:	24000044 	.word	0x24000044
 8019004:	0801e2c8 	.word	0x0801e2c8
 8019008:	0801e2df 	.word	0x0801e2df
 801900c:	abcd330e 	.word	0xabcd330e
 8019010:	e66d1234 	.word	0xe66d1234
 8019014:	0005deec 	.word	0x0005deec
 8019018:	5851f42d 	.word	0x5851f42d
 801901c:	4c957f2d 	.word	0x4c957f2d

08019020 <std>:
 8019020:	2300      	movs	r3, #0
 8019022:	b510      	push	{r4, lr}
 8019024:	4604      	mov	r4, r0
 8019026:	e9c0 3300 	strd	r3, r3, [r0]
 801902a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801902e:	6083      	str	r3, [r0, #8]
 8019030:	8181      	strh	r1, [r0, #12]
 8019032:	6643      	str	r3, [r0, #100]	@ 0x64
 8019034:	81c2      	strh	r2, [r0, #14]
 8019036:	6183      	str	r3, [r0, #24]
 8019038:	4619      	mov	r1, r3
 801903a:	2208      	movs	r2, #8
 801903c:	305c      	adds	r0, #92	@ 0x5c
 801903e:	f000 fa43 	bl	80194c8 <memset>
 8019042:	4b0d      	ldr	r3, [pc, #52]	@ (8019078 <std+0x58>)
 8019044:	6263      	str	r3, [r4, #36]	@ 0x24
 8019046:	4b0d      	ldr	r3, [pc, #52]	@ (801907c <std+0x5c>)
 8019048:	62a3      	str	r3, [r4, #40]	@ 0x28
 801904a:	4b0d      	ldr	r3, [pc, #52]	@ (8019080 <std+0x60>)
 801904c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801904e:	4b0d      	ldr	r3, [pc, #52]	@ (8019084 <std+0x64>)
 8019050:	6323      	str	r3, [r4, #48]	@ 0x30
 8019052:	4b0d      	ldr	r3, [pc, #52]	@ (8019088 <std+0x68>)
 8019054:	6224      	str	r4, [r4, #32]
 8019056:	429c      	cmp	r4, r3
 8019058:	d006      	beq.n	8019068 <std+0x48>
 801905a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801905e:	4294      	cmp	r4, r2
 8019060:	d002      	beq.n	8019068 <std+0x48>
 8019062:	33d0      	adds	r3, #208	@ 0xd0
 8019064:	429c      	cmp	r4, r3
 8019066:	d105      	bne.n	8019074 <std+0x54>
 8019068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801906c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019070:	f000 bb24 	b.w	80196bc <__retarget_lock_init_recursive>
 8019074:	bd10      	pop	{r4, pc}
 8019076:	bf00      	nop
 8019078:	080192c5 	.word	0x080192c5
 801907c:	080192e7 	.word	0x080192e7
 8019080:	0801931f 	.word	0x0801931f
 8019084:	08019343 	.word	0x08019343
 8019088:	2400c50c 	.word	0x2400c50c

0801908c <stdio_exit_handler>:
 801908c:	4a02      	ldr	r2, [pc, #8]	@ (8019098 <stdio_exit_handler+0xc>)
 801908e:	4903      	ldr	r1, [pc, #12]	@ (801909c <stdio_exit_handler+0x10>)
 8019090:	4803      	ldr	r0, [pc, #12]	@ (80190a0 <stdio_exit_handler+0x14>)
 8019092:	f000 b869 	b.w	8019168 <_fwalk_sglue>
 8019096:	bf00      	nop
 8019098:	24000038 	.word	0x24000038
 801909c:	0801a275 	.word	0x0801a275
 80190a0:	24000048 	.word	0x24000048

080190a4 <cleanup_stdio>:
 80190a4:	6841      	ldr	r1, [r0, #4]
 80190a6:	4b0c      	ldr	r3, [pc, #48]	@ (80190d8 <cleanup_stdio+0x34>)
 80190a8:	4299      	cmp	r1, r3
 80190aa:	b510      	push	{r4, lr}
 80190ac:	4604      	mov	r4, r0
 80190ae:	d001      	beq.n	80190b4 <cleanup_stdio+0x10>
 80190b0:	f001 f8e0 	bl	801a274 <_fflush_r>
 80190b4:	68a1      	ldr	r1, [r4, #8]
 80190b6:	4b09      	ldr	r3, [pc, #36]	@ (80190dc <cleanup_stdio+0x38>)
 80190b8:	4299      	cmp	r1, r3
 80190ba:	d002      	beq.n	80190c2 <cleanup_stdio+0x1e>
 80190bc:	4620      	mov	r0, r4
 80190be:	f001 f8d9 	bl	801a274 <_fflush_r>
 80190c2:	68e1      	ldr	r1, [r4, #12]
 80190c4:	4b06      	ldr	r3, [pc, #24]	@ (80190e0 <cleanup_stdio+0x3c>)
 80190c6:	4299      	cmp	r1, r3
 80190c8:	d004      	beq.n	80190d4 <cleanup_stdio+0x30>
 80190ca:	4620      	mov	r0, r4
 80190cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190d0:	f001 b8d0 	b.w	801a274 <_fflush_r>
 80190d4:	bd10      	pop	{r4, pc}
 80190d6:	bf00      	nop
 80190d8:	2400c50c 	.word	0x2400c50c
 80190dc:	2400c574 	.word	0x2400c574
 80190e0:	2400c5dc 	.word	0x2400c5dc

080190e4 <global_stdio_init.part.0>:
 80190e4:	b510      	push	{r4, lr}
 80190e6:	4b0b      	ldr	r3, [pc, #44]	@ (8019114 <global_stdio_init.part.0+0x30>)
 80190e8:	4c0b      	ldr	r4, [pc, #44]	@ (8019118 <global_stdio_init.part.0+0x34>)
 80190ea:	4a0c      	ldr	r2, [pc, #48]	@ (801911c <global_stdio_init.part.0+0x38>)
 80190ec:	601a      	str	r2, [r3, #0]
 80190ee:	4620      	mov	r0, r4
 80190f0:	2200      	movs	r2, #0
 80190f2:	2104      	movs	r1, #4
 80190f4:	f7ff ff94 	bl	8019020 <std>
 80190f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80190fc:	2201      	movs	r2, #1
 80190fe:	2109      	movs	r1, #9
 8019100:	f7ff ff8e 	bl	8019020 <std>
 8019104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019108:	2202      	movs	r2, #2
 801910a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801910e:	2112      	movs	r1, #18
 8019110:	f7ff bf86 	b.w	8019020 <std>
 8019114:	2400c644 	.word	0x2400c644
 8019118:	2400c50c 	.word	0x2400c50c
 801911c:	0801908d 	.word	0x0801908d

08019120 <__sfp_lock_acquire>:
 8019120:	4801      	ldr	r0, [pc, #4]	@ (8019128 <__sfp_lock_acquire+0x8>)
 8019122:	f000 bacc 	b.w	80196be <__retarget_lock_acquire_recursive>
 8019126:	bf00      	nop
 8019128:	2400c64d 	.word	0x2400c64d

0801912c <__sfp_lock_release>:
 801912c:	4801      	ldr	r0, [pc, #4]	@ (8019134 <__sfp_lock_release+0x8>)
 801912e:	f000 bac7 	b.w	80196c0 <__retarget_lock_release_recursive>
 8019132:	bf00      	nop
 8019134:	2400c64d 	.word	0x2400c64d

08019138 <__sinit>:
 8019138:	b510      	push	{r4, lr}
 801913a:	4604      	mov	r4, r0
 801913c:	f7ff fff0 	bl	8019120 <__sfp_lock_acquire>
 8019140:	6a23      	ldr	r3, [r4, #32]
 8019142:	b11b      	cbz	r3, 801914c <__sinit+0x14>
 8019144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019148:	f7ff bff0 	b.w	801912c <__sfp_lock_release>
 801914c:	4b04      	ldr	r3, [pc, #16]	@ (8019160 <__sinit+0x28>)
 801914e:	6223      	str	r3, [r4, #32]
 8019150:	4b04      	ldr	r3, [pc, #16]	@ (8019164 <__sinit+0x2c>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d1f5      	bne.n	8019144 <__sinit+0xc>
 8019158:	f7ff ffc4 	bl	80190e4 <global_stdio_init.part.0>
 801915c:	e7f2      	b.n	8019144 <__sinit+0xc>
 801915e:	bf00      	nop
 8019160:	080190a5 	.word	0x080190a5
 8019164:	2400c644 	.word	0x2400c644

08019168 <_fwalk_sglue>:
 8019168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801916c:	4607      	mov	r7, r0
 801916e:	4688      	mov	r8, r1
 8019170:	4614      	mov	r4, r2
 8019172:	2600      	movs	r6, #0
 8019174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019178:	f1b9 0901 	subs.w	r9, r9, #1
 801917c:	d505      	bpl.n	801918a <_fwalk_sglue+0x22>
 801917e:	6824      	ldr	r4, [r4, #0]
 8019180:	2c00      	cmp	r4, #0
 8019182:	d1f7      	bne.n	8019174 <_fwalk_sglue+0xc>
 8019184:	4630      	mov	r0, r6
 8019186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801918a:	89ab      	ldrh	r3, [r5, #12]
 801918c:	2b01      	cmp	r3, #1
 801918e:	d907      	bls.n	80191a0 <_fwalk_sglue+0x38>
 8019190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019194:	3301      	adds	r3, #1
 8019196:	d003      	beq.n	80191a0 <_fwalk_sglue+0x38>
 8019198:	4629      	mov	r1, r5
 801919a:	4638      	mov	r0, r7
 801919c:	47c0      	blx	r8
 801919e:	4306      	orrs	r6, r0
 80191a0:	3568      	adds	r5, #104	@ 0x68
 80191a2:	e7e9      	b.n	8019178 <_fwalk_sglue+0x10>

080191a4 <iprintf>:
 80191a4:	b40f      	push	{r0, r1, r2, r3}
 80191a6:	b507      	push	{r0, r1, r2, lr}
 80191a8:	4906      	ldr	r1, [pc, #24]	@ (80191c4 <iprintf+0x20>)
 80191aa:	ab04      	add	r3, sp, #16
 80191ac:	6808      	ldr	r0, [r1, #0]
 80191ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80191b2:	6881      	ldr	r1, [r0, #8]
 80191b4:	9301      	str	r3, [sp, #4]
 80191b6:	f000 fd33 	bl	8019c20 <_vfiprintf_r>
 80191ba:	b003      	add	sp, #12
 80191bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80191c0:	b004      	add	sp, #16
 80191c2:	4770      	bx	lr
 80191c4:	24000044 	.word	0x24000044

080191c8 <_puts_r>:
 80191c8:	6a03      	ldr	r3, [r0, #32]
 80191ca:	b570      	push	{r4, r5, r6, lr}
 80191cc:	6884      	ldr	r4, [r0, #8]
 80191ce:	4605      	mov	r5, r0
 80191d0:	460e      	mov	r6, r1
 80191d2:	b90b      	cbnz	r3, 80191d8 <_puts_r+0x10>
 80191d4:	f7ff ffb0 	bl	8019138 <__sinit>
 80191d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80191da:	07db      	lsls	r3, r3, #31
 80191dc:	d405      	bmi.n	80191ea <_puts_r+0x22>
 80191de:	89a3      	ldrh	r3, [r4, #12]
 80191e0:	0598      	lsls	r0, r3, #22
 80191e2:	d402      	bmi.n	80191ea <_puts_r+0x22>
 80191e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80191e6:	f000 fa6a 	bl	80196be <__retarget_lock_acquire_recursive>
 80191ea:	89a3      	ldrh	r3, [r4, #12]
 80191ec:	0719      	lsls	r1, r3, #28
 80191ee:	d502      	bpl.n	80191f6 <_puts_r+0x2e>
 80191f0:	6923      	ldr	r3, [r4, #16]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d135      	bne.n	8019262 <_puts_r+0x9a>
 80191f6:	4621      	mov	r1, r4
 80191f8:	4628      	mov	r0, r5
 80191fa:	f000 f8e5 	bl	80193c8 <__swsetup_r>
 80191fe:	b380      	cbz	r0, 8019262 <_puts_r+0x9a>
 8019200:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019204:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019206:	07da      	lsls	r2, r3, #31
 8019208:	d405      	bmi.n	8019216 <_puts_r+0x4e>
 801920a:	89a3      	ldrh	r3, [r4, #12]
 801920c:	059b      	lsls	r3, r3, #22
 801920e:	d402      	bmi.n	8019216 <_puts_r+0x4e>
 8019210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019212:	f000 fa55 	bl	80196c0 <__retarget_lock_release_recursive>
 8019216:	4628      	mov	r0, r5
 8019218:	bd70      	pop	{r4, r5, r6, pc}
 801921a:	2b00      	cmp	r3, #0
 801921c:	da04      	bge.n	8019228 <_puts_r+0x60>
 801921e:	69a2      	ldr	r2, [r4, #24]
 8019220:	429a      	cmp	r2, r3
 8019222:	dc17      	bgt.n	8019254 <_puts_r+0x8c>
 8019224:	290a      	cmp	r1, #10
 8019226:	d015      	beq.n	8019254 <_puts_r+0x8c>
 8019228:	6823      	ldr	r3, [r4, #0]
 801922a:	1c5a      	adds	r2, r3, #1
 801922c:	6022      	str	r2, [r4, #0]
 801922e:	7019      	strb	r1, [r3, #0]
 8019230:	68a3      	ldr	r3, [r4, #8]
 8019232:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019236:	3b01      	subs	r3, #1
 8019238:	60a3      	str	r3, [r4, #8]
 801923a:	2900      	cmp	r1, #0
 801923c:	d1ed      	bne.n	801921a <_puts_r+0x52>
 801923e:	2b00      	cmp	r3, #0
 8019240:	da11      	bge.n	8019266 <_puts_r+0x9e>
 8019242:	4622      	mov	r2, r4
 8019244:	210a      	movs	r1, #10
 8019246:	4628      	mov	r0, r5
 8019248:	f000 f87f 	bl	801934a <__swbuf_r>
 801924c:	3001      	adds	r0, #1
 801924e:	d0d7      	beq.n	8019200 <_puts_r+0x38>
 8019250:	250a      	movs	r5, #10
 8019252:	e7d7      	b.n	8019204 <_puts_r+0x3c>
 8019254:	4622      	mov	r2, r4
 8019256:	4628      	mov	r0, r5
 8019258:	f000 f877 	bl	801934a <__swbuf_r>
 801925c:	3001      	adds	r0, #1
 801925e:	d1e7      	bne.n	8019230 <_puts_r+0x68>
 8019260:	e7ce      	b.n	8019200 <_puts_r+0x38>
 8019262:	3e01      	subs	r6, #1
 8019264:	e7e4      	b.n	8019230 <_puts_r+0x68>
 8019266:	6823      	ldr	r3, [r4, #0]
 8019268:	1c5a      	adds	r2, r3, #1
 801926a:	6022      	str	r2, [r4, #0]
 801926c:	220a      	movs	r2, #10
 801926e:	701a      	strb	r2, [r3, #0]
 8019270:	e7ee      	b.n	8019250 <_puts_r+0x88>
	...

08019274 <puts>:
 8019274:	4b02      	ldr	r3, [pc, #8]	@ (8019280 <puts+0xc>)
 8019276:	4601      	mov	r1, r0
 8019278:	6818      	ldr	r0, [r3, #0]
 801927a:	f7ff bfa5 	b.w	80191c8 <_puts_r>
 801927e:	bf00      	nop
 8019280:	24000044 	.word	0x24000044

08019284 <siprintf>:
 8019284:	b40e      	push	{r1, r2, r3}
 8019286:	b500      	push	{lr}
 8019288:	b09c      	sub	sp, #112	@ 0x70
 801928a:	ab1d      	add	r3, sp, #116	@ 0x74
 801928c:	9002      	str	r0, [sp, #8]
 801928e:	9006      	str	r0, [sp, #24]
 8019290:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019294:	4809      	ldr	r0, [pc, #36]	@ (80192bc <siprintf+0x38>)
 8019296:	9107      	str	r1, [sp, #28]
 8019298:	9104      	str	r1, [sp, #16]
 801929a:	4909      	ldr	r1, [pc, #36]	@ (80192c0 <siprintf+0x3c>)
 801929c:	f853 2b04 	ldr.w	r2, [r3], #4
 80192a0:	9105      	str	r1, [sp, #20]
 80192a2:	6800      	ldr	r0, [r0, #0]
 80192a4:	9301      	str	r3, [sp, #4]
 80192a6:	a902      	add	r1, sp, #8
 80192a8:	f000 fb94 	bl	80199d4 <_svfiprintf_r>
 80192ac:	9b02      	ldr	r3, [sp, #8]
 80192ae:	2200      	movs	r2, #0
 80192b0:	701a      	strb	r2, [r3, #0]
 80192b2:	b01c      	add	sp, #112	@ 0x70
 80192b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80192b8:	b003      	add	sp, #12
 80192ba:	4770      	bx	lr
 80192bc:	24000044 	.word	0x24000044
 80192c0:	ffff0208 	.word	0xffff0208

080192c4 <__sread>:
 80192c4:	b510      	push	{r4, lr}
 80192c6:	460c      	mov	r4, r1
 80192c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192cc:	f000 f9ae 	bl	801962c <_read_r>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	bfab      	itete	ge
 80192d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80192d6:	89a3      	ldrhlt	r3, [r4, #12]
 80192d8:	181b      	addge	r3, r3, r0
 80192da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80192de:	bfac      	ite	ge
 80192e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80192e2:	81a3      	strhlt	r3, [r4, #12]
 80192e4:	bd10      	pop	{r4, pc}

080192e6 <__swrite>:
 80192e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192ea:	461f      	mov	r7, r3
 80192ec:	898b      	ldrh	r3, [r1, #12]
 80192ee:	05db      	lsls	r3, r3, #23
 80192f0:	4605      	mov	r5, r0
 80192f2:	460c      	mov	r4, r1
 80192f4:	4616      	mov	r6, r2
 80192f6:	d505      	bpl.n	8019304 <__swrite+0x1e>
 80192f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192fc:	2302      	movs	r3, #2
 80192fe:	2200      	movs	r2, #0
 8019300:	f000 f982 	bl	8019608 <_lseek_r>
 8019304:	89a3      	ldrh	r3, [r4, #12]
 8019306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801930a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801930e:	81a3      	strh	r3, [r4, #12]
 8019310:	4632      	mov	r2, r6
 8019312:	463b      	mov	r3, r7
 8019314:	4628      	mov	r0, r5
 8019316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801931a:	f000 b999 	b.w	8019650 <_write_r>

0801931e <__sseek>:
 801931e:	b510      	push	{r4, lr}
 8019320:	460c      	mov	r4, r1
 8019322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019326:	f000 f96f 	bl	8019608 <_lseek_r>
 801932a:	1c43      	adds	r3, r0, #1
 801932c:	89a3      	ldrh	r3, [r4, #12]
 801932e:	bf15      	itete	ne
 8019330:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801933a:	81a3      	strheq	r3, [r4, #12]
 801933c:	bf18      	it	ne
 801933e:	81a3      	strhne	r3, [r4, #12]
 8019340:	bd10      	pop	{r4, pc}

08019342 <__sclose>:
 8019342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019346:	f000 b8f9 	b.w	801953c <_close_r>

0801934a <__swbuf_r>:
 801934a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801934c:	460e      	mov	r6, r1
 801934e:	4614      	mov	r4, r2
 8019350:	4605      	mov	r5, r0
 8019352:	b118      	cbz	r0, 801935c <__swbuf_r+0x12>
 8019354:	6a03      	ldr	r3, [r0, #32]
 8019356:	b90b      	cbnz	r3, 801935c <__swbuf_r+0x12>
 8019358:	f7ff feee 	bl	8019138 <__sinit>
 801935c:	69a3      	ldr	r3, [r4, #24]
 801935e:	60a3      	str	r3, [r4, #8]
 8019360:	89a3      	ldrh	r3, [r4, #12]
 8019362:	071a      	lsls	r2, r3, #28
 8019364:	d501      	bpl.n	801936a <__swbuf_r+0x20>
 8019366:	6923      	ldr	r3, [r4, #16]
 8019368:	b943      	cbnz	r3, 801937c <__swbuf_r+0x32>
 801936a:	4621      	mov	r1, r4
 801936c:	4628      	mov	r0, r5
 801936e:	f000 f82b 	bl	80193c8 <__swsetup_r>
 8019372:	b118      	cbz	r0, 801937c <__swbuf_r+0x32>
 8019374:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019378:	4638      	mov	r0, r7
 801937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801937c:	6823      	ldr	r3, [r4, #0]
 801937e:	6922      	ldr	r2, [r4, #16]
 8019380:	1a98      	subs	r0, r3, r2
 8019382:	6963      	ldr	r3, [r4, #20]
 8019384:	b2f6      	uxtb	r6, r6
 8019386:	4283      	cmp	r3, r0
 8019388:	4637      	mov	r7, r6
 801938a:	dc05      	bgt.n	8019398 <__swbuf_r+0x4e>
 801938c:	4621      	mov	r1, r4
 801938e:	4628      	mov	r0, r5
 8019390:	f000 ff70 	bl	801a274 <_fflush_r>
 8019394:	2800      	cmp	r0, #0
 8019396:	d1ed      	bne.n	8019374 <__swbuf_r+0x2a>
 8019398:	68a3      	ldr	r3, [r4, #8]
 801939a:	3b01      	subs	r3, #1
 801939c:	60a3      	str	r3, [r4, #8]
 801939e:	6823      	ldr	r3, [r4, #0]
 80193a0:	1c5a      	adds	r2, r3, #1
 80193a2:	6022      	str	r2, [r4, #0]
 80193a4:	701e      	strb	r6, [r3, #0]
 80193a6:	6962      	ldr	r2, [r4, #20]
 80193a8:	1c43      	adds	r3, r0, #1
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d004      	beq.n	80193b8 <__swbuf_r+0x6e>
 80193ae:	89a3      	ldrh	r3, [r4, #12]
 80193b0:	07db      	lsls	r3, r3, #31
 80193b2:	d5e1      	bpl.n	8019378 <__swbuf_r+0x2e>
 80193b4:	2e0a      	cmp	r6, #10
 80193b6:	d1df      	bne.n	8019378 <__swbuf_r+0x2e>
 80193b8:	4621      	mov	r1, r4
 80193ba:	4628      	mov	r0, r5
 80193bc:	f000 ff5a 	bl	801a274 <_fflush_r>
 80193c0:	2800      	cmp	r0, #0
 80193c2:	d0d9      	beq.n	8019378 <__swbuf_r+0x2e>
 80193c4:	e7d6      	b.n	8019374 <__swbuf_r+0x2a>
	...

080193c8 <__swsetup_r>:
 80193c8:	b538      	push	{r3, r4, r5, lr}
 80193ca:	4b29      	ldr	r3, [pc, #164]	@ (8019470 <__swsetup_r+0xa8>)
 80193cc:	4605      	mov	r5, r0
 80193ce:	6818      	ldr	r0, [r3, #0]
 80193d0:	460c      	mov	r4, r1
 80193d2:	b118      	cbz	r0, 80193dc <__swsetup_r+0x14>
 80193d4:	6a03      	ldr	r3, [r0, #32]
 80193d6:	b90b      	cbnz	r3, 80193dc <__swsetup_r+0x14>
 80193d8:	f7ff feae 	bl	8019138 <__sinit>
 80193dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193e0:	0719      	lsls	r1, r3, #28
 80193e2:	d422      	bmi.n	801942a <__swsetup_r+0x62>
 80193e4:	06da      	lsls	r2, r3, #27
 80193e6:	d407      	bmi.n	80193f8 <__swsetup_r+0x30>
 80193e8:	2209      	movs	r2, #9
 80193ea:	602a      	str	r2, [r5, #0]
 80193ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193f0:	81a3      	strh	r3, [r4, #12]
 80193f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80193f6:	e033      	b.n	8019460 <__swsetup_r+0x98>
 80193f8:	0758      	lsls	r0, r3, #29
 80193fa:	d512      	bpl.n	8019422 <__swsetup_r+0x5a>
 80193fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80193fe:	b141      	cbz	r1, 8019412 <__swsetup_r+0x4a>
 8019400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019404:	4299      	cmp	r1, r3
 8019406:	d002      	beq.n	801940e <__swsetup_r+0x46>
 8019408:	4628      	mov	r0, r5
 801940a:	f000 f987 	bl	801971c <_free_r>
 801940e:	2300      	movs	r3, #0
 8019410:	6363      	str	r3, [r4, #52]	@ 0x34
 8019412:	89a3      	ldrh	r3, [r4, #12]
 8019414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019418:	81a3      	strh	r3, [r4, #12]
 801941a:	2300      	movs	r3, #0
 801941c:	6063      	str	r3, [r4, #4]
 801941e:	6923      	ldr	r3, [r4, #16]
 8019420:	6023      	str	r3, [r4, #0]
 8019422:	89a3      	ldrh	r3, [r4, #12]
 8019424:	f043 0308 	orr.w	r3, r3, #8
 8019428:	81a3      	strh	r3, [r4, #12]
 801942a:	6923      	ldr	r3, [r4, #16]
 801942c:	b94b      	cbnz	r3, 8019442 <__swsetup_r+0x7a>
 801942e:	89a3      	ldrh	r3, [r4, #12]
 8019430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019438:	d003      	beq.n	8019442 <__swsetup_r+0x7a>
 801943a:	4621      	mov	r1, r4
 801943c:	4628      	mov	r0, r5
 801943e:	f000 ff79 	bl	801a334 <__smakebuf_r>
 8019442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019446:	f013 0201 	ands.w	r2, r3, #1
 801944a:	d00a      	beq.n	8019462 <__swsetup_r+0x9a>
 801944c:	2200      	movs	r2, #0
 801944e:	60a2      	str	r2, [r4, #8]
 8019450:	6962      	ldr	r2, [r4, #20]
 8019452:	4252      	negs	r2, r2
 8019454:	61a2      	str	r2, [r4, #24]
 8019456:	6922      	ldr	r2, [r4, #16]
 8019458:	b942      	cbnz	r2, 801946c <__swsetup_r+0xa4>
 801945a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801945e:	d1c5      	bne.n	80193ec <__swsetup_r+0x24>
 8019460:	bd38      	pop	{r3, r4, r5, pc}
 8019462:	0799      	lsls	r1, r3, #30
 8019464:	bf58      	it	pl
 8019466:	6962      	ldrpl	r2, [r4, #20]
 8019468:	60a2      	str	r2, [r4, #8]
 801946a:	e7f4      	b.n	8019456 <__swsetup_r+0x8e>
 801946c:	2000      	movs	r0, #0
 801946e:	e7f7      	b.n	8019460 <__swsetup_r+0x98>
 8019470:	24000044 	.word	0x24000044

08019474 <memcmp>:
 8019474:	b510      	push	{r4, lr}
 8019476:	3901      	subs	r1, #1
 8019478:	4402      	add	r2, r0
 801947a:	4290      	cmp	r0, r2
 801947c:	d101      	bne.n	8019482 <memcmp+0xe>
 801947e:	2000      	movs	r0, #0
 8019480:	e005      	b.n	801948e <memcmp+0x1a>
 8019482:	7803      	ldrb	r3, [r0, #0]
 8019484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019488:	42a3      	cmp	r3, r4
 801948a:	d001      	beq.n	8019490 <memcmp+0x1c>
 801948c:	1b18      	subs	r0, r3, r4
 801948e:	bd10      	pop	{r4, pc}
 8019490:	3001      	adds	r0, #1
 8019492:	e7f2      	b.n	801947a <memcmp+0x6>

08019494 <memmove>:
 8019494:	4288      	cmp	r0, r1
 8019496:	b510      	push	{r4, lr}
 8019498:	eb01 0402 	add.w	r4, r1, r2
 801949c:	d902      	bls.n	80194a4 <memmove+0x10>
 801949e:	4284      	cmp	r4, r0
 80194a0:	4623      	mov	r3, r4
 80194a2:	d807      	bhi.n	80194b4 <memmove+0x20>
 80194a4:	1e43      	subs	r3, r0, #1
 80194a6:	42a1      	cmp	r1, r4
 80194a8:	d008      	beq.n	80194bc <memmove+0x28>
 80194aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80194ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80194b2:	e7f8      	b.n	80194a6 <memmove+0x12>
 80194b4:	4402      	add	r2, r0
 80194b6:	4601      	mov	r1, r0
 80194b8:	428a      	cmp	r2, r1
 80194ba:	d100      	bne.n	80194be <memmove+0x2a>
 80194bc:	bd10      	pop	{r4, pc}
 80194be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80194c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80194c6:	e7f7      	b.n	80194b8 <memmove+0x24>

080194c8 <memset>:
 80194c8:	4402      	add	r2, r0
 80194ca:	4603      	mov	r3, r0
 80194cc:	4293      	cmp	r3, r2
 80194ce:	d100      	bne.n	80194d2 <memset+0xa>
 80194d0:	4770      	bx	lr
 80194d2:	f803 1b01 	strb.w	r1, [r3], #1
 80194d6:	e7f9      	b.n	80194cc <memset+0x4>

080194d8 <strchr>:
 80194d8:	b2c9      	uxtb	r1, r1
 80194da:	4603      	mov	r3, r0
 80194dc:	4618      	mov	r0, r3
 80194de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194e2:	b112      	cbz	r2, 80194ea <strchr+0x12>
 80194e4:	428a      	cmp	r2, r1
 80194e6:	d1f9      	bne.n	80194dc <strchr+0x4>
 80194e8:	4770      	bx	lr
 80194ea:	2900      	cmp	r1, #0
 80194ec:	bf18      	it	ne
 80194ee:	2000      	movne	r0, #0
 80194f0:	4770      	bx	lr

080194f2 <strncmp>:
 80194f2:	b510      	push	{r4, lr}
 80194f4:	b16a      	cbz	r2, 8019512 <strncmp+0x20>
 80194f6:	3901      	subs	r1, #1
 80194f8:	1884      	adds	r4, r0, r2
 80194fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019502:	429a      	cmp	r2, r3
 8019504:	d103      	bne.n	801950e <strncmp+0x1c>
 8019506:	42a0      	cmp	r0, r4
 8019508:	d001      	beq.n	801950e <strncmp+0x1c>
 801950a:	2a00      	cmp	r2, #0
 801950c:	d1f5      	bne.n	80194fa <strncmp+0x8>
 801950e:	1ad0      	subs	r0, r2, r3
 8019510:	bd10      	pop	{r4, pc}
 8019512:	4610      	mov	r0, r2
 8019514:	e7fc      	b.n	8019510 <strncmp+0x1e>

08019516 <strncpy>:
 8019516:	b510      	push	{r4, lr}
 8019518:	3901      	subs	r1, #1
 801951a:	4603      	mov	r3, r0
 801951c:	b132      	cbz	r2, 801952c <strncpy+0x16>
 801951e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019522:	f803 4b01 	strb.w	r4, [r3], #1
 8019526:	3a01      	subs	r2, #1
 8019528:	2c00      	cmp	r4, #0
 801952a:	d1f7      	bne.n	801951c <strncpy+0x6>
 801952c:	441a      	add	r2, r3
 801952e:	2100      	movs	r1, #0
 8019530:	4293      	cmp	r3, r2
 8019532:	d100      	bne.n	8019536 <strncpy+0x20>
 8019534:	bd10      	pop	{r4, pc}
 8019536:	f803 1b01 	strb.w	r1, [r3], #1
 801953a:	e7f9      	b.n	8019530 <strncpy+0x1a>

0801953c <_close_r>:
 801953c:	b538      	push	{r3, r4, r5, lr}
 801953e:	4d06      	ldr	r5, [pc, #24]	@ (8019558 <_close_r+0x1c>)
 8019540:	2300      	movs	r3, #0
 8019542:	4604      	mov	r4, r0
 8019544:	4608      	mov	r0, r1
 8019546:	602b      	str	r3, [r5, #0]
 8019548:	f7e7 fd42 	bl	8000fd0 <_close>
 801954c:	1c43      	adds	r3, r0, #1
 801954e:	d102      	bne.n	8019556 <_close_r+0x1a>
 8019550:	682b      	ldr	r3, [r5, #0]
 8019552:	b103      	cbz	r3, 8019556 <_close_r+0x1a>
 8019554:	6023      	str	r3, [r4, #0]
 8019556:	bd38      	pop	{r3, r4, r5, pc}
 8019558:	2400c648 	.word	0x2400c648

0801955c <_reclaim_reent>:
 801955c:	4b29      	ldr	r3, [pc, #164]	@ (8019604 <_reclaim_reent+0xa8>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	4283      	cmp	r3, r0
 8019562:	b570      	push	{r4, r5, r6, lr}
 8019564:	4604      	mov	r4, r0
 8019566:	d04b      	beq.n	8019600 <_reclaim_reent+0xa4>
 8019568:	69c3      	ldr	r3, [r0, #28]
 801956a:	b1ab      	cbz	r3, 8019598 <_reclaim_reent+0x3c>
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	b16b      	cbz	r3, 801958c <_reclaim_reent+0x30>
 8019570:	2500      	movs	r5, #0
 8019572:	69e3      	ldr	r3, [r4, #28]
 8019574:	68db      	ldr	r3, [r3, #12]
 8019576:	5959      	ldr	r1, [r3, r5]
 8019578:	2900      	cmp	r1, #0
 801957a:	d13b      	bne.n	80195f4 <_reclaim_reent+0x98>
 801957c:	3504      	adds	r5, #4
 801957e:	2d80      	cmp	r5, #128	@ 0x80
 8019580:	d1f7      	bne.n	8019572 <_reclaim_reent+0x16>
 8019582:	69e3      	ldr	r3, [r4, #28]
 8019584:	4620      	mov	r0, r4
 8019586:	68d9      	ldr	r1, [r3, #12]
 8019588:	f000 f8c8 	bl	801971c <_free_r>
 801958c:	69e3      	ldr	r3, [r4, #28]
 801958e:	6819      	ldr	r1, [r3, #0]
 8019590:	b111      	cbz	r1, 8019598 <_reclaim_reent+0x3c>
 8019592:	4620      	mov	r0, r4
 8019594:	f000 f8c2 	bl	801971c <_free_r>
 8019598:	6961      	ldr	r1, [r4, #20]
 801959a:	b111      	cbz	r1, 80195a2 <_reclaim_reent+0x46>
 801959c:	4620      	mov	r0, r4
 801959e:	f000 f8bd 	bl	801971c <_free_r>
 80195a2:	69e1      	ldr	r1, [r4, #28]
 80195a4:	b111      	cbz	r1, 80195ac <_reclaim_reent+0x50>
 80195a6:	4620      	mov	r0, r4
 80195a8:	f000 f8b8 	bl	801971c <_free_r>
 80195ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80195ae:	b111      	cbz	r1, 80195b6 <_reclaim_reent+0x5a>
 80195b0:	4620      	mov	r0, r4
 80195b2:	f000 f8b3 	bl	801971c <_free_r>
 80195b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80195b8:	b111      	cbz	r1, 80195c0 <_reclaim_reent+0x64>
 80195ba:	4620      	mov	r0, r4
 80195bc:	f000 f8ae 	bl	801971c <_free_r>
 80195c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80195c2:	b111      	cbz	r1, 80195ca <_reclaim_reent+0x6e>
 80195c4:	4620      	mov	r0, r4
 80195c6:	f000 f8a9 	bl	801971c <_free_r>
 80195ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80195cc:	b111      	cbz	r1, 80195d4 <_reclaim_reent+0x78>
 80195ce:	4620      	mov	r0, r4
 80195d0:	f000 f8a4 	bl	801971c <_free_r>
 80195d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80195d6:	b111      	cbz	r1, 80195de <_reclaim_reent+0x82>
 80195d8:	4620      	mov	r0, r4
 80195da:	f000 f89f 	bl	801971c <_free_r>
 80195de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80195e0:	b111      	cbz	r1, 80195e8 <_reclaim_reent+0x8c>
 80195e2:	4620      	mov	r0, r4
 80195e4:	f000 f89a 	bl	801971c <_free_r>
 80195e8:	6a23      	ldr	r3, [r4, #32]
 80195ea:	b14b      	cbz	r3, 8019600 <_reclaim_reent+0xa4>
 80195ec:	4620      	mov	r0, r4
 80195ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195f2:	4718      	bx	r3
 80195f4:	680e      	ldr	r6, [r1, #0]
 80195f6:	4620      	mov	r0, r4
 80195f8:	f000 f890 	bl	801971c <_free_r>
 80195fc:	4631      	mov	r1, r6
 80195fe:	e7bb      	b.n	8019578 <_reclaim_reent+0x1c>
 8019600:	bd70      	pop	{r4, r5, r6, pc}
 8019602:	bf00      	nop
 8019604:	24000044 	.word	0x24000044

08019608 <_lseek_r>:
 8019608:	b538      	push	{r3, r4, r5, lr}
 801960a:	4d07      	ldr	r5, [pc, #28]	@ (8019628 <_lseek_r+0x20>)
 801960c:	4604      	mov	r4, r0
 801960e:	4608      	mov	r0, r1
 8019610:	4611      	mov	r1, r2
 8019612:	2200      	movs	r2, #0
 8019614:	602a      	str	r2, [r5, #0]
 8019616:	461a      	mov	r2, r3
 8019618:	f7e7 fd01 	bl	800101e <_lseek>
 801961c:	1c43      	adds	r3, r0, #1
 801961e:	d102      	bne.n	8019626 <_lseek_r+0x1e>
 8019620:	682b      	ldr	r3, [r5, #0]
 8019622:	b103      	cbz	r3, 8019626 <_lseek_r+0x1e>
 8019624:	6023      	str	r3, [r4, #0]
 8019626:	bd38      	pop	{r3, r4, r5, pc}
 8019628:	2400c648 	.word	0x2400c648

0801962c <_read_r>:
 801962c:	b538      	push	{r3, r4, r5, lr}
 801962e:	4d07      	ldr	r5, [pc, #28]	@ (801964c <_read_r+0x20>)
 8019630:	4604      	mov	r4, r0
 8019632:	4608      	mov	r0, r1
 8019634:	4611      	mov	r1, r2
 8019636:	2200      	movs	r2, #0
 8019638:	602a      	str	r2, [r5, #0]
 801963a:	461a      	mov	r2, r3
 801963c:	f7e7 fc8f 	bl	8000f5e <_read>
 8019640:	1c43      	adds	r3, r0, #1
 8019642:	d102      	bne.n	801964a <_read_r+0x1e>
 8019644:	682b      	ldr	r3, [r5, #0]
 8019646:	b103      	cbz	r3, 801964a <_read_r+0x1e>
 8019648:	6023      	str	r3, [r4, #0]
 801964a:	bd38      	pop	{r3, r4, r5, pc}
 801964c:	2400c648 	.word	0x2400c648

08019650 <_write_r>:
 8019650:	b538      	push	{r3, r4, r5, lr}
 8019652:	4d07      	ldr	r5, [pc, #28]	@ (8019670 <_write_r+0x20>)
 8019654:	4604      	mov	r4, r0
 8019656:	4608      	mov	r0, r1
 8019658:	4611      	mov	r1, r2
 801965a:	2200      	movs	r2, #0
 801965c:	602a      	str	r2, [r5, #0]
 801965e:	461a      	mov	r2, r3
 8019660:	f7e7 fc9a 	bl	8000f98 <_write>
 8019664:	1c43      	adds	r3, r0, #1
 8019666:	d102      	bne.n	801966e <_write_r+0x1e>
 8019668:	682b      	ldr	r3, [r5, #0]
 801966a:	b103      	cbz	r3, 801966e <_write_r+0x1e>
 801966c:	6023      	str	r3, [r4, #0]
 801966e:	bd38      	pop	{r3, r4, r5, pc}
 8019670:	2400c648 	.word	0x2400c648

08019674 <__libc_init_array>:
 8019674:	b570      	push	{r4, r5, r6, lr}
 8019676:	4d0d      	ldr	r5, [pc, #52]	@ (80196ac <__libc_init_array+0x38>)
 8019678:	4c0d      	ldr	r4, [pc, #52]	@ (80196b0 <__libc_init_array+0x3c>)
 801967a:	1b64      	subs	r4, r4, r5
 801967c:	10a4      	asrs	r4, r4, #2
 801967e:	2600      	movs	r6, #0
 8019680:	42a6      	cmp	r6, r4
 8019682:	d109      	bne.n	8019698 <__libc_init_array+0x24>
 8019684:	4d0b      	ldr	r5, [pc, #44]	@ (80196b4 <__libc_init_array+0x40>)
 8019686:	4c0c      	ldr	r4, [pc, #48]	@ (80196b8 <__libc_init_array+0x44>)
 8019688:	f000 ff44 	bl	801a514 <_init>
 801968c:	1b64      	subs	r4, r4, r5
 801968e:	10a4      	asrs	r4, r4, #2
 8019690:	2600      	movs	r6, #0
 8019692:	42a6      	cmp	r6, r4
 8019694:	d105      	bne.n	80196a2 <__libc_init_array+0x2e>
 8019696:	bd70      	pop	{r4, r5, r6, pc}
 8019698:	f855 3b04 	ldr.w	r3, [r5], #4
 801969c:	4798      	blx	r3
 801969e:	3601      	adds	r6, #1
 80196a0:	e7ee      	b.n	8019680 <__libc_init_array+0xc>
 80196a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80196a6:	4798      	blx	r3
 80196a8:	3601      	adds	r6, #1
 80196aa:	e7f2      	b.n	8019692 <__libc_init_array+0x1e>
 80196ac:	0801e3b0 	.word	0x0801e3b0
 80196b0:	0801e3b0 	.word	0x0801e3b0
 80196b4:	0801e3b0 	.word	0x0801e3b0
 80196b8:	0801e3b4 	.word	0x0801e3b4

080196bc <__retarget_lock_init_recursive>:
 80196bc:	4770      	bx	lr

080196be <__retarget_lock_acquire_recursive>:
 80196be:	4770      	bx	lr

080196c0 <__retarget_lock_release_recursive>:
 80196c0:	4770      	bx	lr

080196c2 <memcpy>:
 80196c2:	440a      	add	r2, r1
 80196c4:	4291      	cmp	r1, r2
 80196c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80196ca:	d100      	bne.n	80196ce <memcpy+0xc>
 80196cc:	4770      	bx	lr
 80196ce:	b510      	push	{r4, lr}
 80196d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80196d8:	4291      	cmp	r1, r2
 80196da:	d1f9      	bne.n	80196d0 <memcpy+0xe>
 80196dc:	bd10      	pop	{r4, pc}
	...

080196e0 <__assert_func>:
 80196e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196e2:	4614      	mov	r4, r2
 80196e4:	461a      	mov	r2, r3
 80196e6:	4b09      	ldr	r3, [pc, #36]	@ (801970c <__assert_func+0x2c>)
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	4605      	mov	r5, r0
 80196ec:	68d8      	ldr	r0, [r3, #12]
 80196ee:	b954      	cbnz	r4, 8019706 <__assert_func+0x26>
 80196f0:	4b07      	ldr	r3, [pc, #28]	@ (8019710 <__assert_func+0x30>)
 80196f2:	461c      	mov	r4, r3
 80196f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80196f8:	9100      	str	r1, [sp, #0]
 80196fa:	462b      	mov	r3, r5
 80196fc:	4905      	ldr	r1, [pc, #20]	@ (8019714 <__assert_func+0x34>)
 80196fe:	f000 fde1 	bl	801a2c4 <fiprintf>
 8019702:	f000 fe85 	bl	801a410 <abort>
 8019706:	4b04      	ldr	r3, [pc, #16]	@ (8019718 <__assert_func+0x38>)
 8019708:	e7f4      	b.n	80196f4 <__assert_func+0x14>
 801970a:	bf00      	nop
 801970c:	24000044 	.word	0x24000044
 8019710:	0801e372 	.word	0x0801e372
 8019714:	0801e344 	.word	0x0801e344
 8019718:	0801e337 	.word	0x0801e337

0801971c <_free_r>:
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	4605      	mov	r5, r0
 8019720:	2900      	cmp	r1, #0
 8019722:	d041      	beq.n	80197a8 <_free_r+0x8c>
 8019724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019728:	1f0c      	subs	r4, r1, #4
 801972a:	2b00      	cmp	r3, #0
 801972c:	bfb8      	it	lt
 801972e:	18e4      	addlt	r4, r4, r3
 8019730:	f000 f8e8 	bl	8019904 <__malloc_lock>
 8019734:	4a1d      	ldr	r2, [pc, #116]	@ (80197ac <_free_r+0x90>)
 8019736:	6813      	ldr	r3, [r2, #0]
 8019738:	b933      	cbnz	r3, 8019748 <_free_r+0x2c>
 801973a:	6063      	str	r3, [r4, #4]
 801973c:	6014      	str	r4, [r2, #0]
 801973e:	4628      	mov	r0, r5
 8019740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019744:	f000 b8e4 	b.w	8019910 <__malloc_unlock>
 8019748:	42a3      	cmp	r3, r4
 801974a:	d908      	bls.n	801975e <_free_r+0x42>
 801974c:	6820      	ldr	r0, [r4, #0]
 801974e:	1821      	adds	r1, r4, r0
 8019750:	428b      	cmp	r3, r1
 8019752:	bf01      	itttt	eq
 8019754:	6819      	ldreq	r1, [r3, #0]
 8019756:	685b      	ldreq	r3, [r3, #4]
 8019758:	1809      	addeq	r1, r1, r0
 801975a:	6021      	streq	r1, [r4, #0]
 801975c:	e7ed      	b.n	801973a <_free_r+0x1e>
 801975e:	461a      	mov	r2, r3
 8019760:	685b      	ldr	r3, [r3, #4]
 8019762:	b10b      	cbz	r3, 8019768 <_free_r+0x4c>
 8019764:	42a3      	cmp	r3, r4
 8019766:	d9fa      	bls.n	801975e <_free_r+0x42>
 8019768:	6811      	ldr	r1, [r2, #0]
 801976a:	1850      	adds	r0, r2, r1
 801976c:	42a0      	cmp	r0, r4
 801976e:	d10b      	bne.n	8019788 <_free_r+0x6c>
 8019770:	6820      	ldr	r0, [r4, #0]
 8019772:	4401      	add	r1, r0
 8019774:	1850      	adds	r0, r2, r1
 8019776:	4283      	cmp	r3, r0
 8019778:	6011      	str	r1, [r2, #0]
 801977a:	d1e0      	bne.n	801973e <_free_r+0x22>
 801977c:	6818      	ldr	r0, [r3, #0]
 801977e:	685b      	ldr	r3, [r3, #4]
 8019780:	6053      	str	r3, [r2, #4]
 8019782:	4408      	add	r0, r1
 8019784:	6010      	str	r0, [r2, #0]
 8019786:	e7da      	b.n	801973e <_free_r+0x22>
 8019788:	d902      	bls.n	8019790 <_free_r+0x74>
 801978a:	230c      	movs	r3, #12
 801978c:	602b      	str	r3, [r5, #0]
 801978e:	e7d6      	b.n	801973e <_free_r+0x22>
 8019790:	6820      	ldr	r0, [r4, #0]
 8019792:	1821      	adds	r1, r4, r0
 8019794:	428b      	cmp	r3, r1
 8019796:	bf04      	itt	eq
 8019798:	6819      	ldreq	r1, [r3, #0]
 801979a:	685b      	ldreq	r3, [r3, #4]
 801979c:	6063      	str	r3, [r4, #4]
 801979e:	bf04      	itt	eq
 80197a0:	1809      	addeq	r1, r1, r0
 80197a2:	6021      	streq	r1, [r4, #0]
 80197a4:	6054      	str	r4, [r2, #4]
 80197a6:	e7ca      	b.n	801973e <_free_r+0x22>
 80197a8:	bd38      	pop	{r3, r4, r5, pc}
 80197aa:	bf00      	nop
 80197ac:	2400c654 	.word	0x2400c654

080197b0 <malloc>:
 80197b0:	4b02      	ldr	r3, [pc, #8]	@ (80197bc <malloc+0xc>)
 80197b2:	4601      	mov	r1, r0
 80197b4:	6818      	ldr	r0, [r3, #0]
 80197b6:	f000 b825 	b.w	8019804 <_malloc_r>
 80197ba:	bf00      	nop
 80197bc:	24000044 	.word	0x24000044

080197c0 <sbrk_aligned>:
 80197c0:	b570      	push	{r4, r5, r6, lr}
 80197c2:	4e0f      	ldr	r6, [pc, #60]	@ (8019800 <sbrk_aligned+0x40>)
 80197c4:	460c      	mov	r4, r1
 80197c6:	6831      	ldr	r1, [r6, #0]
 80197c8:	4605      	mov	r5, r0
 80197ca:	b911      	cbnz	r1, 80197d2 <sbrk_aligned+0x12>
 80197cc:	f000 fe10 	bl	801a3f0 <_sbrk_r>
 80197d0:	6030      	str	r0, [r6, #0]
 80197d2:	4621      	mov	r1, r4
 80197d4:	4628      	mov	r0, r5
 80197d6:	f000 fe0b 	bl	801a3f0 <_sbrk_r>
 80197da:	1c43      	adds	r3, r0, #1
 80197dc:	d103      	bne.n	80197e6 <sbrk_aligned+0x26>
 80197de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80197e2:	4620      	mov	r0, r4
 80197e4:	bd70      	pop	{r4, r5, r6, pc}
 80197e6:	1cc4      	adds	r4, r0, #3
 80197e8:	f024 0403 	bic.w	r4, r4, #3
 80197ec:	42a0      	cmp	r0, r4
 80197ee:	d0f8      	beq.n	80197e2 <sbrk_aligned+0x22>
 80197f0:	1a21      	subs	r1, r4, r0
 80197f2:	4628      	mov	r0, r5
 80197f4:	f000 fdfc 	bl	801a3f0 <_sbrk_r>
 80197f8:	3001      	adds	r0, #1
 80197fa:	d1f2      	bne.n	80197e2 <sbrk_aligned+0x22>
 80197fc:	e7ef      	b.n	80197de <sbrk_aligned+0x1e>
 80197fe:	bf00      	nop
 8019800:	2400c650 	.word	0x2400c650

08019804 <_malloc_r>:
 8019804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019808:	1ccd      	adds	r5, r1, #3
 801980a:	f025 0503 	bic.w	r5, r5, #3
 801980e:	3508      	adds	r5, #8
 8019810:	2d0c      	cmp	r5, #12
 8019812:	bf38      	it	cc
 8019814:	250c      	movcc	r5, #12
 8019816:	2d00      	cmp	r5, #0
 8019818:	4606      	mov	r6, r0
 801981a:	db01      	blt.n	8019820 <_malloc_r+0x1c>
 801981c:	42a9      	cmp	r1, r5
 801981e:	d904      	bls.n	801982a <_malloc_r+0x26>
 8019820:	230c      	movs	r3, #12
 8019822:	6033      	str	r3, [r6, #0]
 8019824:	2000      	movs	r0, #0
 8019826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801982a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019900 <_malloc_r+0xfc>
 801982e:	f000 f869 	bl	8019904 <__malloc_lock>
 8019832:	f8d8 3000 	ldr.w	r3, [r8]
 8019836:	461c      	mov	r4, r3
 8019838:	bb44      	cbnz	r4, 801988c <_malloc_r+0x88>
 801983a:	4629      	mov	r1, r5
 801983c:	4630      	mov	r0, r6
 801983e:	f7ff ffbf 	bl	80197c0 <sbrk_aligned>
 8019842:	1c43      	adds	r3, r0, #1
 8019844:	4604      	mov	r4, r0
 8019846:	d158      	bne.n	80198fa <_malloc_r+0xf6>
 8019848:	f8d8 4000 	ldr.w	r4, [r8]
 801984c:	4627      	mov	r7, r4
 801984e:	2f00      	cmp	r7, #0
 8019850:	d143      	bne.n	80198da <_malloc_r+0xd6>
 8019852:	2c00      	cmp	r4, #0
 8019854:	d04b      	beq.n	80198ee <_malloc_r+0xea>
 8019856:	6823      	ldr	r3, [r4, #0]
 8019858:	4639      	mov	r1, r7
 801985a:	4630      	mov	r0, r6
 801985c:	eb04 0903 	add.w	r9, r4, r3
 8019860:	f000 fdc6 	bl	801a3f0 <_sbrk_r>
 8019864:	4581      	cmp	r9, r0
 8019866:	d142      	bne.n	80198ee <_malloc_r+0xea>
 8019868:	6821      	ldr	r1, [r4, #0]
 801986a:	1a6d      	subs	r5, r5, r1
 801986c:	4629      	mov	r1, r5
 801986e:	4630      	mov	r0, r6
 8019870:	f7ff ffa6 	bl	80197c0 <sbrk_aligned>
 8019874:	3001      	adds	r0, #1
 8019876:	d03a      	beq.n	80198ee <_malloc_r+0xea>
 8019878:	6823      	ldr	r3, [r4, #0]
 801987a:	442b      	add	r3, r5
 801987c:	6023      	str	r3, [r4, #0]
 801987e:	f8d8 3000 	ldr.w	r3, [r8]
 8019882:	685a      	ldr	r2, [r3, #4]
 8019884:	bb62      	cbnz	r2, 80198e0 <_malloc_r+0xdc>
 8019886:	f8c8 7000 	str.w	r7, [r8]
 801988a:	e00f      	b.n	80198ac <_malloc_r+0xa8>
 801988c:	6822      	ldr	r2, [r4, #0]
 801988e:	1b52      	subs	r2, r2, r5
 8019890:	d420      	bmi.n	80198d4 <_malloc_r+0xd0>
 8019892:	2a0b      	cmp	r2, #11
 8019894:	d917      	bls.n	80198c6 <_malloc_r+0xc2>
 8019896:	1961      	adds	r1, r4, r5
 8019898:	42a3      	cmp	r3, r4
 801989a:	6025      	str	r5, [r4, #0]
 801989c:	bf18      	it	ne
 801989e:	6059      	strne	r1, [r3, #4]
 80198a0:	6863      	ldr	r3, [r4, #4]
 80198a2:	bf08      	it	eq
 80198a4:	f8c8 1000 	streq.w	r1, [r8]
 80198a8:	5162      	str	r2, [r4, r5]
 80198aa:	604b      	str	r3, [r1, #4]
 80198ac:	4630      	mov	r0, r6
 80198ae:	f000 f82f 	bl	8019910 <__malloc_unlock>
 80198b2:	f104 000b 	add.w	r0, r4, #11
 80198b6:	1d23      	adds	r3, r4, #4
 80198b8:	f020 0007 	bic.w	r0, r0, #7
 80198bc:	1ac2      	subs	r2, r0, r3
 80198be:	bf1c      	itt	ne
 80198c0:	1a1b      	subne	r3, r3, r0
 80198c2:	50a3      	strne	r3, [r4, r2]
 80198c4:	e7af      	b.n	8019826 <_malloc_r+0x22>
 80198c6:	6862      	ldr	r2, [r4, #4]
 80198c8:	42a3      	cmp	r3, r4
 80198ca:	bf0c      	ite	eq
 80198cc:	f8c8 2000 	streq.w	r2, [r8]
 80198d0:	605a      	strne	r2, [r3, #4]
 80198d2:	e7eb      	b.n	80198ac <_malloc_r+0xa8>
 80198d4:	4623      	mov	r3, r4
 80198d6:	6864      	ldr	r4, [r4, #4]
 80198d8:	e7ae      	b.n	8019838 <_malloc_r+0x34>
 80198da:	463c      	mov	r4, r7
 80198dc:	687f      	ldr	r7, [r7, #4]
 80198de:	e7b6      	b.n	801984e <_malloc_r+0x4a>
 80198e0:	461a      	mov	r2, r3
 80198e2:	685b      	ldr	r3, [r3, #4]
 80198e4:	42a3      	cmp	r3, r4
 80198e6:	d1fb      	bne.n	80198e0 <_malloc_r+0xdc>
 80198e8:	2300      	movs	r3, #0
 80198ea:	6053      	str	r3, [r2, #4]
 80198ec:	e7de      	b.n	80198ac <_malloc_r+0xa8>
 80198ee:	230c      	movs	r3, #12
 80198f0:	6033      	str	r3, [r6, #0]
 80198f2:	4630      	mov	r0, r6
 80198f4:	f000 f80c 	bl	8019910 <__malloc_unlock>
 80198f8:	e794      	b.n	8019824 <_malloc_r+0x20>
 80198fa:	6005      	str	r5, [r0, #0]
 80198fc:	e7d6      	b.n	80198ac <_malloc_r+0xa8>
 80198fe:	bf00      	nop
 8019900:	2400c654 	.word	0x2400c654

08019904 <__malloc_lock>:
 8019904:	4801      	ldr	r0, [pc, #4]	@ (801990c <__malloc_lock+0x8>)
 8019906:	f7ff beda 	b.w	80196be <__retarget_lock_acquire_recursive>
 801990a:	bf00      	nop
 801990c:	2400c64c 	.word	0x2400c64c

08019910 <__malloc_unlock>:
 8019910:	4801      	ldr	r0, [pc, #4]	@ (8019918 <__malloc_unlock+0x8>)
 8019912:	f7ff bed5 	b.w	80196c0 <__retarget_lock_release_recursive>
 8019916:	bf00      	nop
 8019918:	2400c64c 	.word	0x2400c64c

0801991c <__ssputs_r>:
 801991c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019920:	688e      	ldr	r6, [r1, #8]
 8019922:	461f      	mov	r7, r3
 8019924:	42be      	cmp	r6, r7
 8019926:	680b      	ldr	r3, [r1, #0]
 8019928:	4682      	mov	sl, r0
 801992a:	460c      	mov	r4, r1
 801992c:	4690      	mov	r8, r2
 801992e:	d82d      	bhi.n	801998c <__ssputs_r+0x70>
 8019930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019938:	d026      	beq.n	8019988 <__ssputs_r+0x6c>
 801993a:	6965      	ldr	r5, [r4, #20]
 801993c:	6909      	ldr	r1, [r1, #16]
 801993e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019942:	eba3 0901 	sub.w	r9, r3, r1
 8019946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801994a:	1c7b      	adds	r3, r7, #1
 801994c:	444b      	add	r3, r9
 801994e:	106d      	asrs	r5, r5, #1
 8019950:	429d      	cmp	r5, r3
 8019952:	bf38      	it	cc
 8019954:	461d      	movcc	r5, r3
 8019956:	0553      	lsls	r3, r2, #21
 8019958:	d527      	bpl.n	80199aa <__ssputs_r+0x8e>
 801995a:	4629      	mov	r1, r5
 801995c:	f7ff ff52 	bl	8019804 <_malloc_r>
 8019960:	4606      	mov	r6, r0
 8019962:	b360      	cbz	r0, 80199be <__ssputs_r+0xa2>
 8019964:	6921      	ldr	r1, [r4, #16]
 8019966:	464a      	mov	r2, r9
 8019968:	f7ff feab 	bl	80196c2 <memcpy>
 801996c:	89a3      	ldrh	r3, [r4, #12]
 801996e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019976:	81a3      	strh	r3, [r4, #12]
 8019978:	6126      	str	r6, [r4, #16]
 801997a:	6165      	str	r5, [r4, #20]
 801997c:	444e      	add	r6, r9
 801997e:	eba5 0509 	sub.w	r5, r5, r9
 8019982:	6026      	str	r6, [r4, #0]
 8019984:	60a5      	str	r5, [r4, #8]
 8019986:	463e      	mov	r6, r7
 8019988:	42be      	cmp	r6, r7
 801998a:	d900      	bls.n	801998e <__ssputs_r+0x72>
 801998c:	463e      	mov	r6, r7
 801998e:	6820      	ldr	r0, [r4, #0]
 8019990:	4632      	mov	r2, r6
 8019992:	4641      	mov	r1, r8
 8019994:	f7ff fd7e 	bl	8019494 <memmove>
 8019998:	68a3      	ldr	r3, [r4, #8]
 801999a:	1b9b      	subs	r3, r3, r6
 801999c:	60a3      	str	r3, [r4, #8]
 801999e:	6823      	ldr	r3, [r4, #0]
 80199a0:	4433      	add	r3, r6
 80199a2:	6023      	str	r3, [r4, #0]
 80199a4:	2000      	movs	r0, #0
 80199a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199aa:	462a      	mov	r2, r5
 80199ac:	f000 fd37 	bl	801a41e <_realloc_r>
 80199b0:	4606      	mov	r6, r0
 80199b2:	2800      	cmp	r0, #0
 80199b4:	d1e0      	bne.n	8019978 <__ssputs_r+0x5c>
 80199b6:	6921      	ldr	r1, [r4, #16]
 80199b8:	4650      	mov	r0, sl
 80199ba:	f7ff feaf 	bl	801971c <_free_r>
 80199be:	230c      	movs	r3, #12
 80199c0:	f8ca 3000 	str.w	r3, [sl]
 80199c4:	89a3      	ldrh	r3, [r4, #12]
 80199c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199ca:	81a3      	strh	r3, [r4, #12]
 80199cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199d0:	e7e9      	b.n	80199a6 <__ssputs_r+0x8a>
	...

080199d4 <_svfiprintf_r>:
 80199d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199d8:	4698      	mov	r8, r3
 80199da:	898b      	ldrh	r3, [r1, #12]
 80199dc:	061b      	lsls	r3, r3, #24
 80199de:	b09d      	sub	sp, #116	@ 0x74
 80199e0:	4607      	mov	r7, r0
 80199e2:	460d      	mov	r5, r1
 80199e4:	4614      	mov	r4, r2
 80199e6:	d510      	bpl.n	8019a0a <_svfiprintf_r+0x36>
 80199e8:	690b      	ldr	r3, [r1, #16]
 80199ea:	b973      	cbnz	r3, 8019a0a <_svfiprintf_r+0x36>
 80199ec:	2140      	movs	r1, #64	@ 0x40
 80199ee:	f7ff ff09 	bl	8019804 <_malloc_r>
 80199f2:	6028      	str	r0, [r5, #0]
 80199f4:	6128      	str	r0, [r5, #16]
 80199f6:	b930      	cbnz	r0, 8019a06 <_svfiprintf_r+0x32>
 80199f8:	230c      	movs	r3, #12
 80199fa:	603b      	str	r3, [r7, #0]
 80199fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a00:	b01d      	add	sp, #116	@ 0x74
 8019a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a06:	2340      	movs	r3, #64	@ 0x40
 8019a08:	616b      	str	r3, [r5, #20]
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a0e:	2320      	movs	r3, #32
 8019a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a18:	2330      	movs	r3, #48	@ 0x30
 8019a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019bb8 <_svfiprintf_r+0x1e4>
 8019a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019a22:	f04f 0901 	mov.w	r9, #1
 8019a26:	4623      	mov	r3, r4
 8019a28:	469a      	mov	sl, r3
 8019a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a2e:	b10a      	cbz	r2, 8019a34 <_svfiprintf_r+0x60>
 8019a30:	2a25      	cmp	r2, #37	@ 0x25
 8019a32:	d1f9      	bne.n	8019a28 <_svfiprintf_r+0x54>
 8019a34:	ebba 0b04 	subs.w	fp, sl, r4
 8019a38:	d00b      	beq.n	8019a52 <_svfiprintf_r+0x7e>
 8019a3a:	465b      	mov	r3, fp
 8019a3c:	4622      	mov	r2, r4
 8019a3e:	4629      	mov	r1, r5
 8019a40:	4638      	mov	r0, r7
 8019a42:	f7ff ff6b 	bl	801991c <__ssputs_r>
 8019a46:	3001      	adds	r0, #1
 8019a48:	f000 80a7 	beq.w	8019b9a <_svfiprintf_r+0x1c6>
 8019a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a4e:	445a      	add	r2, fp
 8019a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8019a52:	f89a 3000 	ldrb.w	r3, [sl]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	f000 809f 	beq.w	8019b9a <_svfiprintf_r+0x1c6>
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a66:	f10a 0a01 	add.w	sl, sl, #1
 8019a6a:	9304      	str	r3, [sp, #16]
 8019a6c:	9307      	str	r3, [sp, #28]
 8019a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8019a74:	4654      	mov	r4, sl
 8019a76:	2205      	movs	r2, #5
 8019a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a7c:	484e      	ldr	r0, [pc, #312]	@ (8019bb8 <_svfiprintf_r+0x1e4>)
 8019a7e:	f7e6 fc47 	bl	8000310 <memchr>
 8019a82:	9a04      	ldr	r2, [sp, #16]
 8019a84:	b9d8      	cbnz	r0, 8019abe <_svfiprintf_r+0xea>
 8019a86:	06d0      	lsls	r0, r2, #27
 8019a88:	bf44      	itt	mi
 8019a8a:	2320      	movmi	r3, #32
 8019a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a90:	0711      	lsls	r1, r2, #28
 8019a92:	bf44      	itt	mi
 8019a94:	232b      	movmi	r3, #43	@ 0x2b
 8019a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8019a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019aa0:	d015      	beq.n	8019ace <_svfiprintf_r+0xfa>
 8019aa2:	9a07      	ldr	r2, [sp, #28]
 8019aa4:	4654      	mov	r4, sl
 8019aa6:	2000      	movs	r0, #0
 8019aa8:	f04f 0c0a 	mov.w	ip, #10
 8019aac:	4621      	mov	r1, r4
 8019aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ab2:	3b30      	subs	r3, #48	@ 0x30
 8019ab4:	2b09      	cmp	r3, #9
 8019ab6:	d94b      	bls.n	8019b50 <_svfiprintf_r+0x17c>
 8019ab8:	b1b0      	cbz	r0, 8019ae8 <_svfiprintf_r+0x114>
 8019aba:	9207      	str	r2, [sp, #28]
 8019abc:	e014      	b.n	8019ae8 <_svfiprintf_r+0x114>
 8019abe:	eba0 0308 	sub.w	r3, r0, r8
 8019ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8019ac6:	4313      	orrs	r3, r2
 8019ac8:	9304      	str	r3, [sp, #16]
 8019aca:	46a2      	mov	sl, r4
 8019acc:	e7d2      	b.n	8019a74 <_svfiprintf_r+0xa0>
 8019ace:	9b03      	ldr	r3, [sp, #12]
 8019ad0:	1d19      	adds	r1, r3, #4
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	9103      	str	r1, [sp, #12]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	bfbb      	ittet	lt
 8019ada:	425b      	neglt	r3, r3
 8019adc:	f042 0202 	orrlt.w	r2, r2, #2
 8019ae0:	9307      	strge	r3, [sp, #28]
 8019ae2:	9307      	strlt	r3, [sp, #28]
 8019ae4:	bfb8      	it	lt
 8019ae6:	9204      	strlt	r2, [sp, #16]
 8019ae8:	7823      	ldrb	r3, [r4, #0]
 8019aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8019aec:	d10a      	bne.n	8019b04 <_svfiprintf_r+0x130>
 8019aee:	7863      	ldrb	r3, [r4, #1]
 8019af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8019af2:	d132      	bne.n	8019b5a <_svfiprintf_r+0x186>
 8019af4:	9b03      	ldr	r3, [sp, #12]
 8019af6:	1d1a      	adds	r2, r3, #4
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	9203      	str	r2, [sp, #12]
 8019afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019b00:	3402      	adds	r4, #2
 8019b02:	9305      	str	r3, [sp, #20]
 8019b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019bc8 <_svfiprintf_r+0x1f4>
 8019b08:	7821      	ldrb	r1, [r4, #0]
 8019b0a:	2203      	movs	r2, #3
 8019b0c:	4650      	mov	r0, sl
 8019b0e:	f7e6 fbff 	bl	8000310 <memchr>
 8019b12:	b138      	cbz	r0, 8019b24 <_svfiprintf_r+0x150>
 8019b14:	9b04      	ldr	r3, [sp, #16]
 8019b16:	eba0 000a 	sub.w	r0, r0, sl
 8019b1a:	2240      	movs	r2, #64	@ 0x40
 8019b1c:	4082      	lsls	r2, r0
 8019b1e:	4313      	orrs	r3, r2
 8019b20:	3401      	adds	r4, #1
 8019b22:	9304      	str	r3, [sp, #16]
 8019b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b28:	4824      	ldr	r0, [pc, #144]	@ (8019bbc <_svfiprintf_r+0x1e8>)
 8019b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019b2e:	2206      	movs	r2, #6
 8019b30:	f7e6 fbee 	bl	8000310 <memchr>
 8019b34:	2800      	cmp	r0, #0
 8019b36:	d036      	beq.n	8019ba6 <_svfiprintf_r+0x1d2>
 8019b38:	4b21      	ldr	r3, [pc, #132]	@ (8019bc0 <_svfiprintf_r+0x1ec>)
 8019b3a:	bb1b      	cbnz	r3, 8019b84 <_svfiprintf_r+0x1b0>
 8019b3c:	9b03      	ldr	r3, [sp, #12]
 8019b3e:	3307      	adds	r3, #7
 8019b40:	f023 0307 	bic.w	r3, r3, #7
 8019b44:	3308      	adds	r3, #8
 8019b46:	9303      	str	r3, [sp, #12]
 8019b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b4a:	4433      	add	r3, r6
 8019b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b4e:	e76a      	b.n	8019a26 <_svfiprintf_r+0x52>
 8019b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b54:	460c      	mov	r4, r1
 8019b56:	2001      	movs	r0, #1
 8019b58:	e7a8      	b.n	8019aac <_svfiprintf_r+0xd8>
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	3401      	adds	r4, #1
 8019b5e:	9305      	str	r3, [sp, #20]
 8019b60:	4619      	mov	r1, r3
 8019b62:	f04f 0c0a 	mov.w	ip, #10
 8019b66:	4620      	mov	r0, r4
 8019b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b6c:	3a30      	subs	r2, #48	@ 0x30
 8019b6e:	2a09      	cmp	r2, #9
 8019b70:	d903      	bls.n	8019b7a <_svfiprintf_r+0x1a6>
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d0c6      	beq.n	8019b04 <_svfiprintf_r+0x130>
 8019b76:	9105      	str	r1, [sp, #20]
 8019b78:	e7c4      	b.n	8019b04 <_svfiprintf_r+0x130>
 8019b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b7e:	4604      	mov	r4, r0
 8019b80:	2301      	movs	r3, #1
 8019b82:	e7f0      	b.n	8019b66 <_svfiprintf_r+0x192>
 8019b84:	ab03      	add	r3, sp, #12
 8019b86:	9300      	str	r3, [sp, #0]
 8019b88:	462a      	mov	r2, r5
 8019b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8019bc4 <_svfiprintf_r+0x1f0>)
 8019b8c:	a904      	add	r1, sp, #16
 8019b8e:	4638      	mov	r0, r7
 8019b90:	f3af 8000 	nop.w
 8019b94:	1c42      	adds	r2, r0, #1
 8019b96:	4606      	mov	r6, r0
 8019b98:	d1d6      	bne.n	8019b48 <_svfiprintf_r+0x174>
 8019b9a:	89ab      	ldrh	r3, [r5, #12]
 8019b9c:	065b      	lsls	r3, r3, #25
 8019b9e:	f53f af2d 	bmi.w	80199fc <_svfiprintf_r+0x28>
 8019ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ba4:	e72c      	b.n	8019a00 <_svfiprintf_r+0x2c>
 8019ba6:	ab03      	add	r3, sp, #12
 8019ba8:	9300      	str	r3, [sp, #0]
 8019baa:	462a      	mov	r2, r5
 8019bac:	4b05      	ldr	r3, [pc, #20]	@ (8019bc4 <_svfiprintf_r+0x1f0>)
 8019bae:	a904      	add	r1, sp, #16
 8019bb0:	4638      	mov	r0, r7
 8019bb2:	f000 f9bb 	bl	8019f2c <_printf_i>
 8019bb6:	e7ed      	b.n	8019b94 <_svfiprintf_r+0x1c0>
 8019bb8:	0801e373 	.word	0x0801e373
 8019bbc:	0801e37d 	.word	0x0801e37d
 8019bc0:	00000000 	.word	0x00000000
 8019bc4:	0801991d 	.word	0x0801991d
 8019bc8:	0801e379 	.word	0x0801e379

08019bcc <__sfputc_r>:
 8019bcc:	6893      	ldr	r3, [r2, #8]
 8019bce:	3b01      	subs	r3, #1
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	b410      	push	{r4}
 8019bd4:	6093      	str	r3, [r2, #8]
 8019bd6:	da08      	bge.n	8019bea <__sfputc_r+0x1e>
 8019bd8:	6994      	ldr	r4, [r2, #24]
 8019bda:	42a3      	cmp	r3, r4
 8019bdc:	db01      	blt.n	8019be2 <__sfputc_r+0x16>
 8019bde:	290a      	cmp	r1, #10
 8019be0:	d103      	bne.n	8019bea <__sfputc_r+0x1e>
 8019be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019be6:	f7ff bbb0 	b.w	801934a <__swbuf_r>
 8019bea:	6813      	ldr	r3, [r2, #0]
 8019bec:	1c58      	adds	r0, r3, #1
 8019bee:	6010      	str	r0, [r2, #0]
 8019bf0:	7019      	strb	r1, [r3, #0]
 8019bf2:	4608      	mov	r0, r1
 8019bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bf8:	4770      	bx	lr

08019bfa <__sfputs_r>:
 8019bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bfc:	4606      	mov	r6, r0
 8019bfe:	460f      	mov	r7, r1
 8019c00:	4614      	mov	r4, r2
 8019c02:	18d5      	adds	r5, r2, r3
 8019c04:	42ac      	cmp	r4, r5
 8019c06:	d101      	bne.n	8019c0c <__sfputs_r+0x12>
 8019c08:	2000      	movs	r0, #0
 8019c0a:	e007      	b.n	8019c1c <__sfputs_r+0x22>
 8019c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c10:	463a      	mov	r2, r7
 8019c12:	4630      	mov	r0, r6
 8019c14:	f7ff ffda 	bl	8019bcc <__sfputc_r>
 8019c18:	1c43      	adds	r3, r0, #1
 8019c1a:	d1f3      	bne.n	8019c04 <__sfputs_r+0xa>
 8019c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019c20 <_vfiprintf_r>:
 8019c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c24:	460d      	mov	r5, r1
 8019c26:	b09d      	sub	sp, #116	@ 0x74
 8019c28:	4614      	mov	r4, r2
 8019c2a:	4698      	mov	r8, r3
 8019c2c:	4606      	mov	r6, r0
 8019c2e:	b118      	cbz	r0, 8019c38 <_vfiprintf_r+0x18>
 8019c30:	6a03      	ldr	r3, [r0, #32]
 8019c32:	b90b      	cbnz	r3, 8019c38 <_vfiprintf_r+0x18>
 8019c34:	f7ff fa80 	bl	8019138 <__sinit>
 8019c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c3a:	07d9      	lsls	r1, r3, #31
 8019c3c:	d405      	bmi.n	8019c4a <_vfiprintf_r+0x2a>
 8019c3e:	89ab      	ldrh	r3, [r5, #12]
 8019c40:	059a      	lsls	r2, r3, #22
 8019c42:	d402      	bmi.n	8019c4a <_vfiprintf_r+0x2a>
 8019c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c46:	f7ff fd3a 	bl	80196be <__retarget_lock_acquire_recursive>
 8019c4a:	89ab      	ldrh	r3, [r5, #12]
 8019c4c:	071b      	lsls	r3, r3, #28
 8019c4e:	d501      	bpl.n	8019c54 <_vfiprintf_r+0x34>
 8019c50:	692b      	ldr	r3, [r5, #16]
 8019c52:	b99b      	cbnz	r3, 8019c7c <_vfiprintf_r+0x5c>
 8019c54:	4629      	mov	r1, r5
 8019c56:	4630      	mov	r0, r6
 8019c58:	f7ff fbb6 	bl	80193c8 <__swsetup_r>
 8019c5c:	b170      	cbz	r0, 8019c7c <_vfiprintf_r+0x5c>
 8019c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c60:	07dc      	lsls	r4, r3, #31
 8019c62:	d504      	bpl.n	8019c6e <_vfiprintf_r+0x4e>
 8019c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c68:	b01d      	add	sp, #116	@ 0x74
 8019c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c6e:	89ab      	ldrh	r3, [r5, #12]
 8019c70:	0598      	lsls	r0, r3, #22
 8019c72:	d4f7      	bmi.n	8019c64 <_vfiprintf_r+0x44>
 8019c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c76:	f7ff fd23 	bl	80196c0 <__retarget_lock_release_recursive>
 8019c7a:	e7f3      	b.n	8019c64 <_vfiprintf_r+0x44>
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c80:	2320      	movs	r3, #32
 8019c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c8a:	2330      	movs	r3, #48	@ 0x30
 8019c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019e3c <_vfiprintf_r+0x21c>
 8019c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019c94:	f04f 0901 	mov.w	r9, #1
 8019c98:	4623      	mov	r3, r4
 8019c9a:	469a      	mov	sl, r3
 8019c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ca0:	b10a      	cbz	r2, 8019ca6 <_vfiprintf_r+0x86>
 8019ca2:	2a25      	cmp	r2, #37	@ 0x25
 8019ca4:	d1f9      	bne.n	8019c9a <_vfiprintf_r+0x7a>
 8019ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8019caa:	d00b      	beq.n	8019cc4 <_vfiprintf_r+0xa4>
 8019cac:	465b      	mov	r3, fp
 8019cae:	4622      	mov	r2, r4
 8019cb0:	4629      	mov	r1, r5
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f7ff ffa1 	bl	8019bfa <__sfputs_r>
 8019cb8:	3001      	adds	r0, #1
 8019cba:	f000 80a7 	beq.w	8019e0c <_vfiprintf_r+0x1ec>
 8019cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019cc0:	445a      	add	r2, fp
 8019cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8019cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f000 809f 	beq.w	8019e0c <_vfiprintf_r+0x1ec>
 8019cce:	2300      	movs	r3, #0
 8019cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019cd8:	f10a 0a01 	add.w	sl, sl, #1
 8019cdc:	9304      	str	r3, [sp, #16]
 8019cde:	9307      	str	r3, [sp, #28]
 8019ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8019ce6:	4654      	mov	r4, sl
 8019ce8:	2205      	movs	r2, #5
 8019cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cee:	4853      	ldr	r0, [pc, #332]	@ (8019e3c <_vfiprintf_r+0x21c>)
 8019cf0:	f7e6 fb0e 	bl	8000310 <memchr>
 8019cf4:	9a04      	ldr	r2, [sp, #16]
 8019cf6:	b9d8      	cbnz	r0, 8019d30 <_vfiprintf_r+0x110>
 8019cf8:	06d1      	lsls	r1, r2, #27
 8019cfa:	bf44      	itt	mi
 8019cfc:	2320      	movmi	r3, #32
 8019cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019d02:	0713      	lsls	r3, r2, #28
 8019d04:	bf44      	itt	mi
 8019d06:	232b      	movmi	r3, #43	@ 0x2b
 8019d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8019d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d12:	d015      	beq.n	8019d40 <_vfiprintf_r+0x120>
 8019d14:	9a07      	ldr	r2, [sp, #28]
 8019d16:	4654      	mov	r4, sl
 8019d18:	2000      	movs	r0, #0
 8019d1a:	f04f 0c0a 	mov.w	ip, #10
 8019d1e:	4621      	mov	r1, r4
 8019d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d24:	3b30      	subs	r3, #48	@ 0x30
 8019d26:	2b09      	cmp	r3, #9
 8019d28:	d94b      	bls.n	8019dc2 <_vfiprintf_r+0x1a2>
 8019d2a:	b1b0      	cbz	r0, 8019d5a <_vfiprintf_r+0x13a>
 8019d2c:	9207      	str	r2, [sp, #28]
 8019d2e:	e014      	b.n	8019d5a <_vfiprintf_r+0x13a>
 8019d30:	eba0 0308 	sub.w	r3, r0, r8
 8019d34:	fa09 f303 	lsl.w	r3, r9, r3
 8019d38:	4313      	orrs	r3, r2
 8019d3a:	9304      	str	r3, [sp, #16]
 8019d3c:	46a2      	mov	sl, r4
 8019d3e:	e7d2      	b.n	8019ce6 <_vfiprintf_r+0xc6>
 8019d40:	9b03      	ldr	r3, [sp, #12]
 8019d42:	1d19      	adds	r1, r3, #4
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	9103      	str	r1, [sp, #12]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	bfbb      	ittet	lt
 8019d4c:	425b      	neglt	r3, r3
 8019d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8019d52:	9307      	strge	r3, [sp, #28]
 8019d54:	9307      	strlt	r3, [sp, #28]
 8019d56:	bfb8      	it	lt
 8019d58:	9204      	strlt	r2, [sp, #16]
 8019d5a:	7823      	ldrb	r3, [r4, #0]
 8019d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8019d5e:	d10a      	bne.n	8019d76 <_vfiprintf_r+0x156>
 8019d60:	7863      	ldrb	r3, [r4, #1]
 8019d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d64:	d132      	bne.n	8019dcc <_vfiprintf_r+0x1ac>
 8019d66:	9b03      	ldr	r3, [sp, #12]
 8019d68:	1d1a      	adds	r2, r3, #4
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	9203      	str	r2, [sp, #12]
 8019d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019d72:	3402      	adds	r4, #2
 8019d74:	9305      	str	r3, [sp, #20]
 8019d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019e4c <_vfiprintf_r+0x22c>
 8019d7a:	7821      	ldrb	r1, [r4, #0]
 8019d7c:	2203      	movs	r2, #3
 8019d7e:	4650      	mov	r0, sl
 8019d80:	f7e6 fac6 	bl	8000310 <memchr>
 8019d84:	b138      	cbz	r0, 8019d96 <_vfiprintf_r+0x176>
 8019d86:	9b04      	ldr	r3, [sp, #16]
 8019d88:	eba0 000a 	sub.w	r0, r0, sl
 8019d8c:	2240      	movs	r2, #64	@ 0x40
 8019d8e:	4082      	lsls	r2, r0
 8019d90:	4313      	orrs	r3, r2
 8019d92:	3401      	adds	r4, #1
 8019d94:	9304      	str	r3, [sp, #16]
 8019d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d9a:	4829      	ldr	r0, [pc, #164]	@ (8019e40 <_vfiprintf_r+0x220>)
 8019d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019da0:	2206      	movs	r2, #6
 8019da2:	f7e6 fab5 	bl	8000310 <memchr>
 8019da6:	2800      	cmp	r0, #0
 8019da8:	d03f      	beq.n	8019e2a <_vfiprintf_r+0x20a>
 8019daa:	4b26      	ldr	r3, [pc, #152]	@ (8019e44 <_vfiprintf_r+0x224>)
 8019dac:	bb1b      	cbnz	r3, 8019df6 <_vfiprintf_r+0x1d6>
 8019dae:	9b03      	ldr	r3, [sp, #12]
 8019db0:	3307      	adds	r3, #7
 8019db2:	f023 0307 	bic.w	r3, r3, #7
 8019db6:	3308      	adds	r3, #8
 8019db8:	9303      	str	r3, [sp, #12]
 8019dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019dbc:	443b      	add	r3, r7
 8019dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8019dc0:	e76a      	b.n	8019c98 <_vfiprintf_r+0x78>
 8019dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8019dc6:	460c      	mov	r4, r1
 8019dc8:	2001      	movs	r0, #1
 8019dca:	e7a8      	b.n	8019d1e <_vfiprintf_r+0xfe>
 8019dcc:	2300      	movs	r3, #0
 8019dce:	3401      	adds	r4, #1
 8019dd0:	9305      	str	r3, [sp, #20]
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	f04f 0c0a 	mov.w	ip, #10
 8019dd8:	4620      	mov	r0, r4
 8019dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019dde:	3a30      	subs	r2, #48	@ 0x30
 8019de0:	2a09      	cmp	r2, #9
 8019de2:	d903      	bls.n	8019dec <_vfiprintf_r+0x1cc>
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d0c6      	beq.n	8019d76 <_vfiprintf_r+0x156>
 8019de8:	9105      	str	r1, [sp, #20]
 8019dea:	e7c4      	b.n	8019d76 <_vfiprintf_r+0x156>
 8019dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8019df0:	4604      	mov	r4, r0
 8019df2:	2301      	movs	r3, #1
 8019df4:	e7f0      	b.n	8019dd8 <_vfiprintf_r+0x1b8>
 8019df6:	ab03      	add	r3, sp, #12
 8019df8:	9300      	str	r3, [sp, #0]
 8019dfa:	462a      	mov	r2, r5
 8019dfc:	4b12      	ldr	r3, [pc, #72]	@ (8019e48 <_vfiprintf_r+0x228>)
 8019dfe:	a904      	add	r1, sp, #16
 8019e00:	4630      	mov	r0, r6
 8019e02:	f3af 8000 	nop.w
 8019e06:	4607      	mov	r7, r0
 8019e08:	1c78      	adds	r0, r7, #1
 8019e0a:	d1d6      	bne.n	8019dba <_vfiprintf_r+0x19a>
 8019e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019e0e:	07d9      	lsls	r1, r3, #31
 8019e10:	d405      	bmi.n	8019e1e <_vfiprintf_r+0x1fe>
 8019e12:	89ab      	ldrh	r3, [r5, #12]
 8019e14:	059a      	lsls	r2, r3, #22
 8019e16:	d402      	bmi.n	8019e1e <_vfiprintf_r+0x1fe>
 8019e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019e1a:	f7ff fc51 	bl	80196c0 <__retarget_lock_release_recursive>
 8019e1e:	89ab      	ldrh	r3, [r5, #12]
 8019e20:	065b      	lsls	r3, r3, #25
 8019e22:	f53f af1f 	bmi.w	8019c64 <_vfiprintf_r+0x44>
 8019e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e28:	e71e      	b.n	8019c68 <_vfiprintf_r+0x48>
 8019e2a:	ab03      	add	r3, sp, #12
 8019e2c:	9300      	str	r3, [sp, #0]
 8019e2e:	462a      	mov	r2, r5
 8019e30:	4b05      	ldr	r3, [pc, #20]	@ (8019e48 <_vfiprintf_r+0x228>)
 8019e32:	a904      	add	r1, sp, #16
 8019e34:	4630      	mov	r0, r6
 8019e36:	f000 f879 	bl	8019f2c <_printf_i>
 8019e3a:	e7e4      	b.n	8019e06 <_vfiprintf_r+0x1e6>
 8019e3c:	0801e373 	.word	0x0801e373
 8019e40:	0801e37d 	.word	0x0801e37d
 8019e44:	00000000 	.word	0x00000000
 8019e48:	08019bfb 	.word	0x08019bfb
 8019e4c:	0801e379 	.word	0x0801e379

08019e50 <_printf_common>:
 8019e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e54:	4616      	mov	r6, r2
 8019e56:	4698      	mov	r8, r3
 8019e58:	688a      	ldr	r2, [r1, #8]
 8019e5a:	690b      	ldr	r3, [r1, #16]
 8019e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019e60:	4293      	cmp	r3, r2
 8019e62:	bfb8      	it	lt
 8019e64:	4613      	movlt	r3, r2
 8019e66:	6033      	str	r3, [r6, #0]
 8019e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019e6c:	4607      	mov	r7, r0
 8019e6e:	460c      	mov	r4, r1
 8019e70:	b10a      	cbz	r2, 8019e76 <_printf_common+0x26>
 8019e72:	3301      	adds	r3, #1
 8019e74:	6033      	str	r3, [r6, #0]
 8019e76:	6823      	ldr	r3, [r4, #0]
 8019e78:	0699      	lsls	r1, r3, #26
 8019e7a:	bf42      	ittt	mi
 8019e7c:	6833      	ldrmi	r3, [r6, #0]
 8019e7e:	3302      	addmi	r3, #2
 8019e80:	6033      	strmi	r3, [r6, #0]
 8019e82:	6825      	ldr	r5, [r4, #0]
 8019e84:	f015 0506 	ands.w	r5, r5, #6
 8019e88:	d106      	bne.n	8019e98 <_printf_common+0x48>
 8019e8a:	f104 0a19 	add.w	sl, r4, #25
 8019e8e:	68e3      	ldr	r3, [r4, #12]
 8019e90:	6832      	ldr	r2, [r6, #0]
 8019e92:	1a9b      	subs	r3, r3, r2
 8019e94:	42ab      	cmp	r3, r5
 8019e96:	dc26      	bgt.n	8019ee6 <_printf_common+0x96>
 8019e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019e9c:	6822      	ldr	r2, [r4, #0]
 8019e9e:	3b00      	subs	r3, #0
 8019ea0:	bf18      	it	ne
 8019ea2:	2301      	movne	r3, #1
 8019ea4:	0692      	lsls	r2, r2, #26
 8019ea6:	d42b      	bmi.n	8019f00 <_printf_common+0xb0>
 8019ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019eac:	4641      	mov	r1, r8
 8019eae:	4638      	mov	r0, r7
 8019eb0:	47c8      	blx	r9
 8019eb2:	3001      	adds	r0, #1
 8019eb4:	d01e      	beq.n	8019ef4 <_printf_common+0xa4>
 8019eb6:	6823      	ldr	r3, [r4, #0]
 8019eb8:	6922      	ldr	r2, [r4, #16]
 8019eba:	f003 0306 	and.w	r3, r3, #6
 8019ebe:	2b04      	cmp	r3, #4
 8019ec0:	bf02      	ittt	eq
 8019ec2:	68e5      	ldreq	r5, [r4, #12]
 8019ec4:	6833      	ldreq	r3, [r6, #0]
 8019ec6:	1aed      	subeq	r5, r5, r3
 8019ec8:	68a3      	ldr	r3, [r4, #8]
 8019eca:	bf0c      	ite	eq
 8019ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ed0:	2500      	movne	r5, #0
 8019ed2:	4293      	cmp	r3, r2
 8019ed4:	bfc4      	itt	gt
 8019ed6:	1a9b      	subgt	r3, r3, r2
 8019ed8:	18ed      	addgt	r5, r5, r3
 8019eda:	2600      	movs	r6, #0
 8019edc:	341a      	adds	r4, #26
 8019ede:	42b5      	cmp	r5, r6
 8019ee0:	d11a      	bne.n	8019f18 <_printf_common+0xc8>
 8019ee2:	2000      	movs	r0, #0
 8019ee4:	e008      	b.n	8019ef8 <_printf_common+0xa8>
 8019ee6:	2301      	movs	r3, #1
 8019ee8:	4652      	mov	r2, sl
 8019eea:	4641      	mov	r1, r8
 8019eec:	4638      	mov	r0, r7
 8019eee:	47c8      	blx	r9
 8019ef0:	3001      	adds	r0, #1
 8019ef2:	d103      	bne.n	8019efc <_printf_common+0xac>
 8019ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019efc:	3501      	adds	r5, #1
 8019efe:	e7c6      	b.n	8019e8e <_printf_common+0x3e>
 8019f00:	18e1      	adds	r1, r4, r3
 8019f02:	1c5a      	adds	r2, r3, #1
 8019f04:	2030      	movs	r0, #48	@ 0x30
 8019f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019f0a:	4422      	add	r2, r4
 8019f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019f14:	3302      	adds	r3, #2
 8019f16:	e7c7      	b.n	8019ea8 <_printf_common+0x58>
 8019f18:	2301      	movs	r3, #1
 8019f1a:	4622      	mov	r2, r4
 8019f1c:	4641      	mov	r1, r8
 8019f1e:	4638      	mov	r0, r7
 8019f20:	47c8      	blx	r9
 8019f22:	3001      	adds	r0, #1
 8019f24:	d0e6      	beq.n	8019ef4 <_printf_common+0xa4>
 8019f26:	3601      	adds	r6, #1
 8019f28:	e7d9      	b.n	8019ede <_printf_common+0x8e>
	...

08019f2c <_printf_i>:
 8019f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f30:	7e0f      	ldrb	r7, [r1, #24]
 8019f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019f34:	2f78      	cmp	r7, #120	@ 0x78
 8019f36:	4691      	mov	r9, r2
 8019f38:	4680      	mov	r8, r0
 8019f3a:	460c      	mov	r4, r1
 8019f3c:	469a      	mov	sl, r3
 8019f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019f42:	d807      	bhi.n	8019f54 <_printf_i+0x28>
 8019f44:	2f62      	cmp	r7, #98	@ 0x62
 8019f46:	d80a      	bhi.n	8019f5e <_printf_i+0x32>
 8019f48:	2f00      	cmp	r7, #0
 8019f4a:	f000 80d2 	beq.w	801a0f2 <_printf_i+0x1c6>
 8019f4e:	2f58      	cmp	r7, #88	@ 0x58
 8019f50:	f000 80b9 	beq.w	801a0c6 <_printf_i+0x19a>
 8019f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019f5c:	e03a      	b.n	8019fd4 <_printf_i+0xa8>
 8019f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019f62:	2b15      	cmp	r3, #21
 8019f64:	d8f6      	bhi.n	8019f54 <_printf_i+0x28>
 8019f66:	a101      	add	r1, pc, #4	@ (adr r1, 8019f6c <_printf_i+0x40>)
 8019f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f6c:	08019fc5 	.word	0x08019fc5
 8019f70:	08019fd9 	.word	0x08019fd9
 8019f74:	08019f55 	.word	0x08019f55
 8019f78:	08019f55 	.word	0x08019f55
 8019f7c:	08019f55 	.word	0x08019f55
 8019f80:	08019f55 	.word	0x08019f55
 8019f84:	08019fd9 	.word	0x08019fd9
 8019f88:	08019f55 	.word	0x08019f55
 8019f8c:	08019f55 	.word	0x08019f55
 8019f90:	08019f55 	.word	0x08019f55
 8019f94:	08019f55 	.word	0x08019f55
 8019f98:	0801a0d9 	.word	0x0801a0d9
 8019f9c:	0801a003 	.word	0x0801a003
 8019fa0:	0801a093 	.word	0x0801a093
 8019fa4:	08019f55 	.word	0x08019f55
 8019fa8:	08019f55 	.word	0x08019f55
 8019fac:	0801a0fb 	.word	0x0801a0fb
 8019fb0:	08019f55 	.word	0x08019f55
 8019fb4:	0801a003 	.word	0x0801a003
 8019fb8:	08019f55 	.word	0x08019f55
 8019fbc:	08019f55 	.word	0x08019f55
 8019fc0:	0801a09b 	.word	0x0801a09b
 8019fc4:	6833      	ldr	r3, [r6, #0]
 8019fc6:	1d1a      	adds	r2, r3, #4
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	6032      	str	r2, [r6, #0]
 8019fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	e09d      	b.n	801a114 <_printf_i+0x1e8>
 8019fd8:	6833      	ldr	r3, [r6, #0]
 8019fda:	6820      	ldr	r0, [r4, #0]
 8019fdc:	1d19      	adds	r1, r3, #4
 8019fde:	6031      	str	r1, [r6, #0]
 8019fe0:	0606      	lsls	r6, r0, #24
 8019fe2:	d501      	bpl.n	8019fe8 <_printf_i+0xbc>
 8019fe4:	681d      	ldr	r5, [r3, #0]
 8019fe6:	e003      	b.n	8019ff0 <_printf_i+0xc4>
 8019fe8:	0645      	lsls	r5, r0, #25
 8019fea:	d5fb      	bpl.n	8019fe4 <_printf_i+0xb8>
 8019fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019ff0:	2d00      	cmp	r5, #0
 8019ff2:	da03      	bge.n	8019ffc <_printf_i+0xd0>
 8019ff4:	232d      	movs	r3, #45	@ 0x2d
 8019ff6:	426d      	negs	r5, r5
 8019ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ffc:	4859      	ldr	r0, [pc, #356]	@ (801a164 <_printf_i+0x238>)
 8019ffe:	230a      	movs	r3, #10
 801a000:	e011      	b.n	801a026 <_printf_i+0xfa>
 801a002:	6821      	ldr	r1, [r4, #0]
 801a004:	6833      	ldr	r3, [r6, #0]
 801a006:	0608      	lsls	r0, r1, #24
 801a008:	f853 5b04 	ldr.w	r5, [r3], #4
 801a00c:	d402      	bmi.n	801a014 <_printf_i+0xe8>
 801a00e:	0649      	lsls	r1, r1, #25
 801a010:	bf48      	it	mi
 801a012:	b2ad      	uxthmi	r5, r5
 801a014:	2f6f      	cmp	r7, #111	@ 0x6f
 801a016:	4853      	ldr	r0, [pc, #332]	@ (801a164 <_printf_i+0x238>)
 801a018:	6033      	str	r3, [r6, #0]
 801a01a:	bf14      	ite	ne
 801a01c:	230a      	movne	r3, #10
 801a01e:	2308      	moveq	r3, #8
 801a020:	2100      	movs	r1, #0
 801a022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a026:	6866      	ldr	r6, [r4, #4]
 801a028:	60a6      	str	r6, [r4, #8]
 801a02a:	2e00      	cmp	r6, #0
 801a02c:	bfa2      	ittt	ge
 801a02e:	6821      	ldrge	r1, [r4, #0]
 801a030:	f021 0104 	bicge.w	r1, r1, #4
 801a034:	6021      	strge	r1, [r4, #0]
 801a036:	b90d      	cbnz	r5, 801a03c <_printf_i+0x110>
 801a038:	2e00      	cmp	r6, #0
 801a03a:	d04b      	beq.n	801a0d4 <_printf_i+0x1a8>
 801a03c:	4616      	mov	r6, r2
 801a03e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a042:	fb03 5711 	mls	r7, r3, r1, r5
 801a046:	5dc7      	ldrb	r7, [r0, r7]
 801a048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a04c:	462f      	mov	r7, r5
 801a04e:	42bb      	cmp	r3, r7
 801a050:	460d      	mov	r5, r1
 801a052:	d9f4      	bls.n	801a03e <_printf_i+0x112>
 801a054:	2b08      	cmp	r3, #8
 801a056:	d10b      	bne.n	801a070 <_printf_i+0x144>
 801a058:	6823      	ldr	r3, [r4, #0]
 801a05a:	07df      	lsls	r7, r3, #31
 801a05c:	d508      	bpl.n	801a070 <_printf_i+0x144>
 801a05e:	6923      	ldr	r3, [r4, #16]
 801a060:	6861      	ldr	r1, [r4, #4]
 801a062:	4299      	cmp	r1, r3
 801a064:	bfde      	ittt	le
 801a066:	2330      	movle	r3, #48	@ 0x30
 801a068:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a06c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a070:	1b92      	subs	r2, r2, r6
 801a072:	6122      	str	r2, [r4, #16]
 801a074:	f8cd a000 	str.w	sl, [sp]
 801a078:	464b      	mov	r3, r9
 801a07a:	aa03      	add	r2, sp, #12
 801a07c:	4621      	mov	r1, r4
 801a07e:	4640      	mov	r0, r8
 801a080:	f7ff fee6 	bl	8019e50 <_printf_common>
 801a084:	3001      	adds	r0, #1
 801a086:	d14a      	bne.n	801a11e <_printf_i+0x1f2>
 801a088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a08c:	b004      	add	sp, #16
 801a08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a092:	6823      	ldr	r3, [r4, #0]
 801a094:	f043 0320 	orr.w	r3, r3, #32
 801a098:	6023      	str	r3, [r4, #0]
 801a09a:	4833      	ldr	r0, [pc, #204]	@ (801a168 <_printf_i+0x23c>)
 801a09c:	2778      	movs	r7, #120	@ 0x78
 801a09e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a0a2:	6823      	ldr	r3, [r4, #0]
 801a0a4:	6831      	ldr	r1, [r6, #0]
 801a0a6:	061f      	lsls	r7, r3, #24
 801a0a8:	f851 5b04 	ldr.w	r5, [r1], #4
 801a0ac:	d402      	bmi.n	801a0b4 <_printf_i+0x188>
 801a0ae:	065f      	lsls	r7, r3, #25
 801a0b0:	bf48      	it	mi
 801a0b2:	b2ad      	uxthmi	r5, r5
 801a0b4:	6031      	str	r1, [r6, #0]
 801a0b6:	07d9      	lsls	r1, r3, #31
 801a0b8:	bf44      	itt	mi
 801a0ba:	f043 0320 	orrmi.w	r3, r3, #32
 801a0be:	6023      	strmi	r3, [r4, #0]
 801a0c0:	b11d      	cbz	r5, 801a0ca <_printf_i+0x19e>
 801a0c2:	2310      	movs	r3, #16
 801a0c4:	e7ac      	b.n	801a020 <_printf_i+0xf4>
 801a0c6:	4827      	ldr	r0, [pc, #156]	@ (801a164 <_printf_i+0x238>)
 801a0c8:	e7e9      	b.n	801a09e <_printf_i+0x172>
 801a0ca:	6823      	ldr	r3, [r4, #0]
 801a0cc:	f023 0320 	bic.w	r3, r3, #32
 801a0d0:	6023      	str	r3, [r4, #0]
 801a0d2:	e7f6      	b.n	801a0c2 <_printf_i+0x196>
 801a0d4:	4616      	mov	r6, r2
 801a0d6:	e7bd      	b.n	801a054 <_printf_i+0x128>
 801a0d8:	6833      	ldr	r3, [r6, #0]
 801a0da:	6825      	ldr	r5, [r4, #0]
 801a0dc:	6961      	ldr	r1, [r4, #20]
 801a0de:	1d18      	adds	r0, r3, #4
 801a0e0:	6030      	str	r0, [r6, #0]
 801a0e2:	062e      	lsls	r6, r5, #24
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	d501      	bpl.n	801a0ec <_printf_i+0x1c0>
 801a0e8:	6019      	str	r1, [r3, #0]
 801a0ea:	e002      	b.n	801a0f2 <_printf_i+0x1c6>
 801a0ec:	0668      	lsls	r0, r5, #25
 801a0ee:	d5fb      	bpl.n	801a0e8 <_printf_i+0x1bc>
 801a0f0:	8019      	strh	r1, [r3, #0]
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	6123      	str	r3, [r4, #16]
 801a0f6:	4616      	mov	r6, r2
 801a0f8:	e7bc      	b.n	801a074 <_printf_i+0x148>
 801a0fa:	6833      	ldr	r3, [r6, #0]
 801a0fc:	1d1a      	adds	r2, r3, #4
 801a0fe:	6032      	str	r2, [r6, #0]
 801a100:	681e      	ldr	r6, [r3, #0]
 801a102:	6862      	ldr	r2, [r4, #4]
 801a104:	2100      	movs	r1, #0
 801a106:	4630      	mov	r0, r6
 801a108:	f7e6 f902 	bl	8000310 <memchr>
 801a10c:	b108      	cbz	r0, 801a112 <_printf_i+0x1e6>
 801a10e:	1b80      	subs	r0, r0, r6
 801a110:	6060      	str	r0, [r4, #4]
 801a112:	6863      	ldr	r3, [r4, #4]
 801a114:	6123      	str	r3, [r4, #16]
 801a116:	2300      	movs	r3, #0
 801a118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a11c:	e7aa      	b.n	801a074 <_printf_i+0x148>
 801a11e:	6923      	ldr	r3, [r4, #16]
 801a120:	4632      	mov	r2, r6
 801a122:	4649      	mov	r1, r9
 801a124:	4640      	mov	r0, r8
 801a126:	47d0      	blx	sl
 801a128:	3001      	adds	r0, #1
 801a12a:	d0ad      	beq.n	801a088 <_printf_i+0x15c>
 801a12c:	6823      	ldr	r3, [r4, #0]
 801a12e:	079b      	lsls	r3, r3, #30
 801a130:	d413      	bmi.n	801a15a <_printf_i+0x22e>
 801a132:	68e0      	ldr	r0, [r4, #12]
 801a134:	9b03      	ldr	r3, [sp, #12]
 801a136:	4298      	cmp	r0, r3
 801a138:	bfb8      	it	lt
 801a13a:	4618      	movlt	r0, r3
 801a13c:	e7a6      	b.n	801a08c <_printf_i+0x160>
 801a13e:	2301      	movs	r3, #1
 801a140:	4632      	mov	r2, r6
 801a142:	4649      	mov	r1, r9
 801a144:	4640      	mov	r0, r8
 801a146:	47d0      	blx	sl
 801a148:	3001      	adds	r0, #1
 801a14a:	d09d      	beq.n	801a088 <_printf_i+0x15c>
 801a14c:	3501      	adds	r5, #1
 801a14e:	68e3      	ldr	r3, [r4, #12]
 801a150:	9903      	ldr	r1, [sp, #12]
 801a152:	1a5b      	subs	r3, r3, r1
 801a154:	42ab      	cmp	r3, r5
 801a156:	dcf2      	bgt.n	801a13e <_printf_i+0x212>
 801a158:	e7eb      	b.n	801a132 <_printf_i+0x206>
 801a15a:	2500      	movs	r5, #0
 801a15c:	f104 0619 	add.w	r6, r4, #25
 801a160:	e7f5      	b.n	801a14e <_printf_i+0x222>
 801a162:	bf00      	nop
 801a164:	0801e384 	.word	0x0801e384
 801a168:	0801e395 	.word	0x0801e395

0801a16c <__sflush_r>:
 801a16c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a174:	0716      	lsls	r6, r2, #28
 801a176:	4605      	mov	r5, r0
 801a178:	460c      	mov	r4, r1
 801a17a:	d454      	bmi.n	801a226 <__sflush_r+0xba>
 801a17c:	684b      	ldr	r3, [r1, #4]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	dc02      	bgt.n	801a188 <__sflush_r+0x1c>
 801a182:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a184:	2b00      	cmp	r3, #0
 801a186:	dd48      	ble.n	801a21a <__sflush_r+0xae>
 801a188:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a18a:	2e00      	cmp	r6, #0
 801a18c:	d045      	beq.n	801a21a <__sflush_r+0xae>
 801a18e:	2300      	movs	r3, #0
 801a190:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a194:	682f      	ldr	r7, [r5, #0]
 801a196:	6a21      	ldr	r1, [r4, #32]
 801a198:	602b      	str	r3, [r5, #0]
 801a19a:	d030      	beq.n	801a1fe <__sflush_r+0x92>
 801a19c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a19e:	89a3      	ldrh	r3, [r4, #12]
 801a1a0:	0759      	lsls	r1, r3, #29
 801a1a2:	d505      	bpl.n	801a1b0 <__sflush_r+0x44>
 801a1a4:	6863      	ldr	r3, [r4, #4]
 801a1a6:	1ad2      	subs	r2, r2, r3
 801a1a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a1aa:	b10b      	cbz	r3, 801a1b0 <__sflush_r+0x44>
 801a1ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a1ae:	1ad2      	subs	r2, r2, r3
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a1b4:	6a21      	ldr	r1, [r4, #32]
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	47b0      	blx	r6
 801a1ba:	1c43      	adds	r3, r0, #1
 801a1bc:	89a3      	ldrh	r3, [r4, #12]
 801a1be:	d106      	bne.n	801a1ce <__sflush_r+0x62>
 801a1c0:	6829      	ldr	r1, [r5, #0]
 801a1c2:	291d      	cmp	r1, #29
 801a1c4:	d82b      	bhi.n	801a21e <__sflush_r+0xb2>
 801a1c6:	4a2a      	ldr	r2, [pc, #168]	@ (801a270 <__sflush_r+0x104>)
 801a1c8:	410a      	asrs	r2, r1
 801a1ca:	07d6      	lsls	r6, r2, #31
 801a1cc:	d427      	bmi.n	801a21e <__sflush_r+0xb2>
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	6062      	str	r2, [r4, #4]
 801a1d2:	04d9      	lsls	r1, r3, #19
 801a1d4:	6922      	ldr	r2, [r4, #16]
 801a1d6:	6022      	str	r2, [r4, #0]
 801a1d8:	d504      	bpl.n	801a1e4 <__sflush_r+0x78>
 801a1da:	1c42      	adds	r2, r0, #1
 801a1dc:	d101      	bne.n	801a1e2 <__sflush_r+0x76>
 801a1de:	682b      	ldr	r3, [r5, #0]
 801a1e0:	b903      	cbnz	r3, 801a1e4 <__sflush_r+0x78>
 801a1e2:	6560      	str	r0, [r4, #84]	@ 0x54
 801a1e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a1e6:	602f      	str	r7, [r5, #0]
 801a1e8:	b1b9      	cbz	r1, 801a21a <__sflush_r+0xae>
 801a1ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a1ee:	4299      	cmp	r1, r3
 801a1f0:	d002      	beq.n	801a1f8 <__sflush_r+0x8c>
 801a1f2:	4628      	mov	r0, r5
 801a1f4:	f7ff fa92 	bl	801971c <_free_r>
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	6363      	str	r3, [r4, #52]	@ 0x34
 801a1fc:	e00d      	b.n	801a21a <__sflush_r+0xae>
 801a1fe:	2301      	movs	r3, #1
 801a200:	4628      	mov	r0, r5
 801a202:	47b0      	blx	r6
 801a204:	4602      	mov	r2, r0
 801a206:	1c50      	adds	r0, r2, #1
 801a208:	d1c9      	bne.n	801a19e <__sflush_r+0x32>
 801a20a:	682b      	ldr	r3, [r5, #0]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d0c6      	beq.n	801a19e <__sflush_r+0x32>
 801a210:	2b1d      	cmp	r3, #29
 801a212:	d001      	beq.n	801a218 <__sflush_r+0xac>
 801a214:	2b16      	cmp	r3, #22
 801a216:	d11e      	bne.n	801a256 <__sflush_r+0xea>
 801a218:	602f      	str	r7, [r5, #0]
 801a21a:	2000      	movs	r0, #0
 801a21c:	e022      	b.n	801a264 <__sflush_r+0xf8>
 801a21e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a222:	b21b      	sxth	r3, r3
 801a224:	e01b      	b.n	801a25e <__sflush_r+0xf2>
 801a226:	690f      	ldr	r7, [r1, #16]
 801a228:	2f00      	cmp	r7, #0
 801a22a:	d0f6      	beq.n	801a21a <__sflush_r+0xae>
 801a22c:	0793      	lsls	r3, r2, #30
 801a22e:	680e      	ldr	r6, [r1, #0]
 801a230:	bf08      	it	eq
 801a232:	694b      	ldreq	r3, [r1, #20]
 801a234:	600f      	str	r7, [r1, #0]
 801a236:	bf18      	it	ne
 801a238:	2300      	movne	r3, #0
 801a23a:	eba6 0807 	sub.w	r8, r6, r7
 801a23e:	608b      	str	r3, [r1, #8]
 801a240:	f1b8 0f00 	cmp.w	r8, #0
 801a244:	dde9      	ble.n	801a21a <__sflush_r+0xae>
 801a246:	6a21      	ldr	r1, [r4, #32]
 801a248:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a24a:	4643      	mov	r3, r8
 801a24c:	463a      	mov	r2, r7
 801a24e:	4628      	mov	r0, r5
 801a250:	47b0      	blx	r6
 801a252:	2800      	cmp	r0, #0
 801a254:	dc08      	bgt.n	801a268 <__sflush_r+0xfc>
 801a256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a25a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a25e:	81a3      	strh	r3, [r4, #12]
 801a260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a268:	4407      	add	r7, r0
 801a26a:	eba8 0800 	sub.w	r8, r8, r0
 801a26e:	e7e7      	b.n	801a240 <__sflush_r+0xd4>
 801a270:	dfbffffe 	.word	0xdfbffffe

0801a274 <_fflush_r>:
 801a274:	b538      	push	{r3, r4, r5, lr}
 801a276:	690b      	ldr	r3, [r1, #16]
 801a278:	4605      	mov	r5, r0
 801a27a:	460c      	mov	r4, r1
 801a27c:	b913      	cbnz	r3, 801a284 <_fflush_r+0x10>
 801a27e:	2500      	movs	r5, #0
 801a280:	4628      	mov	r0, r5
 801a282:	bd38      	pop	{r3, r4, r5, pc}
 801a284:	b118      	cbz	r0, 801a28e <_fflush_r+0x1a>
 801a286:	6a03      	ldr	r3, [r0, #32]
 801a288:	b90b      	cbnz	r3, 801a28e <_fflush_r+0x1a>
 801a28a:	f7fe ff55 	bl	8019138 <__sinit>
 801a28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d0f3      	beq.n	801a27e <_fflush_r+0xa>
 801a296:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a298:	07d0      	lsls	r0, r2, #31
 801a29a:	d404      	bmi.n	801a2a6 <_fflush_r+0x32>
 801a29c:	0599      	lsls	r1, r3, #22
 801a29e:	d402      	bmi.n	801a2a6 <_fflush_r+0x32>
 801a2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a2a2:	f7ff fa0c 	bl	80196be <__retarget_lock_acquire_recursive>
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	4621      	mov	r1, r4
 801a2aa:	f7ff ff5f 	bl	801a16c <__sflush_r>
 801a2ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a2b0:	07da      	lsls	r2, r3, #31
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	d4e4      	bmi.n	801a280 <_fflush_r+0xc>
 801a2b6:	89a3      	ldrh	r3, [r4, #12]
 801a2b8:	059b      	lsls	r3, r3, #22
 801a2ba:	d4e1      	bmi.n	801a280 <_fflush_r+0xc>
 801a2bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a2be:	f7ff f9ff 	bl	80196c0 <__retarget_lock_release_recursive>
 801a2c2:	e7dd      	b.n	801a280 <_fflush_r+0xc>

0801a2c4 <fiprintf>:
 801a2c4:	b40e      	push	{r1, r2, r3}
 801a2c6:	b503      	push	{r0, r1, lr}
 801a2c8:	4601      	mov	r1, r0
 801a2ca:	ab03      	add	r3, sp, #12
 801a2cc:	4805      	ldr	r0, [pc, #20]	@ (801a2e4 <fiprintf+0x20>)
 801a2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2d2:	6800      	ldr	r0, [r0, #0]
 801a2d4:	9301      	str	r3, [sp, #4]
 801a2d6:	f7ff fca3 	bl	8019c20 <_vfiprintf_r>
 801a2da:	b002      	add	sp, #8
 801a2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2e0:	b003      	add	sp, #12
 801a2e2:	4770      	bx	lr
 801a2e4:	24000044 	.word	0x24000044

0801a2e8 <__swhatbuf_r>:
 801a2e8:	b570      	push	{r4, r5, r6, lr}
 801a2ea:	460c      	mov	r4, r1
 801a2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2f0:	2900      	cmp	r1, #0
 801a2f2:	b096      	sub	sp, #88	@ 0x58
 801a2f4:	4615      	mov	r5, r2
 801a2f6:	461e      	mov	r6, r3
 801a2f8:	da0d      	bge.n	801a316 <__swhatbuf_r+0x2e>
 801a2fa:	89a3      	ldrh	r3, [r4, #12]
 801a2fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a300:	f04f 0100 	mov.w	r1, #0
 801a304:	bf14      	ite	ne
 801a306:	2340      	movne	r3, #64	@ 0x40
 801a308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a30c:	2000      	movs	r0, #0
 801a30e:	6031      	str	r1, [r6, #0]
 801a310:	602b      	str	r3, [r5, #0]
 801a312:	b016      	add	sp, #88	@ 0x58
 801a314:	bd70      	pop	{r4, r5, r6, pc}
 801a316:	466a      	mov	r2, sp
 801a318:	f000 f848 	bl	801a3ac <_fstat_r>
 801a31c:	2800      	cmp	r0, #0
 801a31e:	dbec      	blt.n	801a2fa <__swhatbuf_r+0x12>
 801a320:	9901      	ldr	r1, [sp, #4]
 801a322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a32a:	4259      	negs	r1, r3
 801a32c:	4159      	adcs	r1, r3
 801a32e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a332:	e7eb      	b.n	801a30c <__swhatbuf_r+0x24>

0801a334 <__smakebuf_r>:
 801a334:	898b      	ldrh	r3, [r1, #12]
 801a336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a338:	079d      	lsls	r5, r3, #30
 801a33a:	4606      	mov	r6, r0
 801a33c:	460c      	mov	r4, r1
 801a33e:	d507      	bpl.n	801a350 <__smakebuf_r+0x1c>
 801a340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a344:	6023      	str	r3, [r4, #0]
 801a346:	6123      	str	r3, [r4, #16]
 801a348:	2301      	movs	r3, #1
 801a34a:	6163      	str	r3, [r4, #20]
 801a34c:	b003      	add	sp, #12
 801a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a350:	ab01      	add	r3, sp, #4
 801a352:	466a      	mov	r2, sp
 801a354:	f7ff ffc8 	bl	801a2e8 <__swhatbuf_r>
 801a358:	9f00      	ldr	r7, [sp, #0]
 801a35a:	4605      	mov	r5, r0
 801a35c:	4639      	mov	r1, r7
 801a35e:	4630      	mov	r0, r6
 801a360:	f7ff fa50 	bl	8019804 <_malloc_r>
 801a364:	b948      	cbnz	r0, 801a37a <__smakebuf_r+0x46>
 801a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a36a:	059a      	lsls	r2, r3, #22
 801a36c:	d4ee      	bmi.n	801a34c <__smakebuf_r+0x18>
 801a36e:	f023 0303 	bic.w	r3, r3, #3
 801a372:	f043 0302 	orr.w	r3, r3, #2
 801a376:	81a3      	strh	r3, [r4, #12]
 801a378:	e7e2      	b.n	801a340 <__smakebuf_r+0xc>
 801a37a:	89a3      	ldrh	r3, [r4, #12]
 801a37c:	6020      	str	r0, [r4, #0]
 801a37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a382:	81a3      	strh	r3, [r4, #12]
 801a384:	9b01      	ldr	r3, [sp, #4]
 801a386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a38a:	b15b      	cbz	r3, 801a3a4 <__smakebuf_r+0x70>
 801a38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a390:	4630      	mov	r0, r6
 801a392:	f000 f81d 	bl	801a3d0 <_isatty_r>
 801a396:	b128      	cbz	r0, 801a3a4 <__smakebuf_r+0x70>
 801a398:	89a3      	ldrh	r3, [r4, #12]
 801a39a:	f023 0303 	bic.w	r3, r3, #3
 801a39e:	f043 0301 	orr.w	r3, r3, #1
 801a3a2:	81a3      	strh	r3, [r4, #12]
 801a3a4:	89a3      	ldrh	r3, [r4, #12]
 801a3a6:	431d      	orrs	r5, r3
 801a3a8:	81a5      	strh	r5, [r4, #12]
 801a3aa:	e7cf      	b.n	801a34c <__smakebuf_r+0x18>

0801a3ac <_fstat_r>:
 801a3ac:	b538      	push	{r3, r4, r5, lr}
 801a3ae:	4d07      	ldr	r5, [pc, #28]	@ (801a3cc <_fstat_r+0x20>)
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	4604      	mov	r4, r0
 801a3b4:	4608      	mov	r0, r1
 801a3b6:	4611      	mov	r1, r2
 801a3b8:	602b      	str	r3, [r5, #0]
 801a3ba:	f7e6 fe15 	bl	8000fe8 <_fstat>
 801a3be:	1c43      	adds	r3, r0, #1
 801a3c0:	d102      	bne.n	801a3c8 <_fstat_r+0x1c>
 801a3c2:	682b      	ldr	r3, [r5, #0]
 801a3c4:	b103      	cbz	r3, 801a3c8 <_fstat_r+0x1c>
 801a3c6:	6023      	str	r3, [r4, #0]
 801a3c8:	bd38      	pop	{r3, r4, r5, pc}
 801a3ca:	bf00      	nop
 801a3cc:	2400c648 	.word	0x2400c648

0801a3d0 <_isatty_r>:
 801a3d0:	b538      	push	{r3, r4, r5, lr}
 801a3d2:	4d06      	ldr	r5, [pc, #24]	@ (801a3ec <_isatty_r+0x1c>)
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	4604      	mov	r4, r0
 801a3d8:	4608      	mov	r0, r1
 801a3da:	602b      	str	r3, [r5, #0]
 801a3dc:	f7e6 fe14 	bl	8001008 <_isatty>
 801a3e0:	1c43      	adds	r3, r0, #1
 801a3e2:	d102      	bne.n	801a3ea <_isatty_r+0x1a>
 801a3e4:	682b      	ldr	r3, [r5, #0]
 801a3e6:	b103      	cbz	r3, 801a3ea <_isatty_r+0x1a>
 801a3e8:	6023      	str	r3, [r4, #0]
 801a3ea:	bd38      	pop	{r3, r4, r5, pc}
 801a3ec:	2400c648 	.word	0x2400c648

0801a3f0 <_sbrk_r>:
 801a3f0:	b538      	push	{r3, r4, r5, lr}
 801a3f2:	4d06      	ldr	r5, [pc, #24]	@ (801a40c <_sbrk_r+0x1c>)
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	4608      	mov	r0, r1
 801a3fa:	602b      	str	r3, [r5, #0]
 801a3fc:	f7e6 fe1c 	bl	8001038 <_sbrk>
 801a400:	1c43      	adds	r3, r0, #1
 801a402:	d102      	bne.n	801a40a <_sbrk_r+0x1a>
 801a404:	682b      	ldr	r3, [r5, #0]
 801a406:	b103      	cbz	r3, 801a40a <_sbrk_r+0x1a>
 801a408:	6023      	str	r3, [r4, #0]
 801a40a:	bd38      	pop	{r3, r4, r5, pc}
 801a40c:	2400c648 	.word	0x2400c648

0801a410 <abort>:
 801a410:	b508      	push	{r3, lr}
 801a412:	2006      	movs	r0, #6
 801a414:	f000 f85a 	bl	801a4cc <raise>
 801a418:	2001      	movs	r0, #1
 801a41a:	f7e6 fd95 	bl	8000f48 <_exit>

0801a41e <_realloc_r>:
 801a41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a422:	4680      	mov	r8, r0
 801a424:	4615      	mov	r5, r2
 801a426:	460c      	mov	r4, r1
 801a428:	b921      	cbnz	r1, 801a434 <_realloc_r+0x16>
 801a42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a42e:	4611      	mov	r1, r2
 801a430:	f7ff b9e8 	b.w	8019804 <_malloc_r>
 801a434:	b92a      	cbnz	r2, 801a442 <_realloc_r+0x24>
 801a436:	f7ff f971 	bl	801971c <_free_r>
 801a43a:	2400      	movs	r4, #0
 801a43c:	4620      	mov	r0, r4
 801a43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a442:	f000 f85f 	bl	801a504 <_malloc_usable_size_r>
 801a446:	4285      	cmp	r5, r0
 801a448:	4606      	mov	r6, r0
 801a44a:	d802      	bhi.n	801a452 <_realloc_r+0x34>
 801a44c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a450:	d8f4      	bhi.n	801a43c <_realloc_r+0x1e>
 801a452:	4629      	mov	r1, r5
 801a454:	4640      	mov	r0, r8
 801a456:	f7ff f9d5 	bl	8019804 <_malloc_r>
 801a45a:	4607      	mov	r7, r0
 801a45c:	2800      	cmp	r0, #0
 801a45e:	d0ec      	beq.n	801a43a <_realloc_r+0x1c>
 801a460:	42b5      	cmp	r5, r6
 801a462:	462a      	mov	r2, r5
 801a464:	4621      	mov	r1, r4
 801a466:	bf28      	it	cs
 801a468:	4632      	movcs	r2, r6
 801a46a:	f7ff f92a 	bl	80196c2 <memcpy>
 801a46e:	4621      	mov	r1, r4
 801a470:	4640      	mov	r0, r8
 801a472:	f7ff f953 	bl	801971c <_free_r>
 801a476:	463c      	mov	r4, r7
 801a478:	e7e0      	b.n	801a43c <_realloc_r+0x1e>

0801a47a <_raise_r>:
 801a47a:	291f      	cmp	r1, #31
 801a47c:	b538      	push	{r3, r4, r5, lr}
 801a47e:	4605      	mov	r5, r0
 801a480:	460c      	mov	r4, r1
 801a482:	d904      	bls.n	801a48e <_raise_r+0x14>
 801a484:	2316      	movs	r3, #22
 801a486:	6003      	str	r3, [r0, #0]
 801a488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a48c:	bd38      	pop	{r3, r4, r5, pc}
 801a48e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a490:	b112      	cbz	r2, 801a498 <_raise_r+0x1e>
 801a492:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a496:	b94b      	cbnz	r3, 801a4ac <_raise_r+0x32>
 801a498:	4628      	mov	r0, r5
 801a49a:	f000 f831 	bl	801a500 <_getpid_r>
 801a49e:	4622      	mov	r2, r4
 801a4a0:	4601      	mov	r1, r0
 801a4a2:	4628      	mov	r0, r5
 801a4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4a8:	f000 b818 	b.w	801a4dc <_kill_r>
 801a4ac:	2b01      	cmp	r3, #1
 801a4ae:	d00a      	beq.n	801a4c6 <_raise_r+0x4c>
 801a4b0:	1c59      	adds	r1, r3, #1
 801a4b2:	d103      	bne.n	801a4bc <_raise_r+0x42>
 801a4b4:	2316      	movs	r3, #22
 801a4b6:	6003      	str	r3, [r0, #0]
 801a4b8:	2001      	movs	r0, #1
 801a4ba:	e7e7      	b.n	801a48c <_raise_r+0x12>
 801a4bc:	2100      	movs	r1, #0
 801a4be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	4798      	blx	r3
 801a4c6:	2000      	movs	r0, #0
 801a4c8:	e7e0      	b.n	801a48c <_raise_r+0x12>
	...

0801a4cc <raise>:
 801a4cc:	4b02      	ldr	r3, [pc, #8]	@ (801a4d8 <raise+0xc>)
 801a4ce:	4601      	mov	r1, r0
 801a4d0:	6818      	ldr	r0, [r3, #0]
 801a4d2:	f7ff bfd2 	b.w	801a47a <_raise_r>
 801a4d6:	bf00      	nop
 801a4d8:	24000044 	.word	0x24000044

0801a4dc <_kill_r>:
 801a4dc:	b538      	push	{r3, r4, r5, lr}
 801a4de:	4d07      	ldr	r5, [pc, #28]	@ (801a4fc <_kill_r+0x20>)
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	4608      	mov	r0, r1
 801a4e6:	4611      	mov	r1, r2
 801a4e8:	602b      	str	r3, [r5, #0]
 801a4ea:	f7e6 fd1b 	bl	8000f24 <_kill>
 801a4ee:	1c43      	adds	r3, r0, #1
 801a4f0:	d102      	bne.n	801a4f8 <_kill_r+0x1c>
 801a4f2:	682b      	ldr	r3, [r5, #0]
 801a4f4:	b103      	cbz	r3, 801a4f8 <_kill_r+0x1c>
 801a4f6:	6023      	str	r3, [r4, #0]
 801a4f8:	bd38      	pop	{r3, r4, r5, pc}
 801a4fa:	bf00      	nop
 801a4fc:	2400c648 	.word	0x2400c648

0801a500 <_getpid_r>:
 801a500:	f7e6 bd08 	b.w	8000f14 <_getpid>

0801a504 <_malloc_usable_size_r>:
 801a504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a508:	1f18      	subs	r0, r3, #4
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	bfbc      	itt	lt
 801a50e:	580b      	ldrlt	r3, [r1, r0]
 801a510:	18c0      	addlt	r0, r0, r3
 801a512:	4770      	bx	lr

0801a514 <_init>:
 801a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a516:	bf00      	nop
 801a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a51a:	bc08      	pop	{r3}
 801a51c:	469e      	mov	lr, r3
 801a51e:	4770      	bx	lr

0801a520 <_fini>:
 801a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a522:	bf00      	nop
 801a524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a526:	bc08      	pop	{r3}
 801a528:	469e      	mov	lr, r3
 801a52a:	4770      	bx	lr
